{
    "version": "https://jsonfeed.org/version/1",
    "title": "夜法之书 • All posts by \"tools\" category",
    "description": "~软件驱动世界~个人独立技术博客，关于Linux,开源，Nas，Docker，嵌入式，理财，健身等主题！",
    "home_page_url": "https://blog.17lai.site",
    "items": [
        {
            "id": "https://blog.17lai.site/posts/8f152670/",
            "url": "https://blog.17lai.site/posts/8f152670/",
            "title": "如何创建属于自己的私人资料库与私人搜索引擎",
            "date_published": "2023-03-24T11:37:13.000Z",
            "content_html": "<blockquote>\n<p>平时积累了很多私人工具和资料，可以极大的提高工作效率，并丰富个人知识图谱。这里整理了一下所使用的各种工具和方法，包括AI助手，RSS搜索引擎，邮件网关，代码搜索，笔记管理，音视频图书等等！</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><img src=\"https://cimg1.17lai.site/data/2023/03/24/20230324203120.webp\" alt=\"Search\"></p>\n<h2 id=\"智能AI搜索引擎\">智能AI搜索引擎</h2>\n<h3 id=\"ChatGPT-Web\">ChatGPT Web</h3>\n<blockquote>\n<p>OpenAI 公司出品的商业对话AI，是目前最好的对话智能AI</p>\n<p><a href=\"https://chat.17lai.site\">https://chat.17lai.site</a></p>\n</blockquote>\n<p><img src=\"https://cimg1.17lai.site/data/2023/03/17/20230317120556.webp\" alt=\"chatgpt-web\"></p>\n<div class=\"vkr-url-wrapper\">\n    \n        <a href=\"/posts/1336c869/\"><img class=\"avatar\" src=\"/medias_webp/cover/ai.webp\"></a>\n    \n    <div class=\"desc-wrapper\">\n        <a href=\"/posts/1336c869/\">中国区注册ChatGPT并使用全流程图解教程</a>\n        <hr>\n        <div class=\"desc\">OpenAI最近推出强大的ChatGPT功能，功能异常强大，号称要颠覆很多行业。但是其限制还不支持中国用户注册！但是还是有办法绕过的，本文将介绍其中的方法和工具！</div>\n    </div>\n</div>\n<h3 id=\"ChatGLM-6B\">ChatGLM-6B</h3>\n<blockquote>\n<p>ChatGLM-6B是一个中英双语开源大模型，最低可在6G显存上运行</p>\n</blockquote>\n<div style=\"text-align: center\">\n  <div class=\"github-card\" data-user=\"THUDM\" data-repo=\"ChatGLM-6B\" data-height=\"200\" data-width=\"400\" data-theme=\"default\" data-target=\"\" data-client-id=\"\" data-client-secret=\"\"></div>\n</div>\n<script src=\"/github-card-lib/githubcard.js\"></script>\n\n<h2 id=\"RSS-搜索引擎\">RSS 搜索引擎</h2>\n<blockquote>\n<p>订阅你感兴趣的博客内容，以这些内容为基础，创建一个专有的，特定领域的私人搜索引擎！</p>\n<p><a href=\"https://rss.17lai.fun\">https://rss.17lai.fun</a></p>\n</blockquote>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/31/20220531105612.webp\" alt=\"TTRSS界面\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2023/03/24/20230324203824.webp\" alt=\"TTRSS 搜索\"></p>\n<div class=\"vkr-url-wrapper\">\n    \n        <a href=\"/posts/f4926c88/\"><img class=\"avatar\" src=\"/medias_webp/cover/rss.webp\"></a>\n    \n    <div class=\"desc-wrapper\">\n        <a href=\"/posts/f4926c88/\">RSS的使用与Tiny Tiny RSS Selfhost自建</a>\n        <hr>\n        <div class=\"desc\">RSS是一种消息来源的格式规范，网站可以按照这种格式规范提供文章的标题、摘要、全文等信息给订阅用户，用户可以通过订阅不同网站 RSS 链接的方式将不同的信息源进行聚合，在一个工具里阅读这些内容</div>\n    </div>\n</div>\n<h2 id=\"私人聚合搜索引擎\">私人聚合搜索引擎</h2>\n<blockquote>\n<p>SearX是一个开源的、去中心化的元搜索引擎。它可以同时查询多个搜索引擎、网站和数据库，从而提供更全面、更准确的搜索结果。</p>\n<p>与传统的搜索引擎不同，SearX不会收集用户的搜索历史、IP地址或其他个人信息。它可以被部署在自己的服务器上，用户可以通过访问自己的SearX实例来进行搜索，从而更好地保护隐私。</p>\n<p>SearX支持多种搜索引擎和数据库，包括Google、Bing、DuckDuckGo、Wikipedia、StackExchange等，用户可以根据自己的需求选择查询哪些搜索引擎和数据库。此外，SearX还支持自定义搜索源，用户可以添加自己喜欢的网站或搜索引擎作为搜索源。</p>\n<p>SearX还提供了一些高级功能，例如结果过滤、排序、语言过滤、时间范围过滤等，以帮助用户更精确地找到所需的信息。</p>\n<p><a href=\"https://so.17lai.site\">https://so.17lai.site</a></p>\n</blockquote>\n<p><img src=\"https://cimg1.17lai.site/data/2023/03/24/20230324203824-1.webp\" alt=\"SearX\"></p>\n<h2 id=\"邮件搜索引擎\">邮件搜索引擎</h2>\n<ul>\n<li>Foxmail：单机邮件管理，基本够用</li>\n<li>手机邮件客户端：基本邮件操作，一些高级功能缺失</li>\n<li>Postfix：Postfix是一款基于UNIX系统的邮件传输代理软件，它采用C语言编写，支持多线程、SMTP、POP3、IMAP等协议。</li>\n<li>Exim：Exim也是一款邮件传输代理软件，它采用C语言编写，支持多线程、SMTP、POP3、IMAP等协议，而且具有灵活的配置和可扩展性。</li>\n<li>Sendmail：Sendmail是一款历史悠久的邮件传输代理软件，也是一款较为著名的开源软件。它采用C语言编写，支持SMTP、POP3等协议，但是相对于Postfix和Exim来说，它的配置较为繁琐。</li>\n<li>OpenSMTPD：OpenSMTPD是一款比较新的邮件传输代理软件，它采用C语言编写，支持SMTP、POP3、IMAP等协议，而且配置比较简单，适合初学者使用。</li>\n<li>Haraka：Haraka是一款基于Node.js的邮件传输代理软件，它采用JavaScript编写，支持SMTP协议，而且具有高度的可定制性和插件扩展性。</li>\n</ul>\n<h2 id=\"代码管理与搜索引擎\">代码管理与搜索引擎</h2>\n<div class=\"vkr-url-wrapper\">\n    \n        <a href=\"/posts/ab63eb8f/\"><img class=\"avatar\" src=\"/medias_webp/cover/devops.webp\"></a>\n    \n    <div class=\"desc-wrapper\">\n        <a href=\"/posts/ab63eb8f/\">自建全套开源Devops开发系统</a>\n        <hr>\n        <div class=\"desc\">目标：单节点，以最低成本，最低消耗，使用开源软件实现一个可用的DevOps！满足中小企业的研发、测试、运维需求。</div>\n    </div>\n</div>\n<ul>\n<li>\n<p><a href=\"/posts/ab63eb8f/\">自建全套开源Devops开发系统</a></p>\n</li>\n<li>\n<p><a href=\"/posts/d32a07a7/\">Git介绍以及分支模型图解</a></p>\n</li>\n<li>\n<p><a href=\"/posts/39563241/\">三万字无坑搭建基于Docker+K8S+GitLab/SVN+Jenkins+Harbor持续集成交付环境</a></p>\n</li>\n<li>\n<p><a href=\"/posts/3437994a/\">DevOps系列—【Jenkinsfile+Dockerfile+nginx+vue】</a></p>\n</li>\n<li>\n<p><a href=\"/posts/f4c3ad41/\">项目开发管理工具推荐</a></p>\n</li>\n<li>\n<p><a href=\"/posts/acc13b70/\">Gitlab的安装及使用教程完全版</a></p>\n</li>\n<li>\n<p><a href=\"/posts/d08eb7b/\">Gitlab的安装及使用</a></p>\n</li>\n<li>\n<p><a href=\"/posts/acc13b70/\"><strong>Gitlab的安装及使用教程完全版</strong></a></p>\n</li>\n<li>\n<p><a href=\"/posts/29a820b3/\">破解Gitlab EE</a></p>\n</li>\n<li>\n<p><a href=\"/posts/d08eb7b/\">Gitlab的安装及使用</a></p>\n</li>\n<li>\n<p><a href=\"/posts/1879721e/\">CI/CD与Git Flow与GitLab</a></p>\n</li>\n</ul>\n<blockquote>\n<p>还有，以前就撰文介绍过的，图书，音乐，视频资料库的建立方法</p>\n</blockquote>\n<h2 id=\"图书、音乐、视频三剑客！\">图书、音乐、视频三剑客！</h2>\n<blockquote>\n<p>结构化自己的图书，音乐，和视频！</p>\n</blockquote>\n<div class=\"vkr-url-wrapper\">\n    \n        <a href=\"/posts/db7bf49b/\"><img class=\"avatar\" src=\"/medias_webp/cover/book.webp\"></a>\n    \n    <div class=\"desc-wrapper\">\n        <a href=\"/posts/db7bf49b/\">视频图书和音乐完全自动化管理框架图解</a>\n        <hr>\n        <div class=\"desc\">音视频，音乐和图书管理全过程自动化解决方案框架图解！结构化你的音视频、音乐和图书资源。所有过程一张图搞定！</div>\n    </div>\n</div>\n<div class=\"vkr-url-wrapper\">\n    \n        <a href=\"/posts/dc1c8194/\"><img class=\"avatar\" src=\"/medias_webp/cover/book.webp\"></a>\n    \n    <div class=\"desc-wrapper\">\n        <a href=\"/posts/dc1c8194/\">如何建立自己的私人电子图书馆--出版书籍，网络小说，漫画一网打尽!</a>\n        <hr>\n        <div class=\"desc\">图书管理员似乎是个非常有前途的职业，远的有孔子，游学之前当图书管理员，近的有本朝开国毛教员，也当了很长时间图书管理员。我们也可以自己做个私人电子图书馆，当个图书管理员，说不定很有前途？</div>\n    </div>\n</div>\n<div class=\"vkr-url-wrapper\">\n    \n        <a href=\"/posts/3847ad58/\"><img class=\"avatar\" src=\"/medias_webp/cover/music.webp\"></a>\n    \n    <div class=\"desc-wrapper\">\n        <a href=\"/posts/3847ad58/\">如何使用media Go,MusicBrainz,Mp3tag工具刮削音乐 整理音乐资料库</a>\n        <hr>\n        <div class=\"desc\">音乐文件则是将歌名、歌手、专辑、发行时间、歌词、封面图等信息写入文件标签，称为ID3 Tag 。它能够在MP3中附加曲子的演出者、作者以及其它类别资讯，方便众多乐曲的管理。</div>\n    </div>\n</div>\n<div class=\"vkr-url-wrapper\">\n    \n        <a href=\"/posts/2b9325d0/\"><img class=\"avatar\" src=\"/medias_webp/cover/music.webp\"></a>\n    \n    <div class=\"desc-wrapper\">\n        <a href=\"/posts/2b9325d0/\">私人在线音乐服务器搭建与使用介绍</a>\n        <hr>\n        <div class=\"desc\">私人在线音乐服务器搭建与使用介绍！Mstream Docker 部署， rclone 挂载 webdav 网盘。 cloudflare parterner加速</div>\n    </div>\n</div>\n<div class=\"vkr-url-wrapper\">\n    \n        <a href=\"/posts/e6d40157/\"><img class=\"avatar\" src=\"/medias_webp/cover/emby.webp\"></a>\n    \n    <div class=\"desc-wrapper\">\n        <a href=\"/posts/e6d40157/\">如何使用tinyMediaManager刮削电影和电视剧，动画，并自动下载字幕</a>\n        <hr>\n        <div class=\"desc\">tinyMediaManager是最好用的视频刮削工具，可以刮削电影，动画，电视剧。使用TinyMediaManager生成nfo元数据文件，多媒体软件解析生成海报墙展示丰富的影片信息，配合Emby，Plex使用体验绝佳</div>\n    </div>\n</div>\n<div class=\"vkr-url-wrapper\">\n    \n        <a href=\"/posts/9912bd5d/\"><img class=\"avatar\" src=\"/medias_webp/cover/emby.webp\"></a>\n    \n    <div class=\"desc-wrapper\">\n        <a href=\"/posts/9912bd5d/\">使用jeckett,sonarr,iyuu,qt,emby打造全自动追剧流程</a>\n        <hr>\n        <div class=\"desc\">使用jeckett,sonarr,iyuu,qt,emby打造全自动追剧流程。jackett 作为种子源，sonarr剧集管理，bt下载，qbittorrent主力下载，使用iyuu转移辅种，emby，jellyfin做海报墙，sunfinder自动下载字幕。结合本地DNS管理，DNS去广告，Nginx反向代理去端口访问，形成一个完整解决方案。</div>\n    </div>\n</div>\n<h2 id=\"笔记管理与搜索\">笔记管理与搜索</h2>\n<blockquote>\n<p>平时不积累，用时方嫌少！</p>\n<p>建立自己的知识库，就显得那么重要了</p>\n</blockquote>\n<ul>\n<li><a href=\"/posts/a8535f26/\">完美笔记进化论</a></li>\n</ul>\n<blockquote>\n<p>经历了很长时间，使用了各种各样的方案，最终选择了一种相对完美的方式。docker私有部署运行的joplin，使用markdown语法，github作为图床，picgo作为图像自动上传后端，pypora作为MD编辑器，Snipaste作为截图工具。后备gitlab ee selfhost备份，自建图床VPS多线负载均衡。cloudflare partner cdn加速，jsdelivr加速。</p>\n<ul>\n<li>pigo图床搭建与配置</li>\n<li>Joplin教程</li>\n<li>Snipaste截图工具</li>\n<li>Typora 作为Markdown编辑器最强</li>\n</ul>\n</blockquote>\n<div class=\"vkr-url-wrapper\">\n    \n        <a href=\"/posts/a8535f26/\"><img class=\"avatar\" src=\"/medias_webp/cover/wiznote.webp\"></a>\n    \n    <div class=\"desc-wrapper\">\n        <a href=\"/posts/a8535f26/\">完美笔记进化论</a>\n        <hr>\n        <div class=\"desc\">wiznote docker版作为笔记管理搜索工具，typora作为markdown编辑器，只使用markdown格式笔记，Picgo作为图上上传工具，github作为图像图床，Snippaste作为截屏工具。一起组成笔记工具链。整体免费，满足selfhost， 富文本，多平台，版本管理，目录管理，可搜索，对图像友好的苛刻要求，超越市面所有产品，wiznote 还可以对外网提供服务。</div>\n    </div>\n</div>\n<ul>\n<li><a href=\"https://blog.17lai.fun/posts/e6086437/\">Joplin入门指南&amp;实践方案</a></li>\n</ul>\n<blockquote>\n<ul>\n<li>Joplin和使用</li>\n<li>Joplin同步与备份</li>\n<li>Joplin导入与导出</li>\n</ul>\n</blockquote>\n<ul>\n<li><a href=\"https://blog.17lai.fun/posts/45f878cd/\">替代Evernote免费开源笔记Joplin-网盘同步笔记历史版本Markdown可视化</a></li>\n</ul>\n<blockquote>\n<ul>\n<li>Joplin安装使用，调用外部编辑器，网盘同步等等</li>\n</ul>\n</blockquote>\n<ul>\n<li><a href=\"/posts/92d347d6/\">Joplin 插件以及其Markdown语法。All in One!</a></li>\n</ul>\n<blockquote>\n<ul>\n<li>Joplin简明教程</li>\n<li>markdown语法简明教程</li>\n</ul>\n</blockquote>\n<ul>\n<li><a href=\"/posts/e3ee7f8b/\">Joplin 插件使用推荐</a></li>\n</ul>\n<blockquote>\n<ul>\n<li>教你用各种插件打造一个强大的笔记工具。</li>\n</ul>\n</blockquote>\n<ul>\n<li><a href=\"/posts/1802a8a7/\">为知笔记私有化Docker部署</a></li>\n</ul>\n<blockquote>\n<ul>\n<li>如何部署自己私有的为知笔记。</li>\n<li>其实博主更推荐私有部署joplin</li>\n</ul>\n</blockquote>\n<h2 id=\"电子图书下载\">电子图书下载</h2>\n<p><strong>Z-Library</strong></p>\n<p>最近Z-Library被查封，官网大部分下载服务都用不了</p>\n<p>可以使用暗网，目前可以进行电子书下载，不过有点门槛，自行搜索研究一下如何使用tor浏览器即可。</p>\n<p><strong>需要配合洋葱浏览器使用</strong>，洋葱浏览器（Tor Browser）下载官网：<a href=\"https://www.torproject.org/\">https://www.torproject.org/</a></p>\n<h4 id=\"Z-Library暗网地址\">Z-Library暗网地址</h4>\n<p>普通浏览器无法打开</p>\n<p>暗网地址1：<a href=\"http://zlibrary24tuxziyiyfr7zd46ytefdqbqd2axkmxm4o5374ptpc52fad.onion/\">http://zlibrary24tuxziyiyfr7zd46ytefdqbqd2axkmxm4o5374ptpc52fad.onion/</a></p>\n<p>暗网地址2：<a href=\"http://bookszlibb74ugqojhzhg2a63w5i2atv5bqarulgczawnbmsb6s6qead.onion/\">http://bookszlibb74ugqojhzhg2a63w5i2atv5bqarulgczawnbmsb6s6qead.onion/</a></p>\n<h2 id=\"论文搜索下载\">论文搜索下载</h2>\n<p><strong>sci-hub</strong> <a href=\"https://sci-hub.se/\">https://sci-hub.se/</a></p>\n<h2 id=\"参考-致谢\">参考&amp;致谢</h2>\n<ul>\n<li>广大开源贡献</li>\n</ul>\n",
            "tags": [
                "docker",
                "tools",
                "search"
            ]
        },
        {
            "id": "https://blog.17lai.site/posts/f4926c88/",
            "url": "https://blog.17lai.site/posts/f4926c88/",
            "title": "RSS的使用与Tiny Tiny RSS Selfhost自建",
            "date_published": "2022-05-31T02:19:46.000Z",
            "content_html": "<blockquote>\n<p>RSS 是对你信任的网站的订阅，微博是对你信任的人的订阅，即刻是对你感兴趣的话题的订阅。</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/31/20220531102733.webp\" alt=\"\"></p>\n<h2 id=\"RSS-的介绍\">RSS 的介绍</h2>\n<blockquote>\n<p><strong>维基百科</strong><a href=\"https://zh.wikipedia.org/wiki/RSS\">zh.wikipedia.org/wiki/RSS</a></p>\n</blockquote>\n<p>RSS（简易信息聚合）是一种消息来源格式规范，用以聚合经常发布更新数据的网站，例如博客文章、新闻、音频或视频的网摘。RSS文件（或称做摘要、网络摘要、或频更新，提供到频道）包含全文或是节录的文字，再加上发布者所订阅之网摘数据和授权的元数据。</p>\n<p>社交媒体混乱的时间线、聚合阅读工具烦人的算法推荐，都让我们无法高效地获取需要的信息。RSS 将信息的选择权交还给了用户，但 RSS 并不是什么新玩意，20多年前就有了。RSS可以让我们高效的获取感兴趣的信息。</p>\n<p>互联网的信息是庞杂的，甚至可以说是无限的，随着我们关注量的上升，我们关注的内容会越来越多，可能每天要去打开几十几百个网站或APP。手机里的有些 APP，收藏夹里的某些网站，也许就是为了看一小部分的内容，但是我们不得不装上它。通过 RSS 我们就可以将它们聚合在一起，还免受广告和追踪的困扰。也许对于一些内容还有即时推送的要求，有些网站和APP可能并没有推送，但是我们又需要即时收到推送（比如停水通知），这时如果通过 RSS 联动 IFTTT 便可以做到即时推送。可见 RSS 可以有提高信息获取效率、时效性高、便于管理、无广告等优点。</p>\n<h2 id=\"RSS工具\">RSS工具</h2>\n<h3 id=\"RSSHub\"><a href=\"https://github.com/DIYgod/RSSHub\">RSSHub</a></h3>\n<p><a href=\"https://docs.rsshub.app\">RSSHub docs</a></p>\n<blockquote>\n<p>万物皆可 RSS</p>\n<p>RSSHub 是一个轻量、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源</p>\n</blockquote>\n<p>在使用一段时间后你可能会发现有很多网站和想订阅的内容没有提供 RSS，因为 RSS 不利于投放广告、收集数据等商业行为，越来越多的网站不再提供 RSS，甚至还反爬虫。幸好，我们还有 <a href=\"https://github.com/DIYgod/RSSHub\">RSSHub</a> 项目（反爬严格的网站也需要自建，RSSHub 文档有自建教程）。RSSHub 项目由 <a href=\"https://github.com/DIYgod\">DIYgod</a> 发起，经过许多开发者一年多的活跃开发，现在已经支持很多网站的 RSS 输出。具体支持那些网站可以查阅<a href=\"https://docs.rsshub.app/\">文档</a>。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/31/20220531104157.webp\" alt=\"RSSHUB\"></p>\n<h3 id=\"RSSHub-Radar\">RSSHub Radar</h3>\n<p>RSSHub 项目，作者开发了相应的浏览器插件 – RSSHub Radar。浏览器插件可以帮助你快速发现和订阅当前网站 RSS ，RSSHub 项目网站上也提供了很多可以直接拿来用的方式，例如订阅 B 站某 UP 主的投稿等，具体的请参看 <a href=\"https://docs.rsshub.app/social-media.html\">https://docs.rsshub.app/social-media.html</a> 后食用。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/31/20220531104112.webp\" alt=\"例如blog.17lai.site支持的订阅\"></p>\n<h3 id=\"Tiny-Tiny-RSS\"><a href=\"https://tt-rss.org/\">Tiny Tiny RSS</a></h3>\n<blockquote>\n<p>可以Selfhost部署的RSS聚合客户端，支持多用户注册。</p>\n</blockquote>\n<h3 id=\"FEEDX\">FEEDX</h3>\n<p><a href=\"https://feedx.net/\">FEEDX</a> 是一个个人站，主打一些网站的全文 RSS，但质量上乘，没有 RSS 的话留言站长也会考虑做 RSS。</p>\n<h3 id=\"与其他-APP-联动\">与其他 APP 联动</h3>\n<h4 id=\"IFTTT\">IFTTT</h4>\n<blockquote>\n<p>IFTTT，是一个新生的网络服务平台，通过其他不同平台的条件来决定是否执行下一条命令。即对网络服务通过其他网络服务作出反应。IFTTT得名为其口号“if this then that”。</p>\n<p><strong>维基百科</strong><a href=\"https://zh.wikipedia.org/wiki/IFTTT\">zh.wikipedia.org/wiki/IFTTT</a></p>\n</blockquote>\n<p><a href=\"https://ifttt.com/\">IFTTT</a> 是一款可玩性很高的软件，其中便包含着 RSS Feed（有简单的关键词过滤功能），可以做到停水通知（×××有更新…）发送邮件或通知等功能。</p>\n<h4 id=\"Telegram-bot\">Telegram bot</h4>\n<p><a href=\"https://telegram.org/\">Telegram</a> 是一款国外的即时通讯聊天工具，除了加密、简洁流畅、跨平台、消息记录永久保存等优点外，我最喜欢的还是 Telegram bot 的功能。Telegram 里有各种各样的 bot，可以满足许多的需求，比如 十分钟邮箱、油管下载、听歌等 bot，RSS 订阅 bot 也十分多（IFTTT 同样有 Telegram bot）。这里就推荐一款最近才出现在眼前的 RSS bot：<a href=\"https://github.com/indes/flowerss-bot\">flowerss bot</a>。优点是可以将 RSS 内容转换成 telegraph 来支持 Telegram 的应用内 instant view（即时预览用过的都说好！），还可以为 Group 和 Channel 订阅 RSS 消息。支持 Docker 部署。</p>\n<p>RSS 也许还有更多有趣好玩的方式，期待更多的骚操作被广大网友发现</p>\n<h2 id=\"Tiny-Tiny-RSS-Selfhost-搭建\"><a href=\"https://tt-rss.org/\">Tiny Tiny RSS</a> Selfhost 搭建</h2>\n<h3 id=\"搭建要求\">搭建要求</h3>\n<ol>\n<li>一台服务器（我是 Debian 10,以它为例），能连上外网最好</li>\n<li>知道 Linux 基本命令</li>\n</ol>\n<h3 id=\"安装方式\">安装方式</h3>\n<ol>\n<li>传统方式安装，通过 git clone 的方式安装 TTRSS，这种方式安装比较慢，而且难度比较大，这里不介绍这种方式，如果有兴趣的话可以去<a href=\"https://git.tt-rss.org/fox/tt-rss/wiki/InstallationNotes\">官方 wiki</a> 瞅瞅。</li>\n<li>Docker 安装，可以将 Docker 看作 虚拟机，但是又有占用小、启动快等优点，这里采用的是 @HenryQW 的通过 docker-compose 部署。<a href=\"https://ttrss.henry.wang/zh/\">戳这里查看文档</a>。</li>\n</ol>\n<h3 id=\"开始安装\">开始安装</h3>\n<h4 id=\"安装-Docker\">安装 Docker</h4>\n<p>首先升级系统到最新</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">apt update &amp;&amp; apt upgrade</code></pre></div></figure>\n<p>可以选择使用一键脚本安装 Docker，优点是方便快速，缺点是有可能不稳定，<strong>如果使用此方法运行下面的命令后跳过后面的步骤直接到下一步</strong>。想一步步安装的请无视。</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">curl https://get.docker.com/ | sh</code></pre></div></figure>\n<p>然后安装一些软件包使 <code>apt</code> 支持 https</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">apt install \\\n  apt-transport-https \\\n  ca-certificates \\\n  curl \\\n  gnupg2 \\\n  software-properties-common</code></pre></div></figure>\n<p>添加 Docker 官方的 GPG 密钥</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -</code></pre></div></figure>\n<p>添加 Docker CE 稳定版的库（<code>nightly</code>、<code>test</code> 版本可通过替换 <code>stable</code> 实现），这里是 <code>amd64</code> 架构的，其他架构自行替换。</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo add-apt-repository \\\n  \"deb [arch=amd64] https://download.docker.com/linux/debian \\\n  $(lsb_release -cs) \\\n  stable\"</code></pre></div></figure>\n<p>接下来更新 <code>apt</code> 包索引</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">apt update</code></pre></div></figure>\n<p>安装最新的 Docker CE 和 containerd（非必选）</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">apt install docker-ce docker-ce-cli containerd.io</code></pre></div></figure>\n<p>测试 docker 是否安装成功</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run hello-world</code></pre></div></figure>\n<p>将 Docker 加入开机自启</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl enable docker</code></pre></div></figure>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/31/20220531110036.webp\" alt=\"成功运行示意图\"></p>\n<h4 id=\"安装-docker-compose\">安装 docker-compose</h4>\n<p>安装 docker-compose 最新版的命令可以在这里查看：<a href=\"https://github.com/docker/compose/releases\">https://github.com/docker/compose/releases</a></p>\n<h4 id=\"通过-docker-compose-部署\">通过 docker-compose 部署</h4>\n<p>下载 <a href=\"https://github.com/HenryQW/Awesome-TTRSS/blob/master/docker-compose.yml\">docker-compose.yml</a> 至任意目录或者新建 <code>docker-compose.yml</code> 拷贝我的内容进去。</p>\n<p>注意事项：</p>\n<ol>\n<li>包含了：<a href=\"https://hub.docker.com/r/wangqiru/ttrss\">TTRSS</a>、<a href=\"https://hub.docker.com/r/sameersbn/postgresql\">PostgreSQL</a>、<a href=\"https://hub.docker.com/r/wangqiru/mercury-parser-api\">Mercury Parser API</a>、<a href=\"https://hub.docker.com/r/wangqiru/opencc-api-server\">OpenCC API</a> 四个镜像，后面两个为可选项，可以安装也可以不安装。</li>\n<li>请务必更改 postgres 用户密码。</li>\n<li>默认通过 <code>181</code> 端口访问 TTRSS，</li>\n<li>默认账户：<code>admin</code> 密码：<code>password</code>，请第一时间更改。</li>\n</ol>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">docker-compose.yml\nversion: '3'\n\nservices:\n  database.postgres:\n    image: postgres:alpine\n    container_name: postgres\n    restart: always\n    environment:\n      - PG_PASSWORD=password # 务必修改密码！\n      - DB_EXTENSION=pg_trgm\n    volumes:\n      - ./postgres/data/:/var/lib/postgresql/ # 将数据库数据保存到当前目录的 postgres/data/ 文件夹中\n\n  service.rss:\n    image: wangqiru/ttrss:latest\n    container_name: ttrss\n    restart: always\n    ports:\n      - 181:80\n    environment:\n      - SELF_URL_PATH=http://localhost:181/ # 更改为你自己的域名或者 IP！\n      - DB_HOST=database.postgres # 数据库地址\n      - DB_PORT=5432 # 数据库端口\n      - DB_NAME=ttrss # 数据库名称\n      - DB_USER=postgres # 数据库用户名\n      - DB_PASS=password # 务必修改密码（应与上面修改的密码相同）\n      - ENABLE_PLUGINS=auth_internal,fever # 在系统层面启用的插件名称（为所有用户启用），auth_internal 为必选\n    stdin_open: true\n    tty: true\n    command: sh -c 'sh /wait-for.sh database.postgres:5432 -- php /configure-db.php &amp;&amp; exec s6-svscan /etc/s6/'\n\n  service.mercury: # 在插件页 API 地址填写 `service.mercury:3000` 启用插件\n    image: wangqiru/mercury-parser-api:latest\n    container_name: mercury\n    restart: always\n    expose:\n      - 3000\n\n  service.opencc: # 在插件页 API 地址填写 `service.opencc:3000` 启用插件\n    image: wangqiru/opencc-api-server:latest\n    container_name: opencc\n    restart: always\n    environment:\n      - NODE_ENV=production\n    expose:\n      - 3000</code></pre></div></figure>\n<p>支持的环境变量列表：</p>\n<ul>\n<li>SELF_URL_PATH: TTRSS 实例地址</li>\n<li>DB_HOST: 数据库地址</li>\n<li>DB_PORT: 数据库端口</li>\n<li>DB_NAME: 数据库名字</li>\n<li>DB_USER: 数据库用户名</li>\n<li>DB_PASS: 数据库密码</li>\n<li>ENABLE_PLUGINS: 在系统层面启用的插件名称，其中 auth_internal 为必须启用的登录插件</li>\n<li>SESSION_COOKIE_LIFETIME: 使用网页版登陆时 cookie 过期时间，单位为小时，默认为 24 小时</li>\n</ul>\n<p>修改完成后在同目录下运行 <code>docker-compose up -d</code> 等待部署完成即可。此时通过域名（域名需解析到这个 VPS）或 ip 加刚刚设置的端口已经可以开始使用 TTRSS 了，出来登录的界面后先去改个密码，然后来开启 HTTPS 访问。</p>\n<blockquote>\n<p>Tips: TTRSS是每日构建，有时候构建出来的镜像没法使用，还不如固定一个Docker版本</p>\n</blockquote>\n<h3 id=\"配置-HTTPS\">配置 HTTPS</h3>\n<p>首先安装 nginx 并将其加入开机自启：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">apt install nginx\nsystemctl enable  nginx</code></pre></div></figure>\n<p>然后编写 ttrss 反向代理配置文件</p>\n<p>新建 /etc/nginx/conf.d/ttrss.conf 并将一下内容写入，注意替换域名。</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\">nano /etc/nginx/conf.d/ttrss.conf\n/etc/nginx/conf.d/ttrss.conf\nupstream ttrssdev {\n  server 127.0.0.1:181;\n}\n\nserver {\n    listen 80;\n    server_name  youdomain.com;\n    #return 301 https://youdomain.com$request_uri;\n    #rewrite ^(.*)$ https://$host$1 permanent;\n}\n\nserver {\n    listen 443 ssl;\n    gzip on;\n    server_name  youdomain.com;\n\n    access_log /var/log/nginx/ttrssdev_access.log combined;\n    error_log  /var/log/nginx/ttrssdev_error.log;\n\n    location / {\n        proxy_redirect off;\n        proxy_pass http://ttrssdev;\n\n        proxy_set_header  Host                $http_host;\n        proxy_set_header  X-Real-IP           $remote_addr;\n        proxy_set_header  X-Forwarded-Ssl     on;\n        proxy_set_header  X-Forwarded-For     $proxy_add_x_forwarded_for;\n        proxy_set_header  X-Forwarded-Proto   $scheme;\n        proxy_set_header  X-Frame-Options     SAMEORIGIN;\n\n        client_max_body_size        100m;\n        client_body_buffer_size     128k;\n\n        proxy_buffer_size           4k;\n        proxy_buffers               4 32k;\n        proxy_busy_buffers_size     64k;\n        proxy_temp_file_write_size  64k;\n    }\n}</code></pre></div></figure>\n<p>然后使用 <code>nginx -t</code> 查看有无错误，没有错误后使用 <code>nginx -s reload</code> 重启 Nginx 服务。此时使用域名或 ip 应该可以直接访问了，不过这时还是 http。</p>\n<p>然后使用 <a href=\"https://letsencrypt.org/zh-cn/\">Let’s Encrypt</a> 官方推荐的 <a href=\"https://certbot.eff.org/\">Certbot</a> 获取免费的 SSL 证书。</p>\n<p>打开 <a href=\"https://certbot.eff.org/instructions\">Certbot 说明</a> 后选择 Nginx 和运行的系统后就可以查看官方详细地说明，跟着做一遍就好了。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/2020220420142913-1.png\" alt=\"Cerbot 说明界面\"></p>\n<p>有证书之后再再访问我们的 TTRSS 服务器令人喜爱的小绿锁是不是就出来呢（可能需要重启 Nginx 服务）。</p>\n<p>到这个界面就算是告一段落了，撒花！</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/2020220420142913-2.png\" alt=\"TTRSS 界面\"></p>\n<h3 id=\"TTRSS-插件\">TTRSS 插件</h3>\n<h4 id=\"Mercury-全文获取\"><a href=\"https://github.com/HenryQW/mercury_fulltext\">Mercury 全文获取</a></h4>\n<p>Mercury 全文获取插件需要配合单独的 Mercury Parser API 服务器使用，<a href=\"https://blog.oevery.me/TTRSS%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/#%E9%80%9A%E8%BF%87-docker-compose-%E9%83%A8%E7%BD%B2\">docker-compose</a> 部署方式已经包含 <a href=\"https://github.com/HenryQW/mercury-parser-api\">HenryQW/mercury-parser-api</a> 服务器。</p>\n<p>设置步骤：</p>\n<p>首先去 TTRSS 的偏好设置中开启 Mercury。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/2020220420142913-3.png\" alt=\"开启 Mercury\"></p>\n<p>再在设置中填写 <code>mercury</code> 容器的地址。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/2020220420142913-4.png\" alt=\"填写 Mercury API 地址\"></p>\n<p>再右键点击源选择编辑信息源，在插件中对这个源开启插件。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/2020220420142913-5.png\" alt=\"对单个源开启插件\"></p>\n<h4 id=\"OpenCC-繁简转换\"><a href=\"https://github.com/HenryQW/ttrss_opencc\">OpenCC 繁简转换</a></h4>\n<p><a href=\"https://github.com/BYVoid/OpenCC\">OpenCC</a> 是一个开源的简繁转换项目，需要配合单独的 Mercury Parser API 服务器使用，<a href=\"https://blog.oevery.me/TTRSS%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/#%E9%80%9A%E8%BF%87-docker-compose-%E9%83%A8%E7%BD%B2\">docker-compose</a> 部署方式已经包含 <a href=\"https://github.com/HenryQW/OpenCC.henry.wang\">HenryQW/OpenCC.henry.wang</a> 服务器。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/2020220420142913-6.png\" alt=\"开启 opencc\"></p>\n<p>再在设置中填写刚刚查看的 <code>Opencc</code> 容器的地址。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/2020220420142913-7.png\" alt=\"填写 Opencc API 地址\"></p>\n<p>备注：t2s为繁体转简体，其他的转换方式如下:</p>\n<ul>\n<li>s2t: Simplified Chinese to Traditional Chinese 简体到繁体</li>\n<li>t2s: Traditional Chinese to Simplified Chinese 繁体到简体</li>\n<li>s2tw: Simplified Chinese to Traditional Chinese (Taiwan Standard) 简体到台湾正体</li>\n<li>tw2s: Traditional Chinese (Taiwan Standard) to Simplified Chinese 台湾正体到简体</li>\n<li>s2hk: Simplified Chinese to Traditional Chinese (Hong Kong Standard) 简体到香港繁体（香港小学学习字词表标准）</li>\n<li>hk2s: Traditional Chinese (Hong Kong Standard) to Simplified Chinese 香港繁体（香港小学学习字词表标准）到简体</li>\n<li>s2twp: Simplified Chinese to Traditional Chinese (Taiwan Standard) with Taiwanese idiom 简体到繁体（台湾正体标准）并转换为台湾常用词汇</li>\n<li>tw2sp: Traditional Chinese (Taiwan Standard) to Simplified Chinese with Mainland Chinese idiom 繁体（台湾正体标准）到简体并转换为中国大陆常用词汇</li>\n<li>t2tw: Traditional Chinese (OpenCC Standard) to Taiwan Standard 繁体（OpenCC 标准）到台湾正体</li>\n<li>t2hk: Traditional Chinese (OpenCC Standard) to Hong Kong Standard 繁体（OpenCC 标准）到香港繁体（香港小学学习字词表标准）</li>\n</ul>\n<p>这个插件同样需要去订阅源的编辑源信息中开启。</p>\n<h4 id=\"Fever-API\">Fever API</h4>\n<p>提供 Fever API 支持，对于使用 Reeder 的用户十分有用。<strong>该插件默认作为系统插件启用。</strong></p>\n<p>首先在设置中启用 API</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/2020220420142913-8.png\" alt=\"启用 API\"></p>\n<p>然后在插件中设置 Fever API 密码</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/2020220420142913-9.png\" alt=\"填写 Fever API 密码\"></p>\n<p>在支持 Fever 的阅读器使用 <code>https://youdomain.com/plugins/fever/</code> 作为服务器地址，使用刚刚设置的密码登录。由于该插件使用未加盐的 MD5 加密密码进行通信，强烈建议使用应用专用密码并开启 <a href=\"/posts/f4926c88/#%E9%85%8D%E7%BD%AE-HTTPS\">HTTPS</a>。</p>\n<h3 id=\"最终效果\">最终效果</h3>\n<blockquote>\n<p>把你感兴趣的RSS订阅了，甚至可以作为一个更加高效的私有搜索引擎来使用！</p>\n<p>个人独立博客是博文质量最高的搜索文章来源！</p>\n</blockquote>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/31/20220531105612.webp\" alt=\"TTRSS订阅blog.17lai.site效果\"></p>\n<h2 id=\"Docker-compose-安装\">Docker compose 安装</h2>\n<blockquote>\n<p>添加支持了中文搜索</p>\n<ul>\n<li><a href=\"https://github.com/appotry/postgres-chinese-textsearch\">Github postgres-chinese-textsearch</a></li>\n<li><a href=\"https://hub.docker.com/r/bloodstar/postgres-chinese-textsearch\">DockerHub postgres-chinese-textsearch</a></li>\n</ul>\n</blockquote>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">version: \"3\"\nservices:\n  service.rss:\n    image: bloodstar/ttrss:latest\n    container_name: ttrss\n    ports:\n      - 181:80\n    environment:\n      - SELF_URL_PATH=http://localhost:181/ # please change to your own domain\n      - DB_HOST=database.postgres\n      - DB_PORT=5432\n      - DB_NAME=ttrss\n      - DB_USER=postgres\n      - DB_PASS=ttrss # please change the password\n      - PUID=1000\n      - PGID=1000\n      - TEXTSEARCH_EXTENSION=pg_jieba # add support for chinese fulltext search (pg_jieba, zhparser, or both two)\n    volumes:\n      - feed-icons:/var/www/feed-icons/\n    networks:\n      - public_access\n      - service_only\n      - database_only\n    stdin_open: true\n    tty: true\n    restart: always\n\n  service.mercury: # set Mercury Parser API endpoint to `service.mercury:3000` on TTRSS plugin setting page\n    image: wangqiru/mercury-parser-api:latest\n    container_name: mercury\n    networks:\n      - public_access\n      - service_only\n    restart: always\n\n  service.opencc: # set OpenCC API endpoint to `service.opencc:3000` on TTRSS plugin setting page\n    image: wangqiru/opencc-api-server:latest\n    container_name: opencc\n    environment:\n      - NODE_ENV=production\n    networks:\n      - service_only\n    restart: always\n\n  # database.postgres:\n  #   image: postgres:13-alpine\n  #   container_name: postgres\n  #   environment:\n  #     - POSTGRES_PASSWORD=ttrss # feel free to change the password\n  #   volumes:\n  #     - ~/postgres/data/:/var/lib/postgresql/data # persist postgres data to ~/postgres/data/ on the host\n  #   networks:\n  #     - database_only\n  #   restart: always\n\n  database.postgres:\n    image: bloodstar/postgres-chinese-textsearch:latest\n    container_name: postgres\n    environment:\n      - POSTGRES_PASSWORD=ttrss # please change the password\n    volumes:\n      - ~/postgres/data/:/var/lib/postgresql/data # persist postgres data to ~/postgres/data/ on the host\n    restart: always\n\n  # utility.watchtower:\n  #   container_name: watchtower\n  #   image: containrrr/watchtower:latest\n  #   volumes:\n  #     - /var/run/docker.sock:/var/run/docker.sock\n  #   environment:\n  #     - WATCHTOWER_CLEANUP=true\n  #     - WATCHTOWER_POLL_INTERVAL=86400\n  #   restart: always\n\nvolumes:\n  feed-icons:\n\nnetworks:\n  public_access: # Provide the access for ttrss UI\n  service_only: # Provide the communication network between services only\n    internal: true\n  database_only: # Provide the communication between ttrss and database only\n    internal: true</code></pre></div></figure>\n<h2 id=\"网络订阅平台\">网络订阅平台</h2>\n<blockquote>\n<p>各种原因没法自己搭建私有订阅，那么还有一些免费平台可以选择。只是都有各种限制！</p>\n<p>在聚合搜索平台查找感兴趣的订阅源，使用私有订阅工具订阅，是最佳体验！</p>\n</blockquote>\n<h3 id=\"wordpress\">wordpress</h3>\n<p><a href=\"https://wordpress.com/read\">https://wordpress.com/read</a></p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/08/19/20220819192759.webp\" alt=\"WordPress read\"></p>\n<h3 id=\"feedly\">feedly</h3>\n<p><a href=\"http://feedly.com/\">http://feedly.com/</a></p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/08/19/20220819193000.webp\" alt=\"feedly\"></p>\n<h2 id=\"参考\">参考</h2>\n<ul>\n<li><a href=\"https://blog.oevery.me/RSS%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/\">RSS使用心得</a></li>\n<li><a href=\"https://blog.oevery.me/TTRSS%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/\">TTRSS搭建教程</a></li>\n<li><a href=\"https://tt-rss.org/wiki/InstallationNotesHost\">Installing on a host machine</a></li>\n<li><a href=\"https://tt-rss.org/wiki/InstallationNotes\">Installation Guide</a></li>\n</ul>\n",
            "tags": [
                "docker",
                "tools",
                "rss",
                "rsshub"
            ]
        },
        {
            "id": "https://blog.17lai.site/posts/1acb0edb/",
            "url": "https://blog.17lai.site/posts/1acb0edb/",
            "title": "Doxygen入门教程",
            "date_published": "2022-05-28T12:30:11.000Z",
            "content_html": "<blockquote>\n<p>Doxygen是API文档生成工具，可以根据代码注释生成文档的工具。支持HTML、CHM、PDF等格式。主要支持C语言、Python语言，其它C语系语言也支持（如C++、Java、C#等）。</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/28/20220528211032.webp\" alt=\"Doxygen效果演示\"></p>\n<p>本教程的测试环境</p>\n<ul>\n<li>Ubuntu 18.04 LTS</li>\n<li>Doxygen 1.8.13</li>\n<li>C++</li>\n<li>Gitlab CI/CD</li>\n<li>windows</li>\n</ul>\n<h2 id=\"什么是-Doxygen？\">什么是 Doxygen？</h2>\n<p>Doxygen 是一个将文件的特定注释转化为文档的工具</p>\n<h2 id=\"如何安装-Doxygen？\">如何安装 Doxygen？</h2>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sudo apt install graphviz\n$ sudo apt install doxygen</code></pre></div></figure>\n<h2 id=\"如何使用-Doxygen？\">如何使用 Doxygen？</h2>\n<p><strong>1. 查看你使用的语言 Doxygen 是否默认支持？</strong></p>\n<p>Doxygen 默认支持的语言有：C，C++，C#，Objective-C，IDL，Java，VHDL，PHP，Python，Tcl，Fortran 和 D</p>\n<p><strong>2. 生成配置文件</strong></p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ## 生成配置文件，默认配置文件名为：Doxyfile\n$ doxygen -g   &lt;config-file&gt;\n$\n$ ## 生成配置文件（不含注释）\n$ doxygen -s -g &lt;config-file&gt;\n$</code></pre></div></figure>\n<p><strong>3. 修改配置文件</strong></p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-makefile\" data-language=\"makefile\"><code class=\"language-makefile\">## 常见配置选项\n\n## 设置项目编码，默认为 UTF-8\nDOXYFILE_ENCODING = UTF-8\n\n## 设置项目名称\nPROJECT_NAME = \"project-name\"\n\n## 设置项目版本号\nPROJECT_NUMBER = \"1.0.0\"\n\n## 设置项目的描述\nPROJECT_BRIEF = \"这是项目描述\"\n\n## 设置项目的 logo \nPROJECT_LOGO = \"\"\n\n## 设置输入目录，如果未设置，则在当前目录查找\nINPUT = src\n\n## 设置要匹配的输入文件\nFILE_PATTERNS = *.cc *.h\n\n## 设置不需要处理的输入目录\nEXCLUDE =\n\n## 设置不需要匹配的输入文件\nEXCLUDE_PATTERNS =\n\n## 设置输入编码，默认为 UTF-8\nINPUT_ENCODING = UTF-8\n\n## 设置是否递归搜索输入目录，默认为 NO\nRECURSIVE = NO\n\n## 设置是否提取所有类，函数等（不包括类的私有成员和静态成员），默认为 NO\nEXTRACT_ALL = NO\n\n## 设置是否提取类的私有成员，默认为 NO\nEXTRACT_PRIVATE = NO\n\n## 设置是否提取类的静态成员，默认为 NO\nEXTRACT_STATIC = NO\n\n## 设置文档是否包含源文件，默认为 NO\nSOURCE_BROWSER = NO\n\n## 设置是否对每个类都链接到其所在的头文件中，默认值为 YES\nVERBATIM_HEADERS = YES\n\n## 设置文档的输出目录\nOUTPUT_DIRECTORY = doc\n\n## 设置是否支持 Markdown，默认值为 YES\nMARKDOWN_SUPPORT = YES\n\n## 设置文档的主界面\nUSE_MDFILE_AS_MAINPAGE =\n\n## 设置文档的语言，默认为 English\nOUTPUT_LANGUAGE = Chinese         </code></pre></div></figure>\n<p><strong>4. 给代码添加注释</strong><br>\n并不是所有的注释都会被收入文档，Doxygen 支持的常用的注释风格有：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">/**     注释的内容       */\n/*!     注释的内容       */\n\n## 在变量后 注释文件，类，结构体，共同体，枚举成员 或 函数参数\nint a; /**&lt;      注释的内容        */\nint a; /*!&lt;      注释的内容        */</code></pre></div></figure>\n<p><strong>注意：</strong> 这里并不是所有的注释风格，更多注释风格见 <a href=\"http://doxygen.nl/manual/docblocks.html\">官网</a></p>\n<p>Doxygen 常用的注释标记（标记以 / 或 @ 开头表示）：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-makefile\" data-language=\"makefile\"><code class=\"language-makefile\">## 添加作者\n@author 作者1 作者2\n\n## 添加日期\n@date 日期\n\n## 添加文件名\n@file 文件名\n\n## 添加简单描述\n@brief 简要描述\n\n## 添加详细描述\n@details 详细描述\n\n## 添加类信息\n@class 类名 类所在的文件 类所在的文件（可包括路径） \n\n## 添加结构体信息\n@class 结构体名 结构体所在的文件 结构体所在的文件（可包括路径）\n\n## 添加宏信息\n@enum 宏名\n\n## 添加函数信息\n@fn 函数信息\n\n## 添加参数说明\n@param [in]   输入参数名 说明\n@param [out] 输出参数名 说明\n\n## 添加返回说明\n@return 返回说明\n\n## 添加返回特定值说明\n@retval 特定值 特定返回值说明\n\n## 添加异常说明\n@exception 异常类型 异常说明\n\n## 添加代码\n@code\n...代码...\n@encode\n\n## 添加文件名说明\n@headfile 文件名 文件名（可包括路径） \n\n## 添加版本号\n@version 版本号\n\n## 添加计划做的事儿\n@todo 计划做的事\n\n## 添加参考 \n@see 参加其它\n\n## 添加过时说明\n@deprecated 过时说明\n\n## 添加 bug 说明\n@bug \"bug 说明\"\n\n## 添加例子\n@example 例子文件名\n\n## 添加警告信息\n@warning 警告信息\n\n## 添加开始使用的版本\n@since 版本\n\n## 添加测试信息\n@test 测试\n\n## 添加主界面信息\n@mainpage 标题\n\n## 添加注意事项 \n@note 注意事项\n\n## 添加协议信息\n@copyright 协议信息</code></pre></div></figure>\n<h3 id=\"为C-C-添加注释\">为C/C++添加注释</h3>\n<p>首先为函数添加注释信息，这是必须要做的。这里有个选择性问题，添加到哪里呢？.c文件？.h文件？</p>\n<p>一般来说：</p>\n<ul>\n<li>.h文件代表模块对外的接口最小信息，面向模块使用者</li>\n<li>.c文件代表模块的实现代码，面向的是开发者</li>\n</ul>\n<p>在实际编程中，事先约定各个模块间的接口，然后将不同的模块分配给不同的开发者，与此同时，测试人员根据接口要求，编写测试代码，这就完全保证了并发编程和白盒测试要求。</p>\n<p>这里我们可以看到，文档主要是用来描述接口信息的，所以，我对代码的注释规定如下：</p>\n<ul>\n<li>模块对外接口，仅在.h中提供注释信息</li>\n<li>模块内部辅助函数，全部用static设为私有函数，同时仅在.c中保留注释信息</li>\n</ul>\n<p>当然，您也可以同时为.c .h的接口函数编写两份完全一样的注释信息，但这么做，您会同时维护两份信息，出错的概率会更大些。</p>\n<p>确定了注释位置，下一步考虑一个函数需要哪些信息</p>\n<p>一般来说，需要函数功能，入口参数，返回值，注意事项，某些时候还需要说明上下文环境，从而保证函数能正确执行</p>\n<p>比如这个函数</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">extern int Dev_PrintInt(int number); </code></pre></div></figure>\n<p>它的功能就是打印一个整形数据，传入参数为整数，返回的是成功打印的数据长度（字节为单位），同时呢，我们在调用这个函数之前，必须要先初始化Dev设备</p>\n<p>ok，这就是所有接口信息，稍微规范一下，就变成了下面的样子</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">// 函数功能：打印整数\n// 入口参数：number为一个整数类型\n// 返回结构：返回的是成功打印的数据长度（字节为单位）\n// 注意事项：\n//          1：在调用本函数前，请确保已经调用Dev_Init初始化设备\n//          2：请注意函数返回值，如果该值为0，则说明函数执行失败\n\nextern int Dev_PrintInt(int number); </code></pre></div></figure>\n<p>用英文来书写呢，则变成下面的样子</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">//***************************************************************************************\n//\n// brief  : Print Int number to terimal device.\n//\n// param  : number is the data you want to print.\n// retval : the number of print information, in bytes. return zero indicate print error !\n//\n// Note:\n//      * Be sure you have called \\ref Dev_Init function before call this fuction.\n//      * Remember to check return value.\n//\n//***************************************************************************************\nextern int Dev_PrintInt(int number);</code></pre></div></figure>\n<p>注释信息写完了，一般来说，函数能达到这种信息程度就ok了，但既然要生成文档，就不得不考虑一个问题</p>\n<p>如果你是Doxygen作者，怎么从上面的注释里面提取信息呢，信息那么多，有<code>*</code>号，有各种文字信息。</p>\n<p>你可以将所有的注释信息都输出出来，但这么做，等于没有分类整理，同时也包含了杂乱信息，比如一排<code>*</code></p>\n<p>另外一个解决方法是：设置某些特殊字符，比如<code>function</code>表示，一旦检测到这个特殊标记，则认为是接下来<br>\n的一行是函数功能描述。但这么做，万一用户的注释里面出现很多个function，你怎么识别哪个是普通文本，<br>\n哪个是特殊标记？</p>\n<p>也许你会说了，可以采用<mjx-container class=\"MathJax\" jax=\"SVG\" style=\"direction: ltr; position: relative;\"><svg style=\"overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.627ex\" height=\"1.645ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 6023 727\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D439\" d=\"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mi\" transform=\"translate(749,0)\"><path data-c=\"1D448\" d=\"M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1516,0)\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2404,0)\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3164,0)\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3868,0)\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4372,0)\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\" style=\"stroke-width: 3;\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5135,0)\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\" style=\"stroke-width: 3;\"></path></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\" style=\"top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>F</mi><mi>U</mi><mi>N</mi><mi>C</mi><mi>T</mi><mi>I</mi><mi>O</mi><mi>N</mi></math></mjx-assistive-mml></mjx-container>这种形式啊，恩，这么做是可行的，可以确保识别出来特殊标记</p>\n<p>接下来，还有一个问题，我们上面的注释中，有很多<code>*</code>号，仅仅起到美观和格式化的作用，当然不希望在<br>\n输出文档中显示这些东西，问题是你怎么识别这些符号，并不显示呢？也许你会说，可以强制规定注释的<br>\n格式，不让用户在代码中写很多<code>*</code>，ok，假设用户同意这么做。那接下来呢，如果我希望在代码中写某些话<br>\n，但是不希望输出到文档中，比如“XX是2B”等等，你又该怎么做呢？</p>\n<p>正向思考遇到问题时，不妨反向考虑，这是谁的问题：是我设计思路的问题还是用户用法的问题？</p>\n<p>困难重重，肯定是设计思路的问题</p>\n<p>如果设计一个标记符，将普通注释和要生成的文档注释区分开来，就能解决问题了。</p>\n<p>Doxygen的用法，说白了，就是为了解决上面提到的两个问题：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">怎么区分普通注释和输出注释  \n怎么在输出注释里面，识别特殊标记和普通文本  </code></pre></div></figure>\n<p>ok，讲到这里，基本把Doxygen的机制给解释清楚了，如果您还不理解，最简单的方法就是把你假设为Doxygen<br>\n作者，重新推演一遍。</p>\n<p>下面咱们看看Doxygen怎么解决这两个问题的</p>\n<p><strong>区分普通注释和特殊注释</strong></p>\n<p>对于C/C++语言来说，注释形式有两种</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">//\n/* */</code></pre></div></figure>\n<p>Doxygen通过在这里增加<code>*</code>，<code>/</code>，<code>!</code>来作为特殊标记，比如</p>\n<p>对于<code>/* */</code>这种注释来说，正常注释为</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">/*\n * 正常注释\n */</code></pre></div></figure>\n<p>Doxygen在注释第一个<code>*</code>后，设置<code>*</code>或<code>!</code>作为标志，如果检测到有这些，<br>\n就将接下来的注释作为导出文档来解释</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">/**\n * 要输出成文档的注释\n */\n\n 或者\n\n/*!\n * 要输出成文档的注释\n */</code></pre></div></figure>\n<p>同时，中间的<code>*</code>号可以省略，像这样</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">/**\n   要输出成文档的注释\n */\n\n 或者\n\n/*!\n   要输出成文档的注释\n */</code></pre></div></figure>\n<p>对于<code>//</code>这种类型的注释，Doxygen在第二个<code>/</code>后，增加<code>!</code>或<code>/</code>作为区分标志，如果检测到有这些，<br>\n就将接下来的注释作为导出文档来解释</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">/// 要输出成文档的注释\n\n或者\n\n//! 要输出成文档的注释</code></pre></div></figure>\n<p>对于这种呢，有一个潜在的问题，很多时候，我们需要在把注释放到后面，比如下面这种</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#define DEV_ON      ((int)(1))      //! Simple device is power on.\n#define DEV_OFF     ((int)(0))      //! Simple device is power off.</code></pre></div></figure>\n<p>如果真要这么写的话，Doxygen会把<code>//! Simple device is power on.</code>当做<code>DEV_OFF</code>的注释，这<br>\n当然不是我们所希望的! 怎么办呢，只好再加一个特殊标记了，Doxygen针对这种情况，需要在<code>!</code>后<br>\n再增加一个<code>&lt;</code>标志符，如果检测到这个，则认为这个注释是为前面代码准备的，所以，上面的注释应该<br>\n这么写</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#define DEV_ON      ((int)(1))      //!&lt; Simple device is power on.\n#define DEV_OFF     ((int)(0))      //!&lt; Simple device is power off.</code></pre></div></figure>\n<p>做到这里，Doxygen就可以正确区分普通注释和特殊注释了。</p>\n<p>**注：**提到特殊标记，其实吧，编程语言非常常用，比如HTML就是典型的markup语言，一堆一堆的括号，看着就头疼</p>\n<p>Doxygen采用<code>\\</code>和<code>@</code>作为特殊标记符，当在特殊注释里面检测到了特殊标记符，则接下来检测紧跟单词是不是Doxygen<br>\n事先规定好的，如果是，则将按照特定的规则来解释紧跟着的注释；如果不是呢，则将<code>\\</code>和<code>@</code>解释为普通文本，聪明吧</p>\n<p>可能有点拗口，下面给你个例子</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">//***************************************************************************************\n//\n//! \\brief  Print Int number to terimal device.\n//!\n//! \\param  [in] number is the data you want to print.\n//! \\retval the number of print information, in bytes. return zero indicate print error !.\n//!\n//! \\note\n//! * Be sure you have called \\ref Dev_Init function before call this fuction.\n//! * Remember to check return value.\n//\n//***************************************************************************************\nextern int Dev_PrintInt(int number);</code></pre></div></figure>\n<p>看到了吧，这里的<code>\\brief</code>和<code>\\param</code>都是特殊符号，表示简要描述和参数。万一你小手一抖，把<code>\\param</code><br>\n写成了<code>\\parame</code>，那就悲剧了，因为Doxygen不认识<code>parame</code>，所以它会把这句话当做是普通文本来处理</p>\n<p>其实，上面的<code>\\</code>换成<code>@</code>也是ok的，如下所示</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">//***************************************************************************************\n//\n//! @brief  Print Int number to terimal device.\n//!\n//! @param  [in] number is the data you want to print.\n//! @retval the number of print information, in bytes. return zero indicate print error !.\n//!\n//! @note\n//! * Be sure you have called \\ref Dev_Init function before call this fuction.\n//! * Remember to check return value.\n//\n//***************************************************************************************\nextern int Dev_PrintInt(int number);</code></pre></div></figure>\n<p>相信某些玩过ARM芯片的，对这类注释非常熟悉，官方库都是采用Doxygen语法规则注释的</p>\n<h3 id=\"示例\">示例</h3>\n<p>采用Doxygen语法为main.c dev.c dev.h添加注释信息，完成后的效果如下所示：</p>\n<p><code>main.c</code></p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">//***************************************************************************************\n//\n//! \\file main.c \n//! This is an simple example show developer how to use dev api to print int number.\n//!\n//! \\author    Cedar\n//! \\version   V1.0\n//! \\date      2014-03-23\n//! \\copyright GNU Public License V3.0\n//\n//***************************************************************************************\n\n#include \"dev.h\"\n\n#define CNT_MAX  10  //!&lt; The maxium number of print\n\n//! Simple device example.\nvoid DEV_Example(void)\n{\n\tint i = 0;\n\n\tDev_Init();\n\t\n\tfor (i = 0; i &lt; CNT_MAX; ++i)\n\t{\n\t\tDev_PrintInt(i);\n\t}\n\n\tDev_Close();\n}\n\n//! Application Entry\nint main(void)\n{\n\n\tDEV_Example();\n\n\treturn 0;\n}</code></pre></div></figure>\n<p><code>dev.c</code></p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">//***************************************************************************************\n//\n//! \\file dev.c \n//! the implement of simple device.\n//!\n//! \\author    Cedar\n//! \\version   V1.0\n//! \\date      2014-03-23\n//! \\copyright GNU Public License V3.0\n//\n//***************************************************************************************\n\n//! Simple device status.\n//! \n//! \\warning This variable is designed for internal, user \\b MUST \\b NOT call it.\nstatic int __DevStatus = 0\n\nvoid Dev_Init(void)\n{\n\t// Print debug information\n\tprintf(\"Dev Initialize OK!\\r\\n\");\n}\n\nint Dev_PrintInt(int number)\n{\n\tprintf(\"Print IntType number: %d\\r\\n\", number);\n}\n\nint Dev_StatusCheck(void)\n{\n\treturn \t(__DevStatus);\n}\n\nvoid Dev_Close(void)\n{\n\tprintf(\"Dev Close OK!\\r\\n\");\n}</code></pre></div></figure>\n<p><code>dev.h</code></p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">//***************************************************************************************\n//\n//! \\file dev.h\n//!  Simple device user API.\n//!\n//! \\author    Cedar\n//! \\version   V1.0\n//! \\date      2014-03-23\n//! \\copyright GNU Public License V3.0\n//\n//***************************************************************************************\n\n#include &lt;stdio.h&gt;\n\n\n//***************************************************************************************\n//\n//! \\addtogroup Dev_Status  Simple device status information.\n//! @{\n//\n//***************************************************************************************\n\n#define DEV_ON      ((int)(1))      //!&lt; Simple device is power on.\n#define DEV_OFF     ((int)(0))      //!&lt; Simple device is power off.\n\n//***************************************************************************************\n//\n//! @}\n//\n//***************************************************************************************\n\n\n//***************************************************************************************\n//\n//! \\addtogroup Dev_API  Simple device APIs list.\n//! @{\n//\n//***************************************************************************************\n\n//***************************************************************************************\n//\n//! \\brief  Initialize simple device.\n//!\n//! \\param  none.\n//! \\retval none.\n//!\n//! \\note   This function \\b MUST be called first before others function.\n//\n//***************************************************************************************\nextern void Dev_Init(void);\n\n//***************************************************************************************\n//\n//! \\brief  Print Int number to terimal device.\n//!\n//! \\param  [in] number is the data you want to print.\n//! \\retval the number of print information, in bytes. return zero indicate print error !.\n//!\n//! \\note\n//! * Be sure you have called \\ref Dev_Init function before call this fuction.\n//! * Remember to check return value.\n//\n//***************************************************************************************\nextern int Dev_PrintInt(int number);\n\n//***************************************************************************************\n//\n//! \\brief  Check simple device status information.\n//!\n//! \\param  none.\n//! \\retval status information of simple device, which can be one of the following value:\\n\n//!  - \\ref DEV_ON\n//!  - \\ref DEV_OFF\n//!  \\n More information, please reference \\ref Dev_Status.\n//\n//***************************************************************************************\nextern int Dev_StatusCheck(void);\n\n//***************************************************************************************\n//\n//! \\brief  Close simple device.\n//!\n//! \\param  none.\n//! \\retval none.\n//\n//***************************************************************************************\nextern void Dev_Close(void);\n\n//***************************************************************************************\n//\n//! @}\n//\n//***************************************************************************************\n\n//***************************************************************************************\n//\n//! \\example main.c\n//!  Show how to use simple device to print int number.\n//\n//***************************************************************************************</code></pre></div></figure>\n<p><strong>4. 生成文档</strong></p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ doxygen &lt;config-file&gt;</code></pre></div></figure>\n<h2 id=\"Win-图形界面使用\">Win 图形界面使用</h2>\n<h3 id=\"第1章-安装\">第1章 安装</h3>\n<p>在Linux下可以通过<code>apt install doxygen</code>安装命令行工具，然后用<code>apt install doxygen-gui</code>安装图形界面。对Linux用户来说，命令行工具可以通过<code>doxygen</code>命令运行，而图形界面可以通过<code>doxywizard</code>命令运行。</p>\n<p>而Windows用户可以在<a href=\"https://www.doxygen.nl/download.html\">这里</a>下载，安装完毕后，直接双击就能运行图形界面。</p>\n<h4 id=\"1-1-基本使用\">1.1 基本使用</h4>\n<p>图形工具的基本使用如下图所示，有非常多的配置选项，这里我们只填入必要的配置，其它配置都用默认值。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/28/20220528211414.webp\" alt=\"doxywizard使用步骤\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/28/20220528211414-1.webp\" alt=\"doxywizard使用步骤\"></p>\n<p>我们的工作目录如下：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">.\n├── out\n└── src\n    └── math.h</code></pre></div></figure>\n<p>其中<code>math.h</code>代码如下：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">/*! \\file math.h */\n\n/*!\n    用于求一个角度的sin值，输入是字符串以便同时支持弧度制和角度制表示\n    \\li 弧度制用pi表示，例如：2pi表示一圈、0.5pi表示直角\n    \\li 角度制用d结尾，例如：360d表示一圈、90d表示直角\n    \\li 输入也可以是数值，例如：输入3.14159大约表示180度\n\n    \\param a 用弧度制或角度制表示都行，字符串必须用'\\0'表示结束\n    \\param[out] res 是输出参数，用于保存sin运算的结果\n\n    \\return 错误码，0表示成功，其它表示失败\n\n    \\todo 在xxx的情况下存在BUG，预计下一版本修复\n*/\nint sin(char *a, double *res);</code></pre></div></figure>\n<p>Doxygen生成的HTML会放到<code>out</code>目录下，生成的HTML如图1-3所示。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/28/20220528211414-2.webp\" alt=\"HTML界面\"></p>\n<h4 id=\"1-2-保存配置\">1.2 保存配置</h4>\n<p>在1.1节中我们配置了一些选项，也成功生成了HTML文档。我们希望下次代码改动后能够继续沿用上次配置，那么我们可以把这些配置保存成<code>Doxyfile</code>文件，见图1-4。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/28/20220528211414-3.webp\" alt=\"保存Doxyfile配置文件\"></p>\n<h4 id=\"1-3-命令行运行Doxygen\">1.3 命令行运行Doxygen</h4>\n<p>有了配置文件后我们完全可以通过命令行来生成API文档，假设配置文件名为Doxyfile，那么我们只需要执行<code>doxygen /path/to/Doxyfile</code>即可生成API文档。</p>\n<p>通过命令行生成文档有许多好处，其中最主要的好处就是：能够集成到持续集成之类的自动化系统中。</p>\n<h3 id=\"第2章-为代码编写注释\">第2章 为代码编写注释</h3>\n<h4 id=\"2-1-什么样的注释会被Doxygen识别？\">2.1 什么样的注释会被Doxygen识别？</h4>\n<p>Doxygen能识别这几种风格的注释：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">/**\n * ... text ...\n */\n\n/*!\n * ... text ...\n */\n\n///\n/// ... text ...\n///\n\n//!\n//!... text ...\n//!</code></pre></div></figure>\n<p>文件的开头必须有文件注释，否则该文件不会被识别：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">/*! \\file math.h */</code></pre></div></figure>\n<h4 id=\"2-2-注释怎么写\">2.2 注释怎么写</h4>\n<p>这个自己看<a href=\"https://www.doxygen.nl/manual/docblocks.html#cppblock\">官网例子</a>体会吧。</p>\n<h3 id=\"第3章-为其它编程语言生成注释\">第3章 为其它编程语言生成注释</h3>\n<p>Doxygen主要支持C语言，其它语法跟C差不多的语言（如：C++/C#/PHP/Java）也能够支持，我们称这类语言为「C语系语言」。而哪些跟C语法差异较大的语言叫做「非C语系语言」。</p>\n<p>对于大多非C语系语言，Doxygen都是支持的，Doxygen原生支持这些语言：IDL、Java、Javascript、C#、C、C++、D、PHP、Objective-C、Python、Fortran、VHDL。</p>\n<p>万一项目需要的语言（例如：Lua）Doxygen官方并不支持，那么只能自行编写「第三方语言扩展」来支持了。</p>\n<h4 id=\"3-1-Doxygen官方支持的语言\">3.1 Doxygen官方支持的语言</h4>\n<p>见图3-1，文件名符合<code>FILE_PATTERNS</code>都会被处理。其中包括了<code>.c</code>、<code>.h</code>、<code>.py</code>等等。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/28/20220528211414-4.webp\" alt=\"img\"></p>\n<p>如果我们的扩展名并不在<code>FILE_PATTERNS</code>内，那么可以加上去。例如我们项目下的所有<code>.ccc</code>文件，其实是C语言代码（这很奇葩，举个例子而已）。那我们可以编辑Doxyfile配置文件满足这一需求，需要2个步骤。</p>\n<p>(1) 在<code>FILE_PATTERNS</code>中添加<code>*.ccc</code>，如图3-2</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/28/20220528211414-5.webp\" alt=\"img\"></p>\n<p>(2) 在<code>EXTENSION_MAPPING</code>中添加映射规则<code>ccc=C</code>，如图3-3。语法是<code>ext=language</code>，其中language可以取的值有：IDL、Java、Javascript、C#、C、C++、D、PHP、Objective-C、Python、Fortran、VHDL。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/28/20220528211414-6.webp\" alt=\"img\"></p>\n<h4 id=\"3-2-Doxygen官方不支持的语言\">3.2 Doxygen官方不支持的语言</h4>\n<p>以Lua语言为例，它的代码是长这样的：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">-- \\file lmath.h\n\n--[[\n    用于求一个角度的sin值，输入是字符串以便同时支持弧度制和角度制表示\n    \\li 弧度制用pi表示，例如：2pi表示一圈、0.5pi表示直角\n    \\li 角度制用d结尾，例如：360d表示一圈、90d表示直角\n    \\li 输入也可以是数值，例如：输入3.14159大约表示180度\n\n    \\param a 字符串类型，表示角度，用弧度制或角度制表示都行\n\n    \\return 返回sin运算的结果\n\n    \\todo 在xxx的情况下存在BUG，预计下一版本修复\n--]]\nfunction sin(a)\n    return 1.123\nend</code></pre></div></figure>\n<p>可以看到Lua的语法既不像C也不像Python。本节以Lua为例，介绍如何为Doxygen编写Lua语言扩展。<br>\n好吧，大多数人没有这种需求，这里就不介绍了。</p>\n<h3 id=\"第4章-定制Doxygen的输出\">第4章 定制Doxygen的输出</h3>\n<h4 id=\"4-1-定制页面样式\">4.1 定制页面样式</h4>\n<p>Doxygen输出的默认HTML比较难看，如图4-1。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/28/20220528211414-7.webp\" alt=\"img\"></p>\n<p>如果嫌生成的HTML不好看，可以自定义HTML页面头部、尾部以及页面整体CSS样式表。<br>\n(1) 生成默认的风格的配置文件，敲这个命令：<code>doxygen -w html header.html footer.html customdoxygen.css</code>，可以生成<code>header.html</code>、<code>footer.html</code>、<code>customdoxygen.css</code>。<br>\n(2) 根据自己的需求修改这三个文件。<br>\n(3) 配置<code>HTML_HEADER</code>、<code>HTML_FOOTER</code>、<code>HTML_STYLESHEET</code>指向修改后的文件，如图4-2。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/28/20220528211414-8.webp\" alt=\"img\"></p>\n<p>Doxygen默认的页面主色调大约是天蓝色的，可以通过<code>HTML_COLORSTYLE_HUE</code>、<code>HTML_COLORSTYLE_SAT</code>、<code>HTML_COLORSTYLE_GAMMA</code>修改主色调，这3个配置分别对应色相、饱和度、Gamma校正，见图4-3。如果不太懂色相、饱和度是啥意思，请自行百度「色彩模式」或参考Photoshop相关教程。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/28/20220528211414-9.webp\" alt=\"img\"></p>\n<p>经过图4-3的修改，页面的主色调变为图4-4的样子。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/28/20220528211414-10.webp\" alt=\"img\"></p>\n<h4 id=\"4-2-导航栏\">4.2 导航栏</h4>\n<p>Doxygen中「导航栏」有两种展示方式：Treeview和Index，分别是竖向和横向的，如图4-5。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/28/20220528211414-11.webp\" alt=\"img\"></p>\n<p>可以配置<code>DISABLE_INDEX</code>和<code>GENERATE_TREEVIEW</code>来控制是否显示它们，如图4-6。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/28/20220528211414-12.webp\" alt=\"img\"></p>\n<h4 id=\"4-3-自定义「导航栏」的目录结构\">4.3 自定义「导航栏」的目录结构</h4>\n<p>我们已经知道Doxygen中「导航栏」有Treeview和Index两种了。这节介绍如何定制导航栏的目录结构。这需要三个步骤。<br>\n(1) 执行<code>doxygen -l</code>，生成<code>DoxygenLayout.xml</code>文件<br>\n(2) 编辑<code>DoxygenLayout.xml</code>文件，修改其中的布局<br>\n(3) 修改<code>LAYOUT_FILE</code>配置，使其指向<code>DoxygenLayout.xml</code>文件，如图4-7<br>\n(4) 运行Doxygen</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/28/20220528211414-13.webp\" alt=\"img\"></p>\n<p>那么如何修改XML文件呢？默认的<code>DoxygenLayout.xml</code>代码如下：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;doxygenlayout version=\"1.0\"&gt;\n  &lt;navindex&gt;\n    &lt;tab type=\"mainpage\" visible=\"yes\" title=\"\"/&gt;\n    &lt;tab type=\"pages\" visible=\"yes\" title=\"\" intro=\"\"/&gt;\n    &lt;tab type=\"modules\" visible=\"yes\" title=\"\" intro=\"\"/&gt;\n    &lt;tab type=\"namespaces\" visible=\"yes\" title=\"\"&gt;\n      &lt;tab type=\"namespacelist\" visible=\"yes\" title=\"\" intro=\"\"/&gt;\n      &lt;tab type=\"namespacemembers\" visible=\"yes\" title=\"\" intro=\"\"/&gt;\n    &lt;/tab&gt;\n    &lt;tab type=\"classes\" visible=\"yes\" title=\"\"&gt;\n      &lt;tab type=\"classlist\" visible=\"yes\" title=\"\" intro=\"\"/&gt;\n      &lt;tab type=\"classindex\" visible=\"$ALPHABETICAL_INDEX\" title=\"\"/&gt; \n      &lt;tab type=\"hierarchy\" visible=\"yes\" title=\"\" intro=\"\"/&gt;\n      &lt;tab type=\"classmembers\" visible=\"yes\" title=\"\" intro=\"\"/&gt;\n    &lt;/tab&gt;\n    &lt;tab type=\"files\" visible=\"yes\" title=\"\"&gt;\n      &lt;tab type=\"filelist\" visible=\"yes\" title=\"\" intro=\"\"/&gt;\n      &lt;tab type=\"globals\" visible=\"yes\" title=\"\" intro=\"\"/&gt;\n    &lt;/tab&gt;\n    &lt;tab type=\"examples\" visible=\"yes\" title=\"\" intro=\"\"/&gt;  \n  &lt;/navindex&gt;\n&lt;/doxygenlayout&gt;</code></pre></div></figure>\n<p>XML对应了导航栏的目录树结构，我们通过该文件改变布局。标签的<code>type</code>属性取值除了上面列出的这些预定义值以外，还可以是<code>type=\"user\"</code>或<code>type=\"usergroup\"</code>，我们只能通过这两个<code>type</code>自定义布局，例如下面这段代码，生成的效果如图4-8：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;doxygenlayout version=\"1.0\"&gt;\n  &lt;navindex&gt;\n    &lt;tab type=\"usergroup\" visible=\"yes\" title=\"友情链接（演示如何外链）\"&gt;\n      &lt;tab type=\"user\" visible=\"yes\" title=\"百度\" url=\"http://www.baidu.com\" /&gt;\n      &lt;tab type=\"user\" visible=\"yes\" title=\"163\" url=\"http://www.163.com\" /&gt;\n    &lt;/tab&gt;\n    &lt;tab type=\"usergroup\" visible=\"yes\" title=\"数学库（演示如何链接文件）\"&gt;\n      &lt;tab type=\"user\" visible=\"yes\" url=\"@ref math.h\" title=\"math\" /&gt;\n      &lt;tab type=\"user\" visible=\"yes\" url=\"@ref math2.h\" title=\"math2\" /&gt;\n    &lt;/tab&gt;\n    &lt;tab type=\"usergroup\" visible=\"yes\" title=\"三角函数（演示链接函数、结构体）\"&gt;\n      &lt;tab type=\"user\" visible=\"yes\" url=\"@ref sin\" title=\"sin\" /&gt;\n      &lt;tab type=\"user\" visible=\"yes\" url=\"@ref sin2\" title=\"sin2\" /&gt;\n    &lt;/tab&gt;\n  &lt;/navindex&gt;\n&lt;/doxygenlayout&gt;</code></pre></div></figure>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/28/20220528211414-14.webp\" alt=\"img\"></p>\n<h4 id=\"4-4-完全自定义\">4.4 完全自定义</h4>\n<p>如果Doxygen输出的界面实在不入你的法眼，4.1~4.3介绍的定制化功能也不能彻底满足你的需求。那么你需要根据Doxygen输出的XML数据自行生成界面了。<br>\n(1) 将<code>GENERATE_XML</code>配置为<code>YES</code><br>\n(2) 去输出目录寻找生成的XML文件，XML文件包括了函数信息、注释信息等<br>\n(3) 自己写程序读取XML文件，并生成漂亮的文档</p>\n<h3 id=\"第5章-Markdown支持\">第5章 Markdown支持</h3>\n<blockquote>\n<p>待补充完善</p>\n</blockquote>\n<p>Markdown在工业界是非常流行的文档格式，文件名以.md结尾，其简洁直观的语法深受广大程序员喜爱。对Markdown本身的介绍超出了本文范围，本章介绍Doxygen对Markdown的支持。</p>\n<h4 id=\"5-1-为-md文件生成文档\">5.1 为.md文件生成文档</h4>\n<h4 id=\"5-2-在代码注释中使用Markdown语法\">5.2 在代码注释中使用Markdown语法</h4>\n<h3 id=\"第6章-搜索功能\">第6章 搜索功能</h3>\n<h2 id=\"Gitlab-CI-CD使用\">Gitlab CI/CD使用</h2>\n<blockquote>\n<p><a href=\"https://gitlab.com/pages/doxygen\">https://gitlab.com/pages/doxygen</a></p>\n<p>结合Docker和Gitlab CI/CD使用案例</p>\n</blockquote>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/28/20220528211032.webp\" alt=\"Gitlab Doxygen运行效果如下\"></p>\n<h2 id=\"参考资源\">参考资源</h2>\n<ul>\n<li><a href=\"http://doxygen.nl/\">Doxygen 官网</a></li>\n<li><a href=\"https://www.doxygen.nl/manual/docblocks.html#cppblock\">官网注释例子</a></li>\n<li><a href=\"https://www.jianshu.com/p/bf5afbbe183b\">Doxygen文档生成工具教程</a></li>\n<li><a href=\"https://cedar-renjun.github.io/2014/03/21/learn-doxygen-in-10-minutes/\">Doxygen 10 分钟入门教程</a></li>\n<li><a href=\"https://gitlab.com/pages/doxygen\">Gitlab CI/CD doxygen</a></li>\n</ul>\n",
            "tags": [
                "tools",
                "doxygen"
            ]
        },
        {
            "id": "https://blog.17lai.site/posts/3b296307/",
            "url": "https://blog.17lai.site/posts/3b296307/",
            "title": "winrar去广告和破解",
            "date_published": "2022-03-19T12:00:47.000Z",
            "content_html": "<blockquote>\n<p>WinRAR 是一款不错的解压缩软件，但还是收费软件，广告不少，今天就总结了一下网上的各路教程。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/appotry/hexo@latest/medias_webp/cover/winrar.webp\" alt=\"\"></p>\n<h2 id=\"crack-winrar\">crack winrar</h2>\n<p>首先通过特殊方式获取软件许可：<br>\n新建一个文本文档</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1920220319200929.png\" alt=\"img\"></p>\n<p>在这个文本文档里输入内容：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">RAR registration data``Federal Agency ``for` `Education``1000000 PC usage license``UID=b621cca9a84bc5deffbf``6412612250ffbf533df6db2dfe8ccc3aae5362c06d54762105357d``5e3b1489e751c76bf6e0640001014be50a52303fed29664b074145``7e567d04159ad8defc3fb6edf32831fd1966f72c21c0c53c02fbbb``2f91cfca671d9c482b11b8ac3281cb21378e85606494da349941fa``e9ee328f12dc73e90b6356b921fbfb8522d6562a6a4b97e8ef6c9f``fb866be1e3826b5aa126a4d2bfe9336ad63003fc0e71c307fc2c60``64416495d4c55a0cc82d402110498da970812063934815d81470829275</code></pre></div></figure>\n<p><img src=\"https://cimg1.17lai.site/data/2021/11/0320211103230820.png\" alt=\"img\"></p>\n<p>然后将文件名改为：rarreg.key</p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/11/0320211103231031.png\" alt=\"img\"></p>\n<p>再将这个文件导入WinRAR的安装文件夹<br>\n<img src=\"https://cimg1.17lai.site/data/2021/11/0320211103231545.png\" alt=\"img\"><br>\n<img src=\"https://cimg1.17lai.site/data/2021/11/0320211103231839.png\" alt=\"img\"><br>\n这时点开关于WinRAR，已经获取许可。<br>\n<img src=\"https://cimg1.17lai.site/data/2021/11/0320211103231800.png\" alt=\"img\"></p>\n<h2 id=\"去除广告\">去除广告</h2>\n<p>接下来使用Resource Hacker软件打开<strong>winrar</strong>.exe<br>\n<img src=\"https://cimg1.17lai.site/data/2021/11/0320211103231916.png\" alt=\"img\"><br>\n进入字串表，找到“80”，删除“1267”和“1277”行<br>\n点击绿色三角形按钮，编译。<br>\n<img src=\"https://cimg1.17lai.site/data/2021/11/0320211103231939.png\" alt=\"img\"><br>\n然后：文件→另存为，进行保存。<br>\n<img src=\"https://cimg1.17lai.site/data/2021/11/0320211103232002.png\" alt=\"img\"><br>\n然后对源文件：winrar.exe进行替换,注意，要关闭winrar软件<br>\n<img src=\"https://cimg1.17lai.site/data/2021/11/0320211103232039.png\" alt=\"img\"></p>\n<p>至此，已经完成破解和去广告了。</p>\n<p>参考来源 52pojie</p>\n",
            "tags": [
                "crack",
                "tools",
                "winrar"
            ]
        },
        {
            "id": "https://blog.17lai.site/posts/44557ab0/",
            "url": "https://blog.17lai.site/posts/44557ab0/",
            "title": "第一次使用VS CODE时你应该指导的一切配置",
            "date_published": "2021-10-18T04:25:00.000Z",
            "content_html": "<h2 id=\"前言\">前言</h2>\n<blockquote>\n<p>文章标题：《第一次使用 VS Code 时你应该知道的一切配置》。本文的最新内容，更新于 2021-10-09。大家完全不用担心这篇文章会过时，因为随着 VS Code 的版本更新和插件更新，本文也会随之更新。</p>\n</blockquote>\n<blockquote>\n<p>本文的最新内容，也会在<a href=\"https://github.com/qianguyihao/Web/blob/master/00-%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/01-VS%20Code%E7%9A%84%E4%BD%BF%E7%94%A8.md\">GitHub</a>上同步更新，欢迎 star。</p>\n</blockquote>\n<p>VS Code 软件实在是太酷、太好用了，越来越多的新生代互联网民工正在使用它。</p>\n<p>前端男神<strong>尤雨溪</strong>大大这样评价 VS Code：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201152.png\" alt=\"\"></p>\n<p>有一点你可能会感到惊讶：VS Code 这款软件本身，是用 JavaScript 语言编写的（具体请自行查阅基于 JS 的 PC 客户端开发框架 <code>Electron</code>）。Jeff Atwood 在 2007 年提出了著名的 Atwood 定律：</p>\n<blockquote>\n<p><strong>任何能够用 JavaScript 实现的应用系统，最终都必将用 JavaScript 实现</strong>。</p>\n</blockquote>\n<p>Jeff Atwood 这个人是谁不重要（他是 Stack Overflow 网站的联合创始人），重要的是这条定律。</p>\n<p>前端目前是处在春秋战国时代，各路英雄豪杰成为后浪，各种框架工具层出不穷，VS Code 软件无疑是大前端时代最骄傲的工具。</p>\n<p>如果你是做前端开发（JavaScript 编程语言为主），则完全可以将 VS Code 作为「<strong>主力开发工具</strong>」。这款软件是为前端同学量身定制的，开箱即用。</p>\n<p>如果你是做其他语言方向的开发，并且不需要太复杂的集成开发环境，那么，你可以把 VS Code 作为「<strong>代码编辑器</strong>」来使用，纵享丝滑。</p>\n<p>甚至是一些写文档、写作的同学，也经常把 VS Code 作为 markdown <strong>写作工具</strong>，毫无违和感。</p>\n<p>退而求其次，即便你不属于以上任何范畴，你还可以把 VS Code 当作最简单的<strong>文本编辑器</strong>来使用，完胜 Windows 系统自带的记事本。</p>\n<p>写下这篇文章，是顺势而为。</p>\n<h2 id=\"一、惊艳登场：VS-Code-的介绍\">一、惊艳登场：VS Code 的介绍</h2>\n<p>VS Code 的全称是 Visual Studio Code，是一款开源的、免费的、跨平台的、高性能的、轻量级的代码编辑器。它在性能、语言支持、开源社区方面，都做得很不错。</p>\n<p>微软有两种软件：一种是 VS Code，一种是其他软件。</p>\n<p>在2015年4月29日的微软Build开发者大会上，微软宣布推出 VS Code之后，这个轻量级的编辑器成为全球无数开发者们最喜爱的开发工具。VS Code基于开源且跨平台的理念，每月都会进行迭代，并提供每天发布的 insider 版本（insider是微软的一种公测计划，类似于国内软件所说的内测版）。它拥有至少几万个插件，生态极为活跃和丰富。</p>\n<h3 id=\"IDE-与-编辑器的对比\">IDE 与 编辑器的对比</h3>\n<p>IDE 和编辑器是有区别的：</p>\n<ul>\n<li>\n<p><strong>IDE</strong>（Integrated Development Environment，集成开发环境）：对代码有较好的智能提示和相互跳转，同时侧重于工程项目，对项目的开发、调试工作有较好的图像化界面的支持，因此比较笨重。比如 Eclipse 的定位就是 IDE。</p>\n</li>\n<li>\n<p><strong>编辑器</strong>：要相对轻量许多，侧重于文本的编辑。比如 Sublime Text 的定位就是编辑器。再比如 Windows 系统自带的「记事本」就是最简单的编辑器。</p>\n</li>\n</ul>\n<p>需要注意的是，VS Code 的定位是<strong>编辑器</strong>，而非 IDE ，但 VS Code 又比一般的编辑器的功能要丰富许多。可以这样理解：VS Code 的体量是介于编辑器和 IDE 之间。VS Code 的使命，是让开发者在编辑器里拥有 IDE 那样的开发体验。</p>\n<p>VS Code流行起来之后，使用 Sublime Text、Atom 这类编辑器软件的人，自然就越来越少了。</p>\n<h3 id=\"VS-Code-的特点\">VS Code 的特点</h3>\n<ul>\n<li>跨平台：支持 MacOS、Windows 和 Linux 等多个平台。在这多种平台下，拥有一致的用户界面和开发体验。</li>\n<li>开源：VS Code 的源代码以 MIT 协议开源。不仅代码开源，而且整个产品的开发计划和发布管理也都是开源的。VS Code团队每年都会在 GitHub 的Wiki上发布 <a href=\"https://github.com/microsoft/vscode/wiki/Roadmap\">Roadmap</a>，列出一整年的规划图。VS Code 软件的官方文档也托管在了 <a href=\"https://github.com/Microsoft/vscode-docs\">GitHub</a> 上。</li>\n<li>自带终端、图形化的调试工具、Git 版本控制。</li>\n<li>插件扩展：支持第三方插件，功能强大。既有中心化的插件市场，也可以直接在 VS Code里搜索你想要的插件。</li>\n<li>生态：社区生态活跃且丰富，社区氛围浓厚。</li>\n<li>自带  emmet：支持代码自动补全，快速生成简单的语法结构。要知道，这个功能在 Sublime Text中，得先安装插件才行。</li>\n<li>语法支持：VS Code 自带了 JavaScript、TypeScript 和 Node.js 的<strong>语法支持</strong>，包括：<strong>语法高亮、代码智能提示和补全、括号匹配、颜色区分、代码片段提示</strong>等。也就是说，你在书写 JS 和 TS 时，这些语法支持都是自带的。其他的一些语言，你需要先安装相应的<strong>扩展包</strong>插件，就出现语法支持。</li>\n<li>在修改配置方面，既有图形化的配置界面，也有 基于 JSON 文件的配置方式，满足不同人群的使用习惯。</li>\n</ul>\n<h3 id=\"前端利器之争：-VS-Code-与-WebStorm\">前端利器之争： VS Code 与 WebStorm</h3>\n<p>前端小白最喜欢问的一个问题是：哪个编辑器/IDE 好用？是 VS Code 还是 WebStorm （WebStorm 其实是 IntelliJ IDEA 的定制版）？我来做个对比：</p>\n<ul>\n<li>\n<p><strong>哪个更酷</strong>：显然 VS Code 更酷。</p>\n</li>\n<li>\n<p><strong>内存占用情况</strong>：根据我的观察，VS Code 是很占内存的（尤其是当你打开多个窗口的时候），但如果你的内存条够用，使用起来是不会有任何卡顿的感觉的。相比之下，IntelliJ IDEA 不仅非常占内存，而且还非常卡顿。如果你想换个既轻量级、又不占内存的编辑器，最好还是使用「Sublime Text」编辑器。</p>\n</li>\n<li>\n<p><strong>使用比例</strong>：当然是 VS Code 更胜一筹。先不说别的，我就拿数据说话，我目前所在的研发团队有 200 人左右（120个后台、80个前端），他们绝大部分人都在用 VS Code 编码，妥妥的。</p>\n</li>\n</ul>\n<p>所以，如果你以后还问这个问题，那就真有些掉底了。</p>\n<h3 id=\"VS-Code-的技术栈、核心组件\">VS Code 的技术栈、核心组件</h3>\n<p>了解 VS Code的技术栈和核心组件，可以让我们对 VS Code 有更深入的认识。此小段，了解即可。</p>\n<ul>\n<li>开发框架：Electron。Electron可以使用 Node.js + JS这样的技术栈开发桌面GUI应用程序。</li>\n<li>编辑器：Monaco Editor。Monaco Editor 是一款开源的在线代码编辑器，是 <strong>VS Code 浏览器版本</strong>的最核心组件。<a href=\"https://zhuanlan.zhihu.com/p/88828576\">#</a></li>\n<li>编程语言：TypeScript。TypeScript 是  JavaScript的严格超集。TS 在JS的基础上添加了许多功能，引入了声明文件，而且支持类型扩展。TS 适合长期的、多人开发的大型项目开发。</li>\n<li>让编辑器支持语言功能：Language Server Protocol （LSP） 语言服务协议。LSP是编辑器/IDE 与语言服务器之间的一种协议，通过 JSON-PRC 传输消息，可以让编辑器嵌入并支持各种编程语言。开发者可以在编辑器中使用各种语言来编写程序。</li>\n<li>让编辑器支持调试功能：Debug Adapter Protocol（DAP）。DAP 是基于 JSON的协议，它抽象了开发工具与调试工具质检的通信。</li>\n<li>集成终端：Xterm.js。VS Code的集成终端是基于开源项目 <a href=\"https://github.com/xtermjs/xterm.js/\">Xterm.js</a> 进行开发的。Xterm.js 是一个使用 TS 开发的终端组件。另外，Xterm.js 并不是直接下来下来就能用的终端应用，它只是一个前端组件，可以与 bash这样的进程进行连接，然后让用户通过  Xterm.js 进行交互。</li>\n</ul>\n<h3 id=\"VS-Code-的安装\">VS Code 的安装</h3>\n<ul>\n<li>VS Code 官网：<a href=\"https://code.visualstudio.com\">https://code.visualstudio.com</a></li>\n</ul>\n<p>VS Code 的安装很简单，直接去官网下载安装包，然后双击安装即可。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201230.png\" alt=\"\"></p>\n<p>上图中，直接点击 download，一键下载安装即可。</p>\n<p>VS Code支持以下平台：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201146.png\" alt=\"\"></p>\n<p>安装完成后的界面如下：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201237.png\" alt=\"\"></p>\n<p>VS  Code被分为以下五个区域：</p>\n<ul>\n<li>编辑器</li>\n<li>侧边栏</li>\n<li>状态栏</li>\n<li>活动栏</li>\n<li>面板</li>\n</ul>\n<p>VS Code在功能上非常克制，只包含了大多数开发流程中所需要的基础模块，包括：编辑器、文件管理、窗口管理、首选项设置、终端等。</p>\n<p>你需要根据具体需要安装额外的组件或者插件。比如说，如果开发TS项目，则需要安装 TS编译器、ESLint、TSLint等编译工具。如果开发C语言项目，则需要安装gcc、Clang等编辑工具。</p>\n<h2 id=\"二、崭露锋芒：VS-Code-快捷键\">二、崭露锋芒：VS Code 快捷键</h2>\n<p>VS Code 用得熟不熟，首先就看你是否会用快捷键。以下列出的内容，都是常用快捷键，而加粗部分的快捷键，使用频率则非常高。</p>\n<p>任何工具，掌握 20%的技能，足矣应对 80% 的工作。既然如此，你可能会问：那就只保留 20% 的特性，不久可以满足 80%的用户了吗？</p>\n<p>但我想说的是：<strong>那从来都不是同样的 20%</strong>，每个人都会用到不同的功能。</p>\n<p>掌握下面这些高频核心快捷键，你和你的工具，足矣露出锋芒。</p>\n<h3 id=\"1、工作区快捷键\">1、工作区快捷键</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac 快捷键</th>\n<th style=\"text-align:left\">Win 快捷键</th>\n<th style=\"text-align:left\">作用</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>Cmd + Shift + P</strong></td>\n<td style=\"text-align:left\"><strong>Ctrl + Shift + P</strong>，F1</td>\n<td style=\"text-align:left\">显示命令面板</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Cmd + B</strong></td>\n<td style=\"text-align:left\"><strong>Ctrl + B</strong></td>\n<td style=\"text-align:left\">显示/隐藏侧边栏</td>\n<td style=\"text-align:left\">很实用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Cmd + \\</code></td>\n<td style=\"text-align:left\"><code>Ctrl + \\</code></td>\n<td style=\"text-align:left\"><strong>拆分为多个编辑器</strong></td>\n<td style=\"text-align:left\">【重要】抄代码利器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Cmd + 1、2</strong></td>\n<td style=\"text-align:left\"><strong>Ctrl + 1、2</strong></td>\n<td style=\"text-align:left\">聚焦到第 1、第 2 个编辑器</td>\n<td style=\"text-align:left\">同上重要</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Cmd + +、Cmd + -</strong></td>\n<td style=\"text-align:left\"><strong>ctrl + +、ctrl + -</strong></td>\n<td style=\"text-align:left\">将工作区放大/缩小（包括代码字体、左侧导航栏）</td>\n<td style=\"text-align:left\">在投影仪场景经常用到</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cmd + J</td>\n<td style=\"text-align:left\">Ctrl + J</td>\n<td style=\"text-align:left\">显示/隐藏控制台</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Cmd + Shift + N</strong></td>\n<td style=\"text-align:left\"><strong>Ctrl + Shift + N</strong></td>\n<td style=\"text-align:left\">重新开一个软件的窗口</td>\n<td style=\"text-align:left\">很常用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cmd + Shift + W</td>\n<td style=\"text-align:left\">Ctrl + Shift + W</td>\n<td style=\"text-align:left\">关闭软件的当前窗口</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cmd + N</td>\n<td style=\"text-align:left\">Ctrl + N</td>\n<td style=\"text-align:left\">新建文件</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cmd + W</td>\n<td style=\"text-align:left\">Ctrl + W</td>\n<td style=\"text-align:left\">关闭当前文件</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2、跳转操作\">2、跳转操作</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac 快捷键</th>\n<th style=\"text-align:left\">Win 快捷键</th>\n<th style=\"text-align:left\">作用</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Cmd + `</td>\n<td style=\"text-align:left\">没有</td>\n<td style=\"text-align:left\">在同一个软件的<strong>多个工作区</strong>之间切换</td>\n<td style=\"text-align:left\">使用很频繁</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Cmd + Option + 左右方向键</strong></td>\n<td style=\"text-align:left\">Ctrl + Pagedown/Pageup</td>\n<td style=\"text-align:left\">在已经打开的<strong>多个文件</strong>之间进行切换</td>\n<td style=\"text-align:left\">非常实用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl + Tab</td>\n<td style=\"text-align:left\">Ctrl + Tab</td>\n<td style=\"text-align:left\">在已经打开的多个文件之间进行跳转</td>\n<td style=\"text-align:left\">不如上面的快捷键快</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cmd + Shift + O</td>\n<td style=\"text-align:left\">Ctrl + shift + O</td>\n<td style=\"text-align:left\">在当前文件的各种<strong>方法之间</strong>（符号：Symbol）进行跳转</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cmd + T</td>\n<td style=\"text-align:left\">Ctrl + T</td>\n<td style=\"text-align:left\">在当前<strong>工作区</strong>的各种方法之间（符号：Symbol）进行跳转</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl + G</td>\n<td style=\"text-align:left\">Ctrl + G</td>\n<td style=\"text-align:left\">跳转到指定行</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Cmd+Shift+\\</code></td>\n<td style=\"text-align:left\"><code>Ctrl+Shift+\\</code></td>\n<td style=\"text-align:left\">跳转到匹配的括号</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3、移动光标\">3、移动光标</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac 快捷键</th>\n<th style=\"text-align:left\">Win 快捷键</th>\n<th style=\"text-align:left\">作用</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">方向键</td>\n<td style=\"text-align:left\">方向键</td>\n<td style=\"text-align:left\">在<strong>单个字符</strong>之间移动光标</td>\n<td style=\"text-align:left\">大家都知道</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>option + 左右方向键</strong></td>\n<td style=\"text-align:left\"><strong>Ctrl + 左右方向键</strong></td>\n<td style=\"text-align:left\">在<strong>单词</strong>之间移动光标</td>\n<td style=\"text-align:left\">很常用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Cmd + 左右方向键</strong></td>\n<td style=\"text-align:left\"><strong>Fn + 左右方向键</strong>（或 Win + 左右方向键）</td>\n<td style=\"text-align:left\">将光标定位到当前行的最左侧、最右侧（在<strong>整行</strong>之间移动光标）</td>\n<td style=\"text-align:left\">很常用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Option + Alt + 左右方向键</strong></td>\n<td style=\"text-align:left\"><strong>Alt + Shift + 左右方向键</strong></td>\n<td style=\"text-align:left\">左右扩大/缩小选中的范围</td>\n<td style=\"text-align:left\">很酷，极为高效</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cmd + ↑</td>\n<td style=\"text-align:left\">Ctrl + Home</td>\n<td style=\"text-align:left\">将光标定位到文件的第一行</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cmd + ↓</td>\n<td style=\"text-align:left\">Ctrl + End</td>\n<td style=\"text-align:left\">将光标定位到文件的最后一行</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cmd + Shift + \\</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">在<strong>代码块</strong>之间移动光标</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4、编辑操作\">4、编辑操作</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac 快捷键</th>\n<th style=\"text-align:left\">Win 快捷键</th>\n<th style=\"text-align:left\">作用</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Cmd + C</td>\n<td style=\"text-align:left\">Ctrl + C</td>\n<td style=\"text-align:left\">复制</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cmd + X</td>\n<td style=\"text-align:left\">Ctrl + X</td>\n<td style=\"text-align:left\">剪切</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cmd + C</td>\n<td style=\"text-align:left\">Ctrl + V</td>\n<td style=\"text-align:left\">粘贴</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Cmd + Enter</strong></td>\n<td style=\"text-align:left\"><strong>Ctrl + Enter</strong></td>\n<td style=\"text-align:left\">在当前行的下方新增一行，然后跳至该行</td>\n<td style=\"text-align:left\">即使光标不在行尾，也能快速向下插入一行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cmd+Shift+Enter</td>\n<td style=\"text-align:left\">Ctrl+Shift+Enter</td>\n<td style=\"text-align:left\">在当前行的上方新增一行，然后跳至该行</td>\n<td style=\"text-align:left\">即使光标不在行尾，也能快速向上插入一行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Option + ↑</strong></td>\n<td style=\"text-align:left\"><strong>Alt + ↑</strong></td>\n<td style=\"text-align:left\">将代码向上移动</td>\n<td style=\"text-align:left\">很常用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Option + ↓</strong></td>\n<td style=\"text-align:left\"><strong>Alt + ↓</strong></td>\n<td style=\"text-align:left\">将代码向下移动</td>\n<td style=\"text-align:left\">很常用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Option + Shift + ↑</td>\n<td style=\"text-align:left\">Alt + Shift + ↑</td>\n<td style=\"text-align:left\">将代码向上复制一行</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Option + Shift + ↓</strong></td>\n<td style=\"text-align:left\"><strong>Alt + Shift + ↓</strong></td>\n<td style=\"text-align:left\">将代码向下复制一行</td>\n<td style=\"text-align:left\">写重复代码的利器</td>\n</tr>\n</tbody>\n</table>\n<p>另外再补充一点：将光标点击到某一行的任意位置时，默认就已经是<strong>选中全行</strong>了，此时可以直接<strong>复制</strong>或<strong>剪切</strong>，无需点击鼠标。这个非常实用，是所有的编辑操作中，使用得最频繁的。它可以有以下使用场景：</p>\n<ul>\n<li>场景1：假设光标现在处于第5行的<strong>任意位置</strong>，那么，直接依次按下 <code>Cmd + C</code> 和 <code>Cmd + V</code>，就会把这行代码复制到第6行。继续按 <code>Cmd + C</code> 和 <code>Cmd + V</code>，就会把这行代码复制到第7行。copy代码so easy。</li>\n<li>场景2：假设光标现在处于第5行，那么，先按下 <code>Cmd + C</code>，然后按两下<code>↑</code> 方向键，此时光标处于第3行；紧接着，继续按下<code>Cmd + V</code>，就会把刚刚那行代码复制到第3行，原本处于第3行的代码会整体<strong>下移</strong>。</li>\n</ul>\n<p>你看到了没？上面的两个场景，我全程没有使用鼠标，只通过简单的复制粘贴和方向键，就做到了如此迅速的copy代码。你说是不是很高效？</p>\n<h3 id=\"5、删除操作\">5、删除操作</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac 快捷键</th>\n<th style=\"text-align:left\">Win 快捷键</th>\n<th style=\"text-align:left\">作用</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Cmd + shift + K</td>\n<td style=\"text-align:left\">Ctrl + Shift + K</td>\n<td style=\"text-align:left\">删除整行</td>\n<td style=\"text-align:left\">「Cmd + X」的作用是剪切，但也可以删除整行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>option + Backspace</strong></td>\n<td style=\"text-align:left\"><strong>Ctrl + Backspace</strong></td>\n<td style=\"text-align:left\">删除光标之前的一个单词</td>\n<td style=\"text-align:left\">英文有效，很常用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">option + delete</td>\n<td style=\"text-align:left\">Ctrl + delete</td>\n<td style=\"text-align:left\">删除光标之后的一个单词</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Cmd + Backspace</strong></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">删除光标之前的整行内容</td>\n<td style=\"text-align:left\">很常用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cmd + delete</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">删除光标之后的整行内容</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<p>备注：上面所讲到的移动光标、编辑操作、删除操作的快捷键，在其他编辑器里，大部分都适用。</p>\n<h3 id=\"6、多光标选择-多光标编辑\">6、多光标选择/多光标编辑</h3>\n<p>多光标选择在编程的<strong>提效</strong>方面可谓立下了汗马功劳。因为比较难记住，所以你要时不时回来复习这一段。</p>\n<table>\n<thead>\n<tr>\n<th>Mac 快捷键</th>\n<th>Win 快捷键</th>\n<th>作用</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Option + 鼠标连续点击任意位置</strong></td>\n<td><strong>Alt + 鼠标连续点击任意位置</strong></td>\n<td>在任意位置，同时出现多个光标</td>\n<td>很容易记住</td>\n</tr>\n<tr>\n<td>Cmd + D</td>\n<td>Ctrl + D</td>\n<td>将光标放在某个单词的位置（或者先选中某个单词），然后反复按下「 <strong>Cmd + D</strong> 」键， 即可将下一个相同的词逐一加入选择。</td>\n<td>较常用</td>\n</tr>\n<tr>\n<td><strong>Cmd + Shift + L</strong></td>\n<td><strong>Ctrl + Shift + L</strong></td>\n<td>将光标放在某个单词的位置（或者先选中某个单词），然后按下快捷键，则所有的相同内容处，都会出现光标。</td>\n<td>很常用。比如变量重命名的时候，就经常用到</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"7、多列选择-多列编辑\">7、多列选择/多列编辑</h3>\n<p>多列选择是更高效的多光标选择，所以单独列成一小段。</p>\n<table>\n<thead>\n<tr>\n<th>Mac 快捷键</th>\n<th>Win 快捷键</th>\n<th>作用</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Cmd + Option + 上下键</td>\n<td>Ctrl + Alt + 上下键</td>\n<td>在连续的多列上，同时出现多个光标</td>\n<td>较常用</td>\n</tr>\n<tr>\n<td>Option + Shift + 鼠标拖动</td>\n<td>Alt + Shift + 鼠标拖动</td>\n<td>按住快捷键，然后把鼠标从区域的左上角拖至右下角，即可在选中区域的每一行末尾，出现光标。</td>\n<td>很神奇的操作，较常用</td>\n</tr>\n<tr>\n<td><strong>Option + Shift + i</strong></td>\n<td><strong>Alt + Shift + I</strong></td>\n<td>选中一堆文本后，按下快捷键，既可在<strong>每一行的末尾</strong>都出现一个光标。</td>\n<td>很常用</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"8、编程语言相关\">8、编程语言相关</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac 快捷键</th>\n<th style=\"text-align:left\">Win 快捷键</th>\n<th style=\"text-align:left\">作用</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Cmd + /</td>\n<td style=\"text-align:left\">Ctrl + /</td>\n<td style=\"text-align:left\">添加单行注释</td>\n<td style=\"text-align:left\">很常用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Option + Shift + F</strong></td>\n<td style=\"text-align:left\">Alt + shift + F</td>\n<td style=\"text-align:left\">代码格式化</td>\n<td style=\"text-align:left\">很常用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">F2</td>\n<td style=\"text-align:left\">F2</td>\n<td style=\"text-align:left\">以重构的方式进行<strong>重命名</strong></td>\n<td style=\"text-align:left\">改代码备</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl + J</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">将多行代码合并为一行</td>\n<td style=\"text-align:left\">Win 用户可在命令面板搜索”合并行“</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cmd +</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cmd + U</td>\n<td style=\"text-align:left\">Ctrl + U</td>\n<td style=\"text-align:left\">将光标的移动回退到上一个位置</td>\n<td style=\"text-align:left\">撤销光标的移动和选择</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"9、搜索相关\">9、搜索相关</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac 快捷键</th>\n<th style=\"text-align:left\">Win 快捷键</th>\n<th style=\"text-align:left\">作用</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>Cmd + Shift + F</strong></td>\n<td style=\"text-align:left\"><strong>Ctrl + Shift +F</strong></td>\n<td style=\"text-align:left\">全局搜索代码</td>\n<td style=\"text-align:left\">很常用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Cmd + P</strong></td>\n<td style=\"text-align:left\"><strong>Ctrl + P</strong></td>\n<td style=\"text-align:left\">在当前的项目工程里，<strong>全局</strong>搜索文件名</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cmd + F</td>\n<td style=\"text-align:left\">Ctrl + F</td>\n<td style=\"text-align:left\">在当前文件中搜索代码，光标在搜索框里</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Cmd + G</strong></td>\n<td style=\"text-align:left\"><strong>F3</strong></td>\n<td style=\"text-align:left\">在当前文件中搜索代码，光标仍停留在编辑器里</td>\n<td style=\"text-align:left\">很巧妙</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"10、自定义快捷键\">10、自定义快捷键</h3>\n<p>按住快捷键「Cmd + Shift + P」，弹出命令面板，在命令面板中输入“快捷键”，可以进入快捷键的设置。</p>\n<p>当然，你也可以选择菜单栏「偏好设置 --&gt; 键盘快捷方式」，进入快捷键的设置：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201244.png\" alt=\"\"></p>\n<h3 id=\"11、快捷键列表\">11、快捷键列表</h3>\n<p>你可以点击 VS Code 左下角的齿轮按钮，效果如下：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201139.png\" alt=\"\"></p>\n<p>上图中，在展开的菜单中选择「键盘快捷方式」，就可以查看和修改所有的快捷键列表了：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201333.png\" alt=\"\"></p>\n<h3 id=\"快捷键参考表（官方）\">快捷键参考表（官方）</h3>\n<p>VS Code官网提供了 PDF版本的键盘快捷键参考表，转需：</p>\n<ul>\n<li>Windows版本：<a href=\"https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf\">https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf</a></li>\n<li>Mac 版本：<a href=\"https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf\">https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf</a></li>\n<li>Linux版本：<a href=\"https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf\">https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf</a></li>\n</ul>\n<p>我们在 VS  Code软件里通过菜单栏「帮助–&gt;键盘快捷方式参考」也可以打开相应平台的快捷键大全（PDF版本）。</p>\n<h2 id=\"三、高端访问：命令面板的使用\">三、高端访问：命令面板的使用</h2>\n<p>Mac 用户按住快捷键 <code>Cmd+Shift+P</code> （Windows 用户按住快捷键<code>Ctrl+Shift+P</code>），可以打开快速命令面板。效果如下：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201339.png\" alt=\"\"></p>\n<p>命令面板的作用是<strong>希望解放开发者的鼠标，让一些操作和配置可以直接通过键盘进行</strong>。如果让开发者记住所有的配置项在菜单的哪个位置是不现实的，而且有些命令并不在菜单中。</p>\n<p>有了命令面板之后，如果你需要修改一些设置项，或者进行一些快捷操作，则可以通过「命令面板」来操作，效率会更高。接下来列举一些。</p>\n<h3 id=\"1、VS-Code-设置为中文语言\">1、VS Code 设置为中文语言</h3>\n<p>Mac 用户按住快捷键 <code>Cmd+Shift+P</code> （Windows 用户按住快捷键<code>Ctrl+Shift+P</code>），打开命令面板。</p>\n<p>在命令面板中，输入<code>Configure Display Language</code>，选择<code>Install additional languages</code>，然后安装插件<code>Chinese (Simplified) Language Pack for Visual Studio Code</code>即可。</p>\n<p>或者，我们可以直接安装插件<code>Chinese (Simplified) Language Pack for Visual Studio Code</code>，是一样的。</p>\n<p>安装完成后，重启 VS Code。</p>\n<h3 id=\"2、设置字体大小\">2、设置字体大小</h3>\n<p>在命令面板输入“字体”，可以进行字体的设置，效果如下：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201251.png\" alt=\"\"></p>\n<p>当然，你也可以在菜单栏，选择「首选项-设置-常用设置」，在这个设置项里修改字体大小。</p>\n<h3 id=\"3、快捷键设置\">3、快捷键设置</h3>\n<p>在命令面板输入“快捷键”，就可以进入快捷键的设置。</p>\n<h3 id=\"4、大小写转换\">4、大小写转换</h3>\n<p>选中文本后，在命令面板中输入<code>transfrom</code>，就可以修改文本的大小写了。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201132.png\" alt=\"\"></p>\n<h3 id=\"5、使用命令行启动-VS-Code\">5、使用命令行启动 VS Code</h3>\n<p>（1）输入快捷键「Cmd + Shift + P 」，选择<code>install code command</code>：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201258.png\" alt=\"\"></p>\n<p>（2）使用命令行：</p>\n<ul>\n<li><code>code</code>命令：启动 VS Code 软件</li>\n<li><code>code pathName/fileName</code>命令：通过 VS Code 软件打开指定目录/指定文件。</li>\n</ul>\n<p>备注：这种方法快捷简单，但是在电脑重启之后就失效了。稍后在第五段，我会介绍更常见的方法。</p>\n<h3 id=\"6、修改特定编程语言的设置项\">6、修改特定编程语言的设置项</h3>\n<p>输入快捷键「Cmd + Shift + P 」打开命令面板，然后输入并执行 <code>Configure Language Specific Settings</code>即可。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201304.png\" alt=\"\"></p>\n<h2 id=\"四、私人订制：VS-Code-的常见配置\">四、私人订制：VS Code 的常见配置</h2>\n<h3 id=\"0、设置项介绍\">0、设置项介绍</h3>\n<p>在修改 VS Code配置之前，我们需要知道，在哪里可以找到设置项的入口。</p>\n<p><strong>方式1</strong>：Mac用户选择菜单栏「Code–&gt; 首选项–&gt;设置」，即可打开配置项：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201346.png\" alt=\"\"></p>\n<p><strong>方式2</strong>：点击软件右下角的设置图标：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201347.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201125.png\" alt=\"\"></p>\n<p>如上图所示，VS Code提供两种不同范围的设置：</p>\n<ul>\n<li><strong>用户</strong>设置：全局生效。</li>\n<li><strong>工作区</strong>设置：只针对当前项目生效。工作区设置会覆盖用户设置。适用于团队协作场景。工作区的设置文件是保存在当前项目根目录的<code>.vscode/settings.json</code>中，可以被提交到Git仓库，方便共享给项目组的其他成员。</li>\n</ul>\n<p>操作技巧：</p>\n<p>（1）我们可以在设置面板的顶部搜索框，输入关键词，就能迅速定位到你想要的设置项。</p>\n<p>（2）上图中，点击右上角的icon，可以通过 json文件的形式修改设置项。</p>\n<h3 id=\"1、修改主题\">1、修改主题</h3>\n<p>1）修改颜色主题：</p>\n<p>选择菜单栏「Code --&gt; 首选项 --&gt; 颜色主题」：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201353.png\" alt=\"\"></p>\n<p>在弹出的对话框中，挑选你一个你喜欢的的颜色主题吧，或者安装其他颜色的主题：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201119.png\" alt=\"20211013_1018\"></p>\n<p>或者在设置项里搜索<code>Workbench: Color Theme</code>，进行修改。</p>\n<p>2）修改文件图标的主题：</p>\n<p>选择菜单栏「Code --&gt; 首选项 --&gt; 文件图标主题」：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201113.png\" alt=\"20211013_1015\"></p>\n<p>在弹出的对话框中，挑选你一个你喜欢的的主题吧，或者安装其他的主题：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201112.png\" alt=\"20211013_1019\"></p>\n<p>或者在设置项里搜索<code>Workbench: Icon Theme</code>，进行修改。</p>\n<h3 id=\"2、面包屑（Breadcrumb）导航\">2、面包屑（Breadcrumb）导航</h3>\n<p>打开 VS Code 的设置项，选择「用户设置 -&gt; 工作台 -&gt; 导航路径」，如下图所示：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201400.png\" alt=\"\"></p>\n<p>上图中，将红框部分打钩即可。</p>\n<p>设置成功后，我们就可以查看到当前文件的「层级结构」，非常方便。如下图所示：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201106.png\" alt=\"\"></p>\n<p>有了这个面包屑导航，我们可以点击它，在任意目录、任意文件之间随意跳转。使用频繁非常高。</p>\n<h3 id=\"3、是否显示代码的行号\">3、是否显示代码的行号</h3>\n<p>VS Code 默认显示代码的行号。你可以在设置项里搜索 <code>editor.lineNumbers</code>修改设置，配置项如下：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201105.png\" alt=\"\"></p>\n<p>我建议保留这个设置项，无需修改。</p>\n<h3 id=\"4、右侧是否显示代码的缩略图\">4、右侧是否显示代码的缩略图</h3>\n<p>如果某个文件的代码量很大，缩略图就很有用了，可以预览全局，并在当前文件中快速跳转。</p>\n<p>VS Code 会在代码的右侧，默认显示缩略图。你可以在设置项里搜索 <code>editor.minimap</code> 进行设置，配置项如下：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201407.png\" alt=\"\"></p>\n<p>上面这张图，你仔细琢磨下会发现，中文翻译十分精准。</p>\n<h3 id=\"5、将当前行代码高亮显示（更改光标所在行的背景色）\">5、将当前行代码高亮显示（更改光标所在行的背景色）</h3>\n<p>当我们把光标放在某一行时，这一行的背景色并没有发生变化。如果想<strong>高亮显示</strong>当前行的代码，需要设置两步：</p>\n<p>（1）在设置项里搜索<code>editor.renderLineHighlight</code>，将选项值设置为<code>all</code>或者<code>line</code>。</p>\n<p>（2）在设置项里增加如下内容：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">\"workbench.colorCustomizations\": {\n    \"editor.lineHighlightBackground\": \"#00000090\",\n    \"editor.lineHighlightBorder\": \"#ffffff30\"\n}</code></pre></div></figure>\n<p>上方代码，第一行代码的意思是：修改光标所在行的背景色（背景色设置为全黑，不透明度 90%）；第二行代码的意思是：修改光标所在行的边框色。</p>\n<h3 id=\"6、改完代码后立即自动保存\">6、改完代码后立即自动保存</h3>\n<p><strong>方式一</strong>：</p>\n<p>改完代码后，默认不会自动保存。你可以在设置项里搜索<code>files.autoSave</code>，修改参数值为<code>afterDelay</code>  ，即可自动保存。如下：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201514.png\" alt=\"\"></p>\n<p>files.autoSave的参数值有以下几种：</p>\n<ul>\n<li>off（默认值）：不自动保存。</li>\n<li>afterDelay（建议配置）：文件修改超过一定时间（默认1秒）后，就自动保存。</li>\n<li>onFocusChange：当前编辑器失去焦点时，则自动保存。如果我们将配置项修改为<code>onFocusChange</code>之后，那么，当光标离开该文件后，这个文件就会自动保存了。</li>\n<li>onWindowChange：VS  Code软件失去焦点时，则自动保存。</li>\n</ul>\n<p><strong>方式二</strong>：</p>\n<p>当然，你也可以直接在菜单栏选择「文件-自动保存」。勾选后，当你写完代码后，文件会立即实时保存。</p>\n<h3 id=\"7、热退出\">7、热退出</h3>\n<p>当VS Code退出后，它可以记住未保存的文件。如果你希望达到这种效果，那么，你需要先将设置项<code>files.hotExit</code>的值改为 <code>onExitAndWindowClose</code>。这个配置项要不要改，看你个人需要。比如我自己平时设置的值是<code>onExit</code>。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201413.png\" alt=\"20211012_2014\"></p>\n<h3 id=\"8、保存代码后，是否立即格式化\">8、保存代码后，是否立即格式化</h3>\n<p>保存代码后，默认<strong>不会立即</strong>进行代码的格式化。你可以在设置项里搜索<code>editor.formatOnSave</code>查看该配置项：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201058.png\" alt=\"\"></p>\n<p>我觉得这个配置项保持默认就好，不用打钩。</p>\n<h3 id=\"9、自动格式化粘贴的内容\">9、自动格式化粘贴的内容</h3>\n<p>在设置项里搜索 <code>editor.formatOnPaste</code>，将设置项改为<code>true</code>：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201059.png\" alt=\"20211012_1049\"></p>\n<h3 id=\"10、设置字体大小\">10、设置字体大小</h3>\n<p>在设置项里搜索<code>fontSize</code>，然后根据需要设置各种模块的字体大小：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201420.png\" alt=\"20211012_1053\"></p>\n<h3 id=\"11、空格-or-制表符\">11、空格 or 制表符</h3>\n<p>VS Code 会根据你所打开的文件来决定该使用空格还是制表。也就是说，如果你的项目中使用的都是制表符，那么，当你在写新的代码时，按下 tab 键后，编辑器就会识别成制表符。</p>\n<p>（1）建议的设置项如下：</p>\n<ul>\n<li><strong>editor.detectIndentation</strong>：自动检测（默认开启）。建议把这个配置项修改为 false，截图如下：</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201052.png\" alt=\"20211012_1139\"></p>\n<p>这样做，是为了取消系统的自动缩进，建议自己手动格式化比较好。 参考链接：<a href=\"https://www.yisu.com/zixun/327399.html\">https://www.yisu.com/zixun/327399.html</a></p>\n<ul>\n<li><strong>editor.insertSpaces</strong>：按 Tab 键时插入空格（默认值为true）。截图如下：</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201523.png\" alt=\"\"></p>\n<ul>\n<li><strong>editor.tabSize</strong>：一个制表符默认等于四个空格。截图如下：</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201530.png\" alt=\"\"></p>\n<p>（2）状态栏也会显示当前的缩进值。点击状态栏，可以直接修改 tabSize 缩进值：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201045.png\" alt=\"\"></p>\n<p>（3）另外，我们还可以安装 prettier 插件，设置代码在格式化时默认缩进值。prettier 是做代码格式化的最常见工具。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201536.png\" alt=\"\"></p>\n<p>（4）去掉每一行末尾的空格。在设置项里搜索<code>空格</code>或者<code>\"files.trimTrailingWhitespace\"</code>，将值设置为 true：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201858.png\" alt=\"20211012_1231\"></p>\n<p>一般来说，每一行代码末尾的空格是多余的，所以建议去掉。</p>\n<h3 id=\"12、直观地显示代码里的空格和缩进-✨\">12、直观地显示代码里的空格和缩进 ✨</h3>\n<p>代码里如果有缩进或者空格，肉眼是看不出来的，但是我们可以修改配置项，把它揪出来。</p>\n<p>在配置项里搜索<code>editor.renderWhitespace</code>，修改为<code>all</code>：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201039.png\" alt=\"20211012_1150\"></p>\n<p>修改之后，代码里的空格、缩进的展示效果如下：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201905.png\" alt=\"20211012_1258\"></p>\n<p>看到了没？哪里有空格、哪里是缩进，全都一目了然。</p>\n<h3 id=\"13、新建文件后的默认文件类型\">13、新建文件后的默认文件类型</h3>\n<p>当我们按下快捷键「Cmd + N」新建文件时，VS Code 默认无法识别这个文件到底是什么类型的，因此也就无法识别相应的语法高亮。</p>\n<p>如果你想修改默认的文件类型，可以在设置项里搜索<code>files.defaultLanguage</code>，设置项如下：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201542.png\" alt=\"\"></p>\n<p>上图中的红框部分，填入你期望的默认文件类型。我填的是<code>html</code>类型，你也可以填写成 <code>javascript</code> 或者 <code>markdown</code>，或者其他的语言类型。</p>\n<h3 id=\"14、删除文件时，是否弹出确认框\">14、删除文件时，是否弹出确认框</h3>\n<p>当我们在 VS Code 中删除文件时，默认会弹出确认框。如果你想修改设置，可以在设置项里搜索<code>xplorer.confirmDelete</code>。截图如下：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201032.png\" alt=\"\"></p>\n<p>我建议这个设置项保持默认的打钩就好，不用修改。删除文件前的弹窗提示，也是为了安全考虑，万一手贱不小心删了呢？</p>\n<h3 id=\"15、在新窗口打开文件-文件夹\">15、在新窗口打开文件/文件夹</h3>\n<p>通过 <code>window.openFoldersInNewWindow</code>（默认值为off）和<code>window.openFilesInNewWindow</code>（默认值为default），可以配置在打开文件夹、打开文件时，是否开启一个新的窗口。我个人建议，把这两个配置项都设置为 on，避免旧的窗口被覆盖：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201549.png\" alt=\"\"></p>\n<p>补充知识—— <code>window.restoreWindows</code>可以用来配置 如何恢复之前的会话窗口。涉及到的场景是：你把 VS Code 关闭了，然后又打开了，是否要展示之前打开过的文件、文件夹？参数值有以下几种：</p>\n<ul>\n<li>one（默认配置）：只会重新打开上一次回话中最后操作的那一个窗口。</li>\n<li>none：打开一个空的窗口，不包含任何文件、文件夹。</li>\n<li>all（建议配置）：恢复上一次会话中的所有窗口。</li>\n<li>folders：恢复上一次会话中包含文件夹的窗口。</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201026.png\" alt=\"20211012_1704\"></p>\n<blockquote>\n<p>接下来，我们来讲一些更高级的操作。</p>\n</blockquote>\n<h2 id=\"五、纵享丝滑：常见操作和使用技巧\">五、纵享丝滑：常见操作和使用技巧</h2>\n<h3 id=\"1、快速生成HTML骨架\">1、快速生成HTML骨架</h3>\n<p>先新建一个空的html文件，然后通过以下方式，可以快速生成html骨架。</p>\n<p><strong>方式1</strong>：输入<code>!</code>，然后按下<code>enter</code>键，即可生成html骨架。如下图：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201555.gif\" alt=\"\"></p>\n<p><strong>方式2</strong>：输入<code>html:5</code>，然后按住 <code>Tab</code>键，即可生成html骨架。</p>\n<p>生成的骨架，内容如下：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre></div></figure>\n<p>有了上面的html骨架之后，我们就可以快乐地在里面插入CSS 代码和 JS 代码。</p>\n<h3 id=\"2、并排编辑：左右（上下）显示多个编辑器窗口（copy代码利器）\">2、并排编辑：左右（上下）显示多个编辑器窗口（copy代码利器）</h3>\n<blockquote>\n<p>并排编辑是所有的编辑操作中最常用的一个技巧，十分有用。比如我们在开发一个项目时，可能需要同时打开 HTML 文件和 CSS 文件，很常见。</p>\n</blockquote>\n<p>Mac 用户按住快捷键 <code>Cmd + \\</code>， Windows 用户按住快捷键<code>Ctrl + \\</code>，即可同时打开多个编辑器窗口，进行并排编辑。效果如下：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201020.gif\" alt=\"\"></p>\n<p>按快捷键「Cmd + 1 」切换到左边的窗口，按快捷键「Cmd + 2 」切换到右边的窗口，以此类推。随时随地，想切就切。</p>\n<p>学会了这一招，以后 copy 代码的时候，leader 再也不用担心我抄得慢了，一天工资到手。</p>\n<hr>\n<p>当然，使用快捷键<code>Cmd + \\</code>只是其中一种方式，我们还有很多种方式打开并行编辑。我们来做一个汇总。</p>\n<p>如果你已经打开了一个编辑器，那么可以通过以下几种方式在另一侧打开另一个编辑器：（按照使用频率，从高到低排序）</p>\n<ul>\n<li>使用快捷键<code>Cmd + \\</code>将编辑器一分为二。</li>\n<li>使用快捷键<code>Cmd + P</code>调出文件列表，选择要打开的文件，然后按下 <code>Cmd + Enter</code>快捷键。【重要】</li>\n<li>按住 Option 键的同时，单击资源管理器的文件（Windows 用户是按 Alt 键）。</li>\n<li>点击编辑器右上角的 <code>Split Editor</code>按钮。</li>\n<li>选择菜单栏「查看–&gt; 编辑器布局」，然后选择你具体想要的布局，如下图所示：</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201602.png\" alt=\"20211012_1451\"></p>\n<ul>\n<li>通过拖拽，把当前文件移动到任意一侧。</li>\n</ul>\n<p>补充知识：通过配置项<code>worbench.editor.OpenSideBySideDirection</code>可以控制编辑器在并排打开时出现的默认位置（默认值为right，你也可以根据需要改为 down）。如下图所示：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201019.png\" alt=\"20211012_1455\"></p>\n<h3 id=\"3、从终端-code-命令启动-VS-Code（Mac电脑）\">3、从终端 code 命令启动 VS Code（Mac电脑）</h3>\n<p>在终端输入<code>code</code>或者输入 <code>code + 指定项目的目录</code>，就可以启动 VS  Code，十分便捷。即：</p>\n<ul>\n<li><code>code</code> 命令：启动 VS Code 软件。</li>\n<li><code>code pathName/fileName</code> 命令：通过 VS Code 软件打开指定目录/指定文件。</li>\n</ul>\n<p>为了达到目的，我们需要先将 VS Code的软件安装路径添加到环境变量，一劳永逸。具体操作如下：</p>\n<p>（1）打开 <code>bash_profile</code>文件：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cd ~\nvim ./bash_profile</code></pre></div></figure>\n<p>（2）在 bash_profile 中添加如下内容：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 从终端启动VS Code，并设置vscode启动的命令别名\nalias code=\"/Applications/Visual\\ Studio\\ Code.app/Contents/Resources/app/bin/code\"</code></pre></div></figure>\n<p>注意，由于<code>Visual Studio Code.app</code>这个路径里有空格，所以需要在空格前面加上反斜杠<code>\\</code>。</p>\n<p>（3）重启环境变量的配置：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-none\"><code class=\"language-none\"># 重启\nsource ~/.bash_profile</code></pre></div></figure>\n<p>大功告成。</p>\n<p>改完之后，如果没生效，那你把  <code>bash_profile</code>文件 换成 <code>zshrc</code>文件试试。</p>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/logan_LG/article/details/106800904\">mac通过终端code 命令打开vscode</a></li>\n</ul>\n<h3 id=\"3、从终端-code-命令启动-VS-Code（Windows电脑）\">3、从终端 code 命令启动 VS Code（Windows电脑）</h3>\n<p>在终端输入<code>code</code>或者输入 <code>code + 指定项目的目录</code>，就可以启动 VS  Code，十分便捷。即：</p>\n<ul>\n<li><code>code</code> 命令：启动 VS Code 软件。</li>\n<li><code>code pathName/fileName</code> 命令：通过 VS Code 软件打开指定目录/指定文件。</li>\n</ul>\n<p>为了达到目的，我们需要先将 VS Code的软件安装路径添加到环境变量，一劳永逸。具体操作如下：</p>\n<p>（1）打开 VS Code 的安装位置，进入bin文件夹，复制路径。比如：<code>D:\\Microsoft VS Code\\bin</code>。</p>\n<p>（2）回到桌面，右键我的电脑–&gt;高级系统设置–&gt;环境变量–&gt;编辑path值，在原来的path后面，追加内容<code>;D:\\Microsoft VS Code\\bin</code>（即英文的分号+VS  Code 的 bin 路径)</p>\n<p>（3）重启电脑，大功告成。</p>\n<p>改完之后，如果没生效，那八成是因为你填的 path 值有问题。</p>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/zyl-Tara/p/10642704.html\">windows使用 code . 命令打开vscode</a></li>\n</ul>\n<h3 id=\"4、在当前文件中搜索\">4、在当前文件中搜索</h3>\n<p>在上面的快捷键列表中，我们已经知道如下快捷键：</p>\n<ul>\n<li>\n<p>Cmd + F（Win 用户是 Ctrl + F）：在当前文件中搜索，光标在搜索框里</p>\n</li>\n<li>\n<p>Cmd + G（Win 用户是 F3）：在当前文件中搜索，光标仍停留在编辑器里</p>\n</li>\n</ul>\n<p>多个搜索结果出来之后，按下 Enter 键之后跳转到下一个搜索结果，按下 Shift + Enter 键之后跳转到上一个搜索结果。</p>\n<p>另外，你可能会注意到，搜索框里有很多按钮，每个按钮都对应着不同的功能，如下图所示：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201012.png\" alt=\"\"></p>\n<p>上图中，你可以通过「Tab」键和「Shift + Tab」键在输入框和替换框之间进行切换。</p>\n<p>「在选定内容中查找」这个功能还是比较实用的。你也可以在设置项里搜索 <code>editor.find.autoFindInSelection</code>，勾选该设置项后，那么，当你选中指定内容后，然后按住「Cmd + F」，就可以<strong>自动</strong>只在这些内容里进行查找。该设置项如下图所示：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201608.png\" alt=\"\"></p>\n<h3 id=\"5、全局搜索\">5、全局搜索</h3>\n<p>在上面的快捷键列表中，我们已经知道如下快捷键：</p>\n<ul>\n<li>Cmd + Shift + F（Win 用户是 Ctrl + Shift +F）：在全局的文件夹中进行搜索。效果如下：</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201013.png\" alt=\"20211012_1548\"></p>\n<p>上图中，你可以点击<strong>红框</strong>部分，展开更多的配置项。然后点击<strong>红圈</strong>部分，进行过滤搜索。注意，第二个红圈那里会经常用到，它可以在搜索时过滤掉  <code>.git</code>、<code>.node_modules</code>等忽略文件。</p>\n<p>上图中，我们还可以点击“在编辑器中打开”，在一个单独的文件中聚合展示搜索结果：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201615.png\" alt=\"\"></p>\n<h3 id=\"6、文件名-文件夹的搜索\">6、文件名/文件夹的搜索</h3>\n<p>前面的快捷键那一段我们讲过，通过 「Cmd + P」可以快速搜索并打开<strong>文件</strong>/文件夹。这种方式，一般用于快速打开最近编辑过的文件。</p>\n<p>其实还有一种很巧妙的方式，可以在整个项目里，既能搜到文件，也能搜到<strong>文件夹</strong>。这种方式，常用于<strong>过滤项目的目录</strong>。操作方法很简单：</p>\n<blockquote>\n<p>直接在文件资源管理器输入关键字就行。搜索结果会自动出现；使用方向键进行上下移动，可以在搜索的文件和文件夹之间进行跳转。</p>\n<p>另外，右上角会看到一个过滤器，点击下图中的红圈部分，则只显示匹配的文件和文件夹。</p>\n</blockquote>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201006.png\" alt=\"20211012_1616\"></p>\n<p>当然，这招也有一点不足：不能搜中文。</p>\n<h3 id=\"7、大纲视图\">7、大纲视图</h3>\n<p>如下图所示，大纲视图可以展示当前代码的方法结构、文件的目录结构：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201621.png\" alt=\"20211012_1628\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201929.png\" alt=\"20211012_1636\"></p>\n<h3 id=\"8、文件对比\">8、文件对比</h3>\n<p>VS Code 默认支持<strong>对比两个文件的内容</strong>。选中两个文件，然后右键选择「将已选项进行比较」即可，效果如下：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312200959.png\" alt=\"\"></p>\n<p>VS Code 自带的对比功能并不够强大，我们可以安装插件<code>compareit</code>，进行更丰富的对比。比如说，安装完插件<code>compareit</code>之后，我们可以将「当前文件」与「剪切板」里的内容进行对比：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201628.png\" alt=\"\"></p>\n<p>如果你安装了 GitLens 插件，还可以将两个git分支的代码进行比对，非常完美。</p>\n<h3 id=\"9、查找某个函数在哪些地方被调用了\">9、查找某个函数在哪些地方被调用了</h3>\n<p>比如我已经在<code>a.js</code>文件里调用了 <code>foo()</code>函数。那么，如果我想知道<code>foo()</code>函数在其他文件中是否也被调用了，该怎么做呢？</p>\n<p>做法如下：在 <code>a.js</code> 文件里，选中<code>foo()</code>函数（或者将光标放置在<code>foo()</code>函数上），然后按住快捷键「Shift + F12」，就能看到 <code>foo()</code>函数在哪些地方被调用了，比较实用。</p>\n<h3 id=\"10、鼠标操作\">10、鼠标操作</h3>\n<ul>\n<li>\n<p>在当前行的位置，鼠标三击，可以选中当前行。</p>\n</li>\n<li>\n<p>用鼠标单击文件的<strong>行号</strong>，可以选中当前行。</p>\n</li>\n<li>\n<p>在某个<strong>行号</strong>的位置，<strong>上下移动鼠标，可以选中多行</strong>。</p>\n</li>\n</ul>\n<h3 id=\"11、重构\">11、重构</h3>\n<p>重构分很多种，我们来举几个例子。</p>\n<p><strong>命名重构</strong>：</p>\n<p>当我们尝试去修改某个函数（或者变量名）时，我们可以把光标放在上面，然后按下「F2」键，那么，这个函数（或者变量名）出现的地方都会被修改。</p>\n<p><strong>方法重构</strong>：</p>\n<p>选中某一段代码，这个时候，代码的左侧会出现一个「灯泡图标」，点击这个图标，就可以把这段代码提取为一个单独的函数。</p>\n<h3 id=\"12：终端配置\">12：终端配置</h3>\n<p>VS Code软件自带了终端，但我个人认为不是很好用，而且VS Code 软件关了之后，终端也没了。建议大家使用其他的终端软件，专业的事情交给专业的人做。</p>\n<ul>\n<li>Windows平台的终端：推荐 PowerShell 软件。远程终端推荐 xshell 软件。</li>\n<li>Mac平台的终端：推荐 <a href=\"https://iterm2.com/\">iTerm2 </a>。 iTerm2 是Mac平台最好用的终端软件，没有之一。</li>\n</ul>\n<p><strong>右键行为</strong>：</p>\n<blockquote>\n<p>在终端上，单击右键所产生的行为在不同的系统里是不同的。</p>\n</blockquote>\n<ul>\n<li>Windows：如果有<strong>选定</strong>文本，则复制当前文本；如果没有选定文本，则粘贴。</li>\n<li>macOS：选中光标所在位置的单词，并显示右键菜单。</li>\n<li>Linux：显示右键菜单。</li>\n</ul>\n<h3 id=\"13、Git-版本管理\">13、Git 版本管理</h3>\n<p>在 VS Code中使用Git之前，需要你先安装 Git 环境。</p>\n<p>VS Code 自带了 Git 版本管理的功能，如下图所示：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312200958.png\" alt=\"\"></p>\n<p>上图中，我们可以在这里进行常见的 git 命令操作。如果你还不熟悉 <strong>Git 版本管理</strong>，可以先去补补课。</p>\n<p>我自己用的最多的功能是<strong>diff 代码</strong>和<strong>合并冲突</strong>，自从用上了  VS Code 的这两个功能，简直离不开它。</p>\n<p>我们先来看看 diff 代码的效果：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201634.png\" alt=\"20211013_1411\"></p>\n<p>上图中，点击右上角的<code>...</code>，然后点击<code>内联视图</code>，则可以换一种视图 diff 代码：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201937.png\" alt=\"\"></p>\n<p><strong>Git状态栏</strong>：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312200952.png\" alt=\"20211013_1421\"></p>\n<p>在VS Code的左下角会显示Git状态栏。如果当前代码仓库配置了远程仓库，那么“同步更改”会显示以下信息：</p>\n<ul>\n<li>左边的数字：表示远程分支比本地分支多了XX个 Git commit。</li>\n<li>右边的数字：表示本地分支比远程分支多了XX个 Git commit。</li>\n</ul>\n<p>点击“同步更改”按钮，会拉取（pull）远程分支到本地分支，并推送（push）本地的Git commit到远程分支。</p>\n<p>如果当前代码仓库没有配置远程仓库，则会显示“发布更改”的按钮。点击“发布更改”按钮，会把当前分支push到远程仓库。</p>\n<hr>\n<p>另外，我建议安装插件<code>GitLens</code>搭配使用，它是 VS Code 中我最推荐的一个插件，简直是 Git 神器，码农必备。</p>\n<p>我还要补充一句：</p>\n<p>有人说，高手都是直接用命令行操作Git。然而，根据我多年的经验来看，如果你的代码仓库需要管理的分支特别多，与团队的其他成员需要经常协作，那么，我建议你<strong>优先使用</strong> GUI 图形化工具来操作Git，避免出错。</p>\n<p>我推荐的GUI版的Git工具有：</p>\n<ul>\n<li><a href=\"https://www.git-tower.com/\">Tower</a></li>\n<li><a href=\"https://www.sourcetreeapp.com/\">Sourcetree</a></li>\n<li><a href=\"https://www.gitkraken.com/\">GitKraken</a></li>\n</ul>\n<h3 id=\"14、将工作区放大-缩小\">14、将工作区放大/缩小</h3>\n<p>我们在上面的设置项里修改字体大小后，仅仅只是修改了代码的字体大小。</p>\n<p>如果你想要缩放整个工作区（包括代码的字体、左侧导航栏的字体等），可以按下快捷键「<strong>cmd +/-</strong>」。windows 用户是按下「ctrl +/-」</p>\n<p><strong>当我们在投影仪上给别人演示代码的时候，这一招十分管用</strong>。</p>\n<p>如果你想恢复默认的工作区大小，可以在命令面板输入<code>重置缩放</code>（英文是<code>reset zoom</code>）</p>\n<p>f### 11、创建多层子文件夹</p>\n<p>我们可以在新建文件夹的时候，如果直接输入<code>aa/bb/cc</code>，比如：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201641.png\" alt=\"\"></p>\n<p>那么，就可以创建多层子文件夹，效果如下：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312200945.png\" alt=\"\"></p>\n<h3 id=\"15、-vscode-文件夹的作用\">15、<code>.vscode</code> 文件夹的作用</h3>\n<p>为了统一团队的 vscode 配置，我们可以在项目的根目录下建立<code>.vscode</code>目录，在里面放置一些配置内容，比如：</p>\n<ul>\n<li>\n<p><code>settings.json</code>：工作空间设置、代码格式化配置、插件配置。</p>\n</li>\n<li>\n<p><code>sftp.json</code>：ftp 文件传输的配置。</p>\n</li>\n</ul>\n<p><code>.vscode</code>目录里的配置只针对当前项目范围内生效。将<code>.vscode</code>提交到代码仓库，大家统一配置时，会非常方便。</p>\n<h3 id=\"16、自带终端\">16、自带终端</h3>\n<p>我们可以按下「Ctrl + `」打开 VS Code 自带的终端。我认为内置终端并没有那么好用，我更建议你使用第三方的终端 <strong>item2</strong>。</p>\n<h3 id=\"17、markdown-语法支持\">17、markdown 语法支持</h3>\n<p>VS Code 自带 markdown 语法高亮。也就是说，如果你是用 markdown 格式写文章，则完全可以用 VS Code 进行写作。</p>\n<p>写完 md 文件之后，你可以点击右上角的按钮进行预览，如下图所示：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201648.png\" alt=\"\"></p>\n<p>我一般是安装「Markdown Preview Github Styling」插件，以 GitHub 风格预览 Markdown 样式。样式十分简洁美观。</p>\n<p>你也可以在控制面板输入<code>Markdown: 打开预览</code>，直接全屏预览 markdown 文件。</p>\n<h3 id=\"18、Emmet-in-VS-Code\">18、Emmet in VS Code</h3>\n<p><code>Emmet</code>可以极大的提高 html 和 css 的编写效率，它提供了一种非常简练的语法规则。</p>\n<p>举个例子，我们在编辑器中输入缩写代码：<code>ul&gt;li*6</code> ，然后按下 Tab 键，即可得到如下代码片段：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;ul&gt;\n  &lt;li&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;/li&gt;\n&lt;/ul&gt;</code></pre></div></figure>\n<p>VS Code 默认支持 Emmet。更多 Emmet 语法规则，可以自行查阅。</p>\n<h3 id=\"19、修改字体，使用「Fira-Code」字体\">19、修改字体，使用「Fira Code」字体</h3>\n<p>这款字体很漂亮，很适合用来写代码：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201655.png\" alt=\"\"></p>\n<p>安装步骤如下：</p>\n<p>（1）进入 <a href=\"https://github.com/tonsky/FiraCode\">https://github.com/tonsky/FiraCode</a> 网站，下载并安装「Fira Code」字体。</p>\n<p>（2）打开 VS Code 的「设置」，搜索<code>font</code>，修改相关配置为如下内容：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">\"editor.fontFamily\": \"'Fira Code',Menlo, Monaco, 'Courier New', monospace\", // 设置字体显示\n\"editor.fontLigatures\": false,//控制是否启用字体连字，true启用，false不启用</code></pre></div></figure>\n<p>上方的第二行配置，取决于个人习惯，我是直接设置为<code>\"editor.fontLigatures\": null</code>，因为我不太习惯连字。</p>\n<h3 id=\"20、代码格式化\">20、代码格式化</h3>\n<p>VS Code 默认对 JavaScript、TypeScript、JSON、HTML 提供了开箱即用的代码格式化支持。其他语言则需要先安装相应的插件才能支持。</p>\n<p>另外，我们还可以安装 Prettier 插件进行<strong>更精细</strong>的代码格式化。下一段将插件的时候，会讲解。</p>\n<h3 id=\"21、智能提示-IntelliSense\">21、智能提示 IntelliSense</h3>\n<p>VS Code 默认对 JavaScript、TypeScript、JSON、HTML、CSS、SCSS、Less这7种语言（文件）提供了<strong>智能提示</strong>的支持。其他编程语言则需要先安装相应的插件才能支持。</p>\n<p>在 VS Code插件职场中，下图是最受欢迎的8种<a href=\"https://marketplace.visualstudio.com/search?target=VSCode&amp;category=Programming%20Languages&amp;sortBy=Installs\">编程语言插件</a>：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201656.png\" alt=\"20211013_1120\"></p>\n<p>智能提示的功能很强大， 包括函数介绍、代码自动补全等等。</p>\n<h3 id=\"22、调试与运行\">22、调试与运行</h3>\n<p>VS Code <strong>内置</strong>了对 Node.js 运行时的调试支持，可以直接调试  JavaScript 和 TypeScript。其他编程语言的调试，则需要先安装相应的插件才能支持。</p>\n<p>在 VS Code插件市场中，下图是最受欢迎的几种调试插件：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312200938.png\" alt=\"\"></p>\n<h3 id=\"23、文件传输：sftp\">23、文件传输：sftp</h3>\n<p>如果你需要将本地文件通过 ftp 的形式上传到局域网的服务器（需要先把服务端的配置搭建好），可以安装<code>sftp</code>这个插件，很好用。在公司会经常用到。</p>\n<p>步骤如下：</p>\n<p>（1）安装插件<code>sftp</code>。</p>\n<p>（2）配置 <code>sftp.json</code>文件。 插件安装完成后，输入快捷键「cmd+shift+P」弹出命令面板，然后输入<code>sftp:config</code>，回车，当前工程的<code>.vscode</code>文件夹下就会自动生成一个<code>sftp.json</code>文件，我们需要在这个文件里配置的内容可以是：</p>\n<ul>\n<li>\n<p><code>host</code>：服务器的 IP 地址</p>\n</li>\n<li>\n<p><code>username</code>：用户名</p>\n</li>\n<li>\n<p><code>privateKeyPath</code>：存放在本地的已配置好的用于登录工作站的密钥文件（也可以是 ppk 文件）</p>\n</li>\n<li>\n<p><code>remotePath</code>：工作站上与本地工程同步的文件夹路径，需要和本地工程文件根目录同名，且在使用 sftp 上传文件之前，要手动在工作站上 mkdir 生成这个根目录</p>\n</li>\n<li>\n<p><code>ignore</code>：指定在使用 sftp: sync to remote 的时候忽略的文件及文件夹，注意每一行后面有逗号，最后一行没有逗号</p>\n</li>\n</ul>\n<p>举例如下：(注意，其中的注释需要去掉)</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">{\n  \"host\": \"192.168.xxx.xxx\", //服务器ip\n  \"port\": 22, //端口，sftp模式是22\n  \"username\": \"\", //用户名\n  \"password\": \"\", //密码\n  \"protocol\": \"sftp\", //模式\n  \"agent\": null,\n  \"privateKeyPath\": null,\n  \"passphrase\": null,\n  \"passive\": false,\n  \"interactiveAuth\": false,\n  \"remotePath\": \"/root/node/build/\", //服务器上的文件地址\n  \"context\": \"./server/build\", //本地的文件地址\n\n  \"uploadOnSave\": true, //监听保存并上传\n  \"syncMode\": \"update\",\n  \"watcher\": {\n    //监听外部文件\n    \"files\": false, //外部文件的绝对路径\n    \"autoUpload\": false,\n    \"autoDelete\": false\n  },\n  \"ignore\": [\n    //忽略项\n    \"**/.vscode/**\",\n    \"**/.git/**\",\n    \"**/.DS_Store\"\n  ]\n}</code></pre></div></figure>\n<p>（3）在 VS Code 的当前文件里，选择「右键 -&gt; upload」，就可以将本地的代码上传到 指定的 ftp 服务器上（也就是在上方 <code>host</code> 中配置的服务器 ip）。</p>\n<p>我们还可以选择「右键 -&gt; Diff with Remote」，就可以将本地的代码和 ftp 服务器上的代码做对比，非常方便。</p>\n<h3 id=\"24、沉浸模式-禅模式\">24、沉浸模式/禅模式</h3>\n<p>程序员写代码需要专注，有时需要进入一种心流。VS Code给我们提供了一种全屏下的沉浸模式，周围的面板都会被隐藏起来，只显示编辑器部分。</p>\n<p>操作方法：菜单栏选择「查看-外观-禅模式」即可；或者按下快捷键<code>Cmd + K</code>，放手，再按<code>Z</code>也可以达到目的。</p>\n<h3 id=\"正则表达式批量删除字符串\">正则表达式批量删除字符串</h3>\n<p><strong>需求</strong>：将文本中的字符串<code>axxxxb</code>，批量替换为<code>ab</code>。其中，开头字符 a 和 结尾字符 b 固定，中间xxx长度不确定。</p>\n<p><strong>解决</strong>：传统查找替换无法胜任。可以使用VScode正则表达式功能，查找<code>a.*?b</code>替换为<code>ab</code>即可。其中<code>?</code>是禁止贪婪匹配，否则会误删很多内容。</p>\n<hr>\n<p><strong>拓展需求</strong>：需求——将文本中的字符串<code>axxxx</code>，批量替换为<code>a</code>。其中，开头字符 a 固定，后面的xxx长度不确定。</p>\n<p><strong>解决</strong>：传统查找替换无法胜任。可以使用VScode正则表达式功能，查找<code>a.*?\\n</code>替换为<code>a\\n</code>即可。</p>\n<h2 id=\"六、三头六臂：VS-Code-插件介绍-插件推荐\">六、三头六臂：VS Code 插件介绍 &amp; 插件推荐</h2>\n<p>VS Code 有一个很强大的功能就是支持插件扩展，让你的编辑器仿佛拥有了三头六臂。</p>\n<h3 id=\"安装插件\">安装插件</h3>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201702.png\" alt=\"\"></p>\n<p>上图中，点击红框部分，即可在顶部输入框里，查找你想要的插件名，然后进行安装。</p>\n<p>插件安装完成后，记得重启软件（或者点击插件位置的“重新加载”），插件才会生效。</p>\n<p>另外，我们还可以访问官网的插件市场来安装插件：</p>\n<ul>\n<li>VS Code插件市场（官方）：<a href=\"https://marketplace.visualstudio.com/vscode\">https://marketplace.visualstudio.com/vscode</a></li>\n</ul>\n<p><strong>插件的安装目录</strong>：</p>\n<ul>\n<li>Windows：：<code>%USERPROFILE%\\.vscode\\extensions</code></li>\n<li>macOS：<code>~/.vscode/extensions</code></li>\n<li>macOS：<code>~/.vscode/extensions</code></li>\n</ul>\n<h3 id=\"插件的类型\">插件的类型</h3>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201709.png\" alt=\"20211013_1757_2\"></p>\n<p>插件市场的首页有四个模块，可以作为重要的信息来源：</p>\n<ul>\n<li>Featured：由  VS Code团队精心推荐的插件。</li>\n<li>Trending：近期热门插件。</li>\n<li>Most Popular：按总安装量排序的插件。</li>\n<li>Recently Added：最新发布的插件。</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312200932.png\" alt=\"20211013_1758\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312200925.png\" alt=\"20211013_1955\"></p>\n<p>插件市场至少有17种类型的插件：（按照数量排序）</p>\n<ul>\n<li>Themes：主题插件</li>\n<li>Programming Languages：编程语言插件</li>\n<li>Snippets：代码片段</li>\n<li>Extension Packs：插件包，里面包括多个插件</li>\n<li>Formatters：代码格式化</li>\n<li>Linters：静态检查</li>\n<li>Debuggers：调试器</li>\n<li>Keymaps：快捷键映射</li>\n<li>Visualization：可视化</li>\n<li>Language Packs：各国的语言插件</li>\n<li>Azure：Azure 云计算</li>\n<li>Data Science：数据科学</li>\n<li>SCM Providers：源代码控制管理器（source control manager）</li>\n<li>Notebooks</li>\n<li>Education：教育</li>\n<li>Testing：测试相关</li>\n<li>Machine Learning：机器学习</li>\n<li>Others：其他</li>\n</ul>\n<h3 id=\"插件的过滤显示\">插件的过滤显示</h3>\n<p>在 VS  Code中打开插件管理视图，可以针对已安装的插件，进行过滤展示。</p>\n<p>1）点击插件视图右上角的<code>...</code>按钮，可以展示不同状态的插件：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201958.png\" alt=\"20211013_2011\"></p>\n<p>2）在搜索框输入字符<code>@</code>，会展示出不同类型的过滤器：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201716.png\" alt=\"20211013_2015\"></p>\n<p><strong>常见的过滤器如下</strong>：</p>\n<p>1）按大类搜：</p>\n<ul>\n<li><code>@builtin</code>：显示 VS Code内置的插件</li>\n<li><code>@disabled</code>：显示被禁用的插件</li>\n<li><code>@enabled</code>：显示已启用的插件</li>\n<li><code>@installed</code>：显示已安装的插件</li>\n<li><code>@outdated</code>：显示待更新的插件</li>\n</ul>\n<p>2）精准搜索：</p>\n<ul>\n<li><code>@id</code>：按id显示插件</li>\n<li><code>@tag</code>：根据标签显示插件。</li>\n</ul>\n<p>3）对插件进行排序：</p>\n<ul>\n<li><code>@sort:installs</code>：根据插件的安装量排序</li>\n<li><code>@sourt:rating</code>：根据插件的评分排序</li>\n<li><code>@sort:name</code>：根据插件名字的字母顺序排序</li>\n</ul>\n<p>4）组合搜索：（举例）</p>\n<ul>\n<li><code>@installed @category:themes</code>：显示已安装的主题插件。</li>\n<li><code>@sort:installs java</code>：对 Java 相关的插件按照安装量排序。</li>\n</ul>\n<p>下面的内容，我来列举一些常见的插件，这些插件都很实用，小伙伴们可以按需安装。注意：每一类插件里，<strong>顺序越靠前，越实用</strong>。</p>\n<h3 id=\"1、基本插件\">1、基本插件</h3>\n<h4 id=\"Chinese-Simplified-Language-Pack-for-Visual-Studio-Code\">Chinese (Simplified) Language Pack for Visual Studio Code</h4>\n<p>让软件显示为简体中文语言。</p>\n<h3 id=\"2、Git-相关插件\">2、Git 相关插件</h3>\n<h4 id=\"GitLens-【荐】\">GitLens 【荐】</h4>\n<p>我强烈建议你安装插件<code>GitLens</code>，它是 VS Code 中我最推荐的一个插件，简直是 Git 神器，码农必备。如果你不知道，那真是 out 了。</p>\n<p>GitLens 在 Git 管理上有很多强大的功能，比如：</p>\n<ul>\n<li>将光标放置在代码的当前行，可以看到这样代码的提交者是谁，以及提交时间。这一点，是 GitLens 最便捷的功能。</li>\n<li>查看某个 commit 的代码改动记录</li>\n<li>查看不同的分支</li>\n<li>可以将两个 commit 进行代码对比</li>\n<li>甚至可以将两个 branch 分支进行整体的代码对比。这一点，简直是 GitLens 最强大的功能。当我们在不同分支 review 代码的时候，就可以用到这一招。</li>\n</ul>\n<p>打开你的 Git仓库，未安装  GitLens 时是这样的：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312200918.png\" alt=\"\"></p>\n<p>安装了  GitLens 之后是这样的：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201723.png\" alt=\"\"></p>\n<p>上图中，红框部分就是  GitLens 的功能，诸君可以自由发挥。</p>\n<p>补充一个有意思的趣事：Python插件、Ruby插件、GitLens插件、Vetur插件，这四个插件的开发者先后加入了微软。</p>\n<h4 id=\"Git-History\">Git History</h4>\n<p>有些同学习惯使用编辑器中的 Git 管理工具，而不太喜欢要打开另外一个 Git UI 工具的同学，这一款插件满足你查询所有 Git 记录的需求。</p>\n<h4 id=\"Local-History-【荐】\">Local History 【荐】</h4>\n<p>维护文件的本地历史记录。代码意外丢失时，有时可以救命。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201729.png\" alt=\"\"></p>\n<h3 id=\"3、代码智能提示插件\">3、代码智能提示插件</h3>\n<h4 id=\"Vetur\">Vetur</h4>\n<p>Vue 多功能集成插件，包括：语法高亮，智能提示，emmet，错误提示，格式化，自动补全，debugger。VS Code 官方钦定 Vue 插件，Vue 开发者必备。</p>\n<h4 id=\"ES7-React-Redux-GraphQL-React-Native-snippets\">ES7 React/Redux/GraphQL/React-Native snippets</h4>\n<p>React/Redux/react-router 的语法智能提示。</p>\n<h4 id=\"JavaScript-ES6-code-snippets\">JavaScript(ES6) code snippets</h4>\n<p>ES6 语法智能提示，支持快速输入。</p>\n<h4 id=\"javascript-console-utils：快速打印-log-日志【荐】\">javascript console utils：快速打印 log 日志【荐】</h4>\n<p>安装这个插件后，当我们按住快捷键「Cmd + Shift + L」后，即可自动出现日志 <code>console.log()</code>。简直是日志党福音。</p>\n<p>当我们选中某个变量 <code>name</code>，然后按住快捷键「Cmd + Shift + L」，即可自动出现这个变量的日志 <code>console.log(name)</code>。</p>\n<p>其他的同类插件还有：Turbo Console Log。</p>\n<p>不过，生产环境的代码，还是尽量少打日志比较好，避免出现一些异常。</p>\n<p>编程有三等境界：</p>\n<ul>\n<li>\n<p>第三等境界是打日志，这是最简单、便捷的方式，略显低级，一般新手或资深程序员偷懒时会用。</p>\n</li>\n<li>\n<p>第二等境界是断点调试，在前端、Java、PHP、iOS 开发时非常常用，通过断点调试可以很直观地跟踪代码执行逻辑、调用栈、变量等，是非常实用的技巧。</p>\n</li>\n<li>\n<p>第一等境界是测试驱动开发，在写代码之前先写测试。与第二等的断点调试刚好相反，大部分人不是很习惯这种方式，但在国外开发者或者敏捷爱好者看来，这是最高效的开发方式，在保证代码质量、重构等方面非常有帮助，是现代编程开发必不可少的一部分。</p>\n</li>\n</ul>\n<h4 id=\"Code-Spell-Checker：单词拼写错误检查\">Code Spell Checker：单词拼写错误检查</h4>\n<p>这个拼写检查程序的目标是帮助捕获常见的单词拼写错误，可以检测驼峰命名。从此告别 Chinglish.</p>\n<h4 id=\"Auto-Close-Tag、Auto-Rename-Tag\">Auto Close Tag、Auto Rename Tag</h4>\n<p>自动闭合配对的标签、自动重命名配对的标签。</p>\n<h3 id=\"4、代码显示增强插件\">4、代码显示增强插件</h3>\n<h4 id=\"Bracket-Pair-Colorizer-2：突出显示成对的括号【荐】\">Bracket Pair Colorizer 2：突出显示成对的括号【荐】</h4>\n<p><code>Bracket Pair Colorizer 2</code>插件：以不同颜色显示成对的括号，并用连线标注括号范围。简称<strong>彩虹括号</strong>。</p>\n<p>另外，还有个<code>Rainbow Brackets</code>插件，也可以突出显示成对的括号。</p>\n<h4 id=\"highlight-icemode：选中相同的代码时，让高亮显示更加明显【荐】\">highlight-icemode：选中相同的代码时，让高亮显示更加明显【荐】</h4>\n<p>VSCode 自带的高亮显示，实在是不够显眼。用插件支持一下吧。</p>\n<p>所用了这个插件之后，VS Code 自带的高亮就可以关掉了：</p>\n<p>在用户设置里添加<code>\"editor.selectionHighlight\": false</code>即可。</p>\n<p>参考链接：<a href=\"https://blog.csdn.net/palmer_kai/article/details/79548164\">vscode 选中后相同内容高亮插件推荐</a></p>\n<h4 id=\"vscode-icons\">vscode-icons</h4>\n<p>vscode-icons 会根据文件的后缀名来显示不同的图标，让你更直观地知道每种文件是什么类型的。</p>\n<h4 id=\"indent-rainbow：突出显示代码缩进\">indent-rainbow：突出显示代码缩进</h4>\n<p><code>indent-rainbow</code>插件：突出显示代码缩进。</p>\n<p>安装完成后，效果如下图所示：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312200911.png\" alt=\"\"></p>\n<h4 id=\"TODO-Highlight\">TODO Highlight</h4>\n<p>写代码过程中，突然发现一个 Bug，但是又不想停下来手中的活，以免打断思路，怎么办？按照代码规范，我们一般是在代码中加个 TODO 注释。比如：（注意，一定要写成大写<code>TODO</code>，而不是小写的<code>todo</code>）</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">//TODO:这里有个bug，我一会儿再收拾你</code></pre></div></figure>\n<p>或者：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">//FIXME:我也不知道为啥， but it works only that way.</code></pre></div></figure>\n<p>安装了插件 <code>TODO Highlight</code>之后，按住「Cmd + Shift + P」打开命令面板，输入「Todohighlist」，选择相关的命令，我们就可以看到一个 todoList 的清单。</p>\n<h4 id=\"Better-Comments\">Better Comments</h4>\n<p>为注释添加更醒目、带分类的色彩。</p>\n<h3 id=\"5、代码格式化插件\">5、代码格式化插件</h3>\n<h4 id=\"Prettier：代码格式化\">Prettier：代码格式化</h4>\n<p>Prettier 是一个代码格式化工具，<strong>只关注格式化，但不具备校验功能</strong>。在一个多人协同开发的团队中，统一的代码编写规范非常重要。一套规范可以让我们编写的代码达到一致的风格，提高代码的可读性和统一性。自然维护性也会有所提高，代码的展示也会更加美观。</p>\n<p>步骤如下：</p>\n<p>（1）安装插件 <code>Prettier</code>。</p>\n<p>（2）在项目的根路径下，新建文件<code>.prettierrc</code>，并在文件中添加如下内容：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">{\n  \"printWidth\": 150,\n  \"tabWidth\": 4,\n  \"semi\": true,\n  \"singleQuote\": true,\n  \"trailingComma\": \"es5\",\n  \"tslintIntegration\": true,\n  \"insertSpaceBeforeFunctionParenthesis\": false\n}</code></pre></div></figure>\n<p>上面的内容，是我自己的配置，你可以参考。更多配置，可见官方文档：<a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p>\n<p>（3）Mac用户按快捷键「Option + Shift + F」，Win 用户按快捷键「Alt + shift + F」，即可完成代码的格式化。如果你的VS Code 设置的是自动格式化代码，那么这一步可以忽略。</p>\n<h4 id=\"ESLint：代码格式的校验\">ESLint：代码格式的校验</h4>\n<p>日常开发中，建议用 Prettier 做<strong>代码格式化</strong>，然后用 eslint 做<strong>格式校验</strong>。很多人把这两个插件的功能弄混了。</p>\n<p>一般做法是：格式化建议是由程序员手动触发，格式校验由系统强制校验。通过 Prettier <strong>手动</strong>触发格式化，是为了让用户有感知；通过eslint 做<strong>强制</strong>校验之后，如果代码的格式不符合要求，系统就禁止你提交代码。</p>\n<h4 id=\"Beautify\">Beautify</h4>\n<p>代码格式化工具。</p>\n<p>备注：相比之下，Prettier 是当前最流行的代码格式化工具，比 Beautify 用得更多。</p>\n<h4 id=\"Paste-JSON-as-Code\">Paste JSON as Code</h4>\n<p>此插件可以将剪贴板中的 JSON 字符串转换成工作代码。支持多种语言。</p>\n<h4 id=\"JS-CSS-HTML-Formatter【荐】\">JS-CSS-HTML Formatter【荐】</h4>\n<p>保存文件时，自动格式化 HTML、CSS、JS代码。</p>\n<h3 id=\"6、图片相关插件\">6、图片相关插件</h3>\n<h4 id=\"Polacode-2020：生成代码截图-【荐】\">Polacode-2020：生成代码截图 【荐】</h4>\n<p>可以把代码片段保存成美观的图片，主题不同，代码的配色方案也不同，也也可以自定义设置图片的边框颜色、大小、阴影。</p>\n<p>尤其是在我们做 PPT 分享时需要用到代码片段时，或者需要在网络上优雅地分享代码片段时，这一招很有用。</p>\n<p>生成的效果如下：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312200904.png\" alt=\"\"></p>\n<p>其他同类插件：<code>CodeSnap</code>。我们也可以通过 <a href=\"https://carbon.now.sh/\">https://carbon.now.sh/</a>这个网站生成代码图片</p>\n<p>有人可能会说：直接用 QQ 截图不行吗？可以是可以，但不够美观、不够干净。</p>\n<h4 id=\"Image-Preview-【荐】\">Image Preview 【荐】</h4>\n<p>图片预览。鼠标移动到图片 url 上的时候，会自动显示图片的预览和图片尺寸。</p>\n<h3 id=\"7、CSS相关插件\">7、CSS相关插件</h3>\n<h4 id=\"CSS-Peek\">CSS Peek</h4>\n<p>增强 HTML 和 CSS 之间的关联，快速查看该元素上的 CSS 样式。</p>\n<h4 id=\"Vue-CSS-Peek\">Vue CSS Peek</h4>\n<p>CSS Peek 对 Vue 没有支持，该插件提供了对 Vue 文件的支持。</p>\n<h4 id=\"Color-Info\">Color Info</h4>\n<p>这个便捷的插件，将为你提供你在 CSS 中使用颜色的相关信息。你只需在颜色上悬停光标，就可以预览色块中色彩模型的（HEX、 RGB、HSL 和 CMYK）相关信息了。</p>\n<h3 id=\"8、Mardown-相关插件\">8、Mardown 相关插件</h3>\n<h4 id=\"Markdown-Preview-Github-Styling-【荐】\">Markdown Preview Github Styling 【荐】</h4>\n<p>以 GitHub 风格预览 Markdown 样式，十分简洁优雅。就像下面这样，左侧书写 Markdown 文本，右侧预览 Markdown 的渲染效果：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201736.png\" alt=\"\"></p>\n<h4 id=\"Markdown-Preview-Enhanced\">Markdown Preview Enhanced</h4>\n<p>预览 Markdown 样式。</p>\n<h4 id=\"Markdown-All-in-One\">Markdown All in One</h4>\n<p>这个插件将帮助你更高效地在 Markdown 中编写文档。</p>\n<h3 id=\"9、通用工具类插件\">9、通用工具类插件</h3>\n<h4 id=\"sftp：文件传输-【荐】\">sftp：文件传输 【荐】</h4>\n<p>如果你需要将本地文件通过 ftp 的形式上传到局域网的服务器，可以安装<code>sftp</code>这个插件，很好用。在公司会经常用到。</p>\n<p>详细配置已经在上面讲过。</p>\n<h4 id=\"Live-Server-【荐】\">Live Server 【荐】</h4>\n<p>在本地启动一个服务器，代码写完后可以实现「热更新」，实时地在网页中看到运行效果。就不需要每次都得手动刷新页面了。</p>\n<p>使用方式：安装插件后，开始写代码；代码写完后，右键选择「Open with Live Server」。</p>\n<h4 id=\"open-in-browser\">open in browser</h4>\n<p>安装<code>open in browser</code>插件后，在 HTML 文件中「右键选择 --&gt; Open in Default Browser」，即可在浏览器中预览网页。</p>\n<h4 id=\"Project-Manager\">Project Manager</h4>\n<p>工作中，我们经常会来回切换多个项目，每次都要找到对应项目的目录再打开，比较麻烦。Project Manager 插件可以解决这样的烦恼，它提供了专门的视图来展示你的项目，我们可以把常用的项目保存在这里，需要时一键切换，十分方便。</p>\n<h4 id=\"WakaTime-【荐】\">WakaTime 【荐】</h4>\n<p>统计在 VS Code 里写代码的时间。统计效果如下：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312200858.png\" alt=\"\"></p>\n<h4 id=\"Code-Time\">Code Time</h4>\n<p><code>Code Time</code>插件：记录编程时间，统计代码行数。</p>\n<p>安装该插件后，VS Code 底部的状态栏右下角可以看到时间统计。点击那个位置之后，选择「Code Time Dashboard」，即可查看统计结果。</p>\n<p>备注：团长试了一下这个 code time 插件，发现统计结果不是很准。</p>\n<h4 id=\"File-Tree-to-Text-Generator：快速生成文件的目录树\">File Tree to Text Generator：快速生成文件的目录树</h4>\n<p>如题。</p>\n<h4 id=\"Settings-Sync\">Settings Sync</h4>\n<ul>\n<li>\n<p>地址：<a href=\"https://github.com/shanalikhan/code-settings-sync\">https://github.com/shanalikhan/code-settings-sync</a></p>\n</li>\n<li>\n<p>作用：多台设备之间，同步 VS Code 配置。通过登录 GitHub 账号来使用这个同步工具。</p>\n</li>\n</ul>\n<p>同步的详细操作，下一段会讲。</p>\n<p>另外，北京时间的<a href=\"https://zhuanlan.zhihu.com/p/184868336\">2020年8月14日</a>，微软发布 Visual Studio Code 1.48 稳定版。此版本<strong>原生</strong>支持用户同步 VS Code的配置，只需要登录微软账号或者 GitHub账号即可。</p>\n<h4 id=\"vscode-syncing\">vscode-syncing</h4>\n<ul>\n<li>\n<p>地址：<a href=\"https://github.com/nonoroazoro/vscode-syncing\">https://github.com/nonoroazoro/vscode-syncing</a></p>\n</li>\n<li>\n<p>作用：多台设备之间，同步 VS Code 配置。</p>\n</li>\n</ul>\n<h4 id=\"minapp：小程序支持\">minapp：小程序支持</h4>\n<p>小程序开发必备插件。</p>\n<h4 id=\"Search-node-modules\">Search node_modules</h4>\n<p><code>node_modules</code>模块里面的文件夹和模块实在是太多了，根本不好找。好在安装 <code>Search node_modules</code> 这个插件后，输入快捷键「Cmd + Shift + P」，然后输入 <code>node_modules</code>，在弹出的选项中选择 <code>Search node_modules</code>，即可搜索 node_modules 里的模块。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312200857.jpeg\" alt=\"\"></p>\n<h4 id=\"RemoteHub\">RemoteHub</h4>\n<p>不要惊讶，RemoteHub 和 GitLens 是同一个作者开发出来的。</p>\n<p><code>RemoteHub</code>插件的作用是：可以在本地查看 GitHub 网站上的代码，而不需要将代码下载到本地。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312200857.png\" alt=\"\"></p>\n<p>这个插件目前使用的人还不多，赶紧安装起来尝尝鲜吧。</p>\n<h4 id=\"Live-Share：实时编码分享\">Live Share：实时编码分享</h4>\n<p><code>Live Share</code>这个神奇的插件是由微软官方出品，它的作用是：<strong>实时编码分享</strong>。也就是说，它可以实现你和你的同伴一起写代码。这绝对就是<strong>结对编程</strong>的神器啊。</p>\n<p>安装方式：</p>\n<p>打开插件管理，搜索“live share”，安装。安装后重启 VS Code，在左侧会多出一个按钮：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201743.png\" alt=\"\"></p>\n<p>上图中，点击红框部分，登录后就可以分享你的工作空间了。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312200850.png\" alt=\"\"></p>\n<h4 id=\"Import-Cost\">Import Cost</h4>\n<p>在项目开发过程中，我们会引入很多 npm 包，有时候可能只用到了某个包里的一个方法，却引入了整个包，导致代码体积增大很多。<code>Import Cost</code>插件可以在代码中友好的提示我们，当前引入的包会增加多少体积，这很有助于帮我们优化代码的体积。</p>\n<h3 id=\"10、主题插件\">10、主题插件</h3>\n<p>给你的 VS Code 换个皮肤吧，免费的那种。</p>\n<ul>\n<li>\n<p>Dracula Theme</p>\n</li>\n<li>\n<p>Material Theme</p>\n</li>\n<li>\n<p>Nebula Theme</p>\n</li>\n<li>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme\">One Dark Pro</a></p>\n</li>\n<li>\n<p>One Monokai Theme</p>\n</li>\n<li>\n<p>Monokai Pro</p>\n</li>\n<li>\n<p>Ayu</p>\n</li>\n<li>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=akarlsten.vscode-snazzy-akarlsten\">Snazzy Plus</a></p>\n</li>\n<li>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=alexanderte.dainty-vscode\">Dainty</a></p>\n</li>\n<li>\n<p><code>SynthWave '84</code></p>\n</li>\n<li>\n<p>GitHub Plus Theme：白色主题</p>\n</li>\n<li>\n<p>Horizon Theme：红色主题</p>\n</li>\n</ul>\n<h2 id=\"七、无缝切换：VS-Code-配置云同步\">七、无缝切换：VS Code 配置云同步</h2>\n<p>我们可以将配置云同步，这样的话，当我们换个电脑时，即可将配置一键同步到本地，就不需要重新安装插件了，也不需要重新配置软件。</p>\n<p>下面讲的两个同步方法，都可以，看你自己需要。方法1是 VS Code自带的同步功能，操作简单。方法2 需要安装插件，支持更多的自定义配置。</p>\n<h3 id=\"方法1：使用-VS-Code-自带的同步功能\">方法1：使用 VS Code 自带的同步功能</h3>\n<p>1、<strong>配置同步</strong>：</p>\n<p>（1）在菜单栏选择「 Code --&gt; 首选项 --&gt; 打开设置同步」：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201750.png\" alt=\"\"></p>\n<p>（2）选择需要同步的配置：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312200843.png\" alt=\"\"></p>\n<p>（3）通过Microsoft或者GitHub账号登录。 上图中，点击“登录并打开”，然后弹出如下界面：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201757.png\" alt=\"\"></p>\n<p>上图中，使用  微软账号或者 GitHub账号登录：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312201803.png\" alt=\"\"></p>\n<p>（4）同步完成后，菜单栏会显示“首先项同步已打开”，最左侧也会多出一个同步图标，如下图所示：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312202032.png\" alt=\"\"></p>\n<p>2、<strong>管理同步</strong>：</p>\n<p>（1）点击菜单栏「Code --&gt; 首选项 --&gt; 设置同步已打开」，会弹出如下界面，进行相应的同步管理即可：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312200836.png\" alt=\"\"></p>\n<p>（2）换另外一个电脑时，登录相同的账号，即可完成同步。</p>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/baidu_33340703/article/details/106967884\">VS Code原生的配置同步功能——Settings Sync</a></li>\n</ul>\n<h3 id=\"方法2：使用插件-settings-sync\">方法2：使用插件 <code>settings-sync</code></h3>\n<p>使用方法2，我们还可以把配置分享其他用户，也可以把其他用户的配置给自己用。</p>\n<p>1、<strong>配置同步</strong>：（将自己本地的配置云同步到 GitHub）</p>\n<p>（1）安装插件 <code>settings-sync</code>。</p>\n<p>（2）安装完插件后，在插件里使用 GitHub 账号登录。</p>\n<p>（3）登录后在 vscode 的界面中，可以选择一个别人的 gist；也可以忽略掉，然后创建一个属于自己的 gist。</p>\n<p>（4）使用快捷键 「Command + Shift + P」，在弹出的命令框中输入 sync，并选择「更新/上传配置」，这样就可以把最新的配置上传到 GitHub。</p>\n<p>2、<strong>管理同步</strong>：（换另外一个电脑时，从云端同步配置到本地）</p>\n<p>（1）当我们换另外一台电脑时，可以先在 VS Code 中安装 <code>settings-sync</code> 插件。</p>\n<p>（2）安装完插件后，在插件里使用 GitHub 账号登录。</p>\n<p>（3）登录之后，插件的界面上，会自动出现之前的同步记录：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312200829.png\" alt=\"\"></p>\n<p>上图中，我们点击最新的那条记录，就可将云端的最新配置同步到本地：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/03/1220220312200825.png\" alt=\"\"></p>\n<p>如果你远程的配置没有成功同步到本地，那可能是网络的问题，此时，可以使用快捷键 「Command + Shift + P」，在弹出的命令框中输入 sync，并选择「下载配置」，多试几次。</p>\n<p><strong>使用其他人的配置</strong>：</p>\n<p>如果我们想使用别人的配置，首先需要对方提供给你 gist。具体步骤如下：</p>\n<p>（1）安装插件 <code>settings-sync</code>。</p>\n<p>（2）使用快捷键 「Command + Shift + P」，在弹出的命令框中输入 sync，并选择「下载配置」</p>\n<p>（3）在弹出的界面中，选择「Download Public Gist」，然后输入别人分享给你的 gist。注意，这一步不需要登录 GitHub 账号。</p>\n<h2 id=\"最后一段\">最后一段</h2>\n<p>如果你还有什么推荐的 VS Code 插件，欢迎留言。</p>\n<p>大家完全不用担心这篇文章会过时，随着 VS Code 的版本更新和插件更新，本文也会随之更新。关于 VS Code 内容的后续更新，你可以关注我在 GitHub 上的前端入门项目，项目地址是：</p>\n<blockquote>\n<p><a href=\"https://github.com/qianguyihao/Web\">https://github.com/qianguyihao/Web</a></p>\n</blockquote>\n<p>一个超级详细和真诚的前端入门项目。</p>\n<h2 id=\"todo\">todo</h2>\n<ul>\n<li><a href=\"https://github.com/qianguyihao/Web/issues/84\">issues 84</a></li>\n</ul>\n<h2 id=\"参考链接\">参考链接</h2>\n<h3 id=\"2021年\">2021年</h3>\n<ul>\n<li>中文版 Awesome VS Code：<a href=\"https://github.com/formulahendry/awesome-vscode-cn\">https://github.com/formulahendry/awesome-vscode-cn</a></li>\n</ul>\n<h3 id=\"2020年\">2020年</h3>\n<ul>\n<li><a href=\"https://juejin.im/post/5ea40c6751882573b219777d\">VSCode 插件大全｜ VSCode 高级玩家之第二篇</a></li>\n<li><a href=\"http://www.supuwoerc.xyz/tools/vscode/plugins.html\">http://www.supuwoerc.xyz/tools/vscode/plugins.html</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/99462672\">如何让 VS Code 更好用 10 倍？这里有一份 VS Code 新手指南</a></li>\n<li><a href=\"https://lyreal666.com/%E9%82%A3%E4%BA%9B%E4%BD%A0%E5%BA%94%E8%AF%A5%E8%80%83%E8%99%91%E5%8D%B8%E8%BD%BD%E7%9A%84-VSCode-%E6%89%A9%E5%B1%95/#more\">那些你应该考虑卸载的 VSCode 扩展</a></li>\n<li><a href=\"https://juejin.im/post/5d74eb5c51882525017787d9\">VS Code 折腾记 - (16) 推荐一波实用的插件集</a></li>\n<li><a href=\"https://juejin.im/post/5db66672f265da4d0e009aad\">VSCode 前端必备插件，有可能你装了却不知道如何使用？</a></li>\n<li><a href=\"https://juejin.im/post/5a08d1d6f265da430f31950e\">能让你开发效率翻倍的 VSCode 插件配置（上）</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000012811886\">https://segmentfault.com/a/1190000012811886</a></li>\n<li><a href=\"https://idoubi.cc/2019/07/08/vscode-sublime-theme/\">「Vscode」打造类 sublime 的高颜值编辑器</a></li>\n<li><a href=\"https://lsqy.tech/2020/03/14/20200314Mac-Vscode%E5%BF%AB%E6%8D%B7%E9%94%AE/\">Mac Vscode 快捷键</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?src=11&amp;timestamp=1591581536&amp;ver=2387&amp;signature=i4xLZlLe1Gkl7OiBIhPO*VSeNB5lzFgTY-dgNW9E9ZbtIAv4bnJ1RdAAZdhvDw*cg-DmMcUa-V8NSUdV-tthmXZCq3ht4edCweq6v0QxKjnh8IuAxyyh5qymdRui*8iE&amp;new=1\">使用 VSCode 的一些技巧</a></li>\n<li>转载来源 <a href=\"https://github.com/qianguyihao/Web/blob/master/00-%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/01-VS%20Code%E7%9A%84%E4%BD%BF%E7%94%A8.md\">GitHub</a></li>\n</ul>\n",
            "tags": [
                "vscode",
                "插件",
                "编码"
            ]
        },
        {
            "id": "https://blog.17lai.site/posts/647e6265/",
            "url": "https://blog.17lai.site/posts/647e6265/",
            "title": "Vim IDE Docker 以及中文指南",
            "date_published": "2021-09-15T04:25:00.000Z",
            "content_html": "<blockquote>\n<p>Docker Vim IDE 由博主定制，加入中文环境配置，支持CJK。并升级到最新版本！</p>\n</blockquote>\n<h2 id=\"Vim-Docker\"><a href=\"https://hub.docker.com/r/bloodstar/vim\">Vim Docker</a></h2>\n<p><img src=\"https://i.imgur.com/G6KybVM.png\" alt=\"Vim Docker\"></p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker pull bloodstar/vim</code></pre></div></figure>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">alias edit='docker run -ti --rm -v $(pwd):/home/developer/workspace bloodstar/vim' \nedit some.file \nalias edit_update=\"docker pull bloodstar/vim:latest\"</code></pre></div></figure>\n<h2 id=\"Vim-IDE-Docker\"><a href=\"https://hub.docker.com/r/bloodstar/drop-in\">Vim IDE Docker</a></h2>\n<p><img src=\"https://i.imgur.com/RVTlBBO.png\" alt=\"drop-in\"></p>\n<h4 id=\"What’s-inside\">What’s inside:</h4>\n<ul>\n<li><a href=\"http://www.alpinelinux.org/\"><code>Alpine Linux</code></a></li>\n<li><a href=\"http://www.vim.org/\"><code>Vim</code></a> + a ton of awesome plugins <em>see <a href=\"https://hub.docker.com/r/bloodstar/vim/\"><code>bloodstar/vim:latest</code></a></em></li>\n<li>Good support of <a href=\"https://golang.org/\"><code>Golang</code></a> development with <a href=\"https://hub.docker.com/r/bloodstar/go-tools/\"><code>bloodstar/go-tools</code></a> container</li>\n<li><a href=\"https://tmux.github.io/\"><code>tmux</code></a></li>\n<li><a href=\"https://powerline.readthedocs.io/\"><code>powerline</code></a></li>\n<li><a href=\"https://mosh.mit.edu/\"><code>Mosh</code></a></li>\n<li>OpenSSH, Bash, OMF, Python, etc.</li>\n</ul>\n<h4 id=\"how-to-start-the-daemon-and-all-containers\">how to start the daemon(and all containers)</h4>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker create -v '/usr/lib/go' --name go-tools \\\n'bloodstar/go-tools' '/bin/true'\n\ndocker run -v $('pwd'):/home/developer/workspace \\\n--volumes-from go-tools \\\n-v ~/.ssh/pub_rsa:/etc/ssh_keys:ro \\\n-v /etc/localtime:/etc/localtime:ro \\\n-d -p 80:80 -p 8080:8080 -p 62222:62222 -p 60001:60001/udp \\\n--name drop-in bloodstar/drop-in</code></pre></div></figure>\n<p><em><code>-v /etc/localtime:/etc/localtime:ro</code> - makes tmux display local time</em></p>\n<h4 id=\"how-to-connect\">how to connect:</h4>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mosh --ssh=\"ssh -p 62222\" -- developer@$&lt;ip&gt; tmux -u</code></pre></div></figure>\n<h4 id=\"or-without-host-identity-check\">or without host identity check:</h4>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mosh --ssh=\"ssh -o StrictHostKeyChecking=no -p 62222\" -- developer@$&lt;ip&gt; tmux -u</code></pre></div></figure>\n<h4 id=\"Useful-Bash-scripts\">Useful Bash scripts</h4>\n<h6 id=\"Connect\"><strong>Connect</strong></h6>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#!/bin/bash\nip=$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' drop-in)\nmosh --ssh=\"ssh -p 62222\" -- developer@$ip tmux -u</code></pre></div></figure>\n<h6 id=\"start-the-daemon-and-all-containers\"><strong>start the daemon(and all containers)</strong></h6>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#!/bin/bash\ndtc_id=$(docker ps -a -q --filter 'name=vim-go-tools')\nif [[ -z \"${dtc_id}\" ]]; then\n echo 'vim-go-tools container not found. Creating...'\n docker create -v '/usr/lib/go' --name 'vim-go-tools' \\\n   'bloodstar/go-tools' '/bin/true'\n echo 'Done!'\nfi\necho 'starting daemon...'\ndocker run -v $('pwd'):/home/developer/workspace \\\n  --volumes-from vim-go-tools \\\n  -v ~/.ssh/pub_rsa:/etc/ssh_keys:ro \\\n  -v /etc/localtime:/etc/localtime:ro \\\n  -e \"GEMAIL=&lt;github email&gt;\" \\\n  -e \"GNAME=&lt;github name&gt;\" \\\n  -d -p 80:80 -p 8080:8080 -p 62222:62222 -p 60001:60001/udp \\\n  --name drop-in bloodstar/drop-in\necho 'Done!'</code></pre></div></figure>\n<h2 id=\"Vim-中文快查表-戳这里\"><a href=\"/cheatsheets/Vim_CN.docset/Contents/Resources/Documents/\">Vim 中文快查表</a>   &lt;= 戳这里</h2>\n<blockquote>\n<p>Tips: 在网页上端导航栏，[快查] =&gt; [更多快查表]，有更多快查表！<br>\n快去看看吧。</p>\n</blockquote>\n<h2 id=\"Vim\">Vim</h2>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1520210915150901.png\" alt=\"vim速查\"></p>\n<h2 id=\"Vim简明教程\">Vim简明教程</h2>\n<h3 id=\"1-键位图\">1. 键位图</h3>\n<p><img src=\"https://cimg1.17lai.site/data/2022/10/06/20221006145923.gif\" alt=\"vi-vim-cheat-sheet-sch\"></p>\n<p><strong>vi-vim-cheat-sheet-sch</strong></p>\n<p>vi-vim-cheat-sheet-sch</p>\n<p>vim分为三种主要模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）<strong>和</strong>底线命令模式（Last line mode）</strong></p>\n<h3 id=\"2-命令模式\">2. 命令模式</h3>\n<p>用户刚刚启动 vi/vim，便进入了命令模式。</p>\n<h4 id=\"2-1-光标移动\">2.1. 光标移动</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">按键</th>\n<th style=\"text-align:left\">动作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">h 或 向左箭头键(←)</td>\n<td style=\"text-align:left\">光标向 左 移动一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>j 或 向下箭头键(↓) 或<code>&lt;Enter&gt;</code></strong></td>\n<td style=\"text-align:left\">光标向 下 移动一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>k 或 向上箭头键(↑)</strong></td>\n<td style=\"text-align:left\">光标向 上 移动一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">l 或 向右箭头键(→) 或 <code>&lt;space&gt;</code></td>\n<td style=\"text-align:left\">光标向 右 移动一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>w/W</strong></td>\n<td style=\"text-align:left\">移动到下一个单词，大写把标点符号当做单词的一部分</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>e/E</strong></td>\n<td style=\"text-align:left\">移动到词尾，大写把标点符号当做单词的一部分</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>b/B</strong></td>\n<td style=\"text-align:left\">移动到上一个单词，大写把标点符号当做单词的一部分</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+</td>\n<td style=\"text-align:left\">光标移动到非空格符的下一行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">光标移动到非空格符的上一行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>G</strong></td>\n<td style=\"text-align:left\">移动到这个档案的最后一行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>gg</strong></td>\n<td style=\"text-align:left\">移动到这个档案的第一行，相当于 1G</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>[Ctrl] + f 或 [Page Down]</strong></td>\n<td style=\"text-align:left\">屏幕『向下』移动一页</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>[Ctrl] + b 或 [Page Up]</strong></td>\n<td style=\"text-align:left\">屏幕『向上』移动一页</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[Ctrl] + d</td>\n<td style=\"text-align:left\">屏幕『向下』移动半页</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[Ctrl] + u</td>\n<td style=\"text-align:left\">屏幕『向上』移动半页</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>0 或功能键[Home]</strong></td>\n<td style=\"text-align:left\">数字『 0 』，移动到这一行的最前面字符处</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>$ 或功能键[End]</strong></td>\n<td style=\"text-align:left\">移动到这一行的最后面字符处</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">H</td>\n<td style=\"text-align:left\">光标移动到这个屏幕的最上方那一行的第一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">M</td>\n<td style=\"text-align:left\">光标移动到这个屏幕的中央那一行的第一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">L</td>\n<td style=\"text-align:left\">光标移动到这个屏幕的最下方那一行的第一个字符</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2-2-复制、粘贴\">2.2. 复制、粘贴</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">按键</th>\n<th style=\"text-align:left\">动作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>y + 光标移动符</strong></td>\n<td style=\"text-align:left\">复制光标所在到移动范围的内容，例如： yj：复制游标所在的那一整行 yG：复制光标所在到最后一行的内容 yw：复制光标所在到下一个单词的内容</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>yy</strong></td>\n<td style=\"text-align:left\">复制游标所在的那一行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>p</strong></td>\n<td style=\"text-align:left\">在光标后粘贴，如果是单词级的粘贴，就会在光标后一位粘贴，如果是行级的粘贴，就会在光标下一行粘贴，下面的 P 粘贴时同理。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>P</strong></td>\n<td style=\"text-align:left\">在光标前粘贴</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2-3-文本修改\">2.3. 文本修改</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">按键</th>\n<th style=\"text-align:left\">动作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>x</strong></td>\n<td style=\"text-align:left\">向 后 删除一个字符 ，相当于[del]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>X</strong></td>\n<td style=\"text-align:left\">向 前 删除一个字符，相当于 [backspace]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>d + 光标移动符</strong></td>\n<td style=\"text-align:left\">删除光标所在到移动范围的内容，例如： dj：删除游标所在的那一整行 dG：删除光标所在到最后一行的内容 dw：删除光标所在到下一个单词的内容</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>dd</strong></td>\n<td style=\"text-align:left\">删除游标所在的那一整行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">J</td>\n<td style=\"text-align:left\">将光标所在行与下一行的数据结合成同一行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r + 「字符」</td>\n<td style=\"text-align:left\">替换光标处的单词为该字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">R</td>\n<td style=\"text-align:left\">进入replace mode，直到接收到[Esc]按键信号退出该模式</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2-4-重复动作\">2.4. 重复动作</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">按键</th>\n<th style=\"text-align:left\">动作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>u</strong></td>\n<td style=\"text-align:left\">Undo，复原前一个动作。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>[Ctrl] + r</strong></td>\n<td style=\"text-align:left\">重做上一个动作。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>.</strong></td>\n<td style=\"text-align:left\">重复前一个动作。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>n</strong></td>\n<td style=\"text-align:left\">向下重复前一个搜寻的动作。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>N</strong></td>\n<td style=\"text-align:left\">向上重复前一个搜寻的动作。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>「n」+ 命令符</strong></td>\n<td style=\"text-align:left\">「n」是数字，一般可以理解为重复n次该动作，例如： 10j 表示向下移动10行</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2-5-可视模式（vim-only）\">2.5. 可视模式（vim only）</h4>\n<p>命令模式下按<code>ctrl + v</code>进入可视模式，这是一个比较特别地模式。</p>\n<p>这个模式可以移动光标，选择一大片区域，然后可以对这片区域进行操作。</p>\n<h3 id=\"3-输入模式\">3. 输入模式</h3>\n<p>在命令模式下按下i就进入了输入模式。</p>\n<p>在输入模式中，除了ESC键退出输入模式，其他按键和平常编辑模式是一样的。</p>\n<h4 id=\"3-1-进入输入模式\">3.1. 进入输入模式</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">按键</th>\n<th style=\"text-align:left\">动作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>i</strong></td>\n<td style=\"text-align:left\">Insert，从当前光标前开始输入</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>I</strong></td>\n<td style=\"text-align:left\">Insert，在目前所在行的第一个非空格符处开始输入</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>a</strong></td>\n<td style=\"text-align:left\">Append，从当前光标后开始输入</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>A</strong></td>\n<td style=\"text-align:left\">Append，从光标所在行的最后一个字符处开始输入</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">o</td>\n<td style=\"text-align:left\">在当前光标所在的下一行处输入新的一行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">O</td>\n<td style=\"text-align:left\">在当前光标所在处的上一行输入新的一行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">c + 光标移动符</td>\n<td style=\"text-align:left\">可以理解先按<code>d + 光标移动符</code>，然后再按<code>a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">C</td>\n<td style=\"text-align:left\">可以理解先按<code>dd</code>，然后再按<code>a</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4-底线命令模式\">4. 底线命令模式</h3>\n<p>在命令模式下按下<code>:</code>、<code>/</code>、<code>?</code>键位就进入了底线命令模式。</p>\n<p>按ESC键退出底线命令模式。</p>\n<h4 id=\"4-1-查找替换\">4.1. 查找替换</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">语句</th>\n<th style=\"text-align:left\">动作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>/word</strong></td>\n<td style=\"text-align:left\">向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?word</td>\n<td style=\"text-align:left\">向上搜索word字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>:n1,n2 s/word1/word2/g</strong></td>\n<td style=\"text-align:left\">n1 与 n2 为数字。在第 n1 与 n2 行之间将 word1 替换为 word2 。特别地，最后一行为<code>$</code>，</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>:n1,n2 s#word1#word2#g</strong></td>\n<td style=\"text-align:left\">效果同上，这个主要用于替换<code>/</code>符号，例如每一行行首添加<code>//</code>，可以这样操作： <code>:1,$ s#^#//#g</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"4-2-文件操作\">4.2. 文件操作</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">按键</th>\n<th style=\"text-align:left\">动作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>:w [filename]</strong></td>\n<td style=\"text-align:left\">将编辑的数据写入到filename文件中，如果不加参数，默认是当前文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:w!</td>\n<td style=\"text-align:left\">若文件属性为『只读』时，强制写入该档案，前提是得有文件的写权限。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>:q 或 ZQ</strong></td>\n<td style=\"text-align:left\">退出vim，如果未保存的内容，该指令执行失败</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>:q!</strong></td>\n<td style=\"text-align:left\">若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>:wq 或 ZZ</strong></td>\n<td style=\"text-align:left\">储存后离开</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:wq!</td>\n<td style=\"text-align:left\">强制储存后离开</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:r [filename]</td>\n<td style=\"text-align:left\">在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:n1,n2 w [filename]</td>\n<td style=\"text-align:left\">将 n1 到 n2 的内容储存成 filename 这个档案。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:! command</td>\n<td style=\"text-align:left\">不退出vim执行command指令，多用于调试脚本。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"4-3-其他功能\">4.3. 其他功能</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">按键</th>\n<th style=\"text-align:left\">动作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>:set nu</strong></td>\n<td style=\"text-align:left\">显示行号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:set nonu</td>\n<td style=\"text-align:left\">取消行号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:sv</td>\n<td style=\"text-align:left\">当前界面打开文件，并呈纵向分布</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:vs</td>\n<td style=\"text-align:left\">当前界面打开文件，并呈横向分布</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:set fileformat=unix</td>\n<td style=\"text-align:left\">由Windows上传到linux的脚本文件，直接执行会报错，需要将其由dos文件格式改unix格式</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"5-扩展的vim功能\">5. 扩展的vim功能</h3>\n<p>当然，如果仅仅只有原生态的功能还不能让vim成为一个好用的ide，扩展功能才是vim的灵魂所在。</p>\n<h2 id=\"参考\">参考</h2>\n<ul>\n<li><a href=\"https://www.runoob.com/linux/linux-vim.html\">菜鸟驿站的vim教程</a></li>\n</ul>\n",
            "tags": [
                "linux",
                "docker",
                "vim",
                "ide"
            ]
        },
        {
            "id": "https://blog.17lai.site/posts/fcdbe493/",
            "url": "https://blog.17lai.site/posts/fcdbe493/",
            "title": "服务器相关资源使用说明",
            "date_published": "1023-03-19T20:24:01.000Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉, 这个密码看着不太对, 请再试试.\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"cd3f39cca291794719fe9799b8a780602545ecdefca95850596b7df9ecb2e6c3\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">您好, 这里需要密码.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "tools",
                "定制服务器"
            ]
        }
    ]
}