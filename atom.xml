<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夜法之书</title>
  
  <subtitle>深度思考，深入生活！</subtitle>
  <link href="https://blog.17lai.site/atom.xml" rel="self"/>
  
  <link href="https://blog.17lai.site/"/>
  <updated>2021-10-12T05:47:51.793Z</updated>
  <id>https://blog.17lai.site/</id>
  
  <author>
    <name>夜法之书</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>通过IPV6访问Qnap NAS中Docker的服务</title>
    <link href="https://blog.17lai.site/nas/2021-10-12-access-the-docker-service-in-qnap-nas-through-ipv6/"/>
    <id>https://blog.17lai.site/nas/2021-10-12-access-the-docker-service-in-qnap-nas-through-ipv6/</id>
    <published>2021-10-12T05:42:55.000Z</published>
    <updated>2021-10-12T05:47:51.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>系统：QTS 4.3.6<br>网络：IPV4 &amp; IPV6<br>Docker: 由Container Station提供</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>通过ipv6地址可以打开NAS的管理页面，但是无法访问Docker对应端口的服务。</p><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>QTS中Docker使用的虚拟交换机网络没有启动IPV6，且无法在虚拟交换机设置中手动启动。<br>这样一来，Docker只监听了tcp4的端口，对于主机上tcp6的端口的访问无法映射到docker容器上。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在主机上开一个tcp6的端口，将其转发到主机上与docker关联的tcp4端口。<br>即：<br>docker(tcp4)–&gt;host(tcp4)–&gt;host(tcp6)</p><ul><li>在qts上安装包管理器：Entware. <a href="https://github.com/Entware/Entware/wiki/Install-on-QNAP-NAS">https://github.com/Entware/Entware/wiki/Install-on-QNAP-NAS</a></li><li>执行opkg update,更新</li><li>安装端口转发工具，这里使用socat：opkg install socat</li><li>设置转发host(tcp6)–&gt;host(tcp4):(socat TCP6-LISTEN:6880,reuseaddr,fork TCP4:127.0.0.1:7880 &amp;)</li><li>大功告成</li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;p&gt;系统：QTS 4.3.6&lt;br&gt;网络：IPV4 &amp;amp; IPV6&lt;br&gt;Docker: 由Container Station提供&lt;/p&gt;</summary>
      
    
    
    
    <category term="nas" scheme="https://blog.17lai.site/categories/nas/"/>
    
    
    <category term="nas" scheme="https://blog.17lai.site/tags/nas/"/>
    
    <category term="docker" scheme="https://blog.17lai.site/tags/docker/"/>
    
    <category term="qnap" scheme="https://blog.17lai.site/tags/qnap/"/>
    
    <category term="ipv6" scheme="https://blog.17lai.site/tags/ipv6/"/>
    
  </entry>
  
  <entry>
    <title>CMake快速入门教程</title>
    <link href="https://blog.17lai.site/linux/2021-10-12-cmake-quick-start-tutorial/"/>
    <id>https://blog.17lai.site/linux/2021-10-12-cmake-quick-start-tutorial/</id>
    <published>2021-10-12T04:25:00.000Z</published>
    <updated>2021-10-12T05:57:43.328Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-cmake简介"><a href="#1-cmake简介" class="headerlink" title="1.cmake简介"></a>1.cmake简介</h2><p>cmake是跨平台的makefile文件生成工具,是为了解决各个平台下面make工具不同造成的makefile文件格式不同的问题.也就是cmake是用来解决跨平台编译问题的.常见的还有autotool工具集，该工具集用于GNU软件协议的makefile文件生成，方便GNU包的编译和安装。</p><h2 id="2-cmake文件编辑规则"><a href="#2-cmake文件编辑规则" class="headerlink" title="2.cmake文件编辑规则"></a>2.cmake文件编辑规则</h2><ul><li>1)<strong>命令不区分大小写，但是变量区分大小写</strong>。</li><li>2)<strong>注释</strong>使用#符号</li><li>3)命令如果有多个参数，互相之间用空格隔开</li></ul><h2 id="3-cmake保留变量"><a href="#3-cmake保留变量" class="headerlink" title="3.cmake保留变量"></a>3.cmake保留变量</h2><p>cmake里面有很多的预定义变量,是程序环境固有的,比如CUDA_NVCC_FLAGS,不同的变量有固定的作用,比如CUDA_NVCC_FLAGS是nvcc的参数list,变量可以使用set命令和list命令进行赋值和追加值,要注意的是变量可能可以有多个值,值与值之间用分号分开,可以使用set(var a b c)给var赋值a b c,还可以使用list命令给var追加删除插入值等,不同的变量有不同的值域,需要查阅<a href="https://cmake.org/documentation/">手册</a></p><h2 id="4-cmake变量引用"><a href="#4-cmake变量引用" class="headerlink" title="4.cmake变量引用"></a>4.cmake变量引用</h2><p>cmake里面变量的取值引用要使用${var}的形式,但是在赋值的时候是不需要的,和shell命令有点相似.</p><h2 id="5-cmake指定Debug和Release版本"><a href="#5-cmake指定Debug和Release版本" class="headerlink" title="5.cmake指定Debug和Release版本"></a>5.cmake指定Debug和Release版本</h2><p>指定Debug和Release一共有三种方法：</p><p>1.使用ADD_COMPILE_OPTIONS()加入-g指定Debug版本.</p><p>2.使用SET( CMAKE_BUILD_TYPE Debug/Rrelease)指定Debug<br>在下面加入：</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token function">SET</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_FLAGS_DEBUG</span> <span class="token string">"$ENV{CXXFLAGS} -O0 -Wall -g2 -ggdb"</span><span class="token punctuation">)</span><span class="token function">SET</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_FLAGS_RELEASE</span> <span class="token string">"$ENV{CXXFLAGS} -O3 -Wall"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面的设置C++编译选项，对于C语言，设置CMAKE_C_FLAGS_DEBUG、CMAKE_._FLAGS_RELEASE变量，一般来说最好两个都设置原因是CMake 中有一个变量 CMAKE_BUILD_TYPE ,可以的取值是 Debug Release等.当这个变量值为 Debug 的时候,CMake 会使用变量 CMAKE_CXX_FLAGS_DEBUG 和 CMAKE_C_FLAGS_DEBUG 中的字符串作为编译选项生成 Makefile</p><p>编译动态库or静态库时，最好通过修改CXXFLAGS和CFLAGS，以支持-fPIC，这个选项有时是默认开启，有时默认关闭，但为了以后的应用，库文件最好都使用-fPIC编译</p><ol start="3"><li>在使用cmake命令时加上-DCMAKE_BUILD_TYPE=Debug/Release</li></ol><h2 id="5-cmake指定生成文件"><a href="#5-cmake指定生成文件" class="headerlink" title="5.cmake指定生成文件"></a>5.cmake指定生成文件</h2><p>CUDA_ADD_LIBRARY()指明目标文件是库文件,CUDA_ADD_EXECUTABLE()指明生成的文件为可执行文件</p><h2 id="6-配置模板"><a href="#6-配置模板" class="headerlink" title="6.配置模板"></a>6.配置模板</h2><p>通常我们要在工程目录下面创建include、src文件夹，include文件夹里面存放头文件，src文件夹里面存放源代码，注意这时候的源代码里面包含头文件的路径应该是“../include/xx.h”，然后在工程根目录下面创建CMakeLists.txt文件，里面写入命令.在编译的时候为了不搞乱工程目录，在工程根目录下面创建build文件夹，在里面使用“cmake ..”命令创建CMakefile,再make即可。</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment">#指定cmake最低版本号</span><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.2</span><span class="token punctuation">)</span><span class="token comment">#指定项目名称</span><span class="token function">PROJECT</span><span class="token punctuation">(</span>Liner_Struct<span class="token punctuation">)</span><span class="token comment">#指定头文件目录，不同目录用空格隔开,目录中有空格可用引号</span><span class="token comment">#如果是相对路径，相对于CMakeLists.txt文件</span><span class="token property">INCLUDE_DIRECTORIES</span><span class="token punctuation">(</span>include<span class="token punctuation">)</span><span class="token comment">#指定源文件目录，DIR_SRCS值自定义变量，下面的命令对其进行了赋值</span><span class="token function">AUX_SOURCE_DIRECTORY</span><span class="token punctuation">(</span>src DIR_SRCS<span class="token punctuation">)</span><span class="token comment">#设置变量用于存放所有的编译文件，</span><span class="token comment">#TEST_LINER_STRUCT是自定义变量，使用SET给其赋值</span><span class="token function">SET</span><span class="token punctuation">(</span>TEST_LINER_STRUCT <span class="token punctuation">${</span>DIR_SRCS<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">#增加编译选项</span><span class="token comment">#判断是否为gcc编译器，如果是，增加编译选项</span><span class="token comment">#c99是c语言的标准，常用的还有c++标准c++11</span><span class="token comment">#下面的命令判断是否编译器是gcc</span><span class="token comment">#message命令是输出信息,例如下面的输出“optional:-std=c99”</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_COMPILER_IS_GNUCXX</span><span class="token punctuation">)</span>    <span class="token function">ADD_COMPILE_OPTIONS</span><span class="token punctuation">(</span>-std=c99<span class="token punctuation">)</span>    <span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"optional:-std=c99"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token variable">CMAKE_COMPILER_IS_GNUCXX</span><span class="token punctuation">)</span><span class="token comment">#配置生成文件</span><span class="token comment">#${PROJECT_NAME}是cmake自带变量，其值和PROJECT()命令指定的一样</span><span class="token comment">#${TEST_LINER_STRUCT}是自定义变量，上文赋值的</span><span class="token function">ADD_EXECUTABLE</span><span class="token punctuation">(</span><span class="token punctuation">${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span> <span class="token punctuation">${</span>TEST_LINER_STRUCT<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-if-else语句"><a href="#7-if-else语句" class="headerlink" title="7.if-else语句"></a>7.<a href="https://cmake.org/cmake/help/v3.0/command/if.html">if-else</a>语句</h2><p>cmake中的if-else语句</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">if</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span>     cmdA     cmdB<span class="token keyword">elseif</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span>      cmdC<span class="token keyword">endif</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最简单得到一个应用</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">if</span><span class="token punctuation">(</span>ARM<span class="token punctuation">)</span>   <span class="token comment">#ARM平台</span><span class="token keyword">else</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#非ARM平台 </span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用cmake -DARM=1 .. 时编译ARM代码，使用cmake -DAMR=0 ..编译非ARM代码</p><h2 id="8-与平台编译器的结合"><a href="#8-与平台编译器的结合" class="headerlink" title="8.与平台编译器的结合"></a>8.与平台编译器的结合</h2><h3 id="8-1windows"><a href="#8-1windows" class="headerlink" title="8.1windows"></a>8.1windows</h3><p>在windows上运行cmake可以生成对应的VS的工程文件，然后使用相应的VS打开工程就可以进行编译。要注意的是如果使用VS2010及其以前的版本，C不支持C99，也就是变量的命名必须放在函数或者域的最前面，不能放在中间，特别麻烦。VS2015在安装后可能还需要打开VS，新建工程时选择VC++可能相关组件还没有安装，如果这时候使用cmake会提示找不到C、C++编译器（类似yuNo CMAKE_CXX_COMPILER could be found）的错误。安装了相关的组件后cmake即不会有错误。</p><h3 id="8-2-为VS2015生成的项目"><a href="#8-2-为VS2015生成的项目" class="headerlink" title="8.2 为VS2015生成的项目"></a>8.2 为VS2015生成的项目</h3><p>打开工程文件后可以看到有3个项目，其中只有一个和我们有直接关系，就是我们在CMakeLists.txt里面定义的PROJECT_NAME,剩下的两个是ALL_BUILD和ZERO_CHECK.</p><p><strong>ZERO_CHECK</strong><br>该目标会检查生成工程的 CMake 配置文件（ CMakeLists.txt ）是否更新。如更新，将运行 CMake 重新生成工程文件。</p><p>如果确信 CMakeLists.txt 不会被更新，或者希望手工运行 CMake 重新生成工程文件，可以在 CMakeLists.txt 配置文件中添加 set(CMAKE_SUPPRESS_REGENERATION FALSE) 命令， ZERO_CHECK 目标将不会生成。</p><p><strong>ALL_BUILD</strong><br>该目标会导致工程中所有项目被构建，类似 Visual Studio 的 Build All 或者 make 的 make all命令。</p><p>转载 <a href="https://lightzhan.xyz/index.php/2020/03/11/cmake-quick-tutorial/">CMake快速入门教程</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-cmake简介&quot;&gt;&lt;a href=&quot;#1-cmake简介&quot; class=&quot;headerlink&quot; title=&quot;1.cmake简介&quot;&gt;&lt;/a&gt;1.cmake简介&lt;/h2&gt;&lt;p&gt;cmake是跨平台的makefile文件生成工具,是为了解决各个平台下面make工具</summary>
      
    
    
    
    <category term="linux" scheme="https://blog.17lai.site/categories/linux/"/>
    
    
    <category term="linux" scheme="https://blog.17lai.site/tags/linux/"/>
    
    <category term="cmake" scheme="https://blog.17lai.site/tags/cmake/"/>
    
    <category term="develop" scheme="https://blog.17lai.site/tags/develop/"/>
    
  </entry>
  
  <entry>
    <title>如何使用tinyMediaManager刮削电影和电视剧，动画，并自动下载字幕</title>
    <link href="https://blog.17lai.site/video/2021-10-11-how-to-scrape-video-whit-tinymediamanager/"/>
    <id>https://blog.17lai.site/video/2021-10-11-how-to-scrape-video-whit-tinymediamanager/</id>
    <published>2021-10-11T11:25:00.000Z</published>
    <updated>2021-10-11T13:18:56.043Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注意使用V3版本，V4版本收费！</p><p>所以升级V3版本即可，不要升级到V4版本！不要升级到V4版本！不要升级到V4版本！</p></blockquote><ul><li>  <strong>Plex</strong>是一款很好用的个人媒体中心软件，但是因为国内网络的原因，使用默认的TMDB刮削器挂出来的效果并不好，要么就是影片信息不正确，要么就是海报不正常显示，实在让人头疼。</li><li>  <strong>tinyMediaManager</strong>是一款电影信息刮削和整理的软件，正好可以和plex配合，完美的解决这一问题。tinyMediaManager在刮削影片的过程中会把影片的海报、演员表、背景图片等等都保存到影片所在文件夹，自动生成电影的nfo信息文件，并对文件和文件夹进行重新命名的操作。在plex设置刮削代理的时候，需要用一款插件可以直接读取nfo的信息，完成刮削，下面把使用方法分享给大家，</li></ul><h2 id="下载和安装tinyMediaManager"><a href="#下载和安装tinyMediaManager" class="headerlink" title="下载和安装tinyMediaManager"></a><strong>下载和安装tinyMediaManager</strong></h2><p><strong>官网下载地址：<a href="www.tinymediamanager.org/download/">https://www.tinymediamanager.org/download/</a></strong></p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011181048.jpeg"></p><h3 id="tmm下载"><a href="#tmm下载" class="headerlink" title="tmm下载"></a>tmm下载</h3><p><strong>下载后直接解压文件夹</strong></p><p>客户端需要java支持，先在电脑安装java</p><p>客户端下载后是一个压缩包，解压之后就可以用</p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011181054.jpeg"></p><p><strong>解压之后打开tinyMediaManager.exe</strong></p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011181101.png" alt="tmm目录"></p><h2 id="TMM设置"><a href="#TMM设置" class="headerlink" title="TMM设置"></a>TMM设置</h2><h3 id="TMM代理设置"><a href="#TMM代理设置" class="headerlink" title="TMM代理设置"></a>TMM代理设置</h3><blockquote><p>重要：很多源都需要代理才能访问。这里正确的配置才能正确的刮削！</p><p>可以调整这里使用的内存，大内存可以极大加速刮削速度。</p></blockquote><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011211402.png"></p><h2 id="电影刮削设置"><a href="#电影刮削设置" class="headerlink" title="电影刮削设置"></a>电影刮削设置</h2><p><strong>进行相关设置。Tmm可以对电影和电视剧的刮削进行分别设置，打开设置后选择电影选项，可以选择分级标准、自动重命名等选项。</strong></p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011181337.png"></p><p>电影信息选项</p><p><strong>点击侧边栏媒体库目录，添加电影目录</strong></p><p><strong>刮削器设置</strong></p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011181107.jpeg"></p><p>选择电影刮削器</p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011181107.png"></p><p>刮削器选项</p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011181114.png"></p><p>nfo选项，建议选择生成两种命名放视的nfo</p><p><strong>图片刮削器选择全选，图片文件名建议两边都选上，会分别生成两组命名格式不同的图片，为了保证plex能读取</strong></p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011181331.png"></p><p>图片命名选项</p><p>Tmm还可以自动下载预告片，字幕。字幕下载时可以输入opensubtitles账户</p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011181115.png"></p><p>字幕下载选项</p><p><strong>重命名规则</strong></p><p>这里重点讲一下重命名规则，刮削完后可以选择对电影文件和文件夹进行重命名，可能对于pt用户重命名可能会影响资源上传，可以不进行重命名操作。</p><p>一般情况下电影刮削出来的信息，title是电影的中文标题名称，originaltitle是电影的原标题名称，一般是英文名称。软件默认的设置是文件和文件夹都命名成title，也就是中文标题，但是我发现这样在后期使用的时候有弊端。英文电影在检索字幕时会用文件名来检索，而用中文名称很多情况下检索不出来，所以这里把文件的命名规则改一下，改成originaltitle，并去掉年份信息的括号，中间连接符改成点，文件名设置成${originaltitle}${- ,edition,}.${year}.${videoFormat}.${audioCodec}的格式。</p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011181121.png"></p><p>电影文件重命名选项</p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011181127.png"></p><p>刮削完的文件夹内文件信息</p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011181323.png"></p><p>刮削完的电影文件夹目录</p><p><strong>电视节目刮削设置类似，如果挂不出来可以用the tvdb来刮削。</strong></p><p><strong>tmm有时候会出现网络不稳定，刮不到的情况，可以修改host解决</strong></p><p>改host 在host文件最后加一行13.224.161.90 <a href="https://link.zhihu.com/?target=http://api.themoviedb.org">http://api.themoviedb.org</a></p><p><strong>退出设置，开始刮削</strong></p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011181317.png"></p><p>更新电影源</p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011181128.jpeg"></p><p>选中要刮削的电影自动匹配</p><h3 id="电影手动刮削"><a href="#电影手动刮削" class="headerlink" title="电影手动刮削"></a>电影手动刮削</h3><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011183942.png"></p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011184131.png"></p><h2 id="电视剧-amp-动画手动刮削"><a href="#电视剧-amp-动画手动刮削" class="headerlink" title="电视剧&amp;动画手动刮削"></a>电视剧&amp;动画手动刮削</h2><h3 id="电视剧元数据刮削"><a href="#电视剧元数据刮削" class="headerlink" title="电视剧元数据刮削"></a>电视剧元数据刮削</h3><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011184909.png"></p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011185747.png"></p><h3 id="季和集元数据刮削前整理"><a href="#季和集元数据刮削前整理" class="headerlink" title="季和集元数据刮削前整理"></a>季和集元数据刮削前整理</h3><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011185049.png"></p><h3 id="刮削季元素"><a href="#刮削季元素" class="headerlink" title="刮削季元素"></a>刮削季元素</h3><p>整理好正确的季和集之后，才能正确的刮削季元素</p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011185146.png"></p><h3 id="TMM整理完效果"><a href="#TMM整理完效果" class="headerlink" title="TMM整理完效果"></a>TMM整理完效果</h3><blockquote><p>这里用海贼王做展示，一个季和集都特别多的剧。</p></blockquote><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011185448.png"></p><h2 id="TMM目录重命名整理"><a href="#TMM目录重命名整理" class="headerlink" title="TMM目录重命名整理"></a>TMM目录重命名整理</h2><blockquote><p>刮削完后，可以重命名视频文件，并进行目录整理。</p></blockquote><p>方法1</p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011181133.jpeg"></p><p>方法2</p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011184315.png"></p><p>等所有电影的信息刮削完后，选择重命名和清理，这样就完成了刮削的操作。以后下载了新电影，直接打开tmm,更新源之后直接选择搜索未刮削过的电影完成刮削。刮削出来的信息kodi，emby等软件也都能用。</p><h2 id="Plex设置"><a href="#Plex设置" class="headerlink" title="Plex设置"></a>Plex设置</h2><h3 id="plex插件的安装和设置"><a href="#plex插件的安装和设置" class="headerlink" title="plex插件的安装和设置"></a><strong>plex插件的安装和设置</strong></h3><p><strong>下载plex的插件</strong></p><p>插件XBMCnfoMoviesImporter和XBMCnfoTVImporter分别是刮削电影和电视剧的插件</p><p>下载地址：<a href="https://github.com/gboudreau/XBMCnfoMoviesImporter.bundle">https://github.com/gboudreau/XBMCnfoMoviesImporter.bundle</a></p><p>如果不能下载的话可以联系我获取，还有几个很好用的plex插件</p><p>下载完插件后就需要把插件解压到plex的插件目录：C:\Users\用户名\AppData\Local\Plex Media Server\Plug-ins</p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011181134.png"></p><p>plex插件目录</p><p>注意解压后要把文件夹名后边的master去掉。</p><p><strong>plex代理设置</strong></p><p>Plex的代理设置就是选择刮削电影所用的刮削器及优先级。</p><p>装好插件后重启plex，进行plex的设置。在代理设置中选择XBMCnfoMoviesImporter，把它的优先级调到最高，第二个可以设置成字幕插件。</p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011181140.jpeg"></p><p><strong>设置电影资料库的刮削器代理</strong></p><p>点击设置界面下方管理里边的资料库，选择电影资料夹的高级设置，设置如下</p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011181140.png"><img src="https://cimg1.17lai.site/data/2021/10/1120211011181146.png"></p><p>plex代理设置</p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011181152.png"></p><p><strong>刷新电影源数据资料</strong></p><p>设置完成后就可以在plex主页对电影文件夹刷新元数据了。等待刷新完后就可以载入所有的电影信息了。</p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011181152.jpeg"></p><p>管理资料库-刷新电影元数据</p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011181153.jpeg"></p><p>更新后的电影信息</p><p>采用类似的设置，电视剧信息也能刮削。</p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011181159.jpeg"></p><p>电视剧更新后的信息</p><h2 id="Emby设置"><a href="#Emby设置" class="headerlink" title="Emby设置"></a>Emby设置</h2><blockquote><p>Emby内置刮削工具，但是速度较慢。下面设置基于外部刮削工具TMM，所以没有勾选Emby刮削源！</p></blockquote><p>最终效果演示</p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011190035.png" alt="最终效果"></p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011190347.png"></p><h3 id="开始设置"><a href="#开始设置" class="headerlink" title="开始设置"></a>开始设置</h3><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011181946.png"></p><h3 id="新增媒体库"><a href="#新增媒体库" class="headerlink" title="新增媒体库"></a>新增媒体库</h3><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011182142.png"></p><h3 id="已有媒体库属性设置"><a href="#已有媒体库属性设置" class="headerlink" title="已有媒体库属性设置"></a>已有媒体库属性设置</h3><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011182244.png"></p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011182350.png"></p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011183115.png"></p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011183157.png"></p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011183336.png"></p><h3 id="Emby字幕设置"><a href="#Emby字幕设置" class="headerlink" title="Emby字幕设置"></a>Emby字幕设置</h3><p>字幕下载设置，字幕下载工具见后面的[字幕下载]章节</p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011182554.png"></p><h2 id="字幕下载"><a href="#字幕下载" class="headerlink" title="字幕下载"></a><strong>字幕下载</strong></h2><p>想要较好的自动下载字幕，最好用前面介绍的tmm刮削改名之后再使用下面工具。</p><h3 id="subfinder-自动下载字幕"><a href="#subfinder-自动下载字幕" class="headerlink" title="subfinder 自动下载字幕"></a>subfinder 自动下载字幕</h3><ul><li>Docker： <a href="https://hub.docker.com/r/superng6/subfinder">superng6/subfinder</a></li></ul><p>下载完成，刮削后的目录，挂载到subfinder的media目录，就会自动下载字幕。</p><p>字幕下载对电影，英文剧集支持较好。对于一些tv，动画手动下载字幕会更好一些。</p><p>注意：官方的配置文件有问题，时效问题。修改URL到最新即可。</p><h3 id="chinesesubfinder"><a href="#chinesesubfinder" class="headerlink" title="chinesesubfinder"></a>chinesesubfinder</h3><ul><li>Docker： <a href="https://hub.docker.com/r/allanpk716/chinesesubfinder">allanpk716/chinesesubfinder</a></li><li>新开发的中文字幕查找工具，上面那个很久没更新了，这个刚出来。使用nfo里面刮削出来的文件名来匹配字幕。所以就原理来说，这个字幕匹配更准确。</li></ul><h3 id="bazarr"><a href="#bazarr" class="headerlink" title="bazarr"></a>bazarr</h3><ul><li>Docker：<a href="https://hub.docker.com/r/linuxserver/bazarr">linuxserver/bazarr</a></li><li>字幕下载管理，配合sonarr, radarr 使用效果更好。对于英文剧集命名规范的支持较好，比如<code>[name]S01E01</code></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/112167546?from_voters_page=true">利用tinyMediaManager刮削影片，解决家用nas软件plex电影墙的问题</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;注意使用V3版本，V4版本收费！&lt;/p&gt;
&lt;p&gt;所以升级V3版本即可，不要升级到V4版本！不要升级到V4版本！不要升级到V4版本！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Plex&lt;/strong&gt;是一款很好用的个</summary>
      
    
    
    
    <category term="video" scheme="https://blog.17lai.site/categories/video/"/>
    
    
    <category term="刮削" scheme="https://blog.17lai.site/tags/%E5%88%AE%E5%89%8A/"/>
    
    <category term="tmm" scheme="https://blog.17lai.site/tags/tmm/"/>
    
    <category term="字幕" scheme="https://blog.17lai.site/tags/%E5%AD%97%E5%B9%95/"/>
    
    <category term="emby" scheme="https://blog.17lai.site/tags/emby/"/>
    
    <category term="plex" scheme="https://blog.17lai.site/tags/plex/"/>
    
  </entry>
  
  <entry>
    <title>如何使用media Go,MusicBrainz,Mp3tag工具刮削音乐 整理音乐资料库</title>
    <link href="https://blog.17lai.site/music/2021-10-11-how-to-scrape-music-idtag/"/>
    <id>https://blog.17lai.site/music/2021-10-11-how-to-scrape-music-idtag/</id>
    <published>2021-10-11T01:25:00.000Z</published>
    <updated>2021-10-11T12:25:08.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>动画、电影、剧集可使用TinyMediaManager生成nfo元数据文件，多媒体软件解析生成海报墙展示丰富的影片信息。</p><p>而音乐文件则是将歌名、歌手、专辑、发行时间、歌词、封面图等信息写入文件标签，称为ID3 Tag 。桌面软件、多媒体管理软件（Foobar2000/Plex/Emby/Jellyfin等）都能解析展现歌曲信息。ID3标签是MP3音乐档案中的歌曲附加讯息，它能够在MP3中附加曲子的演出者、作者以及其它类别资讯，方便众多乐曲的管理。缺少ID3标签并不会影响 MP3的播放，但若没有的话，管理音乐文件也会相当的麻烦。  </p><h2 id="刮削效果"><a href="#刮削效果" class="headerlink" title="刮削效果"></a>刮削效果</h2><h3 id="Foobar2000读取效果："><a href="#Foobar2000读取效果：" class="headerlink" title="Foobar2000读取效果："></a>Foobar2000读取效果：</h3><p> <img src="https://cimg1.17lai.site/data/2021/10/1120211011173843.jpeg">   </p><h3 id="Jellyfin读取效果："><a href="#Jellyfin读取效果：" class="headerlink" title="Jellyfin读取效果："></a>Jellyfin读取效果：</h3><p> <img src="https://cimg1.17lai.site/data/2021/10/1120211011173846.jpeg"> </p><h2 id="Mp3tag"><a href="#Mp3tag" class="headerlink" title="Mp3tag"></a>Mp3tag</h2><blockquote><p>纯手工修改，开源工具。</p></blockquote><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011174402.png" alt="Mp3tag"></p><h2 id="Media-Go"><a href="#Media-Go" class="headerlink" title="Media Go"></a>Media Go</h2><blockquote><p>不要使用最新版！老版本才有我们最需要的功能。</p></blockquote><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011174641.png" alt="Media Go"></p><h3 id="添加媒体库"><a href="#添加媒体库" class="headerlink" title="添加媒体库"></a>添加媒体库</h3><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011175356.png" alt="Media Go"></p><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011175429.png"></p><h3 id="自动获取属性"><a href="#自动获取属性" class="headerlink" title="自动获取属性"></a>自动获取属性</h3><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011175852.png"></p><h3 id="歌曲属性修改"><a href="#歌曲属性修改" class="headerlink" title="歌曲属性修改"></a>歌曲属性修改</h3><p><img src="https://cimg1.17lai.site/data/2021/10/1120211011175602.png"></p><h2 id="MusicBrainz"><a href="#MusicBrainz" class="headerlink" title="MusicBrainz"></a>MusicBrainz</h2><blockquote><ul><li>MusicBrainz官网：<a href="https://musicbrainz.org/">https://musicbrainz.org/</a>  </li><li>MusicBrainz Picard下载地址：<a href="https://picard.musicbrainz.org/">https://picard.musicbrainz.org/</a></li></ul></blockquote><p> <img src="https://cimg1.17lai.site/data/2021/10/1120211011173854.jpeg" alt="MusicBrainz"><br>MusicBrainz Picard可以修改音乐的Tag标签信息，根据标签重命名文件。它的数据来源于非营利互联网音乐专辑数据库MusicBrainz项目，歌曲资源非常丰富。尤其它能根据声纹（音频指纹）识别Mp3文件进行匹配取信息，匹配率极高。不管是英文、中文歌曲，还是录音室版本、演唱会版本，都能很好地匹配出来。<br>支持MP3、FLAC、OGG、M4A、WMA、WAV等主流的音频格式，wav,ape格式不支持，需要要转换成支持的格式。<br>写入前后对比：<br> <img src="https://cimg1.17lai.site/data/2021/10/1120211011173901.jpeg"> </p><p><strong>MusicBrainz Picard使用教程：</strong><br>将音乐文件/文件夹拖入左侧窗口，点上方“查询“按钮，在MusicBrainz数据库里搜索对应音乐。</p><p> <img src="https://cimg1.17lai.site/data/2021/10/1120211011173901.png"><br>如果搜索不到，点击”扫描“，使用声纹匹配，准确度更高。<br> <img src="https://cimg1.17lai.site/data/2021/10/1120211011173907.png"><br>如果以上两种方法都搜索不到，或者添加的文件名变成乱码，右击”查找相似的音轨“<br> <img src="https://cimg1.17lai.site/data/2021/10/1120211011173942.png"><br>手动输入歌曲名字，搜索，选择正确的歌曲信息，载入Picard。<br> <img src="https://cimg1.17lai.site/data/2021/10/1120211011173914.png"> </p><p>右侧窗口载入专辑信息。展开列表，绿色方块的就是匹配成功的音乐。底部窗口展示文件原始标签信息和MusicBrainz网站上的信息对照。</p><p> <img src="https://cimg1.17lai.site/data/2021/10/1120211011173948.png"><br>如果匹配的不是正确的专辑信息，右击”查找相似的音轨“，选择正确的专辑信息载入Picard。<br>如果搜索出了多张专辑，可点击错误的专辑拖动到目标专辑上完成匹配，省的一个一个文件的修改。<br> <img src="https://cimg1.17lai.site/data/2021/10/1120211011173955.png"> </p><p>最后点“保存”，将标签信息写入音乐文件。</p><p> <img src="https://cimg1.17lai.site/data/2021/10/1120211011174018.png"> </p><p><strong>如何重命名文件：</strong><br>菜单栏-选项-勾选“重命名文件”，保存的时候会同时写入信息+重命名。</p><p> <img src="https://cimg1.17lai.site/data/2021/10/1120211011174002.png"><br>默认设置是：序号 歌名.mp3，适合一个专辑一个文件夹使用。<br>如果是单文件的话要去创建命名规则，选项-正在重命名文件-保存时重命名文件，填写命名规则。<br> <img src="https://cimg1.17lai.site/data/2021/10/1120211011173929.jpeg"></p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul><li><a href="http://www.92nas.com/forum.php?mod=viewthread&amp;tid=115">使用MusicBrainz Picard刮削音乐 整理音乐资料库</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;动画、电影、剧集可使用TinyMediaManager生成nfo元数据文件，多媒体软件解析生成海报墙展示丰富的影片信息。&lt;/p&gt;
&lt;p&gt;而音</summary>
      
    
    
    
    <category term="music" scheme="https://blog.17lai.site/categories/music/"/>
    
    
    <category term="music" scheme="https://blog.17lai.site/tags/music/"/>
    
    <category term="刮削" scheme="https://blog.17lai.site/tags/%E5%88%AE%E5%89%8A/"/>
    
    <category term="MusicBrainz" scheme="https://blog.17lai.site/tags/MusicBrainz/"/>
    
    <category term="mp3tag" scheme="https://blog.17lai.site/tags/mp3tag/"/>
    
  </entry>
  
  <entry>
    <title>http 错误代码表</title>
    <link href="https://blog.17lai.site/web/2021-10-06-http-error-code-table/"/>
    <id>https://blog.17lai.site/web/2021-10-06-http-error-code-table/</id>
    <published>2021-10-06T11:25:00.000Z</published>
    <updated>2021-10-06T12:57:52.876Z</updated>
    
    <content type="html"><![CDATA[<p>所有 HTTP 状态代码及其定义。<br>　代码&nbsp;&nbsp;指示&nbsp;&nbsp;<br>2xx&nbsp;&nbsp;成功&nbsp;&nbsp;<br>200&nbsp;&nbsp;正常；请求已完成。&nbsp;&nbsp;<br>201&nbsp;&nbsp;正常；紧接 POST 命令。&nbsp;&nbsp;<br>202&nbsp;&nbsp;正常；已接受用于处理，但处理尚未完成。&nbsp;&nbsp;<br>203&nbsp;&nbsp;正常；部分信息 — 返回的信息只是一部分。&nbsp;&nbsp;<br>204&nbsp;&nbsp;正常；无响应 — 已接收请求，但不存在要回送的信息。&nbsp;&nbsp;<br>3xx&nbsp;&nbsp;重定向&nbsp;&nbsp;<br>301&nbsp;&nbsp;已移动 — 请求的数据具有新的位置且更改是永久的。&nbsp;&nbsp;<br>302&nbsp;&nbsp;已找到 — 请求的数据临时具有不同 URI。&nbsp;&nbsp;<br>303&nbsp;&nbsp;请参阅其它 — 可在另一 URI 下找到对请求的响应，且应使用 GET 方法检索此响应。&nbsp;&nbsp;<br>304&nbsp;&nbsp;未修改 — 未按预期修改文档。&nbsp;&nbsp;<br>305&nbsp;&nbsp;使用代理 — 必须通过位置字段中提供的代理来访问请求的资源。&nbsp;&nbsp;<br>306&nbsp;&nbsp;未使用 — 不再使用；保留此代码以便将来使用。&nbsp;&nbsp;<br>4xx&nbsp;&nbsp;客户机中出现的错误&nbsp;&nbsp;<br>400&nbsp;&nbsp;错误请求 — 请求中有语法问题，或不能满足请求。&nbsp;&nbsp;<br>401&nbsp;&nbsp;未授权 — 未授权客户机访问数据。&nbsp;&nbsp;<br>402&nbsp;&nbsp;需要付款 — 表示计费系统已有效。&nbsp;&nbsp;<br>403&nbsp;&nbsp;禁止 — 即使有授权也不需要访问。&nbsp;&nbsp;<br>404&nbsp;&nbsp;找不到 — 服务器找不到给定的资源；文档不存在。&nbsp;&nbsp;<br>407&nbsp;&nbsp;代理认证请求 — 客户机首先必须使用代理认证自身。&nbsp;&nbsp;<br>415&nbsp;&nbsp;介质类型不受支持 — 服务器拒绝服务请求，因为不支持请求实体的格式。&nbsp;&nbsp;<br>5xx&nbsp;&nbsp;服务器中出现的错误&nbsp;&nbsp;<br>500&nbsp;&nbsp;内部错误 — 因为意外情况，服务器不能完成请求。&nbsp;&nbsp;<br>501&nbsp;&nbsp;未执行 — 服务器不支持请求的工具。&nbsp;&nbsp;<br>502&nbsp;&nbsp;错误网关 — 服务器接收到来自上游服务器的无效响应。&nbsp;&nbsp;<br>503&nbsp;&nbsp;无法获得服务 — 由于临时过载或维护，服务器无法处理请求。  </p><hr><p>HTTP&nbsp;400&nbsp;-&nbsp;请求无效&nbsp;<br>HTTP&nbsp;401.1&nbsp;-&nbsp;未授权：登录失败&nbsp;<br>HTTP&nbsp;401.2&nbsp;-&nbsp;未授权：服务器配置问题导致登录失败&nbsp;<br>HTTP&nbsp;401.3&nbsp;-&nbsp;ACL&nbsp;禁止访问资源&nbsp;<br>HTTP&nbsp;401.4&nbsp;-&nbsp;未授权：授权被筛选器拒绝&nbsp;<br>HTTP&nbsp;401.5&nbsp;-&nbsp;未授权：ISAPI&nbsp;或&nbsp;CGI&nbsp;授权失败&nbsp;&nbsp;<br>HTTP&nbsp;403&nbsp;-&nbsp;禁止访问&nbsp;<br>HTTP&nbsp;403&nbsp;-&nbsp;对&nbsp;Internet&nbsp;服务管理器&nbsp;(HTML)&nbsp;的访问仅限于&nbsp;Localhost&nbsp;<br>HTTP&nbsp;403.1&nbsp;禁止访问：禁止可执行访问&nbsp;<br>HTTP&nbsp;403.2&nbsp;-&nbsp;禁止访问：禁止读访问&nbsp;<br>HTTP&nbsp;403.3&nbsp;-&nbsp;禁止访问：禁止写访问&nbsp;<br>HTTP&nbsp;403.4&nbsp;-&nbsp;禁止访问：要求&nbsp;SSL&nbsp;<br>HTTP&nbsp;403.5&nbsp;-&nbsp;禁止访问：要求&nbsp;SSL&nbsp;128&nbsp;<br>HTTP&nbsp;403.6&nbsp;-&nbsp;禁止访问：IP&nbsp;地址被拒绝&nbsp;<br>HTTP&nbsp;403.7&nbsp;-&nbsp;禁止访问：要求客户证书&nbsp;<br>HTTP&nbsp;403.8&nbsp;-&nbsp;禁止访问：禁止站点访问&nbsp;<br>HTTP&nbsp;403.9&nbsp;-&nbsp;禁止访问：连接的用户过多&nbsp;<br>HTTP&nbsp;403.10&nbsp;-&nbsp;禁止访问：配置无效&nbsp;<br>HTTP&nbsp;403.11&nbsp;-&nbsp;禁止访问：密码更改&nbsp;<br>HTTP&nbsp;403.12&nbsp;-&nbsp;禁止访问：映射器拒绝访问&nbsp;<br>HTTP&nbsp;403.13&nbsp;-&nbsp;禁止访问：客户证书已被吊销&nbsp;<br>HTTP&nbsp;403.15&nbsp;-&nbsp;禁止访问：客户访问许可过多&nbsp;<br>HTTP&nbsp;403.16&nbsp;-&nbsp;禁止访问：客户证书不可信或者无效&nbsp;<br>HTTP&nbsp;403.17&nbsp;-&nbsp;禁止访问：客户证书已经到期或者尚未生效&nbsp;<br>HTTP&nbsp;404.1&nbsp;-&nbsp;无法找到&nbsp;Web&nbsp;站点&nbsp;<br>HTTP&nbsp;404&nbsp;-&nbsp;无法找到文件&nbsp;<br>HTTP&nbsp;405&nbsp;-&nbsp;资源被禁止&nbsp;<br>HTTP&nbsp;406&nbsp;-&nbsp;无法接受&nbsp;<br>HTTP&nbsp;407&nbsp;-&nbsp;要求代理身份验证&nbsp;<br>HTTP&nbsp;410&nbsp;-&nbsp;永远不可用&nbsp;<br>HTTP&nbsp;412&nbsp;-&nbsp;先决条件失败&nbsp;<br>HTTP&nbsp;414&nbsp;-&nbsp;请求&nbsp;-&nbsp;URI&nbsp;太长&nbsp;<br>HTTP&nbsp;500&nbsp;-&nbsp;内部服务器错误&nbsp;<br>HTTP&nbsp;500.100&nbsp;-&nbsp;内部服务器错误&nbsp;-&nbsp;ASP&nbsp;错误&nbsp;<br>HTTP&nbsp;500-11&nbsp;服务器关闭&nbsp;<br>HTTP&nbsp;500-12&nbsp;应用程序重新启动&nbsp;<br>HTTP&nbsp;500-13&nbsp;-&nbsp;服务器太忙&nbsp;<br>HTTP&nbsp;500-14&nbsp;-&nbsp;应用程序无效&nbsp;<br>HTTP&nbsp;500-15&nbsp;-&nbsp;不允许请求&nbsp;global.asa&nbsp;<br>Error&nbsp;501&nbsp;-&nbsp;未实现&nbsp;<br>HTTP&nbsp;502&nbsp;-&nbsp;网关错误&nbsp;</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;所有 HTTP 状态代码及其定义。&lt;br&gt;　代码&amp;nbsp;&amp;nbsp;指示&amp;nbsp;&amp;nbsp;&lt;br&gt;2xx&amp;nbsp;&amp;nbsp;成功&amp;nbsp;&amp;nbsp;&lt;br&gt;200&amp;nbsp;&amp;nbsp;正常；请求已完成。&amp;nbsp;&amp;nbsp;&lt;br&gt;201&amp;nbsp;&amp;</summary>
      
    
    
    
    <category term="web" scheme="https://blog.17lai.site/categories/web/"/>
    
    
    <category term="web" scheme="https://blog.17lai.site/tags/web/"/>
    
    <category term="http" scheme="https://blog.17lai.site/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>私人在线音乐服务器搭建与使用介绍</title>
    <link href="https://blog.17lai.site/music/2021-10-06-private-music-service/"/>
    <id>https://blog.17lai.site/music/2021-10-06-private-music-service/</id>
    <published>2021-10-06T01:25:00.000Z</published>
    <updated>2021-10-12T10:26:04.670Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在线云音乐"><a href="#在线云音乐" class="headerlink" title="在线云音乐"></a>在线云音乐</h2><p>私人云音乐</p><div class="admonition note"><p class="admonition-title">研究学习使用</p><p>不对外公开发布，研究学习用。</p></div><div class="spoiler collapsed">    <div class="spoiler-title">        点击显/隐登录方法    </div>    <div class="spoiler-content">        <p>用户名密码base64编码</p><pre class="line-numbers language-base64" data-language="base64"><code class="language-base64">55So5oi35ZCN5a+G56CB6YO95pivMTdsYWk=<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>base64解密: <a href="http://encode.chahuo.com/">在线加密解密</a></p>    </div></div><p><a href="https://musicplayer.17lai.site/"><strong>入口</strong></a></p><blockquote><ul><li>公开在线云音乐服务网页版。</li><li>可以与网易云音乐UID同步！</li><li><a href="https://hub.docker.com/r/oldiy/music-player-docker">DockerHub</a></li></ul></blockquote><p><img src="https://cimg1.17lai.site/data/2021/10/0920211009174442.png" alt="在线云音乐入口"></p><p><img src="https://cimg1.17lai.site/data/2021/10/1220211012022352.png" alt="播放界面"></p><p>与网易云同步</p><p><img src="https://cimg1.17lai.site/data/2021/10/0920211009174557.png"></p><p>网易云UID在登陆 <a href="https://music.163.com/">https://music.163.com/</a> 后 点击右上角图标的我的主页 <a href="https://music.163.com/#/user/home?id=617xxxxx0">https://music.163.com/#/user/home?id=617xxxxx0</a></p><p>home?id= 后面的数字就是你的UID。登录后，可以同步个人列表！</p><h2 id="私人音乐服务器"><a href="#私人音乐服务器" class="headerlink" title="私人音乐服务器"></a>私人音乐服务器</h2><p><a href="https://music.17lai.site/"><strong>入口</strong></a></p><blockquote><ul><li>所有音乐作者，专辑，演唱者元数据刮削。</li><li>rclone挂载webdav网盘存储音乐文件。</li><li>cloudflare parterner加速。</li><li>私人使用，不对外公开。</li></ul></blockquote><h2 id="在线音乐播放"><a href="#在线音乐播放" class="headerlink" title="在线音乐播放"></a>在线音乐播放</h2><blockquote><ul><li>SelfHost 支持。Docker 部署！</li><li>Github: <a href="https://github.com/linuxserver/docker-mstream">Mstream docker</a>。</li><li>浏览器界面支持。</li></ul></blockquote><p><img src="https://cimg1.17lai.site/data/2021/10/0620211006015739.png" alt="私人音乐服务"></p><h2 id="支持DJ模式"><a href="#支持DJ模式" class="headerlink" title="支持DJ模式"></a>支持DJ模式</h2><blockquote><ul><li>在音乐库中随机选择音乐播放。</li><li>选择症患者救星。</li></ul></blockquote><p><img src="https://cimg1.17lai.site/data/2021/10/0620211006020713.png" alt="DJ模式"></p><h2 id="Android支持"><a href="#Android支持" class="headerlink" title="Android支持"></a>Android支持</h2><p><img src="https://cimg1.17lai.site/data/2021/10/0620211006020403.png" alt="Android支持"></p><h2 id="其它特性"><a href="#其它特性" class="headerlink" title="其它特性"></a>其它特性</h2><blockquote><ul><li>转码支持</li><li>遥控器支持</li><li>播放列表</li><li>等等</li></ul></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;在线云音乐&quot;&gt;&lt;a href=&quot;#在线云音乐&quot; class=&quot;headerlink&quot; title=&quot;在线云音乐&quot;&gt;&lt;/a&gt;在线云音乐&lt;/h2&gt;&lt;p&gt;私人云音乐&lt;/p&gt;
&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonitio</summary>
      
    
    
    
    <category term="music" scheme="https://blog.17lai.site/categories/music/"/>
    
    
    <category term="docker" scheme="https://blog.17lai.site/tags/docker/"/>
    
    <category term="music" scheme="https://blog.17lai.site/tags/music/"/>
    
    <category term="mstream" scheme="https://blog.17lai.site/tags/mstream/"/>
    
    <category term="selfhost" scheme="https://blog.17lai.site/tags/selfhost/"/>
    
  </entry>
  
  <entry>
    <title>解决Thinkpad笔记本喇叭破音问题！</title>
    <link href="https://blog.17lai.site/notebook/2021-10-05-repair-thinkpad-cracking-voice/"/>
    <id>https://blog.17lai.site/notebook/2021-10-05-repair-thinkpad-cracking-voice/</id>
    <published>2021-10-05T01:25:00.000Z</published>
    <updated>2021-10-07T11:47:01.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>主力笔记本笔记本播放音乐再次出现破音，换了几首音乐后问题依旧，前后对比强烈。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>从几年前上一次维修经验来看，应该是喇叭老化破裂了！拆机查看，发现的确事喇叭破裂。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>如是，网购了一个新喇叭，拆机，换上，完美解决问题！</p><p>喇叭施压后，能明显看到断裂痕迹。这样的喇叭音色就会出现明显的破音！如下图所示。</p><p><img src="https://cimg1.17lai.site/data/2021/10/0520211005175831.jpg" alt="喇叭破裂施压图"></p><p><img src="https://cimg1.17lai.site/data/2021/10/0520211005175843.jpg" alt="喇叭破裂未施压图"></p><blockquote><p>这已经是这台笔记本第二次出现喇叭破裂问题了！  感觉喇叭材料或者工艺有问题。</p><p>型号：Thinkpad T4X0S </p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;主力笔记本笔记本播放音乐再次出现破音，换了几首音乐后问题依旧，前后对比强烈。&lt;/p&gt;
&lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; c</summary>
      
    
    
    
    <category term="notebook" scheme="https://blog.17lai.site/categories/notebook/"/>
    
    
    <category term="thinkpad" scheme="https://blog.17lai.site/tags/thinkpad/"/>
    
    <category term="sound" scheme="https://blog.17lai.site/tags/sound/"/>
    
    <category term="speaker" scheme="https://blog.17lai.site/tags/speaker/"/>
    
  </entry>
  
  <entry>
    <title>从文学的角度，分析韩红的《天亮了》</title>
    <link href="https://blog.17lai.site/music/2021-10-03-music-analysis-for-hanhong-tianliangle/"/>
    <id>https://blog.17lai.site/music/2021-10-03-music-analysis-for-hanhong-tianliangle/</id>
    <published>2021-10-02T16:25:00.000Z</published>
    <updated>2021-10-05T11:02:08.371Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>精品分析： 原作：石晶兰 <a href="https://tieba.baidu.com/p/5313070309?red_tag=2537504175">短文吧</a></p><p>再做个传送门： <a href="https://www.baidu.com/s?ie=UTF-8&amp;wd=%E9%9F%A9%E7%BA%A2%20%E5%A4%A9%E4%BA%AE%E4%BA%86">天亮了</a>，听歌时，关灯，准备纸巾。</p></blockquote><h2 id="先分析结构。"><a href="#先分析结构。" class="headerlink" title="先分析结构。"></a>先分析结构。</h2><p>看歌词。</p><p>那是一个秋天，风儿那么缠绵，<br>让我想起他们那双无助的眼。<br>就在那美丽风景相伴的地方，<br>我听到一声巨响震彻山谷。<br>就是那个秋天，再看不到爸爸的脸。<br>他用他的双肩，托起我重生的起点。<br>黑暗中泪水沾满了双眼，<br>不要离开不要伤害。</p><p>共八行，等于两个四行。<br>两个四行一一对应，前三行，旋律基本是相同的。只有最后一行，为了与后面衔接，所以不同。<br>两个四行的布置，等于是一种重复。<br>这样的重要，在文学结构上，常见于起承。<br>但歌，相当于诗。囿于篇幅，在结构上，通常会有所缺失。起承两者，一般缺失的，都是起。那样的做法，也就是直接叙事，存在让受众猝不及防的弊病。<br>然后，《天亮了》并不是。<br>“那是一个秋天，风儿那么缠绵”和“就是那个秋天”分明是起。<br>所以，《天亮了》并没有进行文学结构上的省略。<br>“那是一个秋天，风儿那么缠绵”是起，接紧着的三行歌词，自然就是承了。<br>那么，第五行“就是那个秋天”怎么又来一个起呢？<br>自然是因为篇幅太短，叙事不够（前面承得不够），所以，还需要再承一下。<br>不能够不要第五行的起，直接往下写吗？<br>真要说的话，其实也能。不过，再加四行承，真的就能把事情说清楚吗？<br>显然，韩红想要表达的东西很多，她认为，不能。<br>仅靠精练语言，明显是不够的，还需要换角度陈述。<br>第五行的再起，实际上，就是为后面的换角度承，打基础的。<br>这种写法，也是有先例的。请看邓丽君《相见在明天》歌词：<br>记得我俩初相见，<br>风吹花儿飞满天。<br>你说我的笑容像花朵，<br>比那花儿更娇艳。<br>我还记得那一天，<br>送你送到小河边。<br>手牵着手呀心里有千言，<br>相对却无言。<br>跟《天亮了》一样，《相见在明天》也是两个四行，也是起承起承。<br>并且，两起两承，还跟诗词的押韵一样，其重复，不仅有加深印象的作用，更有共鸣回旋的作用，正是唐陈子昂所说的“音情顿挫”的顿挫，极大的提升了作品的美感，让受众的接受度大大提高，</p><h2 id="继续看《天亮了》歌词："><a href="#继续看《天亮了》歌词：" class="headerlink" title="继续看《天亮了》歌词："></a>继续看《天亮了》歌词：</h2><p>我看到爸爸妈妈就这么走远，<br>留下我在这陌生的人世间。<br>不知道未来还会有什么风险。<br>我想要紧紧抓住他的手。<br>妈妈告诉我希望还会有。<br>看到太阳出来妈妈笑了。<br>天亮了。</p><p>六行都是转。具体在这里，自然不是转折，而是高那个潮。</p><p>此处值得一说的是合，只有三个字“天亮了”。<br>这三个字，正好也是这首歌的歌名。<br>但是这三个字表达的，到底是什么意思、什么情感呢？</p><p>题都城南庄/唐/崔护<br>去年今日此门中，人面桃花相映红。<br>人面不知何处去，桃花依旧笑春风。</p><p>不难看出，最后一句“桃花依旧笑春风”跟前面三句的叙述，是接不上的。<br>去年这儿，有人面有桃花。今年这儿人面没有了，接下来说的通常是：还真是让人怀念啊。<br>俗吗？的确俗。并且，还不仅仅是俗，还存在因为什么而怀念那个姑娘的严重问题。<br>动机不纯的话，写出来就会玷污那个姑娘。动机纯粹，只是单纯的对美好事物的欣赏，写出来的话，又有自夸之嫌。<br>还真是不好写啊。<br>不好写，干脆就不写，另起一笔：“桃花依旧笑春风”。究竟表达的是什么样的滋味，让受众自己去想。</p><p>《天亮了》末尾的合“天亮了”，就是“桃花依旧笑春风”这种表现手法。太多的感情，千言万语，加总在一起，实在难以挽上疙瘩。于是，就另起一行，来了句看似关系不大的“天亮了”，让一切，尽在无言中。<br>不同的受众，会有不同的感受。因而这种让受众自己去想的结尾，总是余味无穷。</p><p>文学结构分析，就到这儿。第二段的结构跟第一段相同，就不讲了。</p><h2 id="下面进行逐句评讲。"><a href="#下面进行逐句评讲。" class="headerlink" title="下面进行逐句评讲。"></a>下面进行逐句评讲。</h2><p>“那是一个秋天，风儿那么缠绵，”没毛病。“那是”开头，虽然不出彩，但是很自然，容易被人接受，接着往下听。<br>“让我想起他们那双无助的眼。”这里，“他们”是两个人；“那双”眼睛虽然是复数，但落实到人，却是单数。因此，这是一个小错误。<br>很显然，用相同性质的词语直接替换是不行的，譬如“四只”。四，数量较多，会分散受众的注意力，让受众去思考为什么是四。因而，如果硬要改的话，只能用其它性质的词语去替换，譬如“彷徨”。<br>但“彷徨无助”，又稍显生僻，会影响听者的接受速度，形成不怎么大的接受障碍。而如果也用“无”的话，无什么呢？无神？听上去，岂不是比“彷徨无助”更不容易分辨。<br>所以，实在要改，就只能把“他们”二字挪到这儿。<br>那样一来，“让我想起”就要掺进两个水字了，譬如“风儿让我想起”。<br>是不是太水了？<br>于是，我最终感觉，还是不改为好。<br>小错误嘛，存在也无妨。这就像文豪写书法一样，多一点少一点，多一笔少一笑，根本不算错误，关键是，那个字不能被错认为是别的字。<br>“那双无助的眼”也一样，虽然存在小错误，但由于不影响表达内容，听者一听，就知道是怎么回事。由于没有影响信息传递，所以不改也是行的。</p><p>“就在那美丽风景相伴的地方，我听到一声巨响震彻山谷。”这两小句，没有基础毛病。<br>值得注意的是，这两小句，存在一个对比：一个美丽的地方，一件悲惨的事。颇有一种把美好的事情撕烂了给读者看的悲剧色彩。</p><p>“就是那个秋天，再看不到爸爸的脸。”<br>为什么提到爸爸没提到妈妈？爸爸妈妈，可以一起提，也可以先后提。这里，实际上是先后提。先提爸爸，后面会提到妈妈。<br>先提爸爸，又比先提妈妈要好。这是因为，时至今日，最不令人怀疑的，是父女情。虽然背景事件中，那是个儿子，但韩红是女的，唱出来的声音又带有明显的女性特征。女声，提到爸爸，无形中，就相当于女儿提到爸爸。其中的感情，就往父女情的方向靠近了那么一点，让听者一下就能接受，丝毫没有怀疑。<br>“他用他的双肩，托起我重生的起点。”<br>背景事件的具体经过，可能生还的当事人都已经记不清楚了。这一句，属于带有归纳性、比拟性的描述。因而不需要因为“用”“双肩托起”，去询问是不是父亲从洪水中救起了儿子那样的细节。<br>“黑暗中泪水沾满了双眼，”<br>“黑暗中”很妙。只描述了环境，没有指明时间。那其实表达的是，若干个“黑暗中”。包括当时，也包括事后。并且，“黑暗”有天然的，也有人为的。天然的，譬如天黑加停电；人为的，譬如钻进被窝里。这些，都被包括了进去。<br>“不要离开、不要伤害。”这句，就有些难度了。<br>“不要离开”好理解。可以是儿子对父母的呼唤。但“不要伤害”呢？<br>“不要伤害”，到底是谁对谁发出的呐喊，后面再讲。</p><p>“我看到爸爸妈妈就这么走远，留下我在这陌生的人世间。不知道未来还会有什么风险。”<br>三小句，基础上没毛病。直接看上去，字面意思表达能力似乎稍弱。真是不是，后面再说。<br>“我想要紧紧抓住他的手”中的“他”，指父亲，也可以指母亲。<br>“妈妈告诉我希望还会有。看到太阳出来妈妈笑了。”这是绝望中的回忆。这一家人，以前也是经受过苦难的。在曾经难熬的岁月中，妈妈曾经多次鼓励过儿子。鼓励的时候，有直述“告诉我希望还会有”，也有以身作则“看到太阳出来，妈妈笑了”。</p><p>“天亮了。”尽在不言中，就不再讲了。</p><p>“这是一个夜晚天上宿星点点，我在梦里看见我的妈妈。”<br>继“那是”之后，此处出现了“这是”。表示已经是事后，灾难之后。<br>“一个人在世上要学会坚强”，很明显，这不是儿子对父母能够说出的话。<br>结合前一小句“我在梦里看见我的妈妈”，可以发现，这是妈妈对儿子说的话。并且还是死去之后的妈妈对儿子所说的话。<br>“我在梦里看见我的妈妈。一个人在世上要学会坚强”紧接着的两句，主语变了。前一句是“我”，后一句是“妈妈”。同时，又因为死去的人继续说话这一违反科学常理的设定，使得后一句主语“妈妈”变得有些难以理解。<br>其实，受众的心，也是强大的。多听两遍，也还是能够理解的。<br>这两句主语的变化，从玄学的角度看，简单。但从文学的角度看，跳跃就非常大了。</p><p>唐/李白有句：“千里江陵一日还”。“千里江陵”说的是千里之外的江陵。站在什么地方能够说出此话，自然是白帝城。“还”，指回来，站在什么地方能够说“还”，当然只能是江陵。就这么一句，视角就从白帝城跳到了江陵。<br>《天亮了》中，这两句紧挨着的歌词的主语跳跃，其实跟“千里江陵一日还”的视角跳跃，是相似的类型。</p><p>“你不要离开不要伤害”上一段出现过，就不讲了。</p><p>“我看到爸爸妈妈就这么走远，留下我在这陌生的人世间。我愿为他建造一个美丽的花园。”<br>比较上一段，区别的，是第三小句。此处的第三小句，从陈述中跳脱出来了，相当于插入了一个事后的心愿。</p><p>“我想要紧紧抓住他的手。妈妈告诉我希望还会有，看到太阳出来、天亮了。”<br>比较上一段，区别的仍然是第三小句。“妈妈笑了”变成“天亮了”。但此处的“天亮了”，跟前面不一样，并不是起承转合的合，不是收尾，而就是一个简单的陈述，其实质，就相当于“妈妈笑了”。</p><p>“我看到爸爸妈妈就这么走远，留下我在这陌生的人世间。我愿为他建造一个美丽的花园。<br>“我想要紧紧抓住他的手。妈妈告诉我希望还会有。看到太阳出来，他们笑了。”<br>重复，强调，加倍。略有不同的，就是“妈妈笑了”变成“他们笑了”。由“妈妈”变成“他们”，实际上也在告诉受众，马上就要收尾了。<br>以什么收尾，收到哪里呢？依然还是“天亮了”，尽在不言中，让受众自己去想，</p><p>不知道是哪年哪天了，无意中，我就这么偶然听到了这首歌。<br>一听，就感受很好听。<br>一听，就听出来了，里面讲述了一场事故。因为有“我听到一声巨响震彻山谷”、“再看不到爸爸的脸”。<br>另外，还听出了事故中，父母对孩子的救助。因为有“他用他的双肩托起我重生的起点”。<br>很明显，事故是悲惨的，事故中的父母是可歌可泣的，事故之后的儿子或女儿（从歌词中听不出孩子的性别）是可怜的。<br>但是，就这么算了么？<br>这么好听的歌，最后一句“天亮了”到底表述的是怎样的感情？<br>没弄清楚，怎么能算完。</p><p>生活中，有各种各样的事故。最常见的，恐怕应该是车祸。<br>车祸事故，几乎每天都能够在地方新闻上看到。<br>看到车祸事故的新闻，心中有什么感受？<br>悲伤么？自然没有。<br>一般来说，亲人，才会悲伤。陌生人，通常只是略带同情、怜悯。<br>此处说的是，同样的事，因为自身角度的不同，感受大不相同。<br>那么，《天亮了》应该站在什么样的角度去欣赏呢？</p><p>最容易想到的角度，有两个。<br>一是生还的儿子或女儿。但是，站在这个角度欣赏，“我看到爸爸妈妈就这么走远，留下我在这陌生的人世间，不知道未来还会有什么风险。”真的弱爆了。<br>另一个角度，则是富有同情心的旁观善良人士。这个角度的存在，是因为韩红。因为，就这么看过去，韩红，对于此次事故，似乎就是富有同情心的旁观善良人士。<br>但这个角度还是不行。“黑暗中泪水沾满了双眼”，没什么感觉。<br>于是乎，就剩下了不常见的角度——死去父母的角度！<br>我试着想象了这样的角度，再听《天亮了》，眼泪一下子就出来了。<br>我是在这之后，才搜索得知了《天亮了》的创作背景。</p><p>是的，韩红，把自己当作那个孩子的父母，并且还把自己当作了孩子死去的父母。《天亮了》这首歌，表达的是死者对生者的寄托！<br>重新再看歌词。“黑暗中泪水沾满了双眼”，所指的，就不仅仅是事后孩子多次在被窝里痛哭，并且还指死去的父母在地狱中带泪含悲。<br>“不要离开”，只是孩子对父母的呼唤么？已然不是。以父母为参照物，生存的孩子，又何尝不是一种离开。<br>当然不是说想要孩子一起死，否则就不会用双肩托起重生的起点了。<br>“不要伤害”的答案，此时就出来了。那就是死去的父母发出的呐喊。呐喊的对象是天地——老天爷，不要伤害我们的孩子！<br>“一个人在世上要学会坚强”不再是父母对自己的叮嘱，而是自己，对自己幸存的子女的叮嘱。<br>于是乎，最后一句合中的“天亮了”，就表达了深深的无奈。<br>天亮了，通常指清晨，代表的是希望。但是，对于死者来说，天亮了，就代表魂魄状态的死者必须离开。<br>这是自然规律，死者必须离开。不想离开，也必须离开。因为——天亮了。<br>难怪韩红唱这三个字的时候，泣不成声。</p><p>题外话又冒出来了。<br>我曾经进行过无数次评论。有那么一个人，曾经对于我的少部分评论非常不服。那就是，关于李白的诗的评论。<br>他认为，一件事物，可以从好坏两方面去说。他认为，李白的诗，就像打油诗，水平并不高。只是因为我的评论，才变得水平绝高了。<br>具体的说法就是，我先假定李诗水平绝高，然后往去往绝高的方向分析。<br>我的确也是这样做的。<br>但是，别人的诗，也可以假定为水平绝高啊，难道说真的就能分析出水平绝高来吗？<br>譬如杜甫的“三顾频烦天下计”。“顾频烦”三字的“页”旁，看不见吗？不擅书法，才会视而不见，所以杜甫不擅书法。是“频烦天下计”么？明明就只烦了一次。次数相对较多的，反而是“顾”，顾了三次。于是这句应该读成“三顾频、烦天下计”。这水平还怎么绝高呢？<br>相似的例子还有很多。无论是谁的作品，都能事先假定为水平绝高。但只有李白的诗，才会真的分析出水平绝高的答案出来。<br>所以，李诗的水平，是真的绝高。</p><p>这番题外话，表达的是，前面关于《天亮了》的评论，或许韩红自己并没那么想，或者韩红没想那么多，或许《天亮了》就仅仅是韩红的偶然之得。<br>我要说的是，《天亮了》既然已经成为作品，那么它就脱离了作者韩红，变成了一种独立的存在。不能因为韩红的文学水平不够高，而去否认《天亮了》的文学成就。<br>我的确是抱着欣赏的态度，先假定《天亮了》文学水平很高，然后真往极高文学水平的方向去分析的。但是很幸运，我得出了《天亮了》文学水平果然很高的结论。<br>换首别的歌，行吗？<br>谁说行，谁上。</p><p>最后，我还要说的是，文学水平，所指的，并不仅仅是文字方面的能力。<br>在打基础的时候，在斟酌字词句，在训练表达力、说服力的阶段，的确单指文字方面。<br>但是，在跨入感染力阶段之后，就不是了。<br>更多的，是提高心性。<br>心性高了，视角就不同了，感受也随之不同了，不管是写出来的作品，还是唱出来的歌，那都是不同的。<br>很多人说邓丽君的演唱水平并不高，那是不对的。应该说，邓丽君的演唱水平，其实很多人都达到过。个别的，譬如韩红，偶尔还超越过。<br>但是，为什么邓丽君流传下来的歌曲就那么多呢？其他歌者流传下来的歌就那么少呢？<br>就是因为心性。<br>心性与感染力关系，最容易明白的例子，就是翻唱。<br>《何日君在来》、《船歌》在邓丽君翻唱之前，并不好听，结果邓丽君一唱，就化腐朽为神奇了。<br>恰好，韩红也有过化腐朽为神奇的表现，譬如《妹妹找哥泪花流》、《天之大》（可搜）。<br>心性如此之高的韩红，偶得《天亮了》极高文学水准的作品，就是正常的了。</p><p>（全文完）</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;精品分析： 原作：石晶兰 &lt;a href=&quot;https://tieba.baidu.com/p/5313070309?red_tag=2537504175&quot;&gt;短文吧&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;再做个传送门： &lt;a href=&quot;https://www.b</summary>
      
    
    
    
    <category term="music" scheme="https://blog.17lai.site/categories/music/"/>
    
    
    <category term="music" scheme="https://blog.17lai.site/tags/music/"/>
    
    <category term="韩红" scheme="https://blog.17lai.site/tags/%E9%9F%A9%E7%BA%A2/"/>
    
  </entry>
  
  <entry>
    <title>1.5 万字 CSS 基础拾遗（核心知识、常见需求）</title>
    <link href="https://blog.17lai.site/web/2021-09-15-ccs-basec-knowledge/"/>
    <id>https://blog.17lai.site/web/2021-09-15-ccs-basec-knowledge/</id>
    <published>2021-09-15T11:25:00.000Z</published>
    <updated>2021-10-09T00:17:33.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-5-万字-CSS-基础拾遗（核心知识、常见需求）"><a href="#1-5-万字-CSS-基础拾遗（核心知识、常见需求）" class="headerlink" title="1.5 万字 CSS 基础拾遗（核心知识、常见需求）"></a>1.5 万字 CSS 基础拾遗（核心知识、常见需求）</h2><p>本篇文章围绕了 CSS 的核心知识点和项目中常见的需求来展开。虽然行文偏长，但偏基础，适合初级中级前端阅读，阅读的时候请适当跳过已经掌握的部分。</p><p>这篇文章断断续续写了比较久，也参考了许多优秀的文章，但或许文章里还是存在不好或不对的地方，请多多指教，可以评论里直接提出来哈。</p><p>小tip：后续内容更精彩哦。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912192327.png"></p><h2 id="核心概念和知识点"><a href="#核心概念和知识点" class="headerlink" title="核心概念和知识点"></a>核心概念和知识点</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>CSS 的核心功能是将 CSS 属性设定为特定的值。一个属性与值的键值对被称为<strong>声明</strong>（declaration）。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而如果将一个或者多个声明用 <code>{}</code> 包裹起来后，那就组成了一个<strong>声明块</strong>（declaration block）。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>声明块如果需要作用到对应的 HTML 元素，那还需要加上<strong>选择器</strong>。选择器和声明块组成了<strong>CSS 规则集</strong>（CSS ruleset），常简称为 CSS 规则。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914005346.png"></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">span</span> <span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>“</p><p>规则集中最后一条声明可以省略分号，但是并不建议这么做，因为容易出错。</p></blockquote><p>CSS 中的<strong>注释</strong>：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 单行注释 */</span><span class="token comment">/*      多行      注释  */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 CSS 文件中，除了注释、CSS 规则集以及 @规则 外，定义的一些别的东西都将被浏览器忽略。</p><h3 id="规则"><a href="#规则" class="headerlink" title="@规则"></a>@规则</h3><p>CSS 规则是样式表的主体，通常样式表会包括大量的规则列表。但有时候也需要在样式表中包括其他的一些信息，比如字符集，导入其它的外部样式表，字体等，这些需要专门的语句表示。</p><p>而 @规则 就是这样的语句。CSS 里包含了以下 @规则：</p><ul><li>@namespace 告诉 CSS 引擎必须考虑XML命名空间。</li><li>@media, 如果满足媒体查询的条件则条件规则组里的规则生效。</li><li>@page, 描述打印文档时布局的变化.</li><li>@font-face, 描述将下载的外部的字体。</li><li>@keyframes, 描述 CSS 动画的关键帧。</li><li>@document, 如果文档样式表满足给定条件则条件规则组里的规则生效。 (推延至 CSS Level 4 规范)</li></ul><p>除了以上这几个之外，下面还将对几个比较生涩的 @规则 进行介绍。</p><h4 id="charset"><a href="#charset" class="headerlink" title="@charset"></a>@charset</h4><p>@charset[1] 用于定义样式表使用的字符集。它必须是样式表中的第一个元素。如果有多个 <code>@charset</code> 被声明，只有第一个会被使用，而且不能在HTML元素或HTML页面的 <code>&lt;style&gt;</code> 元素内使用。</p><p>注意：值必须是双引号包裹，且和</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@charset</span> <span class="token string">"UTF-8"</span><span class="token punctuation">;</span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>平时写样式文件都没写 @charset 规则，那这个 CSS 文件到底是用的什么字符编码的呢？</p><p>某个样式表文件到底用的是什么字符编码，浏览器有一套识别顺序（优先级由高到低）：</p><ul><li>文件开头的 Byte order mark[2] 字符值，不过一般编辑器并不能看到文件头里的 BOM 值；</li><li>HTTP 响应头里的 <code>content-type</code> 字段包含的 <code>charset</code> 所指定的值，比如：  <code>Content-Type: text/css; charset=utf-8  </code><br>  `</li><li>CSS 文件头里定义的 @charset 规则里指定的字符编码；</li><li><code>&lt;link&gt;</code> 标签里的 charset 属性，该条已在 HTML5 中废除；</li><li>默认是 <code>UTF-8</code>。</li></ul><h4 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h4><p>@import[3] 用于告诉 CSS 引擎引入一个外部样式表。</p><p>link 和 @import 都能导入一个样式文件，它们有什么区别嘛？</p><ul><li>link 是 HTML 标签，除了能导入 CSS 外，还能导入别的资源，比如图片、脚本和字体等；而 @import 是 CSS 的语法，只能用来导入 CSS；</li><li>link 导入的样式会在页面加载时同时加载，@import 导入的样式需等页面加载完成后再加载；</li><li>link 没有兼容性问题，@import 不兼容 ie5 以下；</li><li>link 可以通过 JS 操作 DOM 动态引入样式表改变样式，而@import不可以。</li></ul><h4 id="supports"><a href="#supports" class="headerlink" title="@supports"></a>@supports</h4><p>@supports[4] 用于查询特定的 CSS 是否生效，可以结合 not、and 和 or 操作符进行后续的操作。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 如果支持自定义属性，则把 body 颜色设置为变量 varName 指定的颜色 */</span>  <span class="token atrule"><span class="token rule">@supports</span> <span class="token punctuation">(</span><span class="token property">--foo</span><span class="token punctuation">:</span> green<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>      <span class="token selector">body</span> <span class="token punctuation">{</span>          <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--varName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><p>层叠样式表，这里的层叠怎么理解呢？其实它是 CSS 中的核心特性之一，用于合并来自多个源的属性值的算法。比如说针对某个 HTML 标签，有许多的 CSS 声明都能作用到的时候，那最后谁应该起作用呢？层叠性说的大概就是这个。</p><p>针对不同源的样式，将按照如下的顺序进行层叠，越往下优先级越高：</p><ul><li>用户代理样式表中的声明(例如，浏览器的默认样式，在没有设置其他样式时使用)。</li><li>用户样式表中的常规声明(由用户设置的自定义样式。由于 Chrome 在很早的时候就放弃了用户样式表的功能，所以这里将不再考虑它的排序。)。</li><li>作者样式表中的常规声明(这些是我们 Web 开发人员设置的样式)。</li><li>作者样式表中的 !important 声明。</li><li>用户样式表中的 !important 声明S。</li></ul><p>理解层叠性的时候需要结合 CSS 选择器的优先级以及继承性来理解。比如针对同一个选择器，定义在后面的声明会覆盖前面的；作者定义的样式会比默认继承的样式优先级更高。</p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>CSS 选择器无疑是其核心之一，对于基础选择器以及一些常用伪类必须掌握。下面列出了常用的选择器。 想要获取更多选择器的用法可以看 MDN CSS Selectors[5]。</p><h4 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h4><ul><li>标签选择器：<code>h1</code></li><li>类选择器：<code>.checked</code></li><li>ID 选择器：<code>#picker</code></li><li>通配选择器：<code>*</code></li></ul><p><strong>属性选择器</strong></p><ul><li><code>[attr]</code>：指定属性的元素；</li><li><code>[attr=val]</code>：属性等于指定值的元素；</li><li><code>[attr*=val]</code>：属性包含指定值的元素；</li><li><code>[attr^=val]</code> ：属性以指定值开头的元素；</li><li><code>[attr$=val]</code>：属性以指定值结尾的元素；</li><li><code>[attr~=val]</code>：属性包含指定值(完整单词)的元素(不推荐使用)；</li><li><code>[attr|=val]</code>：属性以指定值(完整单词)开头的元素(不推荐使用)；</li></ul><h4 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h4><ul><li>相邻兄弟选择器：<code>A + B</code></li><li>普通兄弟选择器：<code>A ~ B</code></li><li>子选择器：<code>A &gt; B</code></li><li>后代选择器：<code>A B</code></li></ul><h4 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h4><p><strong>条件伪类</strong></p><ul><li><code>:lang()</code>：基于元素语言来匹配页面元素；</li><li><code>:dir()</code>：匹配特定文字书写方向的元素；</li><li><code>:has()</code>：匹配包含指定元素的元素；</li><li><code>:is()</code>：匹配指定选择器列表里的元素；</li><li><code>:not()</code>：用来匹配不符合一组选择器的元素；</li></ul><p><strong>行为伪类</strong></p><ul><li><code>:active</code>：鼠标激活的元素；</li><li><code>:hover</code>： 鼠标悬浮的元素；</li><li><code>::selection</code>：鼠标选中的元素；</li></ul><p><strong>状态伪类</strong></p><ul><li><code>:target</code>：当前锚点的元素；</li><li><code>:link</code>：未访问的链接元素；</li><li><code>:visited</code>：已访问的链接元素；</li><li><code>:focus</code>：输入聚焦的表单元素；</li><li><code>:required</code>：输入必填的表单元素；</li><li><code>:valid</code>：输入合法的表单元素；</li><li><code>:invalid</code>：输入非法的表单元素；</li><li><code>:in-range</code>：输入范围以内的表单元素；</li><li><code>:out-of-range</code>：输入范围以外的表单元素；</li><li><code>:checked</code>：选项选中的表单元素；</li><li><code>:optional</code>：选项可选的表单元素；</li><li><code>:enabled</code>：事件启用的表单元素；</li><li><code>:disabled</code>：事件禁用的表单元素；</li><li><code>:read-only</code>：只读的表单元素；</li><li><code>:read-write</code>：可读可写的表单元素；</li><li><code>:blank</code>：输入为空的表单元素；</li><li><code>:current()</code>：浏览中的元素；</li><li><code>:past()</code>：已浏览的元素；</li><li><code>:future()</code>：未浏览的元素；</li></ul><p><strong>结构伪类</strong></p><ul><li><code>:root</code>：文档的根元素；</li><li><code>:empty</code>：无子元素的元素；</li><li><code>:first-letter</code>：元素的首字母；</li><li><code>:first-line</code>：元素的首行；</li><li><code>:nth-child(n)</code>：元素中指定顺序索引的元素；</li><li><code>:nth-last-child(n)</code>：元素中指定逆序索引的元素；；</li><li><code>:first-child</code>：元素中为首的元素；</li><li><code>:last-child</code> ：元素中为尾的元素；</li><li><code>:only-child</code>：父元素仅有该元素的元素；</li><li><code>:nth-of-type(n)</code>：标签中指定顺序索引的标签；</li><li><code>:nth-last-of-type(n)</code>：标签中指定逆序索引的标签；</li><li><code>:first-of-type</code> ：标签中为首的标签；</li><li><code>:last-of-type</code>：标签中为尾标签；</li><li><code>:only-of-type</code>：父元素仅有该标签的标签；</li></ul><h4 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h4><ul><li><code>::before</code>：在元素前插入内容；</li><li><code>::after</code>：在元素后插入内容；</li></ul><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912192225.png"></p><p>优先级就是分配给指定的 CSS 声明的一个权重，它由匹配的选择器中的每一种选择器类型的数值决定。为了记忆，可以把权重分成如下几个等级，数值越大的权重越高：</p><ul><li>10000：!important；</li><li>01000：内联样式；</li><li>00100：ID 选择器；</li><li>00010：类选择器、伪类选择器、属性选择器；</li><li>00001：元素选择器、伪元素选择器；</li><li>00000：通配选择器、后代选择器、兄弟选择器；</li></ul><p>可以看到内联样式（通过元素中 style 属性定义的样式）的优先级大于任何选择器；而给属性值加上 <code>!important</code> 又可以把优先级提至最高，就是因为它的优先级最高，所以需要谨慎使用它，以下有些使用注意事项：</p><ul><li>一定要优先考虑使用样式规则的优先级来解决问题而不是 !important；</li><li>只有在需要覆盖全站或外部 CSS 的特定页面中使用 !important；</li><li>永远不要在你的插件中使用 !important；</li><li>永远不要在全站范围的 CSS 代码中使用 !important；</li></ul><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912192218.jpeg"></p><p>在 CSS 中有一个很重要的特性就是子元素会继承父元素对应属性计算后的值。比如页面根元素 html 的文本颜色默认是黑色的，页面中的所有其他元素都将继承这个颜色，当申明了如下样式后，H1 文本将变成橙色。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">h1</span> <span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设想一下，如果 CSS 中不存在继承性，那么我们就需要为不同文本的标签都设置一下 color，这样一来的后果就是 CSS 的文件大小就会无限增大。</p><p>CSS 属性很多，但并不是所有的属性默认都是能继承父元素对应属性的，那哪些属性存在默认继承的行为呢？一定是那些不会影响到页面布局的属性，可以分为如下几类：</p><ul><li>字体相关：<code>font-family</code>、<code>font-style</code>、<code>font-size</code>、<code>font-weight</code> 等；</li><li>文本相关：<code>text-align</code>、<code>text-indent</code>、<code>text-decoration</code>、<code>text-shadow</code>、<code>letter-spacing</code>、<code>word-spacing</code>、<code>white-space</code>、<code>line-height</code>、<code>color</code> 等；</li><li>列表相关：<code>list-style</code>、<code>list-style-image</code>、<code>list-style-type</code>、<code>list-style-position</code> 等；</li><li>其他属性：<code>visibility</code>、<code>cursor</code> 等；</li></ul><p>对于其他默认不继承的属性也可以通过以下几个属性值来控制继承行为：</p><ul><li><code>inherit</code>：继承父元素对应属性的计算值；</li><li><code>initial</code>：应用该属性的默认值，比如 color 的默认值是 <code>#000</code>；</li><li><code>unset</code>：如果属性是默认可以继承的，则取 <code>inherit</code> 的效果，否则同 <code>initial</code>；</li><li><code>revert</code>：效果等同于 <code>unset</code>，兼容性差。</li></ul><h3 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h3><p>在 CSS 的世界中，会把内容按照从左到右、从上到下的顺序进行排列显示。正常情况下会把页面分割成一行一行的显示，而每行又可能由多列组成，所以从视觉上看起来就是从上到下从左到右，而这就是 CSS 中的流式布局，又叫文档流。文档流就像水一样，能够自适应所在的容器，一般它有如下几个特性：</p><ul><li>块级元素默认会占满整行，所以多个块级盒子之间是从上到下排列的；</li><li>内联元素默认会在一行里一列一列的排布，当一行放不下的时候，会自动切换到下一行继续按照列排布；</li></ul><p><strong>如何脱离文档流呢？</strong></p><p>脱流文档流指节点脱流正常文档流后，在正常文档流中的其他节点将忽略该节点并填补其原先空间。文档一旦脱流，计算其父节点高度时不会将其高度纳入，脱流节点不占据空间。有两种方式可以让元素脱离文档流：浮动和定位。</p><ul><li>使用浮动（float）会将元素脱离文档流，移动到容器左/右侧边界或者是另一个浮动元素旁边，该浮动元素之前占用的空间将被别的元素填补，另外浮动之后所占用的区域不会和别的元素之间发生重叠；</li><li>使用绝对定位（<code>position: absolute;</code>）或者固定定位（<code>position: fixed;</code>）也会使得元素脱离文档流，且空出来的位置将自动被后续节点填补。</li></ul><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><p>在 CSS 中任何元素都可以看成是一个盒子，而一个盒子是由 4 部分组成的：内容（content）、内边距（padding）、边框（border）和外边距（margin）。</p><p>盒模型有 2 种：标准盒模型和 IE 盒模型，本别是由 W3C 和 IExplore 制定的标准。</p><p>如果给某个元素设置如下样式：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #eee<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标准盒模型认为：盒子的实际尺寸 = 内容（设置的宽/高） + 内边距 + 边框</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912192143.png"></p><p>所以 <code>.box</code> 元素内容的宽度就为 <code>200px</code>，而实际的宽度则是 <code>width</code> + <code>padding-left</code> + <code>padding-right</code> + <code>border-left-width</code> + <code>border-right-width</code> = 200 + 10 + 10 + 1 + 1 = 222。</p><p>IE 盒模型认为：盒子的实际尺寸 = 设置的宽/高 = 内容 + 内边距 + 边框</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912192137.png"></p><p><code>.box</code> 元素所占用的实际宽度为 <code>200px</code>，而内容的真实宽度则是 <code>width</code> - <code>padding-left</code> - <code>padding-right</code> - <code>border-left-width</code> - <code>border-right-width</code> = 200 - 10 - 10 - 1 - 1 = 178。</p><p>现在高版本的浏览器基本上默认都是使用标准盒模型，而像 IE6 这种老古董才是默认使用 IE 盒模型的。</p><p>在  CSS3 中新增了一个属性 <code>box-sizing</code>，允许开发者来指定盒子使用什么标准，它有 2 个值：</p><ul><li><code>content-box</code>：标准盒模型；</li><li><code>border-box</code>：IE 盒模型；</li></ul><h3 id="视觉格式化模型"><a href="#视觉格式化模型" class="headerlink" title="视觉格式化模型"></a>视觉格式化模型</h3><p>视觉格式化模型（Visual formatting model）是用来处理和在视觉媒体上显示文档时使用的计算规则。CSS 中一切皆盒子，而视觉格式化模型简单来理解就是规定这些盒子应该怎么样放置到页面中去，这个模型在计算的时候会依赖到很多的因素，比如：盒子尺寸、盒子类型、定位方案（是浮动还是定位）、兄弟元素或者子元素以及一些别的因素。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912192137.jpeg"></p><p>Visual formatting model</p><p>从上图中可以看到视觉格式化模型涉及到的内容很多，有兴趣深入研究的可以结合上图看这个 W3C 的文档 Visual formatting model[6]。所以这里就简单介绍下盒子类型。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912192129.png"></p><p>盒子类型由 display 决定，同时给一个元素设置 display 后，将会决定这个盒子的 2 个显示类型（display type）：</p><ul><li>outer display type（对外显示）：决定了该元素本身是如何布局的，即参与何种格式化上下文；</li><li>inner display type（对内显示）：其实就相当于把该元素当成了容器，规定了其内部子元素是如何布局的，参与何种格式化上下文；</li></ul><h4 id="outer-display-type"><a href="#outer-display-type" class="headerlink" title="outer display type"></a>outer display type</h4><p>对外显示方面，盒子类型可以分成 2 类：block-level box（块级盒子） 和 inline-level box（行内级盒子）。</p><p>依据上图可以列出都有哪些块级和行内级盒子：</p><ul><li>块级盒子：display 为 block、list-item、table、flex、grid、flow-root 等；</li><li>行内级盒子：display 为 inline、inline-block、inline-table 等；</li></ul><p>所有块级盒子都会参与 BFC，呈现垂直排列；而所有行内级盒子都参会 IFC，呈现水平排列。</p><p>除此之外，block、inline 和 inline-block 还有什么更具体的区别呢？</p><p><strong>block</strong></p><ul><li>占满一行，默认继承父元素的宽度；多个块元素将从上到下进行排列；</li><li>设置 width/height 将会生效；</li><li>设置 padding 和 margin 将会生效；</li></ul><p><strong>inline</strong></p><ul><li>不会占满一行，宽度随着内容而变化；多个 inline 元素将按照从左到右的顺序在一行里排列显示，如果一行显示不下，则自动换行；</li><li>设置 width/height 将不会生效；</li><li>设置竖直方向上的 padding 和 margin 将不会生效；</li></ul><p><strong>inline-block</strong></p><ul><li>是行内块元素，不单独占满一行，可以看成是能够在一行里进行左右排列的块元素；</li><li>设置 width/height 将会生效；</li><li>设置 padding 和 margin 将会生效；</li></ul><h4 id="inner-display-type"><a href="#inner-display-type" class="headerlink" title="inner display type"></a>inner display type</h4><p>对内方面，其实就是把元素当成了容器，里面包裹着文本或者其他子元素。container box 的类型依据 display 的值不同，分为 4 种：</p><ul><li>block container：建立 BFC 或者 IFC；</li><li>flex container：建立 FFC；</li><li>grid container：建立 GFC;</li><li>ruby container：接触不多，不做介绍。</li></ul><p>值得一提的是如果把 img 这种替换元素（replaced element）申明为 block 是不会产生 container box 的，因为替换元素比如 img 设计的初衷就仅仅是通过 src 把内容替换成图片，完全没考虑过会把它当成容器。</p><p>参考：</p><ul><li>CSS 原理 - 你所不知道的 display[7]</li><li>格式化上下文[8]</li></ul><h3 id="格式化上下文"><a href="#格式化上下文" class="headerlink" title="格式化上下文"></a>格式化上下文</h3><p>格式化上下文（Formatting Context）是 CSS2.1 规范中的一个概念，大概说的是页面中的一块渲染区域，规定了渲染区域内部的子元素是如何排版以及相互作用的。</p><p>不同类型的盒子有不同格式化上下文，大概有这 4 类：</p><ul><li>BFC (Block Formatting Context) 块级格式化上下文；</li><li>IFC (Inline Formatting Context) 行内格式化上下文；</li><li>FFC (Flex Formatting Context) 弹性格式化上下文；</li><li>GFC (Grid Formatting Context) 格栅格式化上下文；</li></ul><p>其中 BFC 和 IFC 在 CSS 中扮演着非常重要的角色，因为它们直接影响了网页布局，所以需要深入理解其原理。</p><h4 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h4><p>块格式化上下文，它是一个独立的渲染区域，只有块级盒子参与，它规定了内部的块级盒子如何布局，并且与这个区域外部毫不相干。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912192122.png"></p><p>图来源于 yachen168</p><p><strong>BFC 渲染规则</strong></p><ul><li>内部的盒子会在垂直方向，一个接一个地放置；</li><li>盒子垂直方向的距离由 margin 决定，属于同一个 BFC 的两个相邻盒子的 margin 会发生重叠；</li><li>每个元素的 margin 的左边，与包含块 border 的左边相接触(对于从左往右的格式化，否则相反)，即使存在浮动也是如此；</li><li>BFC 的区域不会与 float 盒子重叠；</li><li>BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li><li>计算 BFC 的高度时，浮动元素也参与计算。</li></ul><p><strong>如何创建 BFC？</strong></p><ul><li>根元素：html</li><li>非溢出的可见元素：overflow 不为 visible</li><li>设置浮动：float 属性不为 none</li><li>设置定位：position 为 absolute 或 fixed</li><li>定义成块级的非块级元素：display: inline-block/table-cell/table-caption/flex/inline-flex/grid/inline-grid</li></ul><p><strong>BFC 应用场景</strong></p><p>1、 自适应两栏布局</p><p>应用原理：BFC 的区域不会和浮动区域重叠，所以就可以把侧边栏固定宽度且左浮动，而对右侧内容触发 BFC，使得它的宽度自适应该行剩余宽度。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912192107.gif"></p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;div class=<span class="token string">"layout"</span>&gt;      &lt;div class=<span class="token string">"aside"</span>&gt;aside&lt;/div&gt;      &lt;div class=<span class="token string">"main"</span>&gt;main&lt;/div&gt;  &lt;/div&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.aside</span> <span class="token punctuation">{</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.main</span> <span class="token punctuation">{</span>      &lt;!-- 触发 BFC --&gt;      <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、清除内部浮动</p><p>浮动造成的问题就是父元素高度坍塌，所以清除浮动需要解决的问题就是让父元素的高度恢复正常。而用     BFC 清除浮动的原理就是：计算 BFC 的高度时，浮动元素也参与计算。只要触发父元素的 BFC 即可。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912192102.png"></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.parent</span> <span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、 防止垂直 margin 合并</p><p>BFC 渲染原理之一：同一个 BFC 下的垂直 margin 会发生合并。所以如果让 2 个元素不在同一个 BFC 中即可阻止垂直 margin 合并。那如何让 2 个相邻的兄弟元素不在同一个 BFC 中呢？可以给其中一个元素外面包裹一层，然后触发其包裹层的 BFC，这样一来 2 个元素就不会在同一个 BFC 中了。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912192012.png"></p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;div class=<span class="token string">"layout"</span>&gt;  &lt;div class=<span class="token string">"a"</span>&gt;a&lt;/div&gt;      &lt;div class=<span class="token string">"contain-b"</span>&gt;          &lt;div class=<span class="token string">"b"</span>&gt;b&lt;/div&gt;      &lt;/div&gt;  &lt;/div&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.demo3 .a,  .demo3 .b</span> <span class="token punctuation">{</span>      <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #999<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.contain-b</span> <span class="token punctuation">{</span>      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>针对以上 3 个 示例 ，可以结合这个 BFC 应用示例 配合观看更佳。</p><p>参考：CSS 原理 - Formatting Context[9]</p><h4 id="IFC"><a href="#IFC" class="headerlink" title="IFC"></a>IFC</h4><p>IFC 的形成条件非常简单，块级元素中仅包含内联级别元素，需要注意的是当IFC中有块级元素插入时，会产生两个匿名块将父元素分割开来，产生两个 IFC。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912160820.png"></p><p><strong>IFC 渲染规则</strong></p><ul><li>子元素在水平方向上一个接一个排列，在垂直方向上将以容器顶部开始向下排列；</li><li>节点无法声明宽高，其中 margin 和 padding 在水平方向有效在垂直方向无效；</li><li>节点在垂直方向上以不同形式对齐；</li><li>能把在一行上的框都完全包含进去的一个矩形区域，被称为该行的线盒（line box）。线盒的宽度是由包含块（containing box）和与其中的浮动来决定；</li><li>IFC 中的 line box 一般左右边贴紧其包含块，但 float 元素会优先排列。</li><li>IFC 中的 line box 高度由 line-height 计算规则来确定，同个 IFC 下的多个 line box 高度可能会不同；</li><li>当内联级盒子的总宽度少于包含它们的 line box 时，其水平渲染规则由 text-align 属性值来决定；</li><li>当一个内联盒子超过父元素的宽度时，它会被分割成多盒子，这些盒子分布在多个 line box 中。如果子元素未设置强制换行的情况下，inline box 将不可被分割，将会溢出父元素。</li></ul><p>针对如上的 IFC 渲染规则，你是不是可以分析下下面这段代码的 IFC 环境是怎么样的呢？</p><p><code>&lt;p&gt;It can get &lt;strong&gt;very complicated&lt;/storng&gt; once you start looking into it.&lt;/p&gt;   </code></p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912160815.jpeg"></p><p>对应上面这样一串 HTML 分析如下：</p><ul><li>p 标签是一个 block container，对内将产生一个 IFC；</li><li>由于一行没办法显示完全，所以产生了 2 个线盒（line box）；线盒的宽度就继承了 p 的宽度；高度是由里面的内联盒子的 line-height 决定；</li><li>It can get：匿名的内联盒子；</li><li>very complicated：strong 标签产生的内联盒子；</li><li>once you start：匿名的内联盒子；</li><li>looking into it.：匿名的内联盒子。</li></ul><p>参考：Inline formatting contexts[10]</p><p><strong>IFC 应用场景</strong></p><ul><li>水平居中：当一个块要在环境中水平居中时，设置其为 inline-block 则会在外层产生 IFC，通过 text-align 则可以使其水平居中。</li><li>垂直居中：创建一个 IFC，用其中一个元素撑开父元素的高度，然后设置其 vertical-align: middle，其他行内元素则可以在此父元素下垂直居中。</li></ul><p>偷个懒，demo 和图我就不做了。</p><h3 id="层叠上下文"><a href="#层叠上下文" class="headerlink" title="层叠上下文"></a>层叠上下文</h3><p>在电脑显示屏幕上的显示的页面其实是一个三维的空间，水平方向是 X 轴，竖直方向是 Y 轴，而屏幕到眼睛的方向可以看成是 Z 轴。众 HTML 元素依据自己定义的属性的优先级在 Z 轴上按照一定的顺序排开，而这其实就是层叠上下文所要描述的东西。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912160813.png"></p><p>-w566</p><p>我们对层叠上下文的第一印象可能要来源于 z-index，认为它的值越大，距离屏幕观察者就越近，那么层叠等级就越高，事实确实是这样的，但层叠上下文的内容远非仅仅如此：</p><ul><li>z-index 能够在层叠上下文中对元素的堆叠顺序其作用是必须配合定位才可以；</li><li>除了 z-index 之外，一个元素在 Z 轴上的显示顺序还受层叠等级和层叠顺序影响；</li></ul><p>在看层叠等级和层叠顺序之前，我们先来看下如何产生一个层叠上下文，特定的 HTML 元素或者 CSS 属性产生层叠上下文，MDN 中给出了这么一个列表，符合以下任一条件的元素都会产生层叠上下文：</p><ul><li>html 文档根元素</li><li>声明 position: absolute/relative 且 z-index 值不为 auto 的元素；</li><li>声明 position: fixed/sticky 的元素；</li><li>flex 容器的子元素，且 z-index 值不为 auto；</li><li>grid 容器的子元素，且 z-index 值不为 auto；</li><li>opacity 属性值小于 1 的元素；</li><li>mix-blend-mode 属性值不为 normal 的元素；</li><li>以下任意属性值不为 none 的元素：</li><li>transform</li><li>filter</li><li>perspective</li><li>clip-path</li><li>mask / mask-image / mask-border</li><li>isolation 属性值为 isolate 的元素；</li><li>-webkit-overflow-scrolling 属性值为 touch 的元素；</li><li>will-change 值设定了任一属性而该属性在 non-initial 值时会创建层叠上下文的元素；</li><li>contain 属性值为 layout、paint 或包含它们其中之一的合成值（比如 contain: strict、contain: content）的元素。</li></ul><p><strong>层叠等级</strong></p><p>层叠等级指节点在三维空间 Z 轴上的上下顺序。它分两种情况：</p><ul><li>在同一个层叠上下文中，它描述定义的是该层叠上下文中的层叠上下文元素在 Z 轴上的上下顺序；</li><li>在其他普通元素中，它描述定义的是这些普通元素在 Z 轴上的上下顺序；</li></ul><p>普通节点的层叠等级优先由其所在的层叠上下文决定，层叠等级的比较只有在当前层叠上下文中才有意义，脱离当前层叠上下文的比较就变得无意义了。</p><p><strong>层叠顺序</strong></p><p>在同一个层叠上下文中如果有多个元素，那么他们之间的层叠顺序是怎么样的呢？</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912160807.png"></p><p>以下这个列表越往下层叠优先级越高，视觉上的效果就是越容易被用户看到（不会被其他元素覆盖）：</p><ul><li>层叠上下文的 border 和 background</li><li>z-index &lt; 0 的子节点</li><li>标准流内块级非定位的子节点</li><li>浮动非定位的子节点</li><li>标准流内行内非定位的子节点</li><li>z-index: auto/0 的子节点</li><li>z-index &gt; 0的子节点</li></ul><p><strong>如何比较两个元素的层叠等级？</strong></p><ul><li>在同一个层叠上下文中，比较两个元素就是按照上图的介绍的层叠顺序进行比较。</li><li>如果不在同一个层叠上下文中的时候，那就需要比较两个元素分别所处的层叠上下文的等级。</li><li>如果两个元素都在同一个层叠上下文，且层叠顺序相同，则在 HTML 中定义越后面的层叠等级越高。</li></ul><p>参考：彻底搞懂CSS层叠上下文、层叠等级、层叠顺序、z-index[11]</p><h3 id="值和单位"><a href="#值和单位" class="headerlink" title="值和单位"></a>值和单位</h3><p>CSS 的声明是由属性和值组成的，而值的类型有许多种：</p><ul><li>数值：长度值 ，用于指定例如元素 width、border-width、font-size 等属性的值；</li><li>百分比：可以用于指定尺寸或长度，例如取决于父容器的 width、height 或默认的 font-size；</li><li>颜色：用于指定 background-color、color 等；</li><li>坐标位置：以屏幕的左上角为坐标原点定位元素的位置，比如常见的 background-position、top、right、bottom 和 left 等属性；</li><li>函数：用于指定资源路径或背景图片的渐变，比如 url()、linear-gradient() 等；</li></ul><p>而还有些值是需要带单位的，比如 width: 100px，这里的 px 就是表示长度的单位，长度单位除了 px 外，比较常用的还有 em、rem、vw/vh 等。那他们有什么区别呢？又应该在什么时候使用它们呢？</p><h4 id="px"><a href="#px" class="headerlink" title="px"></a>px</h4><p>屏幕分辨率是指在屏幕的横纵方向上的像素点数量，比如分辨率 1920×1080 意味着水平方向含有 1920 个像素数，垂直方向含有 1080 个像素数。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912160800.png"></p><p>而 px 表示的是 CSS 中的像素，在 CSS 中它是绝对的长度单位，也是最基础的单位，其他长度单位会自动被浏览器换算成 px。但是对于设备而言，它其实又是相对的长度单位，比如宽高都为 2px，在正常的屏幕下，其实就是 4 个像素点，而在设备像素比(devicePixelRatio) 为 2 的 Retina 屏幕下，它就有 16 个像素点。所以屏幕尺寸一致的情况下，屏幕分辨率越高，显示效果就越细腻。</p><p>讲到这里，还有一些相关的概念需要理清下：</p><p><strong>设备像素（Device pixels）</strong></p><p>设备屏幕的物理像素，表示的是屏幕的横纵有多少像素点；和屏幕分辨率是差不多的意思。</p><p><strong>设备像素比（DPR）</strong></p><p>设备像素比表示 1 个 CSS 像素等于几个物理像素。</p><p>计算公式：DPR = 物理像素数 / 逻辑像素数；</p><p>在浏览器中可以通过 window.devicePixelRatio 来获取当前屏幕的 DPR。</p><p><strong>像素密度（DPI/PPI）</strong></p><p>像素密度也叫显示密度或者屏幕密度，缩写为 DPI(Dots Per Inch) 或者 PPI(Pixel Per Inch)。从技术角度说，PPI 只存在于计算机显示领域，而 DPI 只出现于打印或印刷领域。</p><p>计算公式：像素密度 = 屏幕对角线的像素尺寸 / 物理尺寸</p><p>比如，对于分辨率为 750 * 1334 的 iPhone 6 来说，它的像素密度为：</p><p><code>Math.sqrt(750 * 750 + 1334 * 1334) / 4.7 = 326ppi   </code></p><p><strong>设备独立像素（DIP）</strong></p><p>DIP 是特别针对 Android设备而衍生出来的，原因是安卓屏幕的尺寸繁多，因此为了显示能尽量和设备无关，而提出的这个概念。它是基于屏幕密度而计算的，认为当屏幕密度是 160 的时候，px = DIP。</p><p>计算公式：dip = px * 160 / dpi</p><h4 id="em"><a href="#em" class="headerlink" title="em"></a>em</h4><p>em 是 CSS 中的相对长度单位中的一个。居然是相对的，那它到底是相对的谁呢？它有 2 层意思：</p><ul><li>在 font-size 中使用是相对于<strong>父元素</strong>的 font-size 大小，比如父元素 font-size: 16px，当给子元素指定 font-size: 2em 的时候，经过计算后它的字体大小会是 32px；</li><li>在其他属性中使用是相对于自身的字体大小，如 width/height/padding/margin 等；</li></ul><p>我们都知道每个浏览器都会给 HTML 根元素 html 设置一个默认的 font-size，而这个值通常是 16px。这也就是为什么 1em = 16px 的原因所在了。</p><p>em 在计算的时候是会层层计算的，比如：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;div&gt;      &lt;p&gt;&lt;/p&gt;  &lt;/div&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token selector">p</span> <span class="token punctuation">{</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对于如上一个结构的 HTML，由于根元素 html 的字体大小是 16px，所以 p 标签最终计算出来后的字体大小会是 16 * 2 * 2 = 64px</p><h4 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h4><p>rem(root em) 和 em 一样，也是一个相对长度单位，不过 rem 相对的是 HTML 的根元素 html。</p><p>rem 由于是基于 html 的 font-size 来计算，所以通常用于自适应网站或者 H5 中。</p><p>比如在做 H5 的时候，前端通常会让 UI 给 750px 宽的设计图，而在开发的时候可以基于 iPhone X 的尺寸 375px * 812px 来写页面，这样一来的话，就可以用下面的 JS 依据当前页面的视口宽度自动计算出根元素 html 的基准 font-size 是多少。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">(function (doc, win)</span> <span class="token punctuation">{</span>      <span class="token selector">var docEl = doc.documentElement,          resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',          psdWidth = 750,  // 设计图宽度          recalc = function ()</span> <span class="token punctuation">{</span>              var clientWidth = docEl.clientWidth<span class="token punctuation">;</span>              if <span class="token punctuation">(</span> !clientWidth <span class="token punctuation">)</span> return<span class="token punctuation">;</span>              <span class="token selector">if ( clientWidth &gt;= 640 )</span> <span class="token punctuation">{</span>                  docEl.style.fontSize = 200 * <span class="token punctuation">(</span> 640 / psdWidth <span class="token punctuation">)</span> + <span class="token string">'px'</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token selector">else</span> <span class="token punctuation">{</span>                  docEl.style.fontSize = 200 * <span class="token punctuation">(</span> clientWidth / psdWidth <span class="token punctuation">)</span> + <span class="token string">'px'</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>    if <span class="token punctuation">(</span> !doc.addEventListener <span class="token punctuation">)</span> return<span class="token punctuation">;</span>      // 绑定事件的时候最好配合防抖函数      win.<span class="token function">addEventListener</span><span class="token punctuation">(</span> resizeEvt<span class="token punctuation">,</span> <span class="token function">debounce</span><span class="token punctuation">(</span>recalc<span class="token punctuation">,</span> 1000<span class="token punctuation">)</span><span class="token punctuation">,</span> false <span class="token punctuation">)</span><span class="token punctuation">;</span>      doc.<span class="token function">addEventListener</span><span class="token punctuation">(</span> <span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> recalc<span class="token punctuation">,</span> false <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token selector">function debounce(func, wait)</span> <span class="token punctuation">{</span>          var timeout<span class="token punctuation">;</span>          <span class="token selector">return function ()</span> <span class="token punctuation">{</span>              var context = this<span class="token punctuation">;</span>              var args = arguments<span class="token punctuation">;</span>              <span class="token selector">clearTimeout(timeout)              timeout = setTimeout(function()</span><span class="token punctuation">{</span>                  func.<span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比如当视口是 375px 的时候，经过计算 html 的 font-size 会是 100px，这样有什么好处呢？好处就是方便写样式，比如从设计图量出来的 header 高度是 50px 的，那我们写样式的时候就可以直接写：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">header</span> <span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> 0.5rem<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912160740.png"></p><p>每个从设计图量出来的尺寸只要除于 100 即可得到当前元素的 rem 值，都不用经过计算，非常方便。偷偷告诉你，如果你把上面那串计算 html 标签 font-size 的 JS 代码中的 200 替换成 2，那在计算 rem 的时候就不需要除于 100 了，从设计图量出多大 px，就直接写多少个 rem。</p><h4 id="vw-vh"><a href="#vw-vh" class="headerlink" title="vw/vh"></a>vw/vh</h4><p>vw 和 vh 分别是相对于屏幕视口宽度和高度而言的长度单位：</p><ul><li>1vw = 视口宽度均分成 100 份中 1 份的长度；</li><li>1vh = 视口高度均分成 100 份中 1 份的长度；</li></ul><p>在 JS 中 100vw = window.innerWidth，100vh = window.innerHeight。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912160734.jpeg"></p><p>vw/vh 的出现使得多了一种写自适应布局的方案，开发者不再局限于 rem 了。</p><p>相对视口的单位，除了 vw/vh 外，还有 vmin 和 vmax：</p><ul><li>vmin：取 vw 和 vh 中值较小的；</li><li>vmax：取 vw 和 vh 中值较大的；</li></ul><h3 id="颜色体系"><a href="#颜色体系" class="headerlink" title="颜色体系"></a>颜色体系</h3><p>CSS 中用于表示颜色的值种类繁多，足够构成一个体系，所以这里就专门拿出一个小节来讲解它。</p><p>根据 CSS 颜色草案[12] 中提到的颜色值类型，大概可以把它们分为这几类：</p><ul><li>颜色关键字</li><li>transparent 关键字</li><li>currentColor 关键字</li><li>RGB 颜色</li><li>HSL 颜色</li></ul><h4 id="颜色关键字"><a href="#颜色关键字" class="headerlink" title="颜色关键字"></a>颜色关键字</h4><p>颜色关键字（color keywords）是不区分大小写的标识符，它表示一个具体的颜色，比如 white（白），黑（black）等；</p><p>可接受的关键字列表在CSS的演变过程中发生了改变：</p><ul><li>CSS 标准 1 只接受 16 个基本颜色，称为 VGA 颜色，因为它们来源于 VGA 显卡所显示的颜色集合而被称为 VGA colors （视频图形阵列色彩）。</li><li>CSS 标准 2 增加了 orange 关键字。</li><li>从一开始，浏览器接受其它的颜色，由于一些早期浏览器是 X11 应用程序，这些颜色大多数是 X11 命名的颜色列表，虽然有一点不同。SVG 1.0 是首个正式定义这些关键字的标准；CSS 色彩标准 3 也正式定义了这些关键字。它们经常被称作扩展的颜色关键字， X11 颜色或 SVG 颜色 。</li><li>CSS 颜色标准 4 添加可 rebeccapurple 关键字来纪念 web 先锋 Eric Meyer。</li></ul><p>如下这张图是 16 个基础色，又叫 VGA 颜色。截止到目前为止 CSS 颜色关键字总共有 146 个，这里可以查看 完整的色彩关键字列表[13]。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912160733.png"></p><p>VGA 颜色</p><p>需要注意的是如果声明的时候的颜色关键字是错误的，浏览器会忽略它。</p><h4 id="transparent-关键字"><a href="#transparent-关键字" class="headerlink" title="transparent 关键字"></a>transparent 关键字</h4><p>transparent 关键字表示一个完全透明的颜色，即该颜色看上去将是背景色。从技术上说，它是带有 alpha 通道为最小值的黑色，是 rgba(0,0,0,0) 的简写。</p><p>透明关键字有什么应用场景呢？</p><p><strong>实现三角形</strong></p><p>下面这个图是用 4 条边框填充的正方形，看懂了它你大概就知道该如何用 CSS 写三角形了。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912160726.png"></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span>      <span class="token property">border-top-color</span><span class="token punctuation">:</span> #ffc107<span class="token punctuation">;</span>      <span class="token property">border-right-color</span><span class="token punctuation">:</span> #00bcd4<span class="token punctuation">;</span>      <span class="token property">border-bottom-color</span><span class="token punctuation">:</span> #e26b6b<span class="token punctuation">;</span>      <span class="token property">border-left-color</span><span class="token punctuation">:</span> #cc7cda<span class="token punctuation">;</span>      <span class="token property">border-width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>      <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用 transparent 实现三角形的原理：</p><ul><li>首先宽高必须是 0px，通过边框的粗细来填充内容；</li><li>那条边需要就要加上颜色，而不需要的边则用 transparent；</li><li>想要什么样姿势的三角形，完全由上下左右 4 条边的中有颜色的边和透明的边的位置决定；</li><li>等腰三角形：设置一条边有颜色，然后紧挨着的 2 边是透明，且宽度是有颜色边的一半；直角三角形：设置一条边有颜色，然后紧挨着的任何一边透明即可。</li></ul><p>看下示例：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912160719.png"></p><p><strong>增大点击区域</strong></p><p>常常在移动端的时候点击的按钮的区域特别小，但是由于现实效果又不太好把它做大，所以常用的一个手段就是通过透明的边框来增大按钮的点击区域：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.btn</span> <span class="token punctuation">{</span>      <span class="token property">border</span><span class="token punctuation">:</span> 5px solid transparent<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="currentColor-关键字"><a href="#currentColor-关键字" class="headerlink" title="currentColor 关键字"></a>currentColor 关键字</h4><p>currentColor 会取当前元素继承父级元素的文本颜色值或声明的文本颜色值，即 computed 后的 color 值。</p><p>比如，对于如下 CSS，该元素的边框颜色会是 red：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.btn</span> <span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> 1px solid currentColor<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="RGB-A-颜色"><a href="#RGB-A-颜色" class="headerlink" title="RGB[A] 颜色"></a>RGB[A] 颜色</h4><p>RGB[A] 颜色是由 R(red)-G(green)-B(blue)-A(alpha) 组成的色彩空间。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912160707.png"></p><p>在 CSS 中，它有两种表示形式：</p><ul><li>十六进制符号；</li><li>函数符；</li></ul><p><strong>十六进制符号</strong></p><p>RGB 中的每种颜色的值范围是 00~ff，值越大表示颜色越深。所以一个颜色正常是 6 个十六进制字符加上 # 组成，比如红色就是 #ff0000。</p><p>如果 RGB 颜色需要加上不透明度，那就需要加上 alpha 通道的值，它的范围也是 00~ff，比如一个带不透明度为 67% 的红色可以这样写 #ff0000aa。</p><p>使用十六进制符号表示颜色的时候，都是用 2 个十六进制表示一个颜色，如果这 2 个字符相同，还可以缩减成只写 1 个，比如，红色 #f00；带 67% 不透明度的红色 #f00a。</p><p><strong>函数符</strong></p><p>当 RGB 用函数表示的时候，每个值的范围是 0<del>255 或者 0%</del>100%，所以红色是 rgb(255, 0, 0)， 或者 rgb(100%, 0, 0)。</p><p>如果需要使用函数来表示带不透明度的颜色值，值的范围是 0<del>1 及其之间的小数或者 0%</del>100%，比如带 67% 不透明度的红色是 rgba(255, 0, 0, 0.67) 或者 rgba(100%, 0%, 0%, 67%)</p><blockquote><p>“</p><p>需要注意的是 RGB 这 3 个颜色值需要保持一致的写法，要嘛用数字要嘛用百分比，而不透明度的值的可以不用和 RGB 保持一致写法。比如 rgb(100%, 0, 0) 这个写法是无效的；而 rgb(100%, 0%, 0%, 0.67) 是有效的。</p></blockquote><p>在第 4 代 CSS 颜色标准中，新增了一种新的函数写法，即可以把 RGB 中值的分隔逗号改成空格，而把 RGB 和 alpha 中的逗号改成 /，比如带 67% 不透明度的红色可以这样写 rgba(255 0 0 / 0.67)。另外还把 rgba 的写法合并到 rgb 函数中了，即 rgb 可以直接写带不透明度的颜色。</p><h4 id="HSL-A-颜色"><a href="#HSL-A-颜色" class="headerlink" title="HSL[A] 颜色"></a>HSL[A] 颜色</h4><p>HSL[A] 颜色是由色相(hue)-饱和度(saturation)-亮度(lightness)-不透明度组成的颜色体系。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912160701.png"></p><ul><li>色相（H）是色彩的基本属性，值范围是 0<del>360 或者 0deg</del>360deg， 0 (或 360) 为红色, 120 为绿色, 240 为蓝色；</li><li>饱和度（S）是指色彩的纯度，越高色彩越纯，低则逐渐变灰，取 0~100% 的数值；0% 为灰色， 100% 全色；</li><li>亮度（L），取 0~100%，0% 为暗，100% 为白；</li><li>不透明度（A），取 0<del>100%，或者0</del>1及之间的小数；</li></ul><p>写法上可以参考 RGB 的写法，只是参数的值不一样。</p><p>给一个按钮设置不透明度为 67% 的红色的 color 的写法，以下全部写法效果一致：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">button</span> <span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span> #ff0000aa<span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> #f00a<span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.67<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>100% 0% 0% / 67%<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">hsla</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 67%<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>0deg 100% 50% / 67%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小提示：在 Chrome DevTools 中可以按住 shift + 鼠标左键可以切换颜色的表示方式。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912160642.gif"></p><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><p>媒体查询是指针对不同的设备、特定的设备特征或者参数进行定制化的修改网站的样式。</p><p>你可以通过给 <code>&lt;link&gt;</code> 加上 media 属性来指定该样式文件只能对什么设备生效，不指定的话默认是 all，即对所有设备都生效：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;link rel=<span class="token string">"stylesheet"</span> src=<span class="token string">"styles.css"</span> media=<span class="token string">"screen"</span> /&gt;  &lt;link rel=<span class="token string">"stylesheet"</span> src=<span class="token string">"styles.css"</span> media=<span class="token string">"print"</span> /&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>都支持哪些设备类型？</p><ul><li>all：适用于所有设备；</li><li>print：适用于在打印预览模式下在屏幕上查看的分页材料和文档；</li><li>screen：主要用于屏幕；</li><li>speech：主要用于语音合成器。</li></ul><blockquote><p>需要注意的是：通过 media 指定的  资源尽管不匹配它的设备类型，但是浏览器依然会加载它。</p></blockquote><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912155838.png"></p><p>除了通过 <code>&lt;link&gt;</code> 让指定设备生效外，还可以通过 <code>@media</code> 让 CSS 规则在特定的条件下才能生效。响应式页面就是使用了 @media 才让一个页面能够同时适配 PC、Pad 和手机端。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1000px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>媒体查询支持逻辑操作符：</p><ul><li>and：查询条件都满足的时候才生效；</li><li>not：查询条件取反；</li><li>only：整个查询匹配的时候才生效，常用语兼容旧浏览器，使用时候必须指定媒体类型；</li><li>逗号或者 or：查询条件满足一项即可匹配；</li></ul><p>媒体查询还支持众多的媒体特性[14]，使得它可以写出很复杂的查询条件：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 用户设备的最小高度为680px或为纵向模式的屏幕设备 */</span>  <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-height</span><span class="token punctuation">:</span> 680px<span class="token punctuation">)</span><span class="token punctuation">,</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">orientation</span><span class="token punctuation">:</span> portrait<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="常见需求"><a href="#常见需求" class="headerlink" title="常见需求"></a>常见需求</h2><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><p>之前我们通常是在预处理器里才可以使用变量，而现在 CSS 里也支持了变量的用法。通过自定义属性就可以在想要使用的地方引用它。</p><p>自定义属性也和普通属性一样具有级联性，申明在 :root 下的时候，在全文档范围内可用，而如果是在某个元素下申明自定义属性，则只能在它及它的子元素下才可以使用。</p><p>自定义属性必须通过 <code>--x</code> 的格式申明，比如：–theme-color: red; 使用自定义属性的时候，需要用 var 函数。比如：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;!-- 定义自定义属性 --&gt;  :root</span> <span class="token punctuation">{</span>      <span class="token property">--theme-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token selector">&lt;!-- 使用变量 --&gt;  h1</span> <span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--theme-color<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912155818.png"></p><p>上图这个是使用 CSS 自定义属性配合 JS 实现的动态调整元素的 box-shadow，具体可以看这个 codepen demo。</p><h3 id="1px-边框解决方案"><a href="#1px-边框解决方案" class="headerlink" title="1px 边框解决方案"></a>1px 边框解决方案</h3><p>Retina 显示屏比普通的屏幕有着更高的分辨率，所以在移动端的 1px 边框就会看起来比较粗，为了美观通常需要把这个线条细化处理。这里有篇文章列举了 7 中方案可以参考一下：7种方法解决移动端Retina屏幕1px边框问题[15]</p><p>而这里附上最后一种通过伪类和 transform 实现的相对完美的解决方案：</p><p>只设置单条底部边框：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.scale-1px-bottom</span> <span class="token punctuation">{</span>      <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.scale-1px-bottom::after</span> <span class="token punctuation">{</span>      <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>      <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">-webkit-transform-origin</span><span class="token punctuation">:</span> 0 0<span class="token punctuation">;</span>      <span class="token property">transform-origin</span><span class="token punctuation">:</span> 0 0<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时设置 4 条边框：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.scale-1px</span> <span class="token punctuation">{</span>      <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>      <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.scale-1px::after</span> <span class="token punctuation">{</span>      <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #000<span class="token punctuation">;</span>      <span class="token property">-webkit-box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>      <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 200%<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 200%<span class="token punctuation">;</span>      <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">-webkit-transform-origin</span><span class="token punctuation">:</span> left top<span class="token punctuation">;</span>      <span class="token property">transform-origin</span><span class="token punctuation">:</span> left top<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>什么是浮动：浮动元素会脱离文档流并向左/向右浮动，直到碰到父元素或者另一个浮动元素。</p><p>为什么要清楚浮动，它造成了什么问题？</p><p>因为浮动元素会脱离正常的文档流，并不会占据文档流的位置，所以如果一个父元素下面都是浮动元素，那么这个父元素就无法被浮动元素所撑开，这样一来父元素就丢失了高度，这就是所谓的浮动造成的父元素高度坍塌问题。</p><p>父元素高度一旦坍塌将对后面的元素布局造成影响，为了解决这个问题，所以需要清除浮动，让父元素恢复高度，那该如何做呢？</p><p>这里介绍两种方法：通过 BFC 来清除、通过 clear 来清除。</p><h4 id="BFC-清除浮动"><a href="#BFC-清除浮动" class="headerlink" title="BFC 清除浮动"></a>BFC 清除浮动</h4><p>前面介绍 BFC 的时候提到过，计算 BFC 高度的时候浮动子元素的高度也将计算在内，利用这条规则就可以清楚浮动。</p><p>假设一个父元素 parent 内部只有 2 个子元素 child，且它们都是左浮动的，这个时候 parent 如果没有设置高度的话，因为浮动造成了高度坍塌，所以 parent 的高度会是 0，此时只要给 parent 创造一个 BFC，那它的高度就能恢复了。</p><p>而产生 BFC 的方式很多，我们可以给父元素设置overflow: auto 来简单的实现 BFC 清除浮动，但是为了兼容 IE 最好用 overflow: hidden。</p><pre class="line-numbers language-none"><code class="language-none">.parent {      overflow: hidden;  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过 overflow: hidden 来清除浮动并不完美，当元素有阴影或存在下拉菜单的时候会被截断，所以该方法使用比较局限。</p><h4 id="通过-clear-清除浮动"><a href="#通过-clear-清除浮动" class="headerlink" title="通过 clear 清除浮动"></a>通过 clear 清除浮动</h4><p>我先把结论贴出来：</p><pre class="line-numbers language-none"><code class="language-none">.clearfix {      zoom: 1;  }  .clearfix::after {      content: "";      display: block;      clear: both;  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种写法的核心原理就是通过 ::after 伪元素为在父元素的最后一个子元素后面生成一个内容为空的块级元素，然后通过 clear 将这个伪元素移动到所有它之前的浮动元素的后面，画个图来理解一下。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912155806.png"></p><p>可以结合这个 codepen demo 一起理解上图的 clear 清楚浮动原理。</p><p>上面这个 demo 或者图里为了展示需要所以给伪元素的内容设置为了 ::after，实际使用的时候需要设置为空字符串，让它的高度为 0，从而父元素的高度都是由实际的子元素撑开。</p><p>该方式基本上是现在人人都在用的清除浮动的方案，非常通用。</p><p>参考：CSS中的浮动和清除浮动，梳理一下[16]</p><h3 id="消除浏览器默认样式"><a href="#消除浏览器默认样式" class="headerlink" title="消除浏览器默认样式"></a>消除浏览器默认样式</h3><p>针对同一个类型的 HTML 标签，不同的浏览器往往有不同的表现，所以在网站制作的时候，开发者通常都是需要将这些浏览器的默认样式清除，让网页在不同的浏览器上能够保持一致。</p><p>针对清除浏览器默认样式这件事，在很早之前 CSS 大师 Eric A. Meyer 就干过。它就是写一堆通用的样式用来重置浏览器默认样式，这些样式通常会放到一个命名为 reset.css 文件中。比如大师的 reset.css[17] 是这么写的：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html, body, div, span, applet, object, iframe,  h1, h2, h3, h4, h5, h6, p, blockquote, pre,  a, abbr, acronym, address, big, cite, code,  del, dfn, em, img, ins, kbd, q, s, samp,  small, strike, strong, sub, sup, tt, var,  b, u, i, center,  dl, dt, dd, ol, ul, li,  fieldset, form, label, legend,  table, caption, tbody, tfoot, thead, tr, th, td,  article, aside, canvas, details, embed,   figure, figcaption, footer, header, hgroup,   menu, nav, output, ruby, section, summary,  time, mark, audio, video</span> <span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>      <span class="token property">font</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>      <span class="token property">vertical-align</span><span class="token punctuation">:</span> baseline<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/* HTML5 display-role reset for older browsers */</span>  <span class="token selector">article, aside, details, figcaption, figure,   footer, header, hgroup, menu, nav, section</span> <span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">body</span> <span class="token punctuation">{</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">ol, ul</span> <span class="token punctuation">{</span>      <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">blockquote, q</span> <span class="token punctuation">{</span>      <span class="token property">quotes</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">blockquote:before, blockquote:after,  q:before, q:after</span> <span class="token punctuation">{</span>      <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>      <span class="token property">content</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">table</span> <span class="token punctuation">{</span>      <span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span>      <span class="token property">border-spacing</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>他的这份 reset.css 据说是被使用最广泛的重设样式的方案了。</p><p>除了 reset.css 外，后来又出现了 Normalize.css[18] 。关于 Normalize.css, 其作者 necolas 专门写了一篇文章介绍了它，并谈到了它和 reset.css 的区别。这个是他写那篇文章的翻译版：让我们谈一谈 Normalize.css[19]。</p><p>文章介绍到：Normalize.css 只是一个很小的CSS文件，但它在默认的 HTML 元素样式上提供了跨浏览器的高度一致性。相比于传统的 CSS reset，Normalize.css 是一种现代的、为 HTML5 准备的优质替代方案，现在已经有很多知名的框架和网站在使用它了。</p><p>Normalize.css 的具体样式可以看这里 Normalize.css</p><p>区别于 reset.css，Normalize.css 有如下特点：</p><ul><li>reset.css 几乎为所有标签都设置了默认样式，而 Normalize.css 则是有选择性的保护了部分有价值的默认值；</li><li>修复了很多浏览器的 bug，而这是 reset.css 没做到的；</li><li>不会让你的调试工具变的杂乱，相反 reset.css 由于设置了很多默认值，所以在浏览器调试工具中往往会看到一大堆的继承样式，显得很杂乱；</li><li>Normalize.css 是模块化的，所以可以选择性的去掉永远不会用到的部分，比如表单的一般化；</li><li>Normalize.css 有详细的说明文档；</li></ul><h3 id="长文本处理"><a href="#长文本处理" class="headerlink" title="长文本处理"></a>长文本处理</h3><p><strong>默认：字符太长溢出了容器</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912155744.png"></p><p><strong>字符超出部分换行</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914005529.png"></p><p><strong>字符超出位置使用连字符</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912155738.png"></p><p><strong>单行文本超出省略</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914005537.png"></p><p><strong>多行文本超出省略</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914005552.png"></p><p>查看以上这些方案的示例： codepen demo</p><p>有意思的是刚好前两天看到 chokcoco 针对文本溢出也写了一篇文章，主要突出的是对整块的文本溢出处理。啥叫整块文本？比如，下面这种技术标签就是属于整块文本：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912155731.png"></p><p>另外他还对 iOS/Safari 做了兼容处理，感兴趣的可以去阅读下：CSS 整块文本溢出省略特性探究[20]。</p><h3 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h3><p>让元素在父元素中呈现出水平垂直居中的形态，无非就 2 种情况：</p><ul><li>单行的文本、inline 或者 inline-block 元素；</li><li>固定宽高的块级盒子；</li><li>不固定宽高的块级盒子；</li></ul><p>以下列到的所有水平垂直居中方案这里写了个 codepen demo，配合示例阅读效果更佳。</p><h4 id="单行的文本、inline-或-inline-block-元素"><a href="#单行的文本、inline-或-inline-block-元素" class="headerlink" title="单行的文本、inline 或 inline-block 元素"></a>单行的文本、inline 或 inline-block 元素</h4><p><strong>水平居中</strong></p><p>此类元素需要水平居中，则父级元素必须是块级元素(<code>block level</code>)，且父级元素上需要这样设置样式：</p><pre class="line-numbers language-none"><code class="language-none">.parent {      text-align: center;  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>垂直居中</strong></p><p>方法一：通过设置上下内间距一致达到垂直居中的效果：</p><pre class="line-numbers language-none"><code class="language-none">.single-line {      padding-top: 10px;      padding-bottom: 10px;  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：通过设置 <code>height</code> 和 <code>line-height</code> 一致达到垂直居中：</p><pre class="line-numbers language-none"><code class="language-none">.single-line {      height: 100px;      line-height: 100px;  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="固定宽高的块级盒子"><a href="#固定宽高的块级盒子" class="headerlink" title="固定宽高的块级盒子"></a>固定宽高的块级盒子</h4><p><strong>方法一：absolute + 负 margin</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914005614.png"></p><p><strong>方法二：absolute + margin auto</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912155724.png"></p><p><strong>方法三：absolute + calc</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914005620.png"></p><h4 id="不固定宽高的块级盒子"><a href="#不固定宽高的块级盒子" class="headerlink" title="不固定宽高的块级盒子"></a>不固定宽高的块级盒子</h4><p>这里列了 6 种方法，参考了颜海镜 写的文章 ，其中的两种 line-height 和 writing-mode 方案看后让我惊呼：还有这种操作？学到了学到了。</p><p><strong>方法一：absolute + transform</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912155717.png"></p><p><strong>方法二：line-height + vertical-align</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914005627.png"></p><p><strong>方法三：writing-mode</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914005633.png"></p><p><strong>方法四：table-cell</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914005634.png"></p><p><strong>方法五：flex</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912155710.png"></p><p><strong>方法六：grid</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912155704.png"></p><h3 id="常用布局"><a href="#常用布局" class="headerlink" title="常用布局"></a>常用布局</h3><h4 id="两栏布局（边栏定宽主栏自适应）"><a href="#两栏布局（边栏定宽主栏自适应）" class="headerlink" title="两栏布局（边栏定宽主栏自适应）"></a>两栏布局（边栏定宽主栏自适应）</h4><p>针对以下这些方案写了几个示例： codepen demo</p><p><strong>方法一：float + overflow（BFC 原理）</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914005646.png"></p><p><strong>方法二：float + margin</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912155657.png"></p><p><strong>方法三：flex</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914005701.png"></p><p><strong>方法四：grid</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912155650.png"></p><h4 id="三栏布局（两侧栏定宽主栏自适应）"><a href="#三栏布局（两侧栏定宽主栏自适应）" class="headerlink" title="三栏布局（两侧栏定宽主栏自适应）"></a>三栏布局（两侧栏定宽主栏自适应）</h4><p>针对以下这些方案写了几个示例： codepen demo</p><p><strong>方法一：圣杯布局</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912155616.png"></p><p><strong>方法二：双飞翼布局</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912155643.png"></p><p><strong>方法三：float + overflow（BFC 原理）</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912155556.png"></p><p><strong>方法四：flex</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912155633.png"></p><p><strong>方法五：grid</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912155549.png"></p><h4 id="多列等高布局"><a href="#多列等高布局" class="headerlink" title="多列等高布局"></a>多列等高布局</h4><p>结合示例阅读更佳：codepen demo</p><p><strong>方法一：padding + 负margin</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914005719.png"></p><p><strong>方法二：设置父级背景图片</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912155542.png"></p><h4 id="三行布局（头尾定高主栏自适应）"><a href="#三行布局（头尾定高主栏自适应）" class="headerlink" title="三行布局（头尾定高主栏自适应）"></a>三行布局（头尾定高主栏自适应）</h4><p>列了 4 种方法，都是基于如下的 HTML 和 CSS 的，结合示例阅读效果更佳：codepen demo</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;div class=<span class="token string">"layout"</span>&gt;      &lt;header&gt;&lt;/header&gt;      &lt;main&gt;          &lt;div class=<span class="token string">"inner"</span>&gt;&lt;/div&gt;      &lt;/main&gt;      &lt;footer&gt;&lt;/footer&gt;  &lt;/div&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html,  body,  .layout</span> <span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">body</span> <span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">header,   footer</span> <span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">main</span> <span class="token punctuation">{</span>      <span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方法一：calc</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912155519.png"></p><p><strong>方法二：absolute</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912155509.png"></p><p><strong>方法三：flex</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912155502.png"></p><p><strong>方法四：grid</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912155500.png"></p><h2 id="结了个尾"><a href="#结了个尾" class="headerlink" title="结了个尾"></a>结了个尾</h2><p>这是我断断续续写了 2 周完成的文章，算是自己对 CSS 的一个总结，虽然写得很长，但不足以覆盖所有 CSS 的知识，比如动画和一些 CSS3 的新特性就完全没涉及，因为这要写下来估计得有大几万字（其实就是懒 😝 ）。</p><p>码字作图不易，如果喜欢或者对你有丝毫帮助的话，帮忙点个👍 哈，点赞就是我的动力。同时也希望自己能坚持认真的写下去，因为在总结提升自己的同时如果也能帮助更多的前端er，那将会让我感觉很开心。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>[1]@charset: <em><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@charset">https://developer.mozilla.org/zh-CN/docs/Web/CSS/@charset</a></em></p><p>[2]Byte order mark: <em><a href="https://en.wikipedia.org/wiki/Byte_order_mark">https://en.wikipedia.org/wiki/Byte_order_mark</a></em></p><p>[3]@import: <em><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@import">https://developer.mozilla.org/zh-CN/docs/Web/CSS/@import</a></em></p><p>[4]@supports: <em><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@supports">https://developer.mozilla.org/zh-CN/docs/Web/CSS/@supports</a></em></p><p>[5]MDN CSS Selectors: <em><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Selectors">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Selectors</a></em></p><p>[6]Visual formatting model: <em><a href="https://www.w3.org/TR/CSS2/visuren.html">https://www.w3.org/TR/CSS2/visuren.html</a></em></p><p>[7]CSS 原理 - 你所不知道的 display: <em><a href="https://yachen168.github.io/article/display.html">https://yachen168.github.io/article/display.html</a></em></p><p>[8]格式化上下文: <em><a href="https://ithelp.ithome.com.tw/articles/10223896?sc=pt">https://ithelp.ithome.com.tw/articles/10223896?sc=pt</a></em></p><p>[9]CSS 原理 - Formatting Context: <em><a href="https://yachen168.github.io/article/Formatting-context.html">https://yachen168.github.io/article/Formatting-context.html</a></em></p><p>[10]Inline formatting contexts: <em><a href="https://www.w3.org/TR/CSS2/visuren.html#inline-formatting">https://www.w3.org/TR/CSS2/visuren.html#inline-formatting</a></em></p><p>[11]彻底搞懂CSS层叠上下文、层叠等级、层叠顺序、z-index: <em><a href="https://juejin.cn/post/6844903667175260174">https://juejin.cn/post/6844903667175260174</a></em></p><p>[12]CSS 颜色草案: <em><a href="https://drafts.csswg.org/css-color-3/">https://drafts.csswg.org/css-color-3/</a></em></p><p>[13]完整的色彩关键字列表: <em><a href="https://codepen.io/bulandent/pen/gOLovwL">https://codepen.io/bulandent/pen/gOLovwL</a></em></p><p>[14]众多的媒体特性: <em><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries#%E5%AA%92%E4%BD%93%E7%89%B9%E6%80%A7">https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries#%E5%AA%92%E4%BD%93%E7%89%B9%E6%80%A7</a></em></p><p>[15]7种方法解决移动端Retina屏幕1px边框问题: <em><a href="https://www.jianshu.com/p/7e63f5a32636">https://www.jianshu.com/p/7e63f5a32636</a></em></p><p>[16]CSS中的浮动和清除浮动，梳理一下: <em><a href="https://www.jianshu.com/p/09bd5873bed4">https://www.jianshu.com/p/09bd5873bed4</a></em></p><p>[17]reset.css: <em><a href="https://meyerweb.com/eric/tools/css/reset/">https://meyerweb.com/eric/tools/css/reset/</a></em></p><p>[18]Normalize.css: <em><a href="https://github.com/necolas/normalize.css">https://github.com/necolas/normalize.css</a></em></p><p>[19]让我们谈一谈 Normalize.css: <em><a href="https://jerryzou.com/posts/aboutNormalizeCss/">https://jerryzou.com/posts/aboutNormalizeCss/</a></em></p><p>[20]CSS 整块文本溢出省略特性探究: <em><a href="https://juejin.cn/post/6938583040469762055">https://juejin.cn/post/6938583040469762055</a></em></p><p>From <a href="https://mp.weixin.qq.com/s/UtYENocSsl0R10h8fww7Iw">https://mp.weixin.qq.com/s/UtYENocSsl0R10h8fww7Iw</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-5-万字-CSS-基础拾遗（核心知识、常见需求）&quot;&gt;&lt;a href=&quot;#1-5-万字-CSS-基础拾遗（核心知识、常见需求）&quot; class=&quot;headerlink&quot; title=&quot;1.5 万字 CSS 基础拾遗（核心知识、常见需求）&quot;&gt;&lt;/a&gt;1.5 万字 C</summary>
      
    
    
    
    <category term="web" scheme="https://blog.17lai.site/categories/web/"/>
    
    
    <category term="web" scheme="https://blog.17lai.site/tags/web/"/>
    
    <category term="http" scheme="https://blog.17lai.site/tags/http/"/>
    
    <category term="ccs" scheme="https://blog.17lai.site/tags/ccs/"/>
    
  </entry>
  
  <entry>
    <title>Vim IDE Docker 以及中文指南</title>
    <link href="https://blog.17lai.site/ide/2021-09-15-vim-checklist/"/>
    <id>https://blog.17lai.site/ide/2021-09-15-vim-checklist/</id>
    <published>2021-09-15T04:25:00.000Z</published>
    <updated>2021-10-11T12:39:42.446Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Docker Vim IDE 由博主定制，加入中文环境配置，支持CJK。并升级到最新版本！</p></blockquote><h2 id="Vim-Docker"><a href="#Vim-Docker" class="headerlink" title="Vim Docker"></a><a href="https://hub.docker.com/r/bloodstar/vim">Vim Docker</a></h2><p><img src="https://images.weserv.nl/?url=https://i.imgur.com/G6KybVM.png" alt="Vim Docker"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull bloodstar/vim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">edit</span><span class="token operator">=</span><span class="token string">'docker run -ti --rm -v $(pwd):/home/developer/workspace bloodstar/vim'</span> edit some.file <span class="token builtin class-name">alias</span> <span class="token assign-left variable">edit_update</span><span class="token operator">=</span><span class="token string">"docker pull bloodstar/vim:latest"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Vim-IDE-Docker"><a href="#Vim-IDE-Docker" class="headerlink" title="Vim IDE Docker"></a><a href="https://hub.docker.com/r/bloodstar/drop-in">Vim IDE Docker</a></h2><p><img src="https://images.weserv.nl/?url=https://i.imgur.com/RVTlBBO.png" alt="drop-in"></p><h4 id="What’s-inside"><a href="#What’s-inside" class="headerlink" title="What’s inside:"></a>What’s inside:</h4><ul><li><a href="http://www.alpinelinux.org/"><code>Alpine Linux</code></a></li><li><a href="http://www.vim.org/"><code>Vim</code></a> + a ton of awesome plugins <em>see <a href="https://hub.docker.com/r/bloodstar/vim/"><code>bloodstar/vim:latest</code></a></em></li><li>Good support of <a href="https://golang.org/"><code>Golang</code></a> development with <a href="https://hub.docker.com/r/bloodstar/go-tools/"><code>bloodstar/go-tools</code></a> container</li><li><a href="https://tmux.github.io/"><code>tmux</code></a></li><li><a href="https://powerline.readthedocs.io/"><code>powerline</code></a></li><li><a href="https://mosh.mit.edu/"><code>Mosh</code></a></li><li>OpenSSH, Bash, OMF, Python, etc.</li></ul><h4 id="how-to-start-the-daemon-and-all-containers"><a href="#how-to-start-the-daemon-and-all-containers" class="headerlink" title="how to start the daemon(and all containers)"></a>how to start the daemon(and all containers)</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker create -v <span class="token string">'/usr/lib/go'</span> --name go-tools <span class="token punctuation">\</span><span class="token string">'bloodstar/go-tools'</span> <span class="token string">'/bin/true'</span>docker run -v <span class="token variable"><span class="token variable">$(</span>'pwd'<span class="token variable">)</span></span>:/home/developer/workspace <span class="token punctuation">\</span>--volumes-from go-tools <span class="token punctuation">\</span>-v ~/.ssh/pub_rsa:/etc/ssh_keys:ro <span class="token punctuation">\</span>-v /etc/localtime:/etc/localtime:ro <span class="token punctuation">\</span>-d -p <span class="token number">80</span>:80 -p <span class="token number">8080</span>:8080 -p <span class="token number">62222</span>:62222 -p <span class="token number">60001</span>:60001/udp <span class="token punctuation">\</span>--name drop-in bloodstar/drop-in<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><code>-v /etc/localtime:/etc/localtime:ro</code> - makes tmux display local time</em></p><h4 id="how-to-connect"><a href="#how-to-connect" class="headerlink" title="how to connect:"></a>how to connect:</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mosh --ssh<span class="token operator">=</span><span class="token string">"ssh -p 62222"</span> -- developer@$<span class="token operator">&lt;</span>ip<span class="token operator">&gt;</span> tmux -u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="or-without-host-identity-check"><a href="#or-without-host-identity-check" class="headerlink" title="or without host identity check:"></a>or without host identity check:</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mosh --ssh<span class="token operator">=</span><span class="token string">"ssh -o StrictHostKeyChecking=no -p 62222"</span> -- developer@$<span class="token operator">&lt;</span>ip<span class="token operator">&gt;</span> tmux -u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Useful-Bash-scripts"><a href="#Useful-Bash-scripts" class="headerlink" title="Useful Bash scripts"></a>Useful Bash scripts</h4><h6 id="Connect"><a href="#Connect" class="headerlink" title="Connect"></a><strong>Connect</strong></h6><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">ip</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>docker inspect --format <span class="token string">'{{ .NetworkSettings.IPAddress }}'</span> drop-in<span class="token variable">)</span></span>mosh --ssh<span class="token operator">=</span><span class="token string">"ssh -p 62222"</span> -- developer@<span class="token variable">$ip</span> tmux -u<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="start-the-daemon-and-all-containers"><a href="#start-the-daemon-and-all-containers" class="headerlink" title="start the daemon(and all containers)"></a><strong>start the daemon(and all containers)</strong></h6><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">dtc_id</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -a -q --filter <span class="token string">'name=vim-go-tools'</span><span class="token variable">)</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> -z <span class="token string">"<span class="token variable">${dtc_id}</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token builtin class-name">echo</span> <span class="token string">'vim-go-tools container not found. Creating...'</span> docker create -v <span class="token string">'/usr/lib/go'</span> --name <span class="token string">'vim-go-tools'</span> <span class="token punctuation">\</span>   <span class="token string">'bloodstar/go-tools'</span> <span class="token string">'/bin/true'</span> <span class="token builtin class-name">echo</span> <span class="token string">'Done!'</span><span class="token keyword">fi</span><span class="token builtin class-name">echo</span> <span class="token string">'starting daemon...'</span>docker run -v <span class="token variable"><span class="token variable">$(</span>'pwd'<span class="token variable">)</span></span>:/home/developer/workspace <span class="token punctuation">\</span>  --volumes-from vim-go-tools <span class="token punctuation">\</span>  -v ~/.ssh/pub_rsa:/etc/ssh_keys:ro <span class="token punctuation">\</span>  -v /etc/localtime:/etc/localtime:ro <span class="token punctuation">\</span>  -e <span class="token string">"GEMAIL=&lt;github email&gt;"</span> <span class="token punctuation">\</span>  -e <span class="token string">"GNAME=&lt;github name&gt;"</span> <span class="token punctuation">\</span>  -d -p <span class="token number">80</span>:80 -p <span class="token number">8080</span>:8080 -p <span class="token number">62222</span>:62222 -p <span class="token number">60001</span>:60001/udp <span class="token punctuation">\</span>  --name drop-in bloodstar/drop-in<span class="token builtin class-name">echo</span> <span class="token string">'Done!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vim-中文快查表-lt-戳这里"><a href="#Vim-中文快查表-lt-戳这里" class="headerlink" title="Vim 中文快查表   <= 戳这里"></a><a href="https://blog.17lai.site/cheatsheets/Vim_CN.docset/Contents/Resources/Documents/">Vim 中文快查表</a>   &lt;= 戳这里</h2><blockquote><p>Tips: 在网页上端导航栏，[快查] =&gt; [更多快查表]，有更多快查表！<br>快去看看吧。</p></blockquote><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><p><img src="https://cimg1.17lai.site/data/2021/09/1520210915150901.png" alt="vim速查"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Docker Vim IDE 由博主定制，加入中文环境配置，支持CJK。并升级到最新版本！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Vim-Docker&quot;&gt;&lt;a href=&quot;#Vim-Docker&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="ide" scheme="https://blog.17lai.site/categories/ide/"/>
    
    
    <category term="linux" scheme="https://blog.17lai.site/tags/linux/"/>
    
    <category term="vim" scheme="https://blog.17lai.site/tags/vim/"/>
    
    <category term="ide" scheme="https://blog.17lai.site/tags/ide/"/>
    
    <category term="docker" scheme="https://blog.17lai.site/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>深度学习之视频人脸识别系列</title>
    <link href="https://blog.17lai.site/ai/2021-09-14-deep-learning-of-face-recognition/"/>
    <id>https://blog.17lai.site/ai/2021-09-14-deep-learning-of-face-recognition/</id>
    <published>2021-09-14T04:25:00.000Z</published>
    <updated>2021-10-09T00:05:07.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系列1-简介"><a href="#系列1-简介" class="headerlink" title="系列1 简介"></a>系列1 简介</h2><p>出品 | 磐创AI技术团队</p><p>【磐创AI导读】本文是深度学习之视频<a href="https://cloud.tencent.com/product/facerecognition?from=10680">人脸识别</a>系列的第一篇文章，介绍了人脸识别领域的一些基本概念，分析了深度学习在人脸识别的基本流程，并总结了近年来科研领域的研究进展，最后分析了静态数据与视频动态数据在人脸识别技术上的差异。欢迎大家点击上方篮子关注我们的公众号：磐创AI。</p><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a><strong>一、基本概念</strong></h2><h3 id="1-人脸识别（face-identification）"><a href="#1-人脸识别（face-identification）" class="headerlink" title="1. 人脸识别（face identification）"></a><strong>1. 人脸识别（face identification）</strong></h3><p>人脸识别是1对n的比对，给定一张人脸图片，如何在n张人脸图片中找到同一张人脸图片，相对于一个分类问题，将一张人脸划分到n张人脸中的一张。类似于管理人员进行的人脸识别门禁系统。</p><h3 id="2-人脸验证（face-verification）"><a href="#2-人脸验证（face-verification）" class="headerlink" title="2.人脸验证（face verification）"></a><strong>2.人脸验证（face verification）</strong></h3><p>人脸验证的1对1的比对，给定两张人脸图片，判断这两张人脸是否为同一人，类似于手机的人脸解锁系统，事先在手机在录入自己的脸部信息，然后在开锁时比对摄像头捕捉到的人脸是否与手机上录入的人脸为同一个人。</p><h3 id="3-人脸检测（face-detection）"><a href="#3-人脸检测（face-detection）" class="headerlink" title="3.人脸检测（face detection）"></a><strong>3.人脸检测（face detection）</strong></h3><p>人脸检测是在一张图片中把人脸检测出来，即在图片上把人脸用矩形框出来，并得到矩形的坐标，如下图所示。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914140027.png"></p><h3 id="4-人脸关键点检测"><a href="#4-人脸关键点检测" class="headerlink" title="4. 人脸关键点检测"></a><strong>4. 人脸关键点检测</strong></h3><p>根据输入的人脸图像，识别出面部关键特征点，如眼睛、鼻尖、嘴角点、眉毛以及人脸各部件轮廓点的坐标，如下图所示。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914140105.png"></p><h3 id="5-人脸矫正（人脸对齐）"><a href="#5-人脸矫正（人脸对齐）" class="headerlink" title="5. 人脸矫正（人脸对齐）"></a><strong>5. 人脸矫正（人脸对齐）</strong></h3><p>通过人脸关键点检测得到人脸的关键点坐标，然后根据人脸的关键点坐标调整人脸的角度，使人脸对齐，由于输入图像的尺寸是大小不一的，人脸区域大小也不相同，角度不一样，所以要通过坐标变换，对人脸图像进行归一化操作，如下图所示。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914140120.png"></p><h2 id="二、基于深度学习的人脸识别算法基本流程"><a href="#二、基于深度学习的人脸识别算法基本流程" class="headerlink" title="二、基于深度学习的人脸识别算法基本流程"></a><strong>二、基于深度学习的人脸识别算法基本流程</strong></h2><p>随着神经网络的迅速发展和其对图像数据的强大的特征提取，深度学习运用于人脸识别也成为热点研究方向；2014年的开山之作DeepFace，第一个真正将<a href="https://cloud.tencent.com/solution/bigdata?from=10680">大数据</a>和深度学习结合应用于人脸识别与验证，确立人脸识别的常规流程：图片-&gt;人脸与关键点检测-&gt;人脸对齐-&gt;人脸表征（representation）-&gt;分类。首先将图片中的人脸检测处理并通过关键点进行对齐，如何输入到神经网络，得到特征向量，通过分类训练过程，该向量即为人脸的特征向量。要求出两张人脸的相似度即计算两个特征的向量度量之差，方法包括：SVM、SiameseNetwork、JointBayesian、L1距离、L2距离、cos距离等。</p><h2 id="三、科研领域近期进展"><a href="#三、科研领域近期进展" class="headerlink" title="三、科研领域近期进展"></a><strong>三、科研领域近期进展</strong></h2><p>科研领域近期进展主要集中于loss函数的研究，包括DeepId2（Contrastive Loss）、FaceNet（Triplet loss）、L-Softmax、SphereFace（A-Softmax）、Center Loss、L2-Softmax、NormFace、CosFace（AM-Softmax）、ArcFace（AA-Softmax）等。</p><h2 id="四、基于视频人脸识别和图片人脸识别的区别"><a href="#四、基于视频人脸识别和图片人脸识别的区别" class="headerlink" title="四、基于视频人脸识别和图片人脸识别的区别"></a><strong>四、基于视频人脸识别和图片人脸识别的区别</strong></h2><p><strong>（_该小结部分参考于博客园 - 米罗西<a href="http://www.cnblogs.com/zhehan54/p/6727631.html_%EF%BC%89">http://www.cnblogs.com/zhehan54/p/6727631.html_）</a></strong></p><p>相对于图片数据，目前视频人脸识别有很多挑战，包括：（1）视频数据一般为户外，视频图像质量比较差；（2）人脸图像比较小且模糊；（3）视频人脸识别对实时性要求更高。</p><p>但是视频数据也有一些优越性，视频数据同时具有空间信息和时间信息，在时间和空间的联合空间中描述人脸和识别人脸会具有一定提升空间。在视频数据中人脸跟踪是一个提高识别的方法，首先检测出人脸，然后跟踪人脸特征随时间的变化。当捕捉到一帧比较好的图像时，再使用图片人脸识别算法进行识别。这类方法中跟踪和识别是单独进行的，时间信息只在跟踪阶段用到。</p><p>【总结】：本期文章主要介绍了基于深度学习的人脸识别算法的一些基本入门知识，下一期我给大家介绍人脸识别中获取神经网络输入的算法，即关于人脸检测、人脸关键点检测与人脸对齐的一些重要算法和相关论文解析。</p><h2 id="系列2-人脸检测与对齐"><a href="#系列2-人脸检测与对齐" class="headerlink" title="系列2 人脸检测与对齐"></a>系列2 人脸检测与对齐</h2><h2 id="一、人脸检测与关键点检测"><a href="#一、人脸检测与关键点检测" class="headerlink" title="一、人脸检测与关键点检测"></a><strong>一、人脸检测与关键点检测</strong></h2><h3 id="1-问题描述："><a href="#1-问题描述：" class="headerlink" title="1. 问题描述："></a><strong>1. 问题描述：</strong></h3><p>人脸检测解决的问题为给定一张图片，输出图片中人脸的位置，即使用方框框住人脸，输出方框的左上角坐标和右下角坐标或者左上角坐标和长宽。算法难点包括：人脸大小差异、人脸遮挡、图片模糊、角度与姿态差异、表情差异等。而关键检测则是输出人脸关键点的坐标，如左眼（x1，y1）、右眼（x2，y2）、鼻子（x3，y3）、嘴巴左上角（x4，y4）、嘴巴右上角（x5，y5）等。</p><h3 id="2-深度学习相关算法："><a href="#2-深度学习相关算法：" class="headerlink" title="2. 深度学习相关算法："></a><strong>2. 深度学习相关算法：</strong></h3><h4 id="（1）Cascade-CNN"><a href="#（1）Cascade-CNN" class="headerlink" title="（1）Cascade CNN"></a><strong>（1）Cascade CNN</strong></h4><p>Cascade CNN源于发表于2015年CVPR上的一篇论文A Convolutional Neural Network Cascade for Face Detection【2】，作者提出了一种级连的CNN网络结构用于人脸检测。算法主体框架是基于V-J的瀑布流思想【1】，是传统技术和深度网络相结合的一个代表，Cascade CNN包含了多个分类器，这些分类器使用级联结构进行组织，与V-J不同的地方在于Cascade CNN采用卷积网络作为每一级的分类器。整个网络的处理流程如下图所示：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914140330.png"></p><p>整个处理流程里包含了六个网络：12-net、12-calibration-net、24-net、24-calibration-net、48-net、48-calibration-net，其中三个二分类网络用于分类其是否为人脸，另外三个calibration网络用于矫正人脸框边界。其中第二个网络之后、第四个网络之后、第五个网络之后使用NMS算法过滤掉冗余的框。</p><p>12-net，24-net和48-net的网络结构如下图所示：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914140401.png"></p><p>13-12-calibration-net，24-calibration-net，48-calibration-net的结构如下图所示：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914140426.png"></p><p>该算法结合了V-J框架构造了级连的CNN网络结构并设计边界矫正网络用来专门矫正人脸框边界，在AFW数据集上准确率达到97.97%。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914140457.png"></p><h4 id="（2）Faceness-Net"><a href="#（2）Faceness-Net" class="headerlink" title="（2）Faceness-Net"></a><strong>（2）Faceness-Net</strong></h4><p>Faceness-Net源于论文A convolutional neural network cascade for face detection【3】，该算法基于DCNN网络【5】的人脸局部特征分类器，算法首先进行人脸局部特征的检测，使用多个基于DCNN网络的facial parts分类器对人脸进行评估，然后根据每个部件的得分进行规则分析得到Proposal的人脸区域，然后从局部到整体得到人脸候选区域，再对人脸候选区域进行<a href="https://cloud.tencent.com/product/facerecognition?from=10680">人脸识别</a>和矩形框坐标回归，该过程分为两个步骤。</p><p>第一个步骤：每个人脸局部特征使用attribute-aware网络检测并生成人脸局部图，其中一共五个特征属性： 头发、眼睛、鼻子、嘴巴、胡子。然后通过人脸局部图根据评分构建人脸候选区域，具体如下图所示：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914140529.png"></p><p>第二个步骤：训练一个多任务的卷积网络来完成人脸二分类和矩形框坐标回归，进一步提升其效果，具体如下图所示：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914140548.png"></p><p>Faceness从脸部特征的角度来解决人脸检测中的遮挡和姿态角度问题，其整体性能在当时是非常好的，在AFW数据集上准确率可以达到98.05%。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914140611.png"></p><h4 id="（3）MTCNN"><a href="#（3）MTCNN" class="headerlink" title="（3）MTCNN"></a><strong>（3）MTCNN</strong></h4><p>MTCNN源于论文Joint Face Detection and Alignment using Multi-task Cascaded Convolutional Networks【6】，是基于多任务级联卷积神经网络来解决人脸检测和对齐问题，同时输出图片的人脸矩阵框和关键点坐标（左眼、右眼、鼻子、嘴巴左上角、嘴巴右上角）。MTCNN为三阶的级联卷积神经网络，整体框架如下图所示：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914140644.png"></p><p>输入阶段：为应对目标多尺度问题，将原始图像resize到不同尺寸，构建图像金字塔，作为三阶级联架构的输入，这样处理可以更好地检测大小不一的人脸。</p><p>第一阶段：通过一个全部由卷积层组成的CNN，取名P-Net，获取候选人脸框、关键点坐标和人脸分类（是人脸或不是），之后采用NMS过滤掉高重叠率的候选窗口。如下图所示：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914140717.png"></p><p>第二阶段：第一阶段输出的候选人脸框作为更为复杂的R-Net网络的输入，R-Net进一步筛除大量错误的候选人脸框，同样也通过NMS过滤掉高重叠率的候选窗口。如下图所示：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914140741.png"></p><p>第三阶段：与第二阶段类似，最终网络输出人脸框坐标、关键点坐标和人脸分类（是人脸或不是）。如下图所示：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914140801.png"></p><p>MTCNN通过三级的级联卷积神经网络对任务进行从粗到细的处理，还提出在线困难样本生成策略（online hard sample mining ）可以进一步提升性能。兼并了速度与准确率，速度在<a href="https://cloud.tencent.com/product/gpu?from=10680">GPU</a>上可以达到99FPS，在 FDDB数据集上可以达到95.04准确率，具体如下图所示：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914140818.png"></p><h2 id="二、人脸对齐（部分参考于GraceDD的博客文章）"><a href="#二、人脸对齐（部分参考于GraceDD的博客文章）" class="headerlink" title="二、人脸对齐（部分参考于GraceDD的博客文章）"></a><strong>二、人脸对齐（部分参考于GraceDD的博客文章）</strong></h2><p>人脸对齐通过人脸关键点检测得到人脸的关键点坐标，然后根据人脸的关键点坐标调整人脸的角度，使人脸对齐，由于输入图像的尺寸是大小不一的，人脸区域大小也不相同，角度不一样，所以要通过坐标变换，对人脸图像进行归一化操作。人脸关键点检测有很多算法可以使用包括：ASM、AAM、DCNN 、TCDCN 、MTCNN 、TCNN、TCNN等，这里就不详细介绍，主要说一下得到人脸关键点之后如何进行人脸对齐，是所有人脸达到归一化效果，该过程如下图所示：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914140841.png"></p><p>该过程涉及到图像的仿射变换，简单来说，“仿射变换”就是：“线性变换”+“平移”，即坐标的变换。假如我们希望人脸图片归一化为尺寸大小600<em>600，左眼位置在（180，200），右眼位置在（420，200）。 这样人脸中心在图像高度的1/3位置，并且两个眼睛保持水平，所以我们选择左眼角位置为( 0.3</em>width, height / 3 )，右眼角位置为（0.7*width , height / 3） 。</p><p>利用这两个点计算图像的变换矩阵（similarity transform），该矩阵是一个2*3的矩阵，如下：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652.png"></p><p>如果我们想对一个矩形进行变换，其中x、y方向的缩放因为分别为sx，sy，同时旋转一个角度 ，然后再在x方向平移tx, 在y方向平移ty</p><p>利用opencv的estimateRigidTransform方法，可以获得这样的变换矩阵，但遗憾的是，estimateRigidTransform至少需要三个点，所以我们需要构选第三个点，构造方法是用第三个点与已有的两个点构成等边三角形，这样第三个点的坐标为： </p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914140918.png"></p><p>代码如下：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914140938.png"></p><p>经过上一步的处理之后，所有的图像都变成一样大小，并且又三个关键点的位置是保持一致的，但因为除了三个点对齐了之外，其他点并没有对齐。所以根据得到的变换矩阵对剩下所有的点进行仿射变换，opencv代码如下所示：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914141001.png"></p><p>img为输入图像;</p><p>warped为变换后图像，类型与src一致;</p><p>M为变换矩阵，需要通过其它函数获得，当然也可以手动输入;</p><p>Image_size为输出图像的大小;</p><h2 id="三、-总结"><a href="#三、-总结" class="headerlink" title="三、 总结"></a><strong>三、 总结</strong></h2><p>本期文章主要介绍了人脸检测与对齐的相关算法，下一期我给大家介绍一下人脸表征的相关算法，即通过深度学习提取人脸特征，通过比较人脸特征进行人脸识别与验证。</p><h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a><strong>参考文献：</strong></h3><ul><li>【1】 S.Z.Li, L.Zhu, Z.Q.Zhang, A.Blake, H.J.Zhang, H.Y.Shum. Statistical learning of multi-view face detection. In: Proceedings of the 7-th European Conference on Computer Vision. Copenhagen, Denmark: Springer, 2002.67-81.</li><li>【2】Li H, Lin Z, Shen X, et al. A convolutional neural network cascade for face detection[C]//Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition. 2015: 5325-5334.</li><li>【3】Yang S, Luo P, Loy C C, et al. Faceness-Net: Face detection through deep facial part responses[J]. IEEE transactions on pattern analysis and machine intelligence, 2017.</li><li>【4】Yang S, Luo P, Loy C C, et al. From facial parts responses to face detection: A deep learning approach[C]//Proceedings of the IEEE International Conference on Computer Vision. 2015: 3676-3684.</li><li>【5】Sun Y, Wang X, Tang X. Deep convolutional network cascade for facial point detection[C]//Proceedings of the IEEE conference on computer vision and pattern recognition. 2013: 3476-3483.</li><li>【6】Zhang K, Zhang Z, Li Z, et al. Joint face detection and alignment using multitask cascaded convolutional networks[J]. IEEE Signal Processing Letters, 2016, 23(10): 1499-1503.</li></ul><h2 id="系列3：人脸表征"><a href="#系列3：人脸表征" class="headerlink" title="系列3：人脸表征"></a>系列3：人脸表征</h2><h2 id="一、人脸表征"><a href="#一、人脸表征" class="headerlink" title="一、人脸表征"></a><strong>一、人脸表征</strong></h2><p>把人脸图像通过神经网络，得到一个特定维数的特征向量，该向量可以很好地表征人脸数据，使得不同人脸的两个特征向量距离尽可能大，同一张人脸的两个特征向量尽可能小，这样就可以通过特征向量来进行人脸识别。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914141235.png"></p><h2 id="二、论文综述"><a href="#二、论文综述" class="headerlink" title="二、论文综述"></a><strong>二、论文综述</strong></h2><h3 id="1-DeepFace："><a href="#1-DeepFace：" class="headerlink" title="1. DeepFace："></a><strong>1.</strong> <strong>DeepFace：</strong></h3><p>2014年论文DeepFace: Closing the Gap toHuman-Level Performance in Face Verification提出了DeepFace算法，第一个真正将<a href="https://cloud.tencent.com/solution/bigdata?from=10680">大数据</a>和深度学习神经网络结合应用于人脸识别与验证。在该人脸识别模型中分为四个阶段：人脸检测 =&gt; 人脸对齐 =&gt; 人脸表征 =&gt; 人脸分类，在LFW数据集中可以达到97.00%的准确率。</p><p>（1）人脸检测与对齐：该模型使用3D模型来将人脸对齐，该方法过于繁琐，在实际应用中很少使用，经过3D对齐以后，形成的图像都是152×152的图像，具体步骤如下图。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-1.png"></p><p>分为如下几步：</p><p>a. 人脸检测，使用6个基点  b. 二维剪切，将人脸部分裁剪出来  c. 67个基点，然后Delaunay三角化，在轮廓处添加三角形来避免不连续  d. 将三角化后的人脸转换成3D形状  e. 三角化后的人脸变为有深度的3D三角网  f. 将三角网做偏转，使人脸的正面朝前。  g. 最后放正的人脸  h. 一个新角度的人脸（在论文中没有用到）</p><p>（2）人脸表征：人脸表征使用了5个卷积层和1个最大池化层、1个全连接层，如下图所示。前三层的目的在于提取低层次的特征,为了网络保留更多图像信息只使用了一层池化层；后面三层都是使用参数不共享的卷积核，因为主要是因为人脸不同的区域的特征是不一样的，具有很大的区分性，比如鼻子和眼睛所表示的特征是不一样的，但是使用参数不共享的卷积核也增加了模型计算量以及需要更多的训练数据。最后输出的4096维向量进行L2归一化。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914141316.png"></p><p>a. Conv：32个11×11×3的卷积核</p><p>b. max-pooling: 3×3， stride=2</p><p>c. Conv: 16个9×9的卷积核</p><p>d. Local-Conv: 16个9×9的卷积核，Local的意思是卷积核的参数不共享</p><p>e. Local-Conv: 16个7×7的卷积核，参数不共享</p><p>f. Local-Conv: 16个5×5的卷积核，参数不共享</p><p>g. Fully-connected: 4096维</p><p>h. Softmax: 4030维</p><p>（3）分类：论文介绍了两种方法进行分类，加权的卡方距离和使用Siamese网络结构，设f1和f2为特征向量，上一个步骤的输出，则有：</p><p>①加权卡方距离：计算公式如下，加权参数由线性SVM计算得到：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-2.png"></p><p>②Siamese网络：网络结构是成对进行训练，得到的特征表示再使用如下公式进行计算距离：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-3.png"></p><h3 id="2-DeepID1："><a href="#2-DeepID1：" class="headerlink" title="2. DeepID1："></a><strong>2.</strong> <strong>DeepID1：</strong></h3><p>DeepID1 是2014年Deep LearningFace Representation from Predicting 10,000 Classes一文提出的，是DeepID三部曲的第一篇。DeepID1 使用softmax多分类训练，主要思想第一个是数据集的增大，包括训练集使用celebface，包含87628张图片，5436个人脸，增大了训练集；使用多尺寸输入，通过5个landmarks将每张人脸划分成10regions，每张图片提取60patches=10regions<em>3scales</em>2(RGB orgray)，第二个是网络结构，DeepID提取的人脸特征就是一个由连接第三层与第四层组成的全连接层特征，如下图所示，每个patches经过这个cnn网络，第四层的特征更加全局化（global），第三层的特征更加细节，因此DeepID连接了两者，以求同时包含全局，细节信息。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-4.png"></p><p>60个patches使用60个CNN,每个CNN提取2*160=320维特征（与水平翻转一起输入），总网络模型如下图所示，最后分别使用联合贝叶斯算法与神经网络进行分类，并比较结果。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-5.png"></p><p>模型最终以CelebFaces+中202,599图像作为训练集， patch数提升为100（10r<em>10s</em>2） ，特征数提升为100<em>160</em>2=32000 然后使用PCA降为150维 ，使用联合贝叶斯算法进行验证， 最终在LFW上达到97.20%的验证准确率。</p><h3 id="3-DeepID2："><a href="#3-DeepID2：" class="headerlink" title="3. DeepID2："></a><strong>3.</strong> <strong>DeepID2：</strong></h3><p>DeepID2是Deep Learning Face Representationby Joint Identification-Verification一文提出的，对DeepID1进行了进一步的改进，提出了contrastive loss，在分类任务，我们需要的是减少类内差距（同一人脸），增加类间差距（不同人脸），softmax loss分类的监督信号可以增大类间差距，但是却对类内差距影响不大，所以DeepID2加入了另一个loss，contrastive loss，从而增加验证的监督信号，就可以减少类内差距。</p><p>网络结构类似DeepID1,不同之处在于使用了两种不同的损失函数，网络结构如下图所示。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-6.png"></p><p>损失函数：</p><p>①分类信号，Softmax loss。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-7.png"></p><p>②验证信号，contrastiveloss，使用l2范数距离表示，m为阈值不参与训练，括号内的θve={m}，该损失函数可以让类间的距离给定一个限制margin，即m大小的距离。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-8.png"></p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-9.png"></p><p>两loss的组合方式： 首先使用2个输入，计算Softmax loss和contrastive loss,总损失为二者通过λ加权求和，通过总损失来执行梯度下降更新卷积参数，通过Softmax loss来更新softmax层的参数。</p><p>整个模型使用celebrate+数据集训练，每张图片使用了21 facial landmarks，分成200patches（20regions<em>5scales</em>2RGB&amp;Gray)，水平翻转后变为400patches，使用了200个卷积神经网络，提取400（200<em>2）个Deepid2特征，使用贪婪算法降为25个Deepid2特征，使用PCA将25</em>160Deepid2特征降为180维，最后使用联合贝叶斯算法进行验证，最终在LFW上得到的最终准确率是98.97%，使用7组25个Deepid2特征，SVM融合可得到准确率为99.15% 。DeepID2在2014 年是人脸领域非常有影响力的工作，也掀起了在人脸领域引进 MetricLearning 的浪潮。 </p><h3 id="4-DeepID2-："><a href="#4-DeepID2-：" class="headerlink" title="4. DeepID2+："></a><strong>4.</strong> <strong>DeepID2+：</strong></h3><p>DeepID2+源于论文Deeply learned facerepresentations are sparse, selective, and robust，DeepID2+是对DeepID2的改进。①卷积层在原来基础上再增加128维，第四层全连接层从160增加到512，训练数据增加了CelebFaces+ dataset，WDRef等，有12000个人脸的大约290,000张图片； ②每个卷积层的后面都加了一个512为的全连接层，并添加contrastive loss监督信号，而不仅在第四层全连接层上有 。网络结构如下图所示。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-10.png"></p><p>最终在LFW数据集上准确率为99.47%。</p><h3 id="5-DeepID3："><a href="#5-DeepID3：" class="headerlink" title="5. DeepID3："></a><strong>5.</strong> <strong>DeepID3：</strong></h3><p>DeepID3源于2015年的Deepid3:Face recognition with very deep neural networks论文，该论文探究了复杂神经网络对人脸识别的作用。论文研究VGG与GoogleNet用于人脸识别的效果，论文在VGG和GooLeNet的基础上进行构建合适的结构，使得方便人脸识别。结果发现DeepID3的结果和DeepID2+相当，可能是由于数据集的瓶颈，需要更大的数据才能有更好的提升，两个网络结构如下图所示。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-11.png"></p><p>网络输出使用PCA降维到300维的向量，使用联合贝叶斯算法进行验证，最终在LFW上得到的最终准确率是99.53%。</p><h3 id="6-FaceNet："><a href="#6-FaceNet：" class="headerlink" title="6. FaceNet："></a><strong>6.</strong> <strong>FaceNet：</strong></h3><p>FaceNet由论文Facenet: A unified embedding forface recognition and clustering提出，这篇 2015 年来自 Google 的 论文同样具有非常大的影响力，不仅仅成功应用了 TripletLoss 在 benchmark 上取得state-of-art 的结果，更因为他们提出了一个绝大部分人脸问题的统一解决框架，即：识别、验证、搜索等问题都可以放到特征空间里做，需要专注解决的仅仅是如何将人脸更好的映射到特征空间。FaceNet在DeepID的基础上，将 ContrastiveLoss 改进为 Triplet Loss，去掉softmaxloss。FaceNet实验了ZFNet类型网络和Inception类型网络，最终Inception类型网络效果更好，网络结构如下图所示。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-12.png"></p><p>FaceNet没有使用PCA降维，而是在网络中直接训练输出128维的向量，用全连接层来完成降维，最后的128维的向量经过Triplet Loss。</p><p>Triplet Loss输入不再是 Image Pair，而是三张图片（Triplet），分别为 Anchor Face（xa），Negative Face（xn）和 Positive Face（xp）。Anchor 与 Positive Face 为同一人，与 Negative Face 为不同人，在特征空间里 Anchor 与 Positive 的距离要小于 Anchor 与 Negative 的距离，且相差超过一个 Margin Alpha。</p><p>loss的目标为：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-13.png"></p><p>总loss公式为：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-14.png"></p><p>Contrastive Loss与Triplet Loss的比较， Contrastive Loss目标是减少类内差距（两个蓝点），增加类间差距（蓝点与红点）；Triplet Loss则是输入三张图片，Anchor 与 Positive 的距离要小于 Anchor 与 Negative 的距离，且相差超过一个 Margin Alpha，即Triplet Loss同时约束了两个距离。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-15.png"></p><p>最后FaceNet在LFW数据集上达到了99.63%的准确率。</p><p>基于 ContrastiveLoss 和 Triplet Loss 的 MetricLearning 符合人的认知规律，在实际应用中也取得了不错的效果，但同时也有很多问题，由于ContrastiveLoss 和 Triplet Loss 的训练样本都基于pair 或者 triplet 的，可能的样本数是 O(N2) 或者 O (N3) 的，所以模型需要很久的计算才能拟合并且训练集需要足够大。</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a><strong>三、总结</strong></h2><p>本期文章主要介绍人脸表征相关算法和论文综述，主要是2014年到2016年的研究成果， ContrastiveLoss 和 Triplet Loss在实际应用中也取得了很好的效果，但是也有很多问题，由于Contrastive Loss 和 Triplet Loss 的训练样本都基于 pair 或者 triplet 的，可能的样本数是 O (N2) 或者 O (N3) 的，所以模型需要很久的计算才能拟合并且训练集要足够大，所以在之后的人脸识别研究中，大部分在于loss函数的研究，这部分将会在下一期给大家介绍。</p><h3 id="参考文献：-1"><a href="#参考文献：-1" class="headerlink" title="参考文献："></a><strong>参考文献：</strong></h3><ul><li>【1】 Taigman Y, Yang M, Ranzato M A, et al.Deepface: Closing the gap to human-level performance in faceverification[C]//Proceedings of the IEEE conference on computer vision andpattern recognition. 2014: 1701-1708.</li><li>【2】Sun Y, Wang X, Tang X. Deep learning facerepresentation from predicting 10,000 classes[C]//Proceedings of the IEEEconference on computer vision and pattern recognition. 2014: 1891-1898.</li><li>【3】Sun Y, Chen Y, Wang X, et al. Deeplearning face representation by joint identification-verification[C]//Advancesin neural information processing systems. 2014: 1988-1996.</li><li>【4】Sun Y, Liang D, Wang X, et al. Deepid3:Face recognition with very deep neural networks[J]. arXiv preprintarXiv:1502.00873, 2015.</li><li>【5】Simonyan K, Zisserman A. Very deepconvolutional networks for large-scale image recognition[J]. arXiv preprintarXiv:1409.1556, 2014.</li><li>【6】Szegedy C, Liu W, Jia Y, et al. Goingdeeper with convolutions[C]//Proceedings of the IEEE conference on computervision and pattern recognition. 2015: 1-9.</li><li>【7】Sun Y, Wang X, Tang X. Deeply learned facerepresentations are sparse, selective, and robust[C]//Proceedings of the IEEEconference on computer vision and pattern recognition. 2015: 2892-2900.</li><li>【8】Schroff F, Kalenichenko D, Philbin J.Facenet: A unified embedding for face recognition andclustering[C]//Proceedings of the IEEE conference on computer vision andpattern recognition. 2015: 815-823.</li></ul><h2 id="系列4：人脸表征-续"><a href="#系列4：人脸表征-续" class="headerlink" title="系列4：人脸表征-续"></a>系列4：人脸表征-续</h2><h2 id="一、人脸表征-1"><a href="#一、人脸表征-1" class="headerlink" title="一、人脸表征"></a><strong>一、人脸表征</strong></h2><p>把人脸图像通过神经网络，得到一个特定维数的特征向量，该向量可以很好地表征人脸数据，使得不同人脸的两个特征向量距离尽可能大，同一张人脸的两个特征向量尽可能小，这样就可以通过特征向量来进行人脸识别。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-16.png"></p><h2 id="二、论文综述-1"><a href="#二、论文综述-1" class="headerlink" title="二、论文综述"></a><strong>二、论文综述</strong></h2><h3 id="1-L-Softmax："><a href="#1-L-Softmax：" class="headerlink" title="1. L-Softmax："></a><strong>1.</strong> <strong>L-Softmax：</strong></h3><p>Softmax Loss函数被广泛应用于深度学习，较为简单实用，但是它并不能够明确引导神经网络学习区分性较高的特征。L-Softmax能够有效地引导网络学习使得样本类内距离较小、类间距离较大的特征，L-Softmax不但能够调节类间距离的间隔（margin）大小，而且能够防止过拟合。</p><p>L-Softmax是对softmax loss的改进，softmax loss公式如下所示：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-17.png"></p><p>其中 fj 表示最终全连接层的类别输出向量 f的第 j个元素, N为训练样本的个数，则 fyi可以表示为 fyi=WTyi xi，其中 0≤θj≤π，最终的损失函数可得：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-18.png"></p><p>softmax的目的是使得WT1x&gt;WT2x，即 ∥W1∥∥x∥cos(θ1)&gt;∥W2∥∥x∥cos(θ2)，从而得到输入x（来自类别1）输出正确的分类结果。L-Softmax通过增加一个正整数变量m，从而产生一个决策余量，能够更加严格地约束上述不等式，即： </p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-19.png"></p><p>其中0≤θ1&lt;π/m。如果W1和W2能够满足∥W1∥∥x∥cos(mθ1)&gt;∥W2∥∥x∥cos(θ2)，那么就必然满足∥W1∥∥x∥cos(θ1)&gt;∥W2∥∥x∥cos(θ2)，这样的约束对学习W1和W2的过程提出了更高的要求，在训练学习过程中，类间要比之前多了一个m的间隔，从而使得1类和2类有了更宽的分类决策边界。这种Margin Based Classification使得学习更加的困难，从而使类间距离增加了一个margin距离，L-Softmax loss的总公式如下：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-20.png"></p><p>当m越大时，分类的边界越大，学习难度当然就越高。</p><p>论文仅使用了WebFace数据集作为训练集和一个简单的卷积网络，就在LFW上达到了98.71%的正确率，证明了L-Softmax loss取得了比softmax loss更好的结果。</p><h3 id="2-SphereFace"><a href="#2-SphereFace" class="headerlink" title="2. SphereFace :"></a><strong>2.</strong> <strong>SphereFace :</strong></h3><p>SphereFace在MegaFace数据集上识别率在2017年排名第一，提出A-Softmax Loss使人脸识别达到不错的效果。A-Softmax Loss基于softmax loss和L-Softmax loss，在二分类模型中，softmax loss为：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-21.png"></p><p>如果x为类别一，则希望p1&gt;p2,则二分类的划分函数为：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-22.png"></p><p>权重归一化||w||为1，b为0，此时特征上的点映射到单位超球面上，则二分类的划分函数为：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-23.png"></p><p>然后使用与L-Softmax loss相同的原理，使</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-24.png"></p><p>则A-Softmax Loss最终为：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-25.png"></p><p>因此A-Softmax Loss是样本类别之间产生了角度距离，让决策函数更加严格并且更加具有可区分性。当m增大，角度距离也会增加。</p><p>A-Softmax与L-Softmax的最大区别在于A-Softmax的权重归一化了，而L-Softmax则没有。A-Softmax权重的归一化导致特征上的点映射到单位超球面上，A-Softmax仅仅能从角度上划分类别，而L-Softmax是在角度与长度方向进行考量，两个方向如果划分不一就会收到干扰，导致精度下降。</p><p>SphereFace使用的模型如下图所示：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-26.png"></p><p>训练与测试过程如下图所示，在测试过程中使用余弦计算相似度：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-27.png"></p><p>最终SphereFace在训练集较小的情况下，LFW数据集上准确率为99.42%。Sphereface效果很好，但是它不优美。在测试阶段，Sphereface通过特征间的余弦值来衡量相似性，即以角度为相似性的度量，在训练阶段，其实Sphereface的损失函数并不是在直接优化特征与类中心的角度，而是优化特征与类中心的角度在乘上一个特征的长度，这就造成了训练跟测试之间目标不一致。</p><h3 id="3-Normface"><a href="#3-Normface" class="headerlink" title="3. Normface :"></a><strong>3.</strong> <strong>Normface :</strong></h3><p>在优化人脸识别任务时，softmax本身优化的是没有归一化的内积结果，但是最后在预测的时候使用的一般是cosine距离或者欧式距离，这会导致优化目标和最终的距离度量其实并不一致。 Normface的核心思想是既然最后在特征对比的时候使用归一化的cosine距离，那么在训练的过程中把特征也做归一化处理，做了归一化之后，softmax的优化就变成了直接优化cosine距离了，归一化过程如下，其中e是为了防止除0的较小正数：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-28.png"></p><p>相应的损失函数如下：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-29.png"></p><p>其中 W 是归一化的权重，f_i 是归一化的特征，参数 s 的引入是因为保证梯度大小的合理性，去掉bias是因为softmax之前的fc有bias的情况下会使得有些类别在角度上没有区分性但是通过bias可以区分，在这种情况下如果对feature做normalize，会使得中间的那个小类别的feature变成一个单位球形并与其他的feature重叠在一起，所以在feature normalize的时候是不能加bias的。</p><p>Normface使用了较小的模型使用多种loss训练，然后在LFW数据集上测试，证明了feature normalize的效果，结果如下：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142413.png"></p><h3 id="4-CosFace"><a href="#4-CosFace" class="headerlink" title="4. CosFace :"></a><strong>4.</strong> <strong>CosFace :</strong></h3><p>Normface用特征归一化解决了Sphereface训练和测试不一致的问题。但是却没有了margin的惩罚，腾讯AI Lab的CosFace或者AM-softmax是在Normface的基础上引入了margin，损失函数为：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-30.png"></p><p>其中特征与权值都做了归一化：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-31.png"></p><p>分类决策为：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-32.png"></p><p>，比之前增加了m的margin，m 是一个超参数，控制惩罚的力度，m 越大，惩罚越强。</p><p>CosFace使用mtcnn进行人脸检测与对齐，人脸表征训练模型使用基于residual units 64层卷积网络的Sphere Face，在5M的训练集上训练，在LFW数据集上测试，精度达到99.73%。</p><h3 id="5-ArcFace"><a href="#5-ArcFace" class="headerlink" title="5. ArcFace :"></a><strong>5.</strong> <strong>ArcFace :</strong></h3><p>ArcFace源于论文Additive angular margin lossfor deep face recognition，也叫做InsightFace，论文基本介绍了近期较为流行的人脸识别模型，loss变化从softmax到AM-softmax，然后提出ArcFace，可以说起到了很好的综述作用，论文从三个方面探讨影响人脸识别模型精度的主要因素。</p><p>（1）数据：数据方面，论文探讨了各个数据集的数据质量和优缺点，并对MS-Celeb-1M，MegaFace FaceScrub做了清洗，清洗后的数据公开。</p><p>（2）网络：详细对比了不同的主流网络结构的性能，包括输入层尺寸大小、最后输出几层的不同结构、基本网络单元残差网络的不同结构、主干网络的不同模型。经过实验的证明，最后的网络结构：输入图片大小112x112；第一层convLayer 卷积核为3<em>3 stride 1时，网络输出7</em>7；主干网络使用ResNet100，并使用改进后的改进的残差网络结构，如下图；最后的几层输出层为最后一个卷积层后+BN-Dropout-FC-BN的结构。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-33.png"></p><p>（3）损失函数：与 AM-softmax相比，区别在于Arcface引入margin的方式不同，损失函数为：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914142652-34.png"></p><p>Arcface的m是在余弦里面，AM-softmax的在外面，ArcFace更为直观并且在超球面维度上有更清晰的解释。Arcface在VGG2和MS-Celeb-1M数据集上训练，在LFW数据集上精度达到99.83%。</p><h2 id="三、总结-1"><a href="#三、总结-1" class="headerlink" title="三、总结"></a><strong>三、总结</strong></h2><p>本期文章主要介绍人脸表征相关算法和论文综述，人脸检测、对齐、特征提取等这些操作都可以在静态数据中完成，下一期将给大家介绍在视频数据中进行人脸识别的另一个重要的算法，视频人脸跟踪的概念与方法。</p><h3 id="参考文献：-2"><a href="#参考文献：-2" class="headerlink" title="参考文献："></a><strong>参考文献：</strong></h3><ul><li>【1】 Liu W, Wen Y, Yu Z, et al. Large-MarginSoftmax Loss for Convolutional Neural Networks[C]//ICML. 2016: 507-516.1708.</li><li>【2】Liu W, Wen Y, Yu Z, et al. Sphereface:Deep hypersphere embedding for face recognition[C]//The IEEE Conference onComputer Vision and Pattern Recognition (CVPR). 2017, 1: 1.</li><li>【3】Wang F, Xiang X, Cheng J, et al. Normface:l 2 hypersphere embedding for face verification[C]//Proceedings of the 2017 ACMon Multimedia Conference. ACM, 2017: 1041-1049.</li><li>【4】Wang F, Cheng J, Liu W, et al. Additivemargin softmax for face verification[J]. IEEE Signal Processing Letters, 2018,25(7): 926-930.</li><li>【5】Wang H, Wang Y, Zhou Z, et al. CosFace:Large margin cosine loss for deep face recognition[J]. arXiv preprintarXiv:1801.09414, 2018.</li><li>【6】Deng J, Guo J, Zafeiriou S. Arcface:Additive angular margin loss for deep face recognition[J]. arXiv preprintarXiv:1801.07698, 2018.</li></ul><p>From： <a href="https://cloud.tencent.com/developer/article/1160037?from=article.detail.1344438">https://cloud.tencent.com/developer/article/1160037?from=article.detail.1344438</a></p><p>出品 | 磐创AI技术团队</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;系列1-简介&quot;&gt;&lt;a href=&quot;#系列1-简介&quot; class=&quot;headerlink&quot; title=&quot;系列1 简介&quot;&gt;&lt;/a&gt;系列1 简介&lt;/h2&gt;&lt;p&gt;出品 | 磐创AI技术团队&lt;/p&gt;
&lt;p&gt;【磐创AI导读】本文是深度学习之视频&lt;a href=&quot;https:</summary>
      
    
    
    
    <category term="ai" scheme="https://blog.17lai.site/categories/ai/"/>
    
    
    <category term="ai" scheme="https://blog.17lai.site/tags/ai/"/>
    
    <category term="face" scheme="https://blog.17lai.site/tags/face/"/>
    
  </entry>
  
  <entry>
    <title>自动曝光原理</title>
    <link href="https://blog.17lai.site/image/2021-09-14-auto-expose-theory/"/>
    <id>https://blog.17lai.site/image/2021-09-14-auto-expose-theory/</id>
    <published>2021-09-14T01:25:00.000Z</published>
    <updated>2021-10-07T11:47:01.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自动曝光的原理"><a href="#自动曝光的原理" class="headerlink" title="自动曝光的原理"></a>自动曝光的原理</h2><p>曝光是摄影中十分重要的一个环节，它决定了一张图片的明暗，如下图所示，第一张图片太暗，而第三种图片太亮。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914131959.jpeg"></p><h2 id="曝光由什么来决定"><a href="#曝光由什么来决定" class="headerlink" title="曝光由什么来决定"></a><strong>曝光由什么来决定</strong></h2><p>使用过数码相机的人都知道曝光由光圈、曝光时间、ISO三者共同决定，详细的关系就不赘述。</p><h3 id="光圈：控制进光量；"><a href="#光圈：控制进光量；" class="headerlink" title="光圈：控制进光量；"></a><strong>光圈</strong>：控制进光量；</h3><h3 id="曝光时间：光到达的时间长度；"><a href="#曝光时间：光到达的时间长度；" class="headerlink" title="曝光时间：光到达的时间长度；"></a><strong>曝光时间</strong>：光到达的时间长度；</h3><h3 id="ISO：增益；"><a href="#ISO：增益；" class="headerlink" title="ISO：增益；"></a><strong>ISO</strong>：增益；</h3><p>但是对于手机以及其他电子产品使用的微型摄像头，光圈大小是固定的，所以手机拍照的曝光由<strong>曝光时间</strong>和**增益(ISO)**来控制。</p><h2 id="什么是自动曝光"><a href="#什么是自动曝光" class="headerlink" title="什么是自动曝光"></a><strong>什么是自动曝光</strong></h2><p>数码相机中有一种手动模式，可手动设置光圈、曝光时间、ISO来控制曝光，该模式的使用对摄影师的要求会比较高。另外 数码相机的全自动模式、光圈优先模式、快门优先模式以及手机等电子产品的曝光都属于自动曝光。</p><p>自动曝光就是相机代替人的操作，自动调节曝光时间、光圈、ISO进行曝光，使得所摄物体亮度正常。这句话解释起来很简单，但是存在两个难点问题：第一，相机不如人眼这样可以直观的分辨图像明暗，如何判断这幅图像是否亮度合适；第二，如何调整曝光时间、光圈、ISO,这三者调节的比例。</p><h2 id="自动曝光的标准"><a href="#自动曝光的标准" class="headerlink" title="自动曝光的标准"></a><strong>自动曝光的标准</strong></h2><p>在此之前需要了解物体的亮度与色彩是由物体对光线的反射率来决定的。例如纯黑色的放射率是0，纯白色的反射率是100%，处于中间的灰度的反射率是18%，这就是18%中间灰度。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1420210914132002.png"></p><p>具有一定反射率的物体在最终的图像中被还原到了其相应的灰度级，这就意味着达到了正确的曝光。例如摄影师们通常在拍摄之前使用中性灰卡测试曝光是否正常。</p><p>但是相机在各种场景下无法识别物体的反射率，因此采用了一个简单粗暴而又行之有效的方法，统一将图像整体平均亮度设置为中性灰的亮度。该方法基于**科学家认为自然界的平均反射率是18%**这一理论。当然，这个方法也不是走遍天下都不怕，比如拍摄雪景时需要增加曝光补偿，不然会偏暗，因为雪景的亮度远远大于中性灰度。这也就是摄影中的一句口诀的由来“白增黑减”。</p><h2 id="自动曝光算法"><a href="#自动曝光算法" class="headerlink" title="自动曝光算法"></a><strong>自动曝光算法</strong></h2><p>上面已经讲了自动曝光的标准，也就确立了曝光目标，要达到这一目标还要自动曝光算法来实现。</p><p>目前比较常见的算法有平均亮度法、权重均值法、亮度直方图等。其中最普遍的就是平均亮度法。<strong>平均亮度法</strong>就是对图像所以像素亮度求平均值，通过不断调整曝光参数最终达到目标亮度。而<strong>权重均值法</strong>是对图像不同区域设置不同权重来计算图像亮度，例如相机中的各种测光模式的选择就是改变不同区域的权重。<strong>亮度直方图法</strong>是通过为直方图中峰值分配不同权重来计算图像亮度。</p><p>自动曝光实现的过程：</p><p>第一步：对当前图像进行亮度统计；</p><p>第二步：根据当前图像亮度确定曝光值；</p><p>第三步：计算新的曝光参数，曝光时间、光圈、增益；</p><p>第四步：将新的曝光参数应用到相机；</p><p>第五步：重复步骤一到四，直到亮度满足要求。</p><h2 id="曝光参数调整-曝光表"><a href="#曝光参数调整-曝光表" class="headerlink" title="曝光参数调整_曝光表"></a><strong>曝光参数调整_曝光表</strong></h2><p>前面留下两个问题：“第一，相机不如人眼这样可以直观的分辨图像明暗，如何判断这幅图像是否亮度合适；第二，如何调整曝光时间、光圈、ISO,这三者调节的比例。” 第一个问题在前面有过解释，第二个问题也就是自动曝光实现步骤的第三步，曝光值由光圈、曝光时间、增益沟通决定，当计算出一个曝光量，曝光三要素有很多种组合方式。一般情况下有曝光曲线，每个曝光量对应一组参数。手机中曝光曲线可以通过Tuning调整。</p><p>From: <a href="https://zhuanlan.zhihu.com/p/33462189">积极的悲观主义者</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;自动曝光的原理&quot;&gt;&lt;a href=&quot;#自动曝光的原理&quot; class=&quot;headerlink&quot; title=&quot;自动曝光的原理&quot;&gt;&lt;/a&gt;自动曝光的原理&lt;/h2&gt;&lt;p&gt;曝光是摄影中十分重要的一个环节，它决定了一张图片的明暗，如下图所示，第一张图片太暗，而第三种图片太亮</summary>
      
    
    
    
    <category term="image" scheme="https://blog.17lai.site/categories/image/"/>
    
    
    <category term="3a" scheme="https://blog.17lai.site/tags/3a/"/>
    
    <category term="ae" scheme="https://blog.17lai.site/tags/ae/"/>
    
    <category term="image" scheme="https://blog.17lai.site/tags/image/"/>
    
  </entry>
  
  <entry>
    <title>浏览器的渲染过程</title>
    <link href="https://blog.17lai.site/web/2021-09-13-the-browser-rendering-process/"/>
    <id>https://blog.17lai.site/web/2021-09-13-the-browser-rendering-process/</id>
    <published>2021-09-13T14:25:00.000Z</published>
    <updated>2021-10-09T00:20:12.247Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>通常，我们只需要编写HTML，CSS，JavaScript，浏览器上就能呈现出漂亮的网页了，但是浏览器是如何使用我们的代码在屏幕上渲染像素的呢？</p></blockquote><h3 id="首先，请先看一张大图"><a href="#首先，请先看一张大图" class="headerlink" title="首先，请先看一张大图"></a><strong>首先，请先看一张大图</strong></h3><p>浏览器将HTML，CSS，JavaScript代码转换成屏幕上所能呈现的实际像素，这期间所经历的一系列步骤，叫做关键渲染路径（Critical Rendering Path）。其中包含：</p><ul><li>  构建对象模型（DOM，CSSOM）</li><li>  构建渲染树（RenderTree）</li><li>  布局</li><li>  渲染</li></ul><p>在构建对象模型到构建渲染树的这一过程，还穿插着JS脚本的加载和执行。如下图所示：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913220512.jpeg"></p><h3 id="1-DOMTree的构建"><a href="#1-DOMTree的构建" class="headerlink" title="1.DOMTree的构建"></a><strong>1.DOMTree的构建</strong></h3><p>浏览器的渲染从解析HTML文档开始，宏观上，可以分为下面几个步骤：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913220515.jpeg"></p><ul><li>第一步（解析）：从网络或者磁盘下读取的HTML原始字节码，通过设置的charset编码，转换成相字符  </li></ul><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913220653.jpeg"></p><ul><li>第二步（token化）：通过词法分析器，将字符串解析成Token，Token中会标注出当前的Token是<code>开始标签</code>，还是<code>结束标签</code>，或者<code>文本标签</code>等。  </li></ul><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913220522.jpeg"></p><ul><li>第三步（生成Nodes并构建DOM树）：浏览器会根据Tokens里记录的<code>开始标签</code>，<code>结束标签</code>，将Tokens之间相互串联起来_（带有结束标签的Token不会生成Node）_。<br>  Node包含了这个节点的所有属性。例如<code>&lt;img src="xxx.png" &gt;</code>标签最终生成出的节点对象中会保存图片地址等信息。<br>  事实上，在构建DOM树时，不是要等所有的Tokens都转换成Nodes后才开始，而是一边生成Token一边采取<code>深度遍历算法</code>消耗Token来生成Node，如下图所示：<br>  图中有颜色的小数字代表构建的具体步骤，可以看出，首先生成出<code>html Token</code>,并消耗Token创建出<code>html 节点对象</code>，接着生成<code>head Token</code>并消耗Token创建出<code>head节点对象</code>……，当所有的Tokens都消耗完了，紧接着DOM树也就构建完了。  </li></ul><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913220658.jpeg"></p><p>这里抛出个小问题，为什么有时在js中访问DOM时浏览器会报错呢？<br>因为在上述的解析的过程中，如果碰到了<code>script</code>或者<code>link</code>标签，就会根据<code>src</code>对应的地址去加载资源，在<code>script</code>标签没有设置<code>async/defer</code>属性时，这个加载过程是<code>下载并执行完全部的代码</code>，此时，DOM树还没有完全创建完毕，这个时候如果js企图访问script标签后面的DOM元素，浏览器就会抛出<strong>找不到该DOM元素</strong>的错误。<br>值得注意的是：从bytes到Tokens的这个过程，浏览器都可以交给其他单独的线程去处理，不会堵塞浏览器的渲染线程。但是后面的部分就都在渲染线程下进行了，也就是我们常说的js单线程环境。</p><h3 id="2-CSSOMTree的构建"><a href="#2-CSSOMTree的构建" class="headerlink" title="2.CSSOMTree的构建"></a><strong>2.CSSOMTree的构建</strong></h3><p>DOM会记录页面的内容，但是浏览器还需要知道这些内容该用什么样式去展示，所以还需要构建CSSOMTree。CSSOM的生成过程和DOM的生成过程十分相似，也是：1.解析，2.Token化，3.生成Nodes并构建CSSOMTree：</p><p>假设浏览器收到了下面这样一段css:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p</span> <span class="token punctuation">{</span><span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p span</span> <span class="token punctuation">{</span><span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">span</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">img</span> <span class="token punctuation">{</span><span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终会生成如下的CSSOMTree:</p><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913220529.jpeg"></p><p>从图中可以看出，最开始<code>body</code>有一个样式规则是<code>font-size:16px</code>，之后，在body这个样式基础上每个子节点还会添加自己单独的样式规则，比如<code>span</code>又添加了一个样式规则<code>color:red</code>。正是因为样式这种类似于继承的特性，浏览器设定了一条规则：<strong>CSSOMTree需要等到完全构建后才可以被使用，因为后面的属性可能会覆盖掉前面的设置</strong>。比如在上面的css代码基础上再添加一行代码<code>p {font-size:12px}</code>，那么之前设置的<code>16px</code>将会被覆盖成<code>12px</code>。</p><p>下面是官方给的一种解释：</p><blockquote><p>未构建完的CSSOMTree是不准确的，浏览器必须等到CSSOMTree构建完毕后才能进入下一阶段。<br>所以，CSS的加载速度与构建CSSOMTree的速度将直接影响首屏渲染速度，因此在默认情况下CSS被视为阻塞渲染的资源，需要将它尽早、尽快地下载到客户端，以便缩短首次渲染的时间。</p></blockquote><p>那么回到上面生成DOM时提到的JS问题：<strong>在标签没有设置<code>async/defer</code>属性时，js会阻塞DOM的生成</strong>。原因是js会改变DOMTree的内容，如果不阻塞，会出现一边生成DOM内容，一边修改DOM内容的情况，无法确保最终生成的DOMTree是确定唯一的。</p><p>同理，JS也会可以修改CSS样式，影响CSSOMTree最终的结果。而我们前面提到，不完整的CSSOMTree是不可以被使用的，如果JS试图在<strong>浏览器还未完成CSSOMTree的下载和构建</strong>时去操作CSS样式，浏览器会<strong>暂停脚本的运行和DOM的构建</strong>，直至浏览器完成了CSSOM的下载和构建。也就是说，<strong>JS脚本的出现会让CSSOM的构建阻塞DOM的构建</strong>。</p><blockquote><p>平时谈及页面性能优化，经常会强调css文件应该放在html文档中的前面引入，js文件应该放在后面引入，这么做的原因是什么呢？</p></blockquote><p>举个例子：本来，DOM构建和CSSOM构建是两个过程，井水不犯河水。假设DOM构建完成需要1s，CSSOM构建也需要1s，在DOM构建了0.2s时发现了一个<code>link</code>标签，此时完成这个操作需要的时间大概是1.2s，如下图所示：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913220540.jpeg"></p><p>而此时我们在HTML文档的中间插中入了一段JS代码，在DOM构建中间的过程中发现了这个<code>script</code>标签，假设这段JS代码只需要执行0.0001s，那么完成这个操作需要的时间就会变成：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913220546.jpeg"></p><p>那如果我们把css放到前面，js放到最后引入时，构建时间会变成：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913220705.jpeg"></p><p>由此可见，虽然只是插入了小小的一段只运行0.0001s的js代码，不同的引入时机也会严重影响DOMTree的构建速度。</p><p>简而言之，如果在DOM，CSSOM和JavaScript执行之间引入大量的依赖关系，可能会导致浏览器在处理渲染资源时出现大幅度延迟：</p><ul><li>  当浏览器遇到一个script标签时，DOMTree的构建将被暂停，直至脚本执行完毕</li><li>  JavaScript可以查询和修改DOMTree与CSSOMTree</li><li>  直至CSSOM构建完毕，JavaScript才会执行</li><li>  脚本在文档中的位置很重要</li></ul><h3 id="3-渲染树的构建"><a href="#3-渲染树的构建" class="headerlink" title="3.渲染树的构建"></a><strong>3.渲染树的构建</strong></h3><p>现在，我们已经拥有了完整的DOM树和CSSOM树。DOM 树上每一个节点对应着网页里每一个元素，CSSOM树上每个节点对应着网页里每个元素的样式，并且此时浏览器也可以通过 JavaScript 操作DOM/CSSOM树，动态改变它的结构。但是DOM/CSSOM树本身并不能直接用于排版和渲染，浏览器还会生成另外一棵树：Render树</p><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913220711.jpeg"></p><p>接下来我们来谈几条概念</p><ul><li><p>  Render 树上的每一个节点被称为：<code>RenderObject</code>。</p></li><li><p>  RenderObject跟 DOM 节点几乎是一一对应的，当一个<code>可见的 DOM 节点</code>被添加到 DOM 树上时，内核就会为它生成对应的 RenderOject 添加到 Render 树上。</p></li><li><p>其中，可见的DOM节点不包括：  </p></li><li><p>  一些不会体现在渲染输出中的节点（<code>&lt;html&gt;&lt;script&gt;&lt;link&gt;….</code>），会直接被忽略掉。</p></li><li><p>  通过CSS隐藏的节点。例如上图中的<code>span</code>节点，因为有一个CSS显式规则在该节点上设置了<code>display:none</code>属性，那么它在生成RenderObject时会被直接忽略掉。</p></li><li><p>  Render 树是衔接浏览器排版引擎和渲染引擎之间的<strong>桥梁</strong>，它是<strong>排版引擎的输出，渲染引擎的输入</strong>。</p></li></ul><p>此时的Render树上，已经包含了网页上所有可见元素的内容和位置信息 排版引擎会根据Render树的内容和结构，准确的计算出元素该在网页上的什么位置。到此，我们已经具备进入布局的一切准备条件，但是通过上面我们知道，布局后面还有一个渲染过程，那么_Render 树是衔接浏览器排版引擎和渲染引擎之间的桥梁，它是排版引擎的输出，渲染引擎的输入。_这句话是什么意思呢？</p><h3 id="RenderObject-and-RenderLayer"><a href="#RenderObject-and-RenderLayer" class="headerlink" title="RenderObject and RenderLayer"></a><strong>RenderObject and RenderLayer</strong></h3><blockquote><p>浏览器渲染引擎并不是直接使用Render树进行绘制，为了方便处理<strong>Positioning,Clipping,Overflow-scroll,CSS Transfrom/Opacrity/Animation/Filter,Mask or Reflection,Z-indexing</strong>等属性，浏览器需要生成另外一棵树：<strong>Layer树</strong></p></blockquote><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913220730.jpeg"></p><p>浏览器会为一些<strong>特定</strong>的<code>RenderObject</code>生成对应的<code>RenderLayer</code>，其中的规则是：</p><ul><li>  是否是页面的根节点 <em>It’s the root object for the page</em></li><li>  是否有css的一些布局属性（relative absolute or a transform) <em>It has explicit CSS position properties (relative, absolute or a transform)</em></li><li>  是否透明 <em>It is transparent</em></li><li>  是否有溢出 <em>Has overflow, an alpha mask or reflection</em></li><li>  是否有css滤镜 <em>Has a CSS filter</em></li><li>  是否包含一个canvas元素使得节点拥有视图上下文 <em>Corresponds to canvas element that has a 3D (WebGL) context or an accelerated 2D context</em></li><li>  是否包含一个video元素 <em>Corresponds to a video element</em></li></ul><p>当满足上面其中一个条件时，这个<code>RrenderObject</code>就会被浏览器选中生成对应的<code>RenderLayer</code>。至于那些没有被命运选中的RrenderObject，会从属与父节点的RenderLayer。最终，每个RrenderObject都会直接或者间接的属于一个RenderLayer。</p><p>浏览器渲染引擎在布局和渲染时会遍历整个Layer树，访问每一个<code>RenderLayer</code>，再遍历从属于这个RenderLayer的 <code>RrenderObject</code>，将每一个 RenderObject 绘制出来。可以理解为：Layer 树决定了网页绘制的层次顺序，而从属于RenderLayer 的 RrenderObject决定了这个 Layer 的内容，所有的 <code>RenderLayer</code> 和 <code>RrenderObject</code> 一起就决定了网页在屏幕上最终呈现出来的内容。</p><h3 id="4-布局"><a href="#4-布局" class="headerlink" title="4.布局"></a><strong>4.布局</strong></h3><p>到目前为止，浏览器计算出了哪些节点是可见的以及它的信息和样式，接下来就需要计算这些节点在设备视口内的确切位置和大小，这个过程我们称之为“布局”。</p><p>布局最后的输出是一个“盒模型”：将所有相对测量值都转换成屏幕上的绝对像素。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913220553.jpeg"></p><h3 id="5-渲染"><a href="#5-渲染" class="headerlink" title="5.渲染"></a><strong>5.渲染</strong></h3><p>最后，既然我们知道了哪些节点可见、它们的计算样式以及几何信息，我们终于可以将这些信息传递给最后一个阶段：将渲染树中的每个节点转换成屏幕上的实际像素：浏览器通过发出“Paint Setup”和“Paint”事件，将渲染树转换成屏幕上的像素。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913220718.jpeg"></p><p>至此，我们就能够在浏览器上看到漂亮的网页了</p><blockquote><p>谈及页面性能优化，我们也常说要尽量减少浏览器的重排和重绘，浏览器重排和重绘时究竟做了哪些工作呢？</p></blockquote><p>我们平时常说的重排，其实就是浏览器计算render树，布局到渲染的这个过程，而重绘就是计算layer树到渲染的这个过程，每当触发一次重绘和重排时，浏览器都需要重新经过一遍上述的计算。很显然，重排会产生比重绘更大的开销，但无论是重排还是重绘，都会给浏览器渲染线程造成很大的负担，所以，我们在实际生产中要严格注意减少重排和重绘的触发。至于如何减少重排和重绘的次数，这里就不多做展开了，详细请听下回分解~</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结：</strong></h3><ul><li>  经过：1.构建对象模型（DOM，CSSOM），2.构建渲染树（RenderTree），3.布局，4.渲染 这几个步骤后，我们就能在浏览器上看到漂亮的网页啦。</li><li>  CSS被视为阻塞渲染的资源，应放到代码的头部尽快加载。</li><li>  同步的JavaScript会暂停DOMTree的构建，应放到代码的尾部最后加载，或者使用<code>async/defer属性</code>异步加载JavaScript。</li><li>  重排和重绘会给浏览器渲染线程造成很大的负担，尽量减少重排和重绘的触发次数</li></ul><h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a><strong>参考文献：</strong></h3><p><a href="https://link.zhihu.com/?target=https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=zh-cn">https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=zh-cn</a></p><p><a href="https://link.zhihu.com/?target=https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn">https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn</a></p><p><a href="https://link.zhihu.com/?target=https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css?hl=zh-cn">https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css?hl=zh-cn</a></p><p><a href="https://link.zhihu.com/?target=https://mp.weixin.qq.com/s?__biz=MzA5NzkwNDk3MQ==&amp;mid=2650588806&amp;idx=1&amp;sn=408a54e7c8102fd6944c9a40b119015a&amp;scene=21%23wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzA5NzkwNDk3MQ==&amp;mid=2650588806&amp;idx=1&amp;sn=408a54e7c8102fd6944c9a40b119015a&amp;scene=21#wechat_redirect</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;通常，我们只需要编写HTML，CSS，JavaScript，浏览器上就能呈现出漂亮的网页了，但是浏览器是如何使用我们的代码在屏幕上渲染像素的呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;首先，请先看一张大图&quot;&gt;&lt;a href=&quot;#首先，</summary>
      
    
    
    
    <category term="web" scheme="https://blog.17lai.site/categories/web/"/>
    
    
    <category term="web" scheme="https://blog.17lai.site/tags/web/"/>
    
    <category term="http" scheme="https://blog.17lai.site/tags/http/"/>
    
    <category term="css" scheme="https://blog.17lai.site/tags/css/"/>
    
    <category term="js" scheme="https://blog.17lai.site/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>在浏览器输入 URL 回车之后发生了什么</title>
    <link href="https://blog.17lai.site/web/2021-09-13-what-happened-when-you-click-http/"/>
    <id>https://blog.17lai.site/web/2021-09-13-what-happened-when-you-click-http/</id>
    <published>2021-09-13T01:25:00.000Z</published>
    <updated>2021-10-09T00:20:20.749Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p>这个问题已经是老生常谈了，更是经常被作为面试的压轴题出现，网上也有很多文章，但最近闲的无聊，然后就自己做了一篇笔记，感觉比之前理解更透彻了。</p><p>这篇笔记是我这两天看了数十篇文章总结出来的，所以相对全面一点，但由于我是做前端的，所以会比较重点分析浏览器渲染页面那一部分，至于其他部分我会罗列出关键词，感兴趣的可以自行查阅，</p><p><strong>注意：</strong>本文的步骤是建立在，请求的是一个简单的 HTTP 请求，没有 HTTPS、HTTP2、最简单的 DNS、没有代理、并且服务器没有任何问题的基础上，尽管这是不切实际的。</p><h2 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h2><ol><li> URL 解析</li><li> DNS 查询</li><li> TCP 连接</li><li> 处理请求</li><li> 接受响应</li><li> 渲染页面</li></ol><h2 id="一、URL-解析"><a href="#一、URL-解析" class="headerlink" title="一、URL 解析"></a>一、URL 解析</h2><h3 id="地址解析："><a href="#地址解析：" class="headerlink" title="地址解析："></a><strong>地址解析：</strong></h3><p>首先判断你输入的是一个合法的 URL 还是一个待搜索的关键词，并且根据你输入的内容进行自动完成、字符编码等操作。</p><h3 id="HSTS"><a href="#HSTS" class="headerlink" title="HSTS"></a><strong>HSTS</strong></h3><p>由于安全隐患，会使用 HSTS 强制客户端使用 HTTPS 访问页面。详见：<a href="https://www.barretlee.com/blog/2015/10/22/hsts-intro/">你所不知道的 HSTS (opens new window)</a>。</p><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a><strong>其他操作</strong></h3><p>浏览器还会进行一些额外的操作，比如安全检查、访问限制（之前国产浏览器限制 996.icu）。</p><h3 id="检查缓存"><a href="#检查缓存" class="headerlink" title="检查缓存"></a><strong>检查缓存</strong></h3><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913094301.png"></p><h2 id="二、DNS-查询"><a href="#二、DNS-查询" class="headerlink" title="二、DNS 查询"></a>二、DNS 查询</h2><p><strong>基本步骤</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913094305.png"></p><h3 id="1-浏览器缓存"><a href="#1-浏览器缓存" class="headerlink" title="1. 浏览器缓存"></a><strong>1. 浏览器缓存</strong></h3><p>浏览器会先检查是否在缓存中，没有则调用系统库函数进行查询。</p><h3 id="2-操作系统缓存"><a href="#2-操作系统缓存" class="headerlink" title="2. 操作系统缓存"></a><strong>2. 操作系统缓存</strong></h3><p>操作系统也有自己的 DNS 缓存，但在这之前，会向检查域名是否存在本地的 Hosts 文件里，没有则向 DNS 服务器发送查询请求。</p><h3 id="3-路由器缓存"><a href="#3-路由器缓存" class="headerlink" title="3. 路由器缓存"></a><strong>3. 路由器缓存</strong></h3><p>路由器也有自己的缓存。</p><h3 id="4-ISP-DNS-缓存"><a href="#4-ISP-DNS-缓存" class="headerlink" title="4. ISP DNS 缓存"></a><strong>4. ISP DNS 缓存</strong></h3><p>ISP DNS 就是在客户端电脑上设置的首选 DNS 服务器，它们在大多数情况下都会有缓存。</p><h3 id="根域名服务器查询"><a href="#根域名服务器查询" class="headerlink" title="根域名服务器查询"></a><strong>根域名服务器查询</strong></h3><p>在前面所有步骤没有缓存的情况下，本地 DNS 服务器会将请求转发到互联网上的根域，下面这个图很好的诠释了整个流程：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913094311.png"></p><blockquote><p>根域名服务器：<a href="https://zh.wikipedia.org/wiki/%E6%A0%B9%E7%B6%B2%E5%9F%9F%E5%90%8D%E7%A8%B1%E4%BC%BA%E6%9C%8D%E5%99%A8">维基百科 (opens new window)</a></p></blockquote><p><strong>需要注意的点</strong></p><ol><li> 递归方式：一路查下去中间不返回，得到最终结果才返回信息（浏览器到本地 DNS 服务器的过程）</li><li> 迭代方式，就是本地 DNS 服务器到根域名服务器查询的方式。</li><li> 什么是 DNS 劫持</li><li> 前端 dns-prefetch 优化</li></ol><h2 id="三、TCP-连接"><a href="#三、TCP-连接" class="headerlink" title=" 三、TCP 连接"></a> 三、TCP 连接</h2><p>TCP/IP 分为四层，在发送数据时，每层都要对数据进行封装：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913094325.png"></p><h3 id="1-应用层：发送-HTTP-请求"><a href="#1-应用层：发送-HTTP-请求" class="headerlink" title="1. 应用层：发送 HTTP 请求"></a><strong>1. 应用层：发送 HTTP 请求</strong></h3><p>在前面的步骤我们已经得到服务器的 IP 地址，浏览器会开始构造一个 HTTP 报文，其中包括：</p><ul><li>  请求报头（Request Header）：请求方法、目标地址、遵循的协议等等</li><li>  请求主体（其他参数）</li></ul><p>其中需要注意的点：</p><ul><li>  浏览器只能发送 GET、POST 方法，而打开网页使用的是 GET 方法</li></ul><h3 id="2-传输层：TCP-传输报文"><a href="#2-传输层：TCP-传输报文" class="headerlink" title="2. 传输层：TCP 传输报文"></a><strong>2. 传输层：TCP 传输报文</strong></h3><p>传输层会发起一条到达服务器的 TCP 连接，为了方便传输，会对数据进行分割（以报文段为单位），并标记编号，方便服务器接受时能够准确地还原报文信息。</p><p>在建立连接前，会先进行 TCP 三次握手。</p><blockquote><p>关于 TCP/IP 三次握手，网上已经有很多段子和图片生动地描述了。</p><p>相关知识点：</p><ol><li> SYN 泛洪攻击</li></ol></blockquote><h3 id="3-网络层：IP-协议查询-Mac-地址"><a href="#3-网络层：IP-协议查询-Mac-地址" class="headerlink" title="3. 网络层：IP 协议查询 Mac 地址"></a><strong>3. 网络层：IP 协议查询 Mac 地址</strong></h3><p>将数据段打包，并加入源及目标的 IP 地址，并且负责寻找传输路线。</p><p>判断目标地址是否与当前地址处于同一网络中，是的话直接根据 Mac 地址发送，否则使用路由表查找下一跳地址，以及使用 ARP 协议查询它的 Mac 地址。</p><blockquote><p>注意：在 OSI 参考模型中 ARP 协议位于链路层，但在 TCP/IP 中，它位于网络层。</p></blockquote><h3 id="4-链路层：以太网协议"><a href="#4-链路层：以太网协议" class="headerlink" title="4. 链路层：以太网协议"></a><strong>4. 链路层：以太网协议</strong></h3><p><strong>以太网协议</strong></p><p>根据以太网协议将数据分为以“帧”为单位的数据包，每一帧分为两个部分：</p><ul><li>  标头：数据包的发送者、接受者、数据类型</li><li>  数据：数据包具体内容</li></ul><p><strong>Mac 地址</strong></p><p>以太网规定了连入网络的所有设备都必须具备“网卡”接口，数据包都是从一块网卡传递到另一块网卡，网卡的地址就是 Mac 地址。每一个 Mac 地址都是独一无二的，具备了一对一的能力。</p><p><strong>广播</strong></p><p>发送数据的方法很原始，直接把数据通过 ARP 协议，向本网络的所有机器发送，接收方根据标头信息与自身 Mac 地址比较，一致就接受，否则丢弃。</p><p><strong>注意</strong>：接收方回应是单播。</p><blockquote><p>相关知识点：</p><ol><li> ARP 攻击</li></ol></blockquote><p> <strong>服务器接受请求</strong></p><p>接受过程就是把以上步骤逆转过来，参见上图。</p><h2 id="四、服务器处理请求"><a href="#四、服务器处理请求" class="headerlink" title=" 四、服务器处理请求"></a> 四、服务器处理请求</h2><p><strong>大致流程</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913094339.png"></p><h3 id="HTTPD"><a href="#HTTPD" class="headerlink" title="HTTPD"></a><strong>HTTPD</strong></h3><p>最常见的 HTTPD 有 Linux 上常用的 Apache 和 Nginx，以及 Windows 上的 IIS。</p><p>它会监听得到的请求，然后开启一个子进程去处理这个请求。</p><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a><strong>处理请求</strong></h3><p>接受 TCP 报文后，会对连接进行处理，对 HTTP 协议进行解析（请求方法、域名、路径等），并且进行一些验证：</p><ul><li>  验证是否配置虚拟主机</li><li>  验证虚拟主机是否接受此方法</li><li>  验证该用户可以使用该方法（根据 IP 地址、身份信息等）</li></ul><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a><strong>重定向</strong></h3><p>假如服务器配置了 HTTP 重定向，就会返回一个 <code>301</code>永久重定向响应，浏览器就会根据响应，重新发送 HTTP 请求（重新执行上面的过程）。</p><blockquote><p>关于更多：<a href="https://www.cnblogs.com/workest/p/3891321.html">详见这篇文章 (opens new window)</a></p></blockquote><h3 id="URL-重写"><a href="#URL-重写" class="headerlink" title="URL 重写"></a><strong>URL 重写</strong></h3><p>然后会查看 URL 重写规则，如果请求的文件是真实存在的，比如图片、html、css、js 文件等，则会直接把这个文件返回。</p><p>否则服务器会按照规则把请求重写到 一个 REST 风格的 URL 上。</p><p>然后根据动态语言的脚本，来决定调用什么类型的动态文件解释器来处理这个请求。</p><p>以 PHP 语言的 MVC 框架举例，它首先会初始化一些环境的参数，根据 URL 由上到下地去匹配路由，然后让路由所定义的方法去处理请求。</p><h2 id="五、浏览器接受响应"><a href="#五、浏览器接受响应" class="headerlink" title="五、浏览器接受响应"></a>五、浏览器接受响应</h2><p>浏览器接收到来自服务器的响应资源后，会对资源进行分析。</p><p>首先查看 Response header，根据不同状态码做不同的事（比如上面提到的重定向）。</p><p>如果响应资源进行了压缩（比如 gzip），还需要进行解压。</p><p>然后，对响应资源做缓存。</p><p>接下来，根据响应资源里的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MIME (opens new window)</a> 类型去解析响应内容（比如 HTML、Image 各有不同的解析方式）。</p><h2 id="六、渲染页面"><a href="#六、渲染页面" class="headerlink" title="六、渲染页面"></a>六、渲染页面</h2><p><strong>浏览器内核</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913094432.png"></p><p>不同的浏览器内核，渲染过程也不完全相同，但大致流程都差不多。</p><p><strong>基本流程</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913094347.png"></p><h3 id="1-HTML-解析"><a href="#1-HTML-解析" class="headerlink" title="1. HTML 解析"></a><strong>1. HTML 解析</strong></h3><p>首先要知道浏览器解析是从上往下一行一行地解析的。</p><p>解析的过程可以分为四个步骤：</p><h4 id="1-解码（encoding）"><a href="#1-解码（encoding）" class="headerlink" title="1. 解码（encoding）"></a><strong>1. 解码（encoding）</strong></h4><p>传输回来的其实都是一些二进制字节数据，浏览器需要根据文件指定编码（例如 UTF-8）转换成字符串，也就是 HTML 代码。</p><h4 id="2-预解析（pre-parsing）"><a href="#2-预解析（pre-parsing）" class="headerlink" title="2. 预解析（pre-parsing）"></a><strong>2. 预解析（pre-parsing）</strong></h4><p>预解析做的事情是提前加载资源，减少处理时间，它会识别一些会请求资源的属性，比如<code>img</code>标签的<code>src</code>属性，并将这个请求加到请求队列中。</p><h4 id="3-符号化（Tokenization）"><a href="#3-符号化（Tokenization）" class="headerlink" title="3. 符号化（Tokenization）"></a><strong>3. 符号化（Tokenization）</strong></h4><p>符号化是词法分析的过程，将输入解析成符号，HTML 符号包括，开始标签、结束标签、属性名和属性值。</p><p>它通过一个状态机去识别符号的状态，比如遇到<code>&lt;</code>，<code>&gt;</code>状态都会产生变化。</p><h4 id="4-构建树（tree-construction）"><a href="#4-构建树（tree-construction）" class="headerlink" title="4. 构建树（tree construction）"></a><strong>4. 构建树（tree construction）</strong></h4><blockquote><p>注意：符号化和构建树是并行操作的，也就是说只要解析到一个开始标签，就会创建一个 DOM 节点。</p></blockquote><p>在上一步符号化中，解析器获得这些标记，然后以合适的方法创建<code>DOM</code>对象并把这些符号插入到<code>DOM</code>对象中。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913094354.png"></p><h4 id="浏览器容错进制"><a href="#浏览器容错进制" class="headerlink" title="浏览器容错进制"></a><strong>浏览器容错进制</strong></h4><p>你从来没有在浏览器看过类似”语法无效”的错误，这是因为浏览器去纠正错误的语法，然后继续工作。</p><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a><strong>事件</strong></h4><p>当整个解析的过程完成以后，浏览器会通过<code>DOMContentLoaded</code>事件来通知<code>DOM</code>解析完成。</p><h3 id="2-CSS-解析"><a href="#2-CSS-解析" class="headerlink" title="2. CSS 解析"></a>2. CSS 解析</h3><p>一旦浏览器下载了 CSS，CSS 解析器就会处理它遇到的任何 CSS，根据<a href="https://drafts.csswg.org/css-syntax-3/">语法规范 (opens new window)</a>解析出所有的 CSS 并进行标记化，然后我们得到一个规则表。</p><h4 id="CSS-匹配规则"><a href="#CSS-匹配规则" class="headerlink" title="CSS 匹配规则"></a><strong>CSS 匹配规则</strong></h4><p>在匹配一个节点对应的 CSS 规则时，是按照从右到左的顺序的，例如：<code>div p { font-size :14px }</code>会先寻找所有的<code>p</code>标签然后判断它的父元素是否为<code>div</code>。</p><p>所以我们写 CSS 时，尽量用 id 和 class，千万不要过度层叠。</p><h3 id="3-渲染树"><a href="#3-渲染树" class="headerlink" title="3. 渲染树"></a>3. 渲染树</h3><p>其实这就是一个 DOM 树和 CSS 规则树合并的过程。</p><blockquote><p>注意：渲染树会忽略那些不需要渲染的节点，比如设置了<code>display:none</code>的节点。</p></blockquote><h4 id="计算"><a href="#计算" class="headerlink" title="计算"></a><strong>计算</strong></h4><p>通过计算让任何尺寸值都减少到三个可能之一：<code>auto</code>、百分比、px，比如把<code>rem</code>转化为<code>px</code>。</p><h4 id="级联"><a href="#级联" class="headerlink" title="级联"></a><strong>级联</strong></h4><p>浏览器需要一种方法来确定哪些样式才真正需要应用到对应元素，所以它使用一个叫做<code>specificity</code>的公式，这个公式会通过：</p><ol><li> 标签名、class、id</li><li> 是否内联样式</li><li> <code>!important</code></li></ol><p>然后得出一个权重值，取最高的那个。</p><h4 id="渲染阻塞"><a href="#渲染阻塞" class="headerlink" title="渲染阻塞"></a><strong>渲染阻塞</strong></h4><p>当遇到一个<code>script</code>标签时，DOM 构建会被暂停，直至脚本完成执行，然后继续构建 DOM 树。</p><p>但如果 JS 依赖 CSS 样式，而它还没有被下载和构建时，浏览器就会延迟脚本执行，直至 CSS Rules 被构建。</p><p>所有我们知道：</p><ul><li>  CSS 会阻塞 JS 执行</li><li>  JS 会阻塞后面的 DOM 解析</li></ul><p>为了避免这种情况，应该以下原则：</p><ul><li>  CSS 资源排在 JavaScript 资源前面</li><li>  JS 放在 HTML 最底部，也就是 <code>&lt;/body&gt;</code>前</li></ul><p>另外，如果要改变阻塞模式，可以使用 defer 与 async，详见：<a href="https://github.com/xiaoyu2er/blog/issues/8">这篇文章 (opens new window)</a></p><ol start="4"><li>布局与绘制</li></ol><p>确定渲染树种所有节点的几何属性，比如：位置、大小等等，最后输入一个盒子模型，它能精准地捕获到每个元素在屏幕内的准确位置与大小。</p><p>然后遍历渲染树，调用渲染器的 paint() 方法在屏幕上显示其内容。</p><h3 id="5-合并渲染层"><a href="#5-合并渲染层" class="headerlink" title="5. 合并渲染层"></a><strong>5. 合并渲染层</strong></h3><p>把以上绘制的所有图片合并，最终输出一张图片。</p><h3 id="6-回流与重绘"><a href="#6-回流与重绘" class="headerlink" title="6. 回流与重绘"></a><strong>6. 回流与重绘</strong></h3><h4 id="回流-reflow"><a href="#回流-reflow" class="headerlink" title="回流(reflow)"></a><strong>回流(reflow)</strong></h4><p>当浏览器发现某个部分发现变化影响了布局时，需要倒回去重新渲染，会从<code>html</code>标签开始递归往下，重新计算位置和大小。</p><p>reflow 基本是无法避免的，因为当你滑动一下鼠标、resize 窗口，页面就会产生变化。</p><h4 id="重绘-repaint"><a href="#重绘-repaint" class="headerlink" title="重绘(repaint)"></a><strong>重绘(repaint)</strong></h4><p>改变了某个元素的背景色、文字颜色等等不会影响周围元素的位置变化时，就会发生重绘。</p><p>每次重绘后，浏览器还需要合并渲染层并输出到屏幕上。</p><p>回流的成本要比重绘高很多，所以我们应该尽量避免产生回流。</p><p>比如：</p><ul><li>  <code>display:none</code> 会触发回流，而 <code>visibility:hidden</code> 只会触发重绘。</li></ul><ol start="7"><li>JavaScript 编译执行</li></ol><p><strong>大致流程</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913094359.png"></p><p>可以分为三个阶段：</p><h5 id="1-词法分析"><a href="#1-词法分析" class="headerlink" title="1. 词法分析"></a><strong>1. 词法分析</strong></h5><p>JS 脚本加载完毕后，会首先进入语法分析阶段，它首先会分析代码块的语法是否正确，不正确则抛出“语法错误”，停止执行。</p><p>几个步骤：</p><ul><li>  分词，例如将<code>var a = 2</code>，，分成<code>var</code>、<code>a</code>、<code>=</code>、<code>2</code>这样的词法单元。</li><li>  解析，将词法单元转换成抽象语法树（AST）。</li><li>  代码生成，将抽象语法树转换成机器指令。</li></ul><h5 id="2-预编译"><a href="#2-预编译" class="headerlink" title="2. 预编译"></a><strong>2. 预编译</strong></h5><p>JS 有三种运行环境：</p><ul><li>  全局环境</li><li>  函数环境</li><li>  eval</li></ul><p>每进入一个不同的运行环境都会创建一个对应的执行上下文，根据不同的上下文环境，形成一个函数调用栈，栈底永远是全局执行上下文，栈顶则永远是当前执行上下文。</p><p><strong>创建执行上下文</strong></p><p>创建执行上下文的过程中，主要做了以下三件事：</p><ul><li>创建变量对象<ul><li>  参数、函数、变量</li></ul></li><li>建立作用域链<ul><li>  确认当前执行环境是否能访问变量</li></ul></li><li>  确定 This 指向</li></ul><h5 id="3-执行"><a href="#3-执行" class="headerlink" title="3. 执行"></a><strong>3. 执行</strong></h5><p><strong>JS 线程</strong></p><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913094406.png"></p><p>虽然 JS 是单线程的，但实际上参与工作的线程一共有四个：</p><blockquote><p>其中三个只是协助，只有 JS 引擎线程是真正执行的</p></blockquote><ul><li>  JS 引擎线程：也叫 JS 内核，负责解析执行 JS 脚本程序的主线程，例如 V8 引擎</li><li>  事件触发线程：属于浏览器内核线程，主要用于控制事件，例如鼠标、键盘等，当事件被触发时，就会把事件的处理函数推进事件队列，等待 JS 引擎线程执行</li><li>  定时器触发线程：主要控制<code>setInterval</code>和<code>setTimeout</code>，用来计时，计时完毕后，则把定时器的处理函数推进事件队列中，等待 JS 引擎线程。</li><li>  HTTP 异步请求线程：通过 XMLHttpRequest 连接后，通过浏览器新开的一个线程，监控 readyState 状态变更时，如果设置了该状态的回调函数，则将该状态的处理函数推进事件队列中，等待 JS 引擎线程执行。</li></ul><p><strong>注：浏览器对同一域名的并发连接数是有限的，通常为 6 个。</strong></p><p><strong>宏任务</strong></p><p>分为：</p><ul><li>  同步任务：按照顺序执行，只有前一个任务完成后，才能执行后一个任务</li><li>  异步任务：不直接执行，只有满足触发条件时，相关的线程将该异步任务推进任务队列中，等待 JS 引擎主线程上的任务执行完毕时才开始执行，例如异步 Ajax、DOM 事件，setTimeout 等。</li></ul><p><strong>微任务</strong></p><p>微任务是 ES6 和 Node 环境下的，主要 API 有：<code>Promise</code>，<code>process.nextTick</code>。</p><p>微任务的执行在宏任务的同步任务之后，在异步任务之前。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913094407.png"></p><p><strong>代码例子</strong></p><p>以上代码输出顺序为：1,3,5,4,2</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li>  <a href="https://github.com/skyline75489/what-happens-when-zh_CN">what-happens-when-zh_CN (opens new window)</a></li><li>  <a href="https://alistapart.com/article/tags-to-dom/">Tags to DOM (opens new window)</a></li><li>  <a href="https://heyingye.github.io/2018/04/16/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/">彻底理解浏览器的缓存机制 (opens new window)</a></li><li>  <a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The_rendering_engine">浏览器的工作原理：新式网络浏览器幕后揭秘 (opens new window)</a></li><li>  <a href="https://blog.fundebug.com/2019/01/03/understand-browser-rendering/">深入浅出浏览器渲染原理 (opens new window)</a></li><li>  <a href="https://heyingye.github.io/2018/03/19/js%E5%BC%95%E6%93%8E%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/#%E9%A2%84%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5">js 引擎的执行过程（一） (opens new window)</a></li><li>  还有一些找不到了。。。。。</li></ul><p>From: <a href="https://4ark.me/post/b6c7c0a2.html">4ark.me</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;这个问题已经是老生常谈了，更是经常被作为面试的压轴题出现，网上也有很多文章，但最近闲的无聊，然后就自己做了一篇笔记，感觉比之前理解</summary>
      
    
    
    
    <category term="web" scheme="https://blog.17lai.site/categories/web/"/>
    
    
    <category term="web" scheme="https://blog.17lai.site/tags/web/"/>
    
    <category term="http" scheme="https://blog.17lai.site/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Joplin 插件使用推荐</title>
    <link href="https://blog.17lai.site/note/2021-09-10-the-joplin-plugin-recommend/"/>
    <id>https://blog.17lai.site/note/2021-09-10-the-joplin-plugin-recommend/</id>
    <published>2021-09-10T14:25:00.000Z</published>
    <updated>2021-10-11T12:25:08.469Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Joplin插件推荐"><a href="#Joplin插件推荐" class="headerlink" title="Joplin插件推荐"></a>Joplin插件推荐</h2><blockquote><p>Gif图片加载较慢，请耐心等待！</p></blockquote><h2 id="persistent-text-folding-in-editor"><a href="#persistent-text-folding-in-editor" class="headerlink" title="persistent-text-folding-in-editor"></a><a href="https://github.com/ambrt/joplin-plugin-fold-cm/releases/">persistent-text-folding-in-editor</a></h2><p><img src="https://aws1.discourse-cdn.com/standard14/uploads/cozic/original/2X/3/371b2bfa2825255462241d6390400e0ed4dcf55b.gif" alt="persistent-text-folding-in-editor 演示"></p><ul><li>Ctrl(or Cmd) + Alt + F to fold all</li><li>Ctrl(or Cmd) + Alt + U to unfold all</li></ul><h2 id="Plugin-Conflict-Resolution"><a href="#Plugin-Conflict-Resolution" class="headerlink" title="Plugin: Conflict Resolution"></a><a href="https://discourse.joplinapp.org/t/plugin-conflict-resolution/19204">Plugin: Conflict Resolution</a></h2><p><img src="https://cimg1.17lai.site/data/2021/09/1020210910084450.png" alt="plugin-conflict-resolution演示"></p><h2 id="Joplin-Kanban-Plugin"><a href="#Joplin-Kanban-Plugin" class="headerlink" title="Joplin Kanban Plugin"></a><a href="https://github.com/joplin/plugin-kanban/wiki">Joplin Kanban Plugin</a></h2><p><img src="https://images.weserv.nl/?url=https://github.com/joplin/plugin-kanban/wiki/images/kanban-screenshot.png"></p><p><strong>Usage</strong></p><p>To get started, you’ll need a notebook which will contain all tasks that you want to see on the board. The plugin will only show tasks in a single notebook and it’s sub-notebooks.</p><p>A kanban board is defined by a special type of note, which contains all of its configuration. Create a new note, and paste in the following:</p><pre class="line-numbers language-none"><code class="language-none">```kanbancolumns:  - name: Backlog    backlog: true  - name: Work in progress    tag: wip  - name: Finished    tag: done```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It is important that the confiuration is surrounded by a code block (<code>kanban ... </code>), otherwise it won’t be detected.</p><h2 id="joplin-plugin-nlr"><a href="#joplin-plugin-nlr" class="headerlink" title="joplin_plugin_nlr"></a><a href="https://github.com/fengqiaozhu/joplin_plugin_nlr">joplin_plugin_nlr</a></h2><ol><li> 插件安装后会在工具菜单添加一项：<strong>NLR</strong></li></ol><p><img src="https://cimg1.17lai.site/data/2021/09/1020210910101315.png" alt="1.png"></p><ol start="2"><li>点击 <strong>NLR</strong> 打开新的panel，即可在输入框输入书名或作者名称搜索小说</li></ol><p><img src="https://cimg1.17lai.site/data/2021/09/1020210910101332.png" alt="2.png"></p><ol start="3"><li> 点击卡片右上方 <strong>INFO</strong> 打开新的小说目录，章节卡片右上checkbox选中即代表下载此chapter，选中后，点击上方<strong>DOWNLOAD</strong>开始下载，在笔记列表中即可看到小说文本了。</li></ol><p><img src="https://cimg1.17lai.site/data/2021/09/1020210910101414.png" alt="3.png"></p><h2 id="joplin-outline"><a href="#joplin-outline" class="headerlink" title="joplin-outline"></a><a href="https://github.com/cqroot/joplin-outline">joplin-outline</a></h2><p><img src="https://cimg1.17lai.site/data/2021/09/1020210910105707.png"></p><h2 id="joplin-persistent-layout"><a href="#joplin-persistent-layout" class="headerlink" title="joplin-persistent-layout"></a><a href="https://github.com/benji300/joplin-persistent-layout">joplin-persistent-layout</a></h2><p>Save editor layout (editor/split view/viewer/rich text) for each note separately.</p><p>To persist the layout for a note follow these steps:</p><ol><li><p>Specify the tags for which a specific layout should be used.</p><ul><li><p>To do this, go to the plugin’s settings/options page and add the tags to the settings.</p></li><li><p>An example configuration could like this:</p><p><a href="https://github.com/benji300/joplin-persistent-layout/blob/master/assets/tags-config.png"><img src="https://cimg1.17lai.site/data/2021/09/1020210910105956.png" alt="layout-tags-config"></a></p></li></ul></li><li><p>Make sure that the correct value is selected in <code>View &gt; Layout button sequence</code>.</p><ul><li>To be able to use the layout switching correctly, this setting must be set accordingly. Otherwise the editor layout might not be switched to the expected one.</li><li>For example: If a tag is specified in option <code>Tags for editor layout mode: Rendered Markdown viewer</code> and least one note uses it, the setting must also contain <code>Viewer</code>.</li></ul></li><li><p>Add the appropriate tags to the notes. If not already done.</p><ul><li>When the selected note is changed, the editor layout is switched.</li><li>If none of the selected note’s tags matches a specified layout tag, the default layout from the option <code>Default editor layout</code> is used.<ul><li>If nothing is selected as default editor layout, the currently active editor layout will be kept.</li></ul></li><li>If more than one tag is specified for a note, the first matching one is used.</li></ul></li></ol><h2 id="Plugin-inline-tags"><a href="#Plugin-inline-tags" class="headerlink" title="Plugin: inline tags"></a><a href="https://github.com/roman-r-m/joplin-inline-tags-plugin">Plugin: inline tags</a></h2><p><img src="https://aws1.discourse-cdn.com/standard14/uploads/cozic/original/2X/0/0065618a26a81a8f01a1dc440bbbd1e216266e2f.gif" alt="ezgif.com-gif-maker"></p><h2 id="joplin-plugin-note-overview"><a href="#joplin-plugin-note-overview" class="headerlink" title="joplin-plugin-note-overview"></a><a href="https://github.com/JackGruber/joplin-plugin-note-overview">joplin-plugin-note-overview</a></h2><p><img src="https://cimg1.17lai.site/data/2021/09/1020210910111844.png"></p><p>Create one or more notes with the following content:</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- note-overview-pluginsearch: -tag:*fields: updated_time, titlealias: updated_time AS Last edit, title AS Titlesort: title DESC--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Several of these blocks can be included in one note, also between text.</p><p>The note content is updated every x minutes (depending on your setting) or manualy by <code>Tools &gt; Create Note overview</code>.</p><h2 id="joplin-plugin-embed-search"><a href="#joplin-plugin-embed-search" class="headerlink" title="joplin-plugin-embed-search"></a><a href="https://github.com/ambrt/joplin-plugin-embed-search">joplin-plugin-embed-search</a></h2><pre class="line-numbers language-none"><code class="language-none">```searchyour search query```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://aws1.discourse-cdn.com/standard14/uploads/cozic/original/2X/9/9dfb27924c8fd373c5db8178e1cda27c74a4e50c.gif" alt="Peek 2021-01-26 19-22"></p><p><strong>Additional features</strong></p><ul><li>you can paste <code>sort:asc</code> or <code>sort:desc</code> to sort notes by title ascending or descending</li><li>A shorthand <code>notebook:this</code>, that narrows search to current notebook only.</li><li>Basic content embedding <code>content:true</code> (beta):</li></ul><p><img src="https://aws1.discourse-cdn.com/standard14/uploads/cozic/original/2X/0/06aa9cff292ac6a5f5f3c3a2acc35d13c0fb65c9.png"></p><h2 id="Spoilers"><a href="#Spoilers" class="headerlink" title="Spoilers"></a>Spoilers</h2><ul><li><ul><li><p>可使用%%遮盖部分文字。</p></li><li><ul><li><p>格式：</p></li><li><ul><li><code>%%扰流板、遮挡板%%</code></li></ul></li><li><p>软件内呈现：</p></li></ul></li></ul></li></ul><p><img src="https://cimg1.17lai.site/data/2021/09/1020210910174557.png" alt="点击前">点击前</p><p><img src="https://cimg1.17lai.site/data/2021/09/1020210910174618.png" alt="点击后">点击后</p><ul><li><ul><li>以及一个类似闪卡的可折叠块</li><li>格式：</li></ul></li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">:[测试，标题测试，内容]:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><ul><li>软件内呈现：</li></ul></li></ul><p><img src="https://cimg1.17lai.site/data/2021/09/1020210910174638.png" alt="点击前">点击前</p><p><img src="https://cimg1.17lai.site/data/2021/09/1020210910180108.png" alt="点击后">点击后</p><h2 id="Notes-statistics"><a href="#Notes-statistics" class="headerlink" title="Notes statistics"></a>Notes statistics</h2><ul><li><ul><li>笔记内部的数据统计。</li></ul></li></ul><h2 id="Note-tabs"><a href="#Note-tabs" class="headerlink" title="Note tabs"></a><a href="https://github.com/benji300/joplin-note-tabs">Note tabs</a></h2><ul><li><ul><li>像浏览器一样浏览文档，支持多个打开放置。</li></ul></li><li><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/benji300/joplin-note-tabs/master/assets/screencast.gif"></p></li></ul><h2 id="Quick-links"><a href="#Quick-links" class="headerlink" title="Quick links"></a>Quick links</h2><ul><li><ul><li>使用<code>@@</code>快速链接笔记文件。</li></ul></li><li><p><img src="https://aws1.discourse-cdn.com/standard14/uploads/cozic/original/2X/9/98abc7c6beb7551c1a8d375d358707143305ef58.gif"></p></li></ul><p><a href="https://github.com/marc0l92/joplin-plugin-jira-issue">Jira Issue</a></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/marc0l92/joplin-plugin-jira-issue/main/doc/usage_example.gif"></p><h2 id="Homenotes"><a href="#Homenotes" class="headerlink" title="Homenotes"></a>Homenotes</h2><ul><li>选择一个笔记作为每次打开软件时的首个笔记，可以把这个功能当作书签用。</li></ul><h2 id="Admonition"><a href="#Admonition" class="headerlink" title="Admonition"></a><a href="https://github.com/maxnegro/joplin-plugin-admonition">Admonition</a></h2><pre class="line-numbers language-none"><code class="language-none">!!! note This is the admonition titleThis is the admonition body!!!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cimg1.17lai.site/data/2021/09/1020210910185118.png"></p><p>The following admonition types, supported by Docarys, are recognized by this plugin:</p><table><thead><tr><th>Type</th></tr></thead><tbody><tr><td>note</td></tr><tr><td>abstract</td></tr><tr><td>info</td></tr><tr><td>tip</td></tr><tr><td>success</td></tr><tr><td>question</td></tr><tr><td>warning</td></tr><tr><td>failure</td></tr><tr><td>danger</td></tr><tr><td>bug</td></tr><tr><td>example</td></tr><tr><td>quote</td></tr></tbody></table><h2 id="Encrypted-notes"><a href="#Encrypted-notes" class="headerlink" title="Encrypted notes"></a>Encrypted notes</h2><ul><li>字面意义，加密笔记，记住密码不得找回。</li></ul><h2 id="Favorites"><a href="#Favorites" class="headerlink" title="Favorites"></a><a href="https://github.com/benji300/joplin-favorites">Favorites</a></h2><p><img src="https://cimg1.17lai.site/data/2021/09/1020210910225438.png"></p><p><img src="https://cimg1.17lai.site/data/2021/09/1020210910225056.png"></p><ul><li><p>收藏夹，支持笔记、标签笔记本的收纳（随取随用）</p></li><li><ul><li>更改收藏夹中的笔记名不会更改原始笔记。</li></ul></li></ul><h2 id="Highlight"><a href="#Highlight" class="headerlink" title="Highlight"></a>Highlight</h2><ul><li>打出<code>[h:colour:scope]</code>后，插件会自动识别成代码。</li></ul><table><thead><tr><th>颜色</th><th>范围（自动选择的）</th></tr></thead><tbody><tr><td>m = mark</td><td>e = empty</td></tr><tr><td>r = red</td><td>w = word</td></tr><tr><td>g = green</td><td>s = sentence</td></tr><tr><td>b = blue</td><td>l = line</td></tr><tr><td>y = yellow</td><td></td></tr></tbody></table><p><img src="https://cimg1.17lai.site/data/2021/09/1020210910225117.png"></p><p>其他插件：</p><p><a href="https://github.com/joplin/plugins/blob/master/README.md#plugins">官方插件下载地址及其介绍</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Joplin插件推荐&quot;&gt;&lt;a href=&quot;#Joplin插件推荐&quot; class=&quot;headerlink&quot; title=&quot;Joplin插件推荐&quot;&gt;&lt;/a&gt;Joplin插件推荐&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Gif图片加载较慢，请耐心等待！&lt;/p&gt;
&lt;/bl</summary>
      
    
    
    
    <category term="note" scheme="https://blog.17lai.site/categories/note/"/>
    
    
    <category term="note" scheme="https://blog.17lai.site/tags/note/"/>
    
    <category term="Joplin" scheme="https://blog.17lai.site/tags/Joplin/"/>
    
    <category term="MarkDown" scheme="https://blog.17lai.site/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>基于Hexo的matery主题搭建博客并深度优化</title>
    <link href="https://blog.17lai.site/hexo/2021-09-10-use-hexo-and-matery-to-make-a-perfect-blog/"/>
    <id>https://blog.17lai.site/hexo/2021-09-10-use-hexo-and-matery-to-make-a-perfect-blog/</id>
    <published>2021-09-10T14:25:00.000Z</published>
    <updated>2021-10-12T10:24:40.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-版-hexo-matery"><a href="#Docker-版-hexo-matery" class="headerlink" title="Docker 版 hexo + matery"></a>Docker 版 hexo + matery</h2><ul><li><a href="https://hub.docker.com/r/bloodstar/hexo">docker-hub</a></li><li><a href="https://github.com/appotry/docker-hexo">Github-hexo</a></li></ul><p>使用推荐Docker来搭配本文，阅读使用，将更省事，方便，快捷。hexo环境一键搞定！</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">docker create <span class="token punctuation">-</span><span class="token punctuation">-</span>name=blog.17lai.site \<span class="token punctuation">-</span>e HEXO_SERVER_PORT=4000 \<span class="token punctuation">-</span>e GIT_USER="17lai" \<span class="token punctuation">-</span>e GIT_EMAIL="17lai@domain.tld" \<span class="token punctuation">-</span>v /mnt/blog.17lai.site<span class="token punctuation">:</span>/app \<span class="token punctuation">-</span>p 4000<span class="token punctuation">:</span>4000 \bloodstar/hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h2><p><a href="https://hexo.io/zh-cn/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li><li><a href="https://www.npmjs.com/">nmp</a></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装以后，可以使用以下两种方式执行 Hexo：</p><ol><li><code>npx hexo</code></li><li>将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用： <code>hexo</code></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'PATH="$PATH:./node_modules/.bin"'</span> <span class="token operator">&gt;&gt;</span> ~/.profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装淘宝镜像，-加NPM"><a href="#安装淘宝镜像，-加NPM" class="headerlink" title="安装淘宝镜像， 加NPM"></a>安装淘宝镜像， 加NPM</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装CNPM"><a href="#安装CNPM" class="headerlink" title="安装CNPM"></a>安装CNPM</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>后期需要升级的化，进入 blog 目录，先检查更新:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> outdatedPackage                  Current  Wanted  Latest  Locationhexo                       <span class="token number">3.9</span>.0   <span class="token number">3.9</span>.0   <span class="token number">4.2</span>.0  hexo-sitehexo-deployer-git          <span class="token number">1.0</span>.0   <span class="token number">1.0</span>.0   <span class="token number">2.1</span>.0  hexo-sitehexo-generator-archive     <span class="token number">0.1</span>.5   <span class="token number">0.1</span>.5   <span class="token number">1.0</span>.0  hexo-sitehexo-generator-category    <span class="token number">0.1</span>.3   <span class="token number">0.1</span>.3   <span class="token number">1.0</span>.0  hexo-sitehexo-generator-feed        <span class="token number">1.2</span>.2   <span class="token number">1.2</span>.2   <span class="token number">2.2</span>.0  hexo-sitehexo-generator-index       <span class="token number">0.2</span>.1   <span class="token number">0.2</span>.1   <span class="token number">1.0</span>.0  hexo-sitehexo-generator-tag         <span class="token number">0.2</span>.0   <span class="token number">0.2</span>.0   <span class="token number">1.0</span>.0  hexo-sitehexo-renderer-ejs          <span class="token number">0.3</span>.1   <span class="token number">0.3</span>.1   <span class="token number">1.0</span>.0  hexo-sitehexo-renderer-marked       <span class="token number">0.3</span>.2   <span class="token number">0.3</span>.2   <span class="token number">2.0</span>.0  hexo-sitehexo-renderer-stylus       <span class="token number">0.3</span>.3   <span class="token number">0.3</span>.3   <span class="token number">1.1</span>.0  hexo-sitehexo-server                <span class="token number">0.3</span>.3   <span class="token number">0.3</span>.3   <span class="token number">1.0</span>.0  hexo-site<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 <code>package.json</code> 文件，基于 <code>Latest</code> 列内容更新版本号，然后更新并检查版本号：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> --save<span class="token comment"># 检查版本号</span>$ hexo -vhexo: <span class="token number">4.2</span>.0hexo-cli: <span class="token number">3.1</span>.0<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span><span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>此时，通过 <code>hexo s</code> 命令即可在本地启动您的博客站点了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo sINFO  Start processingINFO  Hexo is running at http://localhost:4000 <span class="token builtin class-name">.</span> Press Ctrl+C to stop.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来将安装主题，配置博客托管平台，实现一键发布并刷新 CDN 缓存。</p><h2 id="目录结构说明"><a href="#目录结构说明" class="headerlink" title="目录结构说明"></a>目录结构说明</h2><p>在执行过<code>Hexo deploy</code>命令之后，目录结构新增了<code>.deploy_git</code>，<code>public</code>，<code>.gitignore</code>，如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> $ tree -L <span class="token number">2</span><span class="token builtin class-name">.</span>├── .deploy_git├── node_modules├── public├── scaffolds│   ├── draft.md│   ├── page.md│   └── post.md├── <span class="token builtin class-name">source</span>│   ├── _posts│   ├── _drafts├── themes├── _config.yml├── db.json├── package.json└── package-lock.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>用来配置博客相关的参数，初始化时自动创建。具体参数设置，可参照 <a href="https://hexo.io/zh-cn/docs/configuration">Hexo 配置</a> 文档。</p><h3 id="node-modules-和-package-json"><a href="#node-modules-和-package-json" class="headerlink" title="node_modules 和 package.json"></a>node_modules 和 package.json</h3><p>都是在初始化时自动创建。</p><p><code>node_modules</code>用来存储已安装的各类依赖包。<br><code>package.json</code>用来查看 Hexo 的版本以及相关依赖包的版本。</p><p>Hexo 会默认安装：</p><ul><li>hexo：主程序</li><li>hexo-deployer-git：实现 git 部署方式</li><li>hexo-generator-archive：存档页面生成器</li><li>hexo-generator-category：分类页面生成器</li><li>hexo-generator-index：index 生成器</li><li>hexo-generator-tag：标签页面生成器</li><li>hexo-renderer-ejs：支持 EJS 渲染</li><li>hexo-renderer-marked：Markdown 引擎</li><li>hexo-renderer-stylus：支持 stylus 渲染</li><li>hexo-server：支持本地预览，默认地址 localhost:4000</li></ul><p>新安装的依赖包，也会保存在<code>node_module</code>文件夹下。</p><h3 id="scaffold"><a href="#scaffold" class="headerlink" title="scaffold"></a>scaffold</h3><p>模板文件夹，初始化时自动创建。包含<code>page</code>，<code>post</code>，<code>draft</code>三种模板，分别对应 页面、要发布的文章、草稿。</p><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p>主题文件夹，初始化时自动创建。每一个主题，都有一个单独的文件夹。默认主题为 <a href="https://github.com/hexojs/hexo-theme-landscape">landscape</a>。</p><h3 id="source-，-public-和-deploy-git"><a href="#source-，-public-和-deploy-git" class="headerlink" title="source ， public 和 .deploy_git"></a>source ， public 和 .deploy_git</h3><ul><li>source：资源文件夹。用来存放图片、Markdown 文档（文章、草稿）、各种页面（分类、关于页面等）。</li><li>public：将 source 文件夹里的 Markdown 文档，转换成 index.html。再结合主题进行渲染，就是我们最终看到的博客。</li><li>.deploy_git：将 public 文件夹的内容提交到 Github 后生成，内容与 public 文件夹基本一致。</li></ul><p>这三者的关系大致是：source -&gt; public -&gt; .deploy_git</p><p>执行<code>hexo generate</code>，根据 source，更新 public。<br>执行<code>hexo deploy</code>，根据 public，更新 .deploy_git。</p><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p><a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a> 是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题，点击 <a href="https://www.lixl.cn/">这里</a> 可以查看示例效果。点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到 Hexo 的 <code>themes</code> 文件夹中即可。</p><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议"></a><code>_config.yml</code> 文件的其它修改建议</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建文章模板修改"><a href="#新建文章模板修改" class="headerlink" title="新建文章模板修改"></a>新建文章模板修改</h3><p>首先为了新建文章方便，我们可以修改一下文章模板，建议将<code>/scaffolds/post.md</code>修改为如下代码：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> date <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token key atrule">author</span><span class="token punctuation">:</span> <span class="token key atrule">img</span><span class="token punctuation">:</span> <span class="token key atrule">coverImg</span><span class="token punctuation">:</span> <span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">password</span><span class="token punctuation">:</span><span class="token key atrule">summary</span><span class="token punctuation">:</span><span class="token key atrule">tags</span><span class="token punctuation">:</span><span class="token key atrule">categories</span><span class="token punctuation">:</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样新建文章后 一些<code>Front-matter</code>参数不用你自己补充了，修改对应信息就可以了。</p><h3 id="新建404页"><a href="#新建404页" class="headerlink" title="新建404页"></a>新建404页</h3><p> 新建一个404.md文件</p><p>  在hexo的souce文件夹下创建一个404.md，之后输入如下内容：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token font-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-11-23 21:10:10</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span></span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913191101.png" alt="新建404.md"></p><p>然后<code>hexo g</code>生成页面中就有404。只是页面较丑。</p><h3 id="404页面美化"><a href="#404页面美化" class="headerlink" title="404页面美化"></a>404页面美化</h3><blockquote><p>下载404特效</p><p>点击下载代码:<a href="https://www.lanrenzhijia.com/js/4285.html">点我去代码出处</a></p></blockquote><h4 id="移植"><a href="#移植" class="headerlink" title="移植"></a>移植</h4><h5 id="放入js文件到主题中"><a href="#放入js文件到主题中" class="headerlink" title="放入js文件到主题中"></a>放入js文件到主题中</h5><p>  将下载的压缩包解压，会发现里面有两个js文件和一个html页面，重要的就是js文件，将文件移植到主题的source文件的libs文件夹下，需要自己创建一个文件夹，我给文件夹取的名字叫做404。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913191716.png"></p><h5 id="导入404-js"><a href="#导入404-js" class="headerlink" title="导入404 js"></a>导入404 js</h5><p>因为该主题的js文件都是写_config.yml文件里面的，为了规范，也需要将文件的路径写到该文件夹下</p><p>如下，之后导入js文件的时候就可以使用404bodymovin和404data来代替了</p><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913192151.png" alt="修改主题_config.yml文件"></p><h5 id="编辑404-esj"><a href="#编辑404-esj" class="headerlink" title="编辑404.esj"></a>编辑404.esj</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token comment">/* don't remove. */</span>    <span class="token selector">.page404-cover</span> <span class="token punctuation">{</span>        <span class="token comment">/* height: 75vh; */</span>        <span class="token property">height</span><span class="token punctuation">:</span> 88vh<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token selector">#svgContainer</span> <span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%- theme.libs.js.my404bodymovin %&gt;<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%- theme.libs.js.my404data %&gt;<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-cover pd-header page404-cover<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>svgContainer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">var</span> svgContainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'svgContainer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> animItem <span class="token operator">=</span> bodymovin<span class="token punctuation">.</span><span class="token function">loadAnimation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          wrapper<span class="token operator">:</span> svgContainer<span class="token punctuation">,</span>          animType<span class="token operator">:</span> <span class="token string">'svg'</span><span class="token punctuation">,</span>          loop<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          animationData<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>animationData<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在就移植成功了，使用下面命令上传，之后输入一个错误的页面就可以查看到了</p><pre class="line-numbers language-none"><code class="language-none">hexo cl &amp;&amp; hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Tips: 不要再本地试验，本地的时候输入错误的页面不会显示404页面的。</p></blockquote><h3 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://www.lixl.cn/medias/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"悟尘记"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"人生就是一场修行，上善若水，厚德载物。"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.lixl.cn/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去参观"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://wiki.hyperledger.org/download/attachments/2392069/fabric?version=1&amp;modificationDate=1540928132000&amp;api=v2"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Fabric"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"A Blockchain Platform for the Enterprise"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://hyperledger-fabric.readthedocs.io/en/master/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://www.bootcdn.cn/assets/img/maoyun.svg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"BootCDN"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"稳定、快速、免费的前端开源项目 CDN 加速服务。"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.bootcdn.cn/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去加速"</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">"preprocess"</span> <span class="token comment"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">"tomorrow"</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># default false</span>  custom_css<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱的配置，可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com/blinkfox<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span>  <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span>  <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span>  <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span>  <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-github<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供参考：</p><ul><li>Facebook: <code>fa-facebook</code></li><li>Twitter: <code>fa-twitter</code></li><li>Google-plus: <code>fa-google-plus</code></li><li>Linkedin: <code>fa-linkedin</code></li><li>Tumblr: <code>fa-tumblr</code></li><li>Medium: <code>fa-medium</code></li><li>Slack: <code>fa-slack</code></li><li>新浪微博: <code>fa-weibo</code></li><li>微信: <code>fa-wechat</code></li><li>QQ: <code>fa-qq</code></li></ul><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置文章基本信息"><a href="#配置文章基本信息" class="headerlink" title="配置文章基本信息"></a>配置文章基本信息</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">new_post_name</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>title.md   <span class="token comment"># 新文章的文件名称</span><span class="token key atrule">default_layout</span><span class="token punctuation">:</span> post       <span class="token comment"># 预设布局</span><span class="token key atrule">auto_spacing</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>        <span class="token comment"># 在中文和英文之间加入空格</span><span class="token key atrule">titlecase</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>           <span class="token comment"># 把标题转换为 title case</span><span class="token key atrule">external_link</span><span class="token punctuation">:</span>             <span class="token comment"># 在新标签中打开链接</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>             <span class="token comment"># 在新标签中打开链接</span>  <span class="token key atrule">field</span><span class="token punctuation">:</span>                   <span class="token comment"># 对整个网站（site）生效或仅对文章（post）生效</span>  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>                 <span class="token comment"># 需要排除的域名。主域名和子域名如 www 需分别配置[]</span><span class="token key atrule">filename_case</span><span class="token punctuation">:</span> <span class="token number">0</span>           <span class="token comment"># 把文件名称转换为 (1) 小写或 (2) 大写</span><span class="token key atrule">render_drafts</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>       <span class="token comment"># 显示草稿，默认为：false</span><span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 启动 Asset 文件夹</span><span class="token key atrule">relative_link</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>       <span class="token comment"># 把链接改为与根目录的相对位址</span><span class="token key atrule">future</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>               <span class="token comment"># 显示未来的文章</span><span class="token key atrule">highlight</span><span class="token punctuation">:</span>                 <span class="token comment"># 代码块的设置</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>            <span class="token comment"># 开启代码块高亮</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>       <span class="token comment"># 显示行数</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>       <span class="token comment"># 如果未指定语言，则启用自动检测</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span>             <span class="token comment"># 用 n 个空格替换 tabs；如果值为空，则不会替换 tabs</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置代码高亮及样式"><a href="#配置代码高亮及样式" class="headerlink" title="配置代码高亮及样式"></a>配置代码高亮及样式</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>                      <span class="token comment"># 代码块的设置</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>                 <span class="token comment"># 开启代码块高亮</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>             <span class="token comment"># 显示行数</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>            <span class="token comment"># 如果未指定语言，则启用自动检测</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>               <span class="token comment"># 用 n 个空格替换 tabs；如果值为空，则不会替换 tabs</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置代码的样式</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">code</span><span class="token punctuation">:</span>  <span class="token key atrule">lang</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>     <span class="token comment"># 代码块是否显示名称</span>  <span class="token key atrule">copy</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>     <span class="token comment"># 代码块是否可复制</span>  <span class="token key atrule">shrink</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 代码块是否可以收缩</span>  <span class="token key atrule">break</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># 代码是否折行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置是否启用转载限制模块"><a href="#配置是否启用转载限制模块" class="headerlink" title="配置是否启用转载限制模块"></a>配置是否启用转载限制模块</h3><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">reprint:  enable: false   #是否启用“转载规则限定模块”  default: cc_by<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>文章转载规则，可以是 <code>cc_by</code>, <code>cc_by_nd</code>, <code>cc_by_sa</code>, <code>cc_by_nc</code>, <code>cc_by_nc_nd</code>, <code>cc_by_nc_sa</code>, <code>cc0</code>, <code>noreprint</code> 或 <code>pay</code> 中的一个</p><h3 id="配置文章阅读密码功能"><a href="#配置文章阅读密码功能" class="headerlink" title="配置文章阅读密码功能"></a>配置文章阅读密码功能</h3><p>阅读文章的密码验证功能，如要使用此功能请激活该配置项，并在对应文章的 <code>Front-matter</code> 中写上 <code>password</code> 的键和加密后的密文即可。</p><blockquote><p>请注意：为了保证密码原文不会被泄露到网页中，文章的密码必须是通过 <code>SHA256</code> 加密的，这样就不会被破解。</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">verifyPassword</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">promptMessage</span><span class="token punctuation">:</span> 请输入访问本文章的密码  <span class="token key atrule">errorMessage</span><span class="token punctuation">:</span>  密码错误，将返回主页！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h3><p>通过 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a> 插件可以实现一键将博客同时部署到多个 git 仓库中。如同时发布到 github 及 gitee 提供的 pages 服务。安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改 Hexo 根目录下的 <code>_config.yml</code> 文件中的如下内容:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">## Docs: https://hexo.io/docs/deployment.html</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/lxl80/blog.git    <span class="token key atrule">branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages    <span class="token key atrule">ignore_hidden</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/lxl80/lxl80.git    <span class="token key atrule">branch</span><span class="token punctuation">:</span> master    <span class="token key atrule">ignore_hidden</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>也可以如本站一样，采用 <a href="https://github.com/75k/hexo-deployer-cos-enhanced">hexo-deployer-cos-enhanced</a> 插件将静态内容部署到腾讯云对象存储服务中，在 DNS 配置中将境内线路解析到腾讯云 CDN 地址，实现加速。部署完成后会自动刷新被更新文件的 CDN 缓存。</p></blockquote><p>安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-cos-enhanced --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>_config.yml</code> 配置如下:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/lxl80/blog.git    <span class="token key atrule">branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages    <span class="token key atrule">ignore_hidden</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> cos    <span class="token key atrule">bucket</span><span class="token punctuation">:</span> lxl80<span class="token punctuation">-</span>130<span class="token important">****</span>    <span class="token key atrule">region</span><span class="token punctuation">:</span> ap<span class="token punctuation">-</span>beijing    <span class="token key atrule">secretId</span><span class="token punctuation">:</span> AKIDh9<span class="token important">****F8FvL</span>    <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> Z3IGiur<span class="token important">****QZR3PgjXmlVg</span>    <span class="token key atrule">cdnConfig</span><span class="token punctuation">:</span>      <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">cdnUrl</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//static.lixl.cn      <span class="token key atrule">bucket</span><span class="token punctuation">:</span> static<span class="token punctuation">-</span>130<span class="token important">****</span>      <span class="token key atrule">region</span><span class="token punctuation">:</span> ap<span class="token punctuation">-</span>beijing      <span class="token key atrule">folder</span><span class="token punctuation">:</span> static      <span class="token key atrule">secretId</span><span class="token punctuation">:</span> AKIDh9<span class="token important">****F8FvL</span>      <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> Z3IGiur<span class="token important">****QZR3PgjXmlVg</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后通过 <code>hexo g -d</code> 即可实现一键发布，并更新 CDN 缓存。</p><h3 id="文章链接转静态短地址（建议安装）"><a href="#文章链接转静态短地址（建议安装）" class="headerlink" title="文章链接转静态短地址（建议安装）"></a>文章链接转静态短地址（建议安装）</h3><p>如果文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件生成文章时生成中文拼音的永久链接，或者用<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 生成静态文章链接。以下结合 hexo-abbrlink 生成类似 <code>/yyyy/mmdd+随机数.html</code> 的文章链接地址。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，修改 <code>permalink:</code> ，并在文件末尾新增 <code>abbrlink:</code>配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>year/<span class="token punctuation">:</span>month<span class="token punctuation">:</span>day<span class="token punctuation">:</span>abbrlink.html<span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>  <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc16 <span class="token comment">#算法选项：crc16丨crc32</span>  <span class="token key atrule">rep</span><span class="token punctuation">:</span> dec <span class="token comment">#输出进制：dec为十进制，hex为十六进制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文章字数统计插件（可选的）"><a href="#文章字数统计插件（可选的）" class="headerlink" title="文章字数统计插件（可选的）"></a>文章字数统计插件（可选的）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">wordCount</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 将这个值设置为 true 即可.</span>  <span class="token key atrule">postWordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">" "</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明已经安装成功了。</p><h3 id="增加百度统计功能"><a href="#增加百度统计功能" class="headerlink" title="增加百度统计功能"></a>增加百度统计功能</h3><p>首先注册<a href="https://tongji.baidu.com/"><strong>百度统计站长版</strong></a>，登陆后点击 新增网站，然后直接输入你的博客地址例如： <a href="https://blog.17lai.site,网站域名/">https://blog.17lai.site，网站域名</a> 和 网站首页 都写这个，网站名称 可以填 我的博客，<br>行业类别： 博客—空间周边。</p><p>然后点击左侧菜单的 代码获取，找到</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">hm<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"https://hm.baidu.com/hm.js?……"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>问号后的这一段十六进制代码<br>复制下来，粘贴到 主题配置文件 中的baidu_analytics:后面，注意冒号和值之间要有一个空格，然后将该字段前面的#号删除代表启用此功能。保存后即可</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Add baidu analytics configuration</span><span class="token comment"># 添加 baidu Analytics 配置</span><span class="token key atrule">baiduAnalytics</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> f614xxxxxxxxxxxxxxxx05d25e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Leancloud-Valine打造Hexo个人博客极简评论系统"><a href="#Leancloud-Valine打造Hexo个人博客极简评论系统" class="headerlink" title="Leancloud+Valine打造Hexo个人博客极简评论系统"></a><a href="https://www.cnblogs.com/Timesi/p/9556236.html">Leancloud+Valine打造Hexo个人博客极简评论系统</a></h3><h4 id="Leancloud配置"><a href="#Leancloud配置" class="headerlink" title="Leancloud配置"></a>Leancloud配置</h4><p>首先访问Leancloud官网<code>https://leancloud.cn/</code><br>有Github账号的小伙伴可以用Github账号进行登陆然后绑定邮箱就可以啦！<br>进入之后点击创建应用<br><img src="https://cimg1.17lai.site/data/2021/09/1120210911134958.png"><br>这样我们就创建好啦！<br><img src="https://cimg1.17lai.site/data/2021/09/1120210911135007.png"><br>接着点击应用右上角的设置进入设置界面<br><img src="https://cimg1.17lai.site/data/2021/09/1120210911135013.png"><br>选择应用key，这样就可以看到我们接下来需要使用到的key<br><img src="https://cimg1.17lai.site/data/2021/09/1120210911135020.png"><br>接着进入应用中心绑定你的个人博客域名<br><img src="https://cimg1.17lai.site/data/2021/09/1120210911135027.png"></p><h4 id="Valine配置"><a href="#Valine配置" class="headerlink" title="Valine配置"></a>Valine配置</h4><p>然后我们去主题配置文件中进行修改<br>主题配置文件路径：<code>matery_config.yml</code><br>找到以下参数进行修改</p><pre class="line-numbers language-none"><code class="language-none"># Valine.# You can get your appid and appkey from https://leancloud.cn# more info please open https://valine.js.orgvaline:  enable: true //打开valine评论功能  appid: 你的leancloud appid   appkey: 你的leancloud appkey   notify: false //邮件提醒  verify: true //评论时是否有验证码，需要在Leancloud 设置-&gt;安全中心 中打开  placeholder: 说点什么吧！ //评论框默认显示  avatar: hide //评论者的头像,我这里设置的不显示  guest_info: nick # custom comment header  pageSize: 10 # pagination size<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PS：评论者头像可以进行如下设置<br><img src="https://cimg1.17lai.site/data/2021/09/1120210911135034.png"></p><p>到此，一个极简评论系统就完成啦！</p><h3 id="添加博客看板娘-动漫人物挂件"><a href="#添加博客看板娘-动漫人物挂件" class="headerlink" title="添加博客看板娘    动漫人物挂件"></a>添加博客看板娘    动漫人物挂件</h3><p>方法：</p><p>获取模型：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装喜欢的模型：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> packagename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将packagename换成模型名字，如我使用的模型：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> live2d-widget-model-shizuku<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后打开博客根目录下的 _config.yml文件，添加如下代码：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Live2D</span><span class="token comment">## https://github.com/EYHN/hexo-helper-live2d</span><span class="token key atrule">live2d</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># enable: false</span>  <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/ <span class="token comment"># Root path of plugin to be on the site (Relative)</span>  <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/ <span class="token comment"># JavaScript path related to plugin's root (Relative)</span>  <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/ <span class="token comment"># Relative model path related to plugin's root (Relative)</span>  <span class="token key atrule">scriptFrom</span><span class="token punctuation">:</span> local <span class="token comment"># Default</span>  <span class="token comment"># scriptFrom: jsdelivr # jsdelivr CDN</span>  <span class="token comment"># scriptFrom: unpkg # unpkg CDN</span>  <span class="token comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # Your custom url</span>  <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># Whether only to replace live2d tag instead of inject to all pages</span>  <span class="token key atrule">log</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># Whether to show logs in console</span>  <span class="token key atrule">model</span><span class="token punctuation">:</span>    <span class="token comment">#use: live2d-widget-model-lwet # npm-module package name</span>    <span class="token comment"># use: wanko # folder name in (hexo base dir)/live2d_models/</span>    <span class="token comment"># use: ./wives/wanko # folder path relative to hexo base dir</span>    <span class="token comment"># 模型：https://huaji8.top/post/live2d-plugin-2.0/</span>    <span class="token key atrule">use</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>wanko@1.0.5/assets/wanko.model.json <span class="token comment"># Your custom url</span>  <span class="token key atrule">display</span><span class="token punctuation">:</span>    <span class="token key atrule">position</span><span class="token punctuation">:</span> left    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">300</span>    <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">400</span>    <span class="token key atrule">hOffset</span><span class="token punctuation">:</span> <span class="token number">50</span>    <span class="token key atrule">vOffset</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">mobile</span><span class="token punctuation">:</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果见本blog左下角</p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p>如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector">.bg-color</span> <span class="token punctuation">{</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #4cbf30 0%<span class="token punctuation">,</span> #0f9d58 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>  <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>  <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>可以直接在 <code>/source/medias/banner</code> 文件夹中更换喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果会 <code>JavaScript</code> 代码，可以修改成自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".bg-cover"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-image"</span><span class="token punctuation">,</span> <span class="token string">"url(/medias/banner/"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".jpg)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 基于Hexo的hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery主题搭建博客并优化<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-10-03 14:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 基于Hexo的hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery主题搭建博客并优化<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-12-30 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 17lai.site<span class="token key atrule">img</span><span class="token punctuation">:</span> /medias/cover/hexo.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /medias/cover/hexo.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Hexo<span class="token key atrule">keywords</span><span class="token punctuation">:</span> Hexo GitHub blog<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Hexo  <span class="token punctuation">-</span> Blog  <span class="token punctuation">-</span> GitHub<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hexo体积压缩"><a href="#hexo体积压缩" class="headerlink" title="hexo体积压缩"></a>hexo体积压缩</h2><p>减小体积，加快加载速度</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> gulp -g$ <span class="token function">npm</span> <span class="token function">install</span> gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save 或者使用yarn  <span class="token function">yarn</span> global <span class="token function">add</span> gulp<span class="token function">yarn</span> <span class="token function">add</span> gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，在根目录新增 <code>gulpfile.js</code> :</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"> var gulp = require('gulp');var minifycss = require('gulp<span class="token punctuation">-</span>minify<span class="token punctuation">-</span>css');var uglify = require('gulp<span class="token punctuation">-</span>uglify');var htmlmin = require('gulp<span class="token punctuation">-</span>htmlmin');var htmlclean = require('gulp<span class="token punctuation">-</span>htmlclean');// 压缩 public 目录 cssgulp.task('minify<span class="token punctuation">-</span>css'<span class="token punctuation">,</span> function() <span class="token punctuation">{</span>    return gulp.src('./public/<span class="token important">**/*.css')</span>        .pipe(minifycss())        .pipe(gulp.dest('./public'));<span class="token punctuation">}</span>);// 压缩 public 目录 htmlgulp.task('minify<span class="token punctuation">-</span>html'<span class="token punctuation">,</span> function() <span class="token punctuation">{</span>  return gulp.src('./public/<span class="token important">**/*.html')</span>    .pipe(htmlclean())    .pipe(htmlmin(<span class="token punctuation">{</span>         <span class="token key atrule">removeComments</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">,</span>         <span class="token key atrule">minifyJS</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">,</span>         <span class="token key atrule">minifyCSS</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">,</span>         <span class="token key atrule">minifyURLs</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>))    .pipe(gulp.dest('./public'))<span class="token punctuation">}</span>);// 压缩 public/js 目录 jsgulp.task('minify<span class="token punctuation">-</span>js'<span class="token punctuation">,</span> function() <span class="token punctuation">{</span>    return gulp.src('./public/<span class="token important">**/*.js')</span>        .pipe(uglify())        .pipe(gulp.dest('./public'));<span class="token punctuation">}</span>);// 执行 gulp 命令时执行的任务// gulp 3.x// gulp.task('default'<span class="token punctuation">,</span> <span class="token punctuation">[</span>//     'minify<span class="token punctuation">-</span>html'<span class="token punctuation">,</span><span class="token string">'minify-css'</span><span class="token punctuation">,</span><span class="token string">'minify-js'</span>// <span class="token punctuation">]</span>);// gulp 4.xgulp.task('default'<span class="token punctuation">,</span> gulp.series('minify<span class="token punctuation">-</span>html'<span class="token punctuation">,</span> <span class="token string">'minify-css'</span><span class="token punctuation">,</span> <span class="token string">'minify-js'</span><span class="token punctuation">,</span> done =<span class="token punctuation">&gt;</span> done()));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> gulp <span class="token operator">&amp;&amp;</span>  hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="CDN-加速（强烈建议启用）"><a href="#CDN-加速（强烈建议启用）" class="headerlink" title="CDN 加速（强烈建议启用）"></a>CDN 加速（强烈建议启用）</h2><ul><li><strong>为什么强烈建议启用CDN？</strong></li></ul><blockquote><p>研究表明，用户最满意的打开网页时间，是在 2 秒以下。用户能够忍受的最长等待时间在 6～8 秒之间。就是说，8 秒是一个临界值，如果你的网站打开速度在 8 秒以上，那么你将失去大部分用户。研究显示，如果等待 12 秒以后，网页还是没有载入，那么 99% 以上的用户会选择关闭网页。</p><p>Google 做过一个试验，10 条搜索结果的页面载入时间需要 0.4 秒，显示 30 条搜索结果的页面载入时间需要 0.9 秒，结果后者使得 Google 总的流量和收入减少了 20%。Google 地图上线的时候，首页大小有 100KB，后来下降到 70~80KB。结果，流量在第一个星期上升了 10%，接下来的 3 个星期又再上升了 25%。Amazon 的统计也显示了相近的结果，首页打开时间每增加 100 毫秒，网站销售量会减少 1%。</p><p>以上数据说明了一个非常重要的问题，如果你的网站速度如果超过 2s 以上，那么你的客户可能在流失和离你而去了。这一点对于电商网站尤其重要，打开速度慢，那么将造成转化率降低，损失将会大量增加。</p></blockquote><p>放在 Github 的资源在国内加载速度比较慢，因此需要使用 CDN 加速来优化网站打开速度，<a href="https://www.jsdelivr.com/">jsDelivr</a> + Github 便是免费且好用的 CDN，非常适合博客网站使用。也可以选择主流云服务商提供的对象存储+CDN 来获得更快速及稳定的访问效果，费用低到几乎可忽略。</p><p><strong>用法：</strong></p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">https:</span>//cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>例如：</strong></p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">https:</span>//cdn.jsdelivr.net/gh/lxl80/blog@gh-pages/medias/banner/1.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源。</p><blockquote><p>还可以配合 <a href="https://github.com/Molunerfinn/PicGo">PicGo</a>图床上传工具的<strong>自定义域名前缀</strong>来上传图片，使用极其方便。具体使用方法可参见我的另一篇文章: <a href="https://www.lixl.cn/2019/120114500.html">使用 Typora+iPic/PicGo 图床+CDN 实现高效 Markdown 创作</a></p></blockquote><h3 id="Cloudflare-CDN"><a href="#Cloudflare-CDN" class="headerlink" title="Cloudflare CDN"></a>Cloudflare CDN</h3><blockquote><p>配置最简单的CDN方式了。在github  raw链接地址前面加<code>https://images.weserv.nl/?url=</code>, 就会自动使用cloudflare cdn来加速图片访问。使用发现无法加速gif。</p></blockquote><p>本blog主要使用这个方法，如下所示。</p><ul><li>未加速图片地址</li></ul><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">https:</span>//raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910231815.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Cloudflare加速图片地址</li></ul><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">https:</span>//cimg1.17lai.site/data/2021/09/1020210910231815.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="SEO-优化"><a href="#SEO-优化" class="headerlink" title="SEO 优化"></a>SEO 优化</h2><blockquote><p>搜索引擎优化，又称为 SEO，即 Search Engine Optimization，它是一种通过分析搜索引擎的排名规律，了解各种搜索引擎怎样进行搜索、怎样抓取互联网页面、怎样确定特定关键词的搜索结果排名的技术。Google 自动收录效果还不错，百度就差得远了（<code>GitHub</code>不允许百度的<code>Spider</code>爬取<code>GitHub</code>上的内容）。</p></blockquote><h3 id="网域提交方式"><a href="#网域提交方式" class="headerlink" title="网域提交方式"></a>网域提交方式</h3><ol><li><p>自动提交</p><p>（分三种）</p><ul><li>主动推送</li><li>自动推送</li><li>sitemap（站点地图）</li></ul></li><li><p>手动提交</p><ul><li>即手动地将链接一次性提交给百度</li></ul></li></ol><p>一般自动提交比手动提交效果好一点，自动提交又从效率上来说：</p><p><strong>主动推送&gt;自动推送&gt;sitemap</strong></p><p><strong>自动提交的三种方式</strong>：</p><ol><li><code>主动推送</code>：最为快速的提交方式。将站点当天新产出链接通过此方式推送给百度，以保证新链接可以及时被百度收录。</li><li><code>自动推送</code>：最为便捷的提交方式。将自动推送的JS代码部署在站点的每一个页面源代码中，当部署代码的页面在每次被浏览时，链接就会被自动推送给百度。可以与主动推送配合使用。</li><li><code>sitemap</code>：您可以定期将网站链接放到<code>sitemap文件</code>中，然后将<code>sitemap文件</code>提交给百度。百度会周期性的抓取检查您提交的<code>sitemap</code>，对其中的链接进行处理，但收录速度慢于主动推送。</li></ol><h3 id="使用sitemap方式推送"><a href="#使用sitemap方式推送" class="headerlink" title="使用sitemap方式推送"></a>使用sitemap方式推送</h3><p>安装 sitemap 插件生成站点地图文件:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap --save<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-baidu-sitemap --save  <span class="token comment">#百度专用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装后直接执行 <code>hexo cl&amp;&amp;hexo g -d</code> 命令，就会在网站根目录生成 <code>sitemap.xml</code> 及 <code>baidusitemap.xml</code> 文件。</p><ul><li>在博客目录的_config.yml中添加如下代码</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 通用站点地图</span><span class="token key atrule">sitemap</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> sitemap.xml<span class="token comment"># 百度站点地图</span><span class="token key atrule">baidusitemap</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> baidusitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="百度优化"><a href="#百度优化" class="headerlink" title="百度优化"></a>百度优化</h4><p>登录<a href="https://ziyuan.baidu.com/">百度搜索资源平台</a>， 登录成功之后在 用户中心 –&gt; 站点管理 页面中点击<a href="https://ziyuan.baidu.com/site/siteadd">添加网站</a>，按提示操作。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1020210910231752.png" alt="添加网站"></p><p><strong>添加网站</strong></p><blockquote><p>提示：由于百度的 spider 是爬取不到 GitHub 的内容的，所以在第三步验证网站的时候，建议选择<code>CNAME验证</code>的方式。</p></blockquote><p>经过以上步骤，百度已经知道有我们网站的存在了，但是百度还不知道我们的网站上有什么内容，所以要向百度推送我们的内容。点击 网站支持 –&gt; 数据引入 –&gt; 链接提交菜单，提交站点地图：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1020210910231758.png" alt="提交站点地图"></p><p><strong>提交站点地图</strong></p><p>另外，<code>hexo-theme-matery</code>主题已经内置了 <code>自动推送</code> 的功能， 检查 <code>themes/hexo-theme-matery/_config.yml</code> 文件中如下配置:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 百度搜索资源平台提交链接</span><span class="token key atrule">baiduPush</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>自动推送的 JS 代码部署在站点的每一个页面源代码中，当页面在每次被浏览时，链接就会被自动推送给百度。</p><h4 id="谷歌优化"><a href="#谷歌优化" class="headerlink" title="谷歌优化"></a>谷歌优化</h4><p>登录 <a href="https://search.google.com/search-console?hl=zh-CN">Google Search Console</a>，点击添加资源，输入自己的域名，按提示操作。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1020210910231807.png" alt="添加资源"></p><p><strong>添加资源</strong></p><blockquote><p>提示：需要进行 DNS 验证，进入 DNS 域名解析设置页面，按提示增加 TXT 记录，如下图:</p><p><img src="https://cimg1.17lai.site/data/2021/09/1020210910231808.png" alt="DNS验证内容填写示例"></p><p><strong>DNS验证内容填写示例</strong></p></blockquote><p>验证成功后，需要提交站点地图。参照下图提交，然后等待收录。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1020210910231815.png" alt="提交站点地图"></p><p><strong>提交站点地图</strong></p><blockquote><p>注意：hexo 配置文件中的 url 一定要输入正确的域名，插件是根据 url 生成站点地图的。</p></blockquote><h3 id="其它搜索引擎"><a href="#其它搜索引擎" class="headerlink" title="其它搜索引擎"></a>其它搜索引擎</h3><blockquote><ul><li><a href="https://www.bing.com/webmasters/home">Bing提交</a></li><li><a href="https://zhanzhang.sm.cn/open/detialPage">神马站长</a></li></ul></blockquote><h3 id="百度自动推送方式"><a href="#百度自动推送方式" class="headerlink" title="百度自动推送方式"></a>百度自动推送方式</h3><p>只要每个需要被百度爬取的HTML页面中加入一段JS代码即可：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> bp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> curProtocol <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>curProtocol <span class="token operator">===</span> <span class="token string">'https'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        bp<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'https://zz.bdstatic.com/linksubmit/push.js'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        bp<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://push.zhanzhang.baidu.com/push.js'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>bp<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我所使用的matery主题可以自动给每个页面加上这段代码，只需在主题配置文件中配置：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># 百度搜索资源平台提交链接</span><span class="token key atrule">baiduPush</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>即可！</p><p>其他主题一般都有这个功能的实现，如果没有的话，想办法在每个页面加入以上JS代码即可，原理是一样。</p><h2 id="百度主动推送SEO方式"><a href="#百度主动推送SEO方式" class="headerlink" title="百度主动推送SEO方式"></a>百度主动推送SEO方式</h2><blockquote><ul><li>配置文章自动推送到百度蜘蛛</li></ul></blockquote><h3 id="获取百度推送密钥"><a href="#获取百度推送密钥" class="headerlink" title="获取百度推送密钥"></a>获取百度推送密钥</h3><p>在 <a href="ziyuan.baidu.com/site">百度资源</a> 注册你的网址，验证完后可在<code>站点管理-&gt;资源提交-&gt;链接提交-&gt;主动推送(实时)</code> 中找到你的推送密钥，下面说明中的 token= 后的内容即为推送密钥。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">推送接口接口调用地址：http://data.zz.baidu.com/urls?site<span class="token operator">=</span>https://ifibe.com<span class="token operator">&amp;</span><span class="token assign-left variable">token</span><span class="token operator">=</span>xxxxxxxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="安装主动推送插件：hexo-baidu-url-submit"><a href="#安装主动推送插件：hexo-baidu-url-submit" class="headerlink" title="安装主动推送插件：hexo-baidu-url-submit"></a>安装主动推送插件：<a href="https://github.com/huiwang/hexo-baidu-url-submit">hexo-baidu-url-submit</a></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-baidu-url-submit --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="然后打开hexo配置文件，在末尾加入以下配置："><a href="#然后打开hexo配置文件，在末尾加入以下配置：" class="headerlink" title="然后打开hexo配置文件，在末尾加入以下配置："></a>然后打开<code>hexo配置文件</code>，在末尾加入以下配置：</h3><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># hexo-baidu-url-submit  百度主动推送</span><span class="token key atrule">baidu_url_submit</span><span class="token punctuation">:</span>  <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token number">80</span> <span class="token comment"># 提交最新的一个链接</span>  <span class="token key atrule">host</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//blog.17lai.site <span class="token comment"># 在百度站长平台中注册的域名</span>  <span class="token key atrule">token</span><span class="token punctuation">:</span> xxxxxxx <span class="token comment"># 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> baidu_urls.txt <span class="token comment"># 文本文档的地址， 新链接会保存在此文本文档里</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>密匙的获取是在百度的自动提交的主动推送那里。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1120210911153349.png"></p><h3 id="再加入新的deploy："><a href="#再加入新的deploy：" class="headerlink" title="再加入新的deploy："></a>再加入新的<code>deploy</code>：</h3><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> baidu_url_submitter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如图：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1120210911153357.png"></p><p>这样每次执行 <code>hexo d</code> 的时候，新的链接就会被推送了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean$ hexo g$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>推送成功时,会有如下终端提示!</p><p><img src="https://cimg1.17lai.site/data/2021/09/1820210918203209.png" alt="baidu_url_submitter"></p><p>各种不同的推送反馈字段说明<a href="https://ziyuan.baidu.com/college/courseinfo?id=267&amp;page=2#h2_article_title12">点我</a>查看，一般来说，推送失败基本都是地址不相符造成的，我们只需对比<code>baidu_url_submit</code>在<code>public</code>中生成的<code>baidu_urls.txt</code>的地址,与自己填写在<code>host</code>字段中的地址对比看是否一样即可。</p><h2 id="Github-Action-自动提交SEO方式"><a href="#Github-Action-自动提交SEO方式" class="headerlink" title="Github Action 自动提交SEO方式"></a>Github Action 自动提交SEO方式</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-seo-autopush --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在hexo 的config.yml里添加</p><p>hexo-seo-autopush配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># enable: 开启/关闭 推送</span><span class="token comment"># count: 每次提交最新的10篇文章</span><span class="token comment"># https://github.com/lete114/hexo-seo-autopush</span><span class="token key atrule">hexo_seo_autopush</span><span class="token punctuation">:</span>  <span class="token key atrule">baidu</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token number">100</span>  <span class="token key atrule">bing</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">google</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token number">10</span>    <span class="token key atrule">google_file</span><span class="token punctuation">:</span> google_service_account.json <span class="token comment"># 谷歌服务账户</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加<code>Google Push</code>配置和解决push后没有GitHub Actions <code>.github\workflows\AutoPush.yml</code>文件的问题</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git     <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/lete114/Test.git     <span class="token key atrule">branch</span><span class="token punctuation">:</span> main     <span class="token key atrule">ignore_hidden</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 忽略隐藏文件及文件夹(目录)</span>   <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> GooglePush <span class="token comment"># 谷歌提交</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取站长平台密钥"><a href="#获取站长平台密钥" class="headerlink" title="获取站长平台密钥"></a>获取站长平台密钥</h3><h4 id="Baidu-Key"><a href="#Baidu-Key" class="headerlink" title="Baidu Key"></a>Baidu Key</h4><ol><li>打开百度站长平台，点击左侧的普通收录<a href="https://ziyuan.baidu.com/">https://ziyuan.baidu.com/</a><br><img src="https://cimg1.17lai.site/data/2021/09/2120210921065417.png"></li></ol><h4 id="Bing-Key"><a href="#Bing-Key" class="headerlink" title="Bing Key"></a>Bing Key</h4><ol><li>打开Bing站长平台，<a href="https://www.bing.com/webmasters/home">https://www.bing.com/webmasters/home</a></li><li>点击右上角头像 旁边的齿轮，跟着下图操作<br><img src="https://cimg1.17lai.site/data/2021/09/2120210921065427.png"></li></ol><h4 id="Google-Key"><a href="#Google-Key" class="headerlink" title="Google Key"></a>Google Key</h4><blockquote><p><a href="https://cloud.google.com/docs/authentication/production?hl=zh-cn">Google Wiki</a>， 使用参考。</p></blockquote><ol><li><p>打开Google indexing API<a href="https://console.developers.google.com/flows/enableapi?apiid=indexing.googleapis.com&amp;credential=client_key">官网</a></p></li><li><p>选择创建项目，点击继续</p></li><li><p>点击转到凭据页面</p></li><li><p>跟着如下图片步骤</p><p><img src="https://cimg1.17lai.site/data/2021/09/2120210921065438.png" alt="GoogleProof"></p><p><img src="https://cimg1.17lai.site/data/2021/09/2120210921065446.png" alt="GoogleAddProof"></p><p><img src="https://cimg1.17lai.site/data/2021/09/2120210921065512.png" alt="GoogleNone"></p><p><img src="https://cimg1.17lai.site/data/2021/09/2120210921065454.png" alt="GoogleKey"></p><p>json文件内的内容</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"type"</span><span class="token operator">:</span> <span class="token string">"service_account"</span><span class="token punctuation">,</span>  <span class="token string">"project_id"</span><span class="token operator">:</span> <span class="token string">"elated-guild-298003"</span><span class="token punctuation">,</span>  <span class="token string">"private_key_id"</span><span class="token operator">:</span> <span class="token string">"cf58d669c0e8c8e082b2c403ade5e2548078e384"</span><span class="token punctuation">,</span>  <span class="token string">"private_key"</span><span class="token operator">:</span> <span class="token string">"-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDEAJw89yeylRrA\nB+bzOAfQQNgOCABIwEKCy5mMxWSaiXy2RktyCJWjMR2Pgz770NJgClQHPJjsFn0c\nukHufpnuiX3VPlimLANPCRFdU/qp+yiaw4quIhYF1UZJkhmhL30anghUcvi+r9hQ\nw+RwcKrgA4EUzqUJaPdvjtzSoo315PPGfR91ASD5S8gE02yVI8igtYMX7v2x1JYR\n7PwHJwOVemiM9lot8ilvoUbV4BU0vSlwFoxKMJAbEXTmJjEKQi9992rcMW0GzXO8\ncHldUUtURXkt3VFjYTH27KhHiTkTXw+uZRBu1rkubDJkS8lGIWN7Fc/r4HMMCVTu\nXPS6HbJ/AgMBAAECggEANSS7OBaFd3jRL3cVCiZLjA5A5pEJzq/+eKtOn2oYDISx\nwVRO+YTVWdGj47kg1zM4D11NikbGaeDxHFxuKwW9o/04lpyYebneTcw2Hpl6EiOs\nz0WssOlCEmPQ8nrAI0GWiKSHuqoPwtg37TIoGsqZsjKRCby759DDokZYnm3/0sc+\niEllT0ZyBZhGDzyguVLEdCIR2P02q/hQzLyd6ejWGGwZebImbGoILhmuOjVrco0p\nV0JbrrNskjM5Epe7w+CpGftEASJ7Dxa8oj0qIT6cyAipra2AZAGnG9jrLcWpJuhu\nvNeDIFnTfpNEac+khXZZE2++MIQfTX9wGJc8tox2vQKBgQD6yiNvAL7sxExiy6ER\ntLtFQ3bvmMpKRFGvFOyPOtMbmjZ3D1GEtNNKGH4v1TI+tncEy7Q5Dm7nWwpi8yvL\nbh8xKghelAc/CU1nw0xDEDCkMbAwpFg5A5ZDImy3LZsQh0kNXniIMy1vMSt5yLKS\n80gXQKGCxG8t3rP8Qd/2a55g1QKBgQDIExP1nG9sHJaigmitEUwr0Ow6Shqr56Me\nd7995gaV1oLWWCQzrXt/viWkb1W5ZGIxzcWNWz99m4CbvqfewRr598Eenald0csN\nVcIEk+0C+6KqA+jU9Tfs2zow/C7JuKULP2N++o0EoSz/ngokP7f1yLOYbr507v/R\n0cLElQBQAwKBgAbxDWYHKUG4dTzO0hiBXiWepm4fVooTtgcYlyunvywmapeFDwaT\nUr3cS7HbPtbJiiXR1Z02rw8sT+9JN88brzVXKoAjrMer5D6ZA0Vf71i8H1pZUi/R\nz5jwHP48/uvIMtdx4/gxInLPc5qdWYQDw90Q5ueNtF4aqfSzhhV2CR45AoGBAJN9\nPOF6iMjx6jmyWOf8MGK8iOgPaMoA4Ea9j/SHdaNPlvPb1hQid0AcNDObv14Dmj+M\nqW0jLxKxZ4VobufPAsvyz/J51zjKRx11cqldQwNH7QnYB/O1MZzxn1wtC3C5JTG9\ncONSYFJhXoKxRliigEI3ye089jnNVdifAS1ZiflxAoGBANTX1fEMEeNuYU0v3rtd\n5CkPZg4TNZ+y2MGl5xR1LdIgrJ8c9xKoW4rpp7SsOIvHpWX494f90D7o9uFEGSQ4\nyQK53jVzJ0ekGV5BdPF3n3/2j2VEqFLHi7LL4CJSxr6ci7OfBoHOGE8odhevQCCK\njnFzEin0QsBEgIC73fBh6XcH\n-----END PRIVATE KEY-----\n"</span><span class="token punctuation">,</span>  <span class="token string">"client_email"</span><span class="token operator">:</span> <span class="token string">"googleindexing@elated-guild-298003.iam.gserviceaccount.com"</span><span class="token punctuation">,</span>  <span class="token string">"client_id"</span><span class="token operator">:</span> <span class="token string">"103034240916368863393"</span><span class="token punctuation">,</span>  <span class="token string">"auth_uri"</span><span class="token operator">:</span> <span class="token string">"https://accounts.google.com/o/oauth2/auth"</span><span class="token punctuation">,</span>  <span class="token string">"token_uri"</span><span class="token operator">:</span> <span class="token string">"https://oauth2.googleapis.com/token"</span><span class="token punctuation">,</span>  <span class="token string">"auth_provider_x509_cert_url"</span><span class="token operator">:</span> <span class="token string">"https://www.googleapis.com/oauth2/v1/certs"</span><span class="token punctuation">,</span>  <span class="token string">"client_x509_cert_url"</span><span class="token operator">:</span> <span class="token string">"https://www.googleapis.com/robot/v1/metadata/x509/googleindexing%40elated-guild-298003.iam.gserviceaccount.com"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>打开<a href="https://search.google.com/search-console">谷歌站长平台</a><br><img src="https://cimg1.17lai.site/data/2021/09/2120210921065520.png" alt="GoogleAddUser"><br><img src="https://cimg1.17lai.site/data/2021/09/2120210921065527.png" alt="GoogleAddEmail"></p></li></ol><h3 id="配置博客仓库"><a href="#配置博客仓库" class="headerlink" title="配置博客仓库"></a>配置博客仓库</h3><ol><li>Name必须是<code>baidu_token</code>和<code>bing_apikey</code>(不区分大小写)</li><li>添加完成后<br><img src="https://cimg1.17lai.site/data/2021/09/2120210921065607.png" alt="Secrets-token"></li></ol><h3 id="谷歌的一些问题"><a href="#谷歌的一些问题" class="headerlink" title="谷歌的一些问题"></a>谷歌的一些问题</h3><p>触发谷歌提交的命令是<code>hexo d</code></p><p>由于谷歌需要配合Google indexing API平台提供的json进行提交，而这个json格式不能泄露<br>为防止json泄露只能本地提交，将json放到hexo根目录可自定义重命名(必须对应插件的配置)<br><code>如果你的使用Github Actions自动部署的话请把仓库设置为私有</code><br><img src="https://cimg1.17lai.site/data/2021/09/2120210921065535.png" alt="GoogleConfig"></p><h3 id="提交成功返回状态码"><a href="#提交成功返回状态码" class="headerlink" title="提交成功返回状态码"></a>提交成功返回状态码</h3><p>以上步骤完成后即可<code>hexo d</code>部署了</p><ol><li><p>看看Github仓库是否上传成功<br><img src="https://cimg1.17lai.site/data/2021/09/2120210921065614.png"></p></li><li><p>点击<code>Actions</code>查看是否执行<br><img src="https://cimg1.17lai.site/data/2021/09/2120210921065616.png"></p></li><li><p>点击 Auto Push—-&gt;build—–&gt;点击第2步 自动提交</p><p>如图43行</p><p><img src="https://cimg1.17lai.site/data/2021/09/2120210921065543.png"></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">// baidu返回的结果</span><span class="token punctuation">{</span><span class="token property">"remain"</span><span class="token operator">:</span> <span class="token number">2060</span><span class="token punctuation">,</span>  <span class="token comment">// 表示当天剩余的可推送url条数</span><span class="token property">"success"</span><span class="token operator">:</span> <span class="token number">47</span>    <span class="token comment">// 成功推送的url条数</span><span class="token punctuation">}</span> <span class="token comment">// bing返回结果(错误)</span><span class="token punctuation">{</span><span class="token property">"ErrorCode"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token comment">// 错误 </span><span class="token property">"Message"</span><span class="token operator">:</span> <span class="token string">"ERROR!!! Quota remaining for today: 2, Submitted: 47"</span>    <span class="token comment">// Message：表示 你目前只剩2个url推送，而你现在推送的是47条url</span>    <span class="token comment">// bing新用户开始每日只有10个推送额，据我了解连续推送10天(这我也不确定)</span>    <span class="token comment">// 如果出现这个错误的话，你就只能先手动添加等系统给你分配额了(分配9999)</span><span class="token punctuation">}</span><span class="token comment">// bing返回结果(成功)</span><span class="token punctuation">{</span><span class="token property">"d"</span><span class="token operator">:</span><span class="token null keyword">null</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Google 返回状态码</p><p>成功返回</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">Google response<span class="token operator">:</span>  <span class="token punctuation">{</span>  urlNotificationMetadata<span class="token operator">:</span> <span class="token punctuation">{</span>    url<span class="token operator">:</span> 'https<span class="token operator">:</span><span class="token comment">//blog.lete114.top/article/hexo-seo-autopush.html',</span>    latestUpdate<span class="token operator">:</span> <span class="token punctuation">{</span>      url<span class="token operator">:</span> 'https<span class="token operator">:</span><span class="token comment">//blog.lete114.top/article/hexo-seo-autopush.html',</span>      type<span class="token operator">:</span> 'URL_UPDATED'<span class="token punctuation">,</span>      notifyTime<span class="token operator">:</span> '<span class="token number">2020</span><span class="token number">-12</span>-08T02<span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">32</span>.871417693Z'    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>出现此错误需要: 翻墙</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FetchError: request to https://www.googleapis.com/oauth2/v4/token failed, reason: connect ETIMEDOUT <span class="token number">172.217</span>.27.138:443    at ClientRequest.<span class="token operator">&lt;</span>anonymous<span class="token operator">&gt;</span> <span class="token punctuation">(</span>D:<span class="token punctuation">\</span>Lete<span class="token punctuation">\</span>GitHub<span class="token punctuation">\</span>Hexo-Butterfly<span class="token punctuation">\</span>node_modules<span class="token punctuation">\</span>node-fetch<span class="token punctuation">\</span>lib<span class="token punctuation">\</span>index.js:1461:11<span class="token punctuation">)</span>    at ClientRequest.emit <span class="token punctuation">(</span>events.js:321:20<span class="token punctuation">)</span>    at TLSSocket.socketErrorListener <span class="token punctuation">(</span>_http_client.js:426:9<span class="token punctuation">)</span>    at TLSSocket.emit <span class="token punctuation">(</span>events.js:321:20<span class="token punctuation">)</span>    at emitErrorNT <span class="token punctuation">(</span>internal/streams/destroy.js:92:8<span class="token punctuation">)</span>    at emitErrorAndCloseNT <span class="token punctuation">(</span>internal/streams/destroy.js:60:3<span class="token punctuation">)</span>    at processTicksAndRejections <span class="token punctuation">(</span>internal/process/task_queues.js:84:21<span class="token punctuation">)</span> <span class="token punctuation">{</span>  message: <span class="token string">'request to https://www.googleapis.com/oauth2/v4/token failed, reason: connect ETIMEDOUT 172.217.27.138:443'</span>,  type: <span class="token string">'system'</span>,  errno: <span class="token string">'ETIMEDOUT'</span>,  code: <span class="token string">'ETIMEDOUT'</span>,  config: <span class="token punctuation">{</span>    method: <span class="token string">'POST'</span>,    url: <span class="token string">'https://www.googleapis.com/oauth2/v4/token'</span>,    data: <span class="token punctuation">{</span>      grant_type: <span class="token string">'urn:ietf:params:oauth:grant-type:jwt-bearer'</span>,      assertion: 'eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJnb29nbGVpbmRleGluZ0BzdGF0ZWx5LXRyYW5zaXQtMjk3NzE1LmlhbS5nc2VydmljZWFjY291bnQuY29tIiwic2NvcGUiOiJodHRwczovL3d3d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="本地主动提交SEO"><a href="#本地主动提交SEO" class="headerlink" title="本地主动提交SEO"></a>本地主动提交SEO</h2><blockquote><p><a href="https://github.com/abnerwei/hexo-url-submission">hexo-url-submission</a></p><p><a href="https://abnerwei.com/wiki/hexo/url-submission">Wiki</a></p></blockquote><h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a><strong>安装方法</strong></h3><ol><li>在终端中输入：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-url-submission<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>在 <code>blog/_config.yml</code> 文件中添加配置：</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">url_submission</span><span class="token punctuation">:</span>   <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">'latest'</span> <span class="token comment"># latest or all( latest: modified pages; all: posts &amp; pages)</span>   <span class="token key atrule">channel</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'baidu'</span><span class="token punctuation">,</span> <span class="token string">'bing'</span><span class="token punctuation">,</span> <span class="token string">'google'</span><span class="token punctuation">,</span> <span class="token string">'shenma'</span><span class="token punctuation">]</span> <span class="token comment"># Included channels are `baidu`, `google`, `bing`, `shenma`</span>   <span class="token key atrule">prefix</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'/post'</span><span class="token punctuation">,</span> <span class="token string">'/wiki'</span><span class="token punctuation">]</span> <span class="token comment"># URL prefix</span>   <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># Submit limit</span>   <span class="token key atrule">proxy</span><span class="token punctuation">:</span> <span class="token string">''</span> <span class="token comment"># Set the proxy used to submit urls to Google</span>   <span class="token key atrule">urls_path</span><span class="token punctuation">:</span> <span class="token string">'submit_url.txt'</span> <span class="token comment"># URL list file path</span>   <span class="token key atrule">baidu_token</span><span class="token punctuation">:</span> <span class="token string">''</span> <span class="token comment"># Baidu private key</span>   <span class="token key atrule">bing_token</span><span class="token punctuation">:</span> <span class="token string">''</span> <span class="token comment"># Bing private key</span>   <span class="token key atrule">google_key</span><span class="token punctuation">:</span> <span class="token string">''</span> <span class="token comment"># Google key path (e.g. `google_key.json` or `data/google_key.json`)</span>   <span class="token key atrule">shenma_token</span><span class="token punctuation">:</span> <span class="token string">''</span> <span class="token comment"># ShenMa private key</span>   <span class="token key atrule">shenma_user</span><span class="token punctuation">:</span> <span class="token string">''</span> <span class="token comment"># Username used when registering</span>   <span class="token key atrule">sitemap</span><span class="token punctuation">:</span> <span class="token string">''</span> <span class="token comment"># Sitemap path(e.g. the url is like this https://abnerwei.com/baidusitemap.xml, you can fill in `baidusitemap.xml`)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新方法"><a href="#更新方法" class="headerlink" title="更新方法"></a><strong>更新方法</strong></h3><p>在站点根目录执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> update hexo-url-submission<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> us_baidu_deployer  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> us_bing_deployer  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> us_google_deployer  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> us_shenma_deployer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="good-job"><a href="#good-job" class="headerlink" title="good job"></a>good job</h3><p>Run:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>enjoy it!</p><h2 id="提交-robots-txt"><a href="#提交-robots-txt" class="headerlink" title="提交 robots.txt"></a>提交 robots.txt</h2><h4 id="robots-txt是干嘛的？"><a href="#robots-txt是干嘛的？" class="headerlink" title="robots.txt是干嘛的？"></a>robots.txt是干嘛的？</h4><blockquote><p><code>robots.txt</code> 是一种存放于网站根目录下的 <code>ASCII</code> 编码的文本文件，它的作用是告诉搜索引擎此网站中哪些内容是可以被爬取的，哪些是禁止爬取的。<br><code>robots.txt</code> 要放在 <code>Hexo根目录</code> 下的 <code>source</code> 文件夹中。</p></blockquote><p>每个人站点目录可能不太一样，可以参考下我的 <code>robots.txt</code> 文件，内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">User-agent</span><span class="token punctuation">:</span> *<span class="token key atrule">Allow</span><span class="token punctuation">:</span> /<span class="token key atrule">Allow</span><span class="token punctuation">:</span> /posts/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /about/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /archives/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /js/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /css/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /contact/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /fonts/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /friends/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /libs/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /medias/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /page/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /tags/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /categories/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多关于 <code>robots.txt</code> 的写法参见 <a href="https://blog.csdn.net/fanghua_vip/article/details/79535639">https://blog.csdn.net/fanghua_vip/article/details/79535639</a></p><p>编写完以上内容再重新部署一下，然后到百度资源平台的<code>数据监控</code>-&gt;<code>Robots</code>点击<code>检测并更新</code> 看能不能检测到。</p><h3 id="配置-Nofollow"><a href="#配置-Nofollow" class="headerlink" title="配置 Nofollow"></a>配置 Nofollow</h3><ul><li>nofollow 是HTML页面中 <code>a标签</code> 的 属性值。</li><li>这个属性的作用是：告诉搜索引擎的爬虫不要追踪该链接，为了对抗博客垃圾留言信息</li></ul><h3 id="URL优化"><a href="#URL优化" class="headerlink" title="URL优化"></a>URL优化</h3><p>一般来说，SEO搜索引擎优化认为，网站的最佳结构是 <strong>用户从首页点击三次就可以到达任何一个页面</strong>，但是我们使用<code>Hexo</code>编译的站点结构的<code>URL</code>是：<code>域名/年/月/日/文章标题</code>四层的结构，这样的<code>URL</code>结构很不利于<code>SEO</code>，爬虫就会经常爬不到我们的文章，于是，我们需要优化一下网站文章的<code>URL</code></p><p><strong>方案一</strong>：</p><p>直接改成<code>域名/文章标题</code>的形式，在<code>Hexo配置文件</code>中修改<code>permalink</code>如下：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># URL</span><span class="token comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//blog.sky03.cn<span class="token key atrule">root</span><span class="token punctuation">:</span> /<span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>title.htmlpermalink_defaults<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这个方式有个不好的地方：</strong></p><p>直接以<code>文章的标题</code>作为URL，而我们所写的文章的标题一般都是中文，但是URL只能用字母数字和标点符号表示，所以中文的URL只能被转义成一堆符号，而且还特别长。</p><p><strong>方案二</strong>：</p><p>安装固定链接插件：<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a></p><p>插件作用：自动为每篇文章生成一串数字作每篇文章的URI地址。每篇文章的<code>Front-matter</code>中会自动增加一个配置项：<code>abbrlink: xxxxx</code>，该项的值就是当前文章的URI地址。</p><ol><li><p>Hexo根目录执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>Hexo配置文件</code>末尾加入以下配置：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># hexo-abbrlink config 、固定文章地址插件</span><span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>  <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc16  <span class="token comment">#算法选项：crc16、crc32，区别见之前的文章，这里默认为crc16丨crc32比crc16复杂一点，长一点</span>  <span class="token key atrule">rep</span><span class="token punctuation">:</span> dec    <span class="token comment">#输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Hexo配置文件</code>中修改<code>permalink</code>如下：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># URL</span><span class="token comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//blog.17lai.site<span class="token key atrule">root</span><span class="token punctuation">:</span> /<span class="token key atrule">permalink</span><span class="token punctuation">:</span> posts/<span class="token punctuation">:</span>abbrlink.htmlpermalink_defaults<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>这样站点结构就变成了：<code>域名/posts/xxx.html</code></p><h2 id="优化小技巧"><a href="#优化小技巧" class="headerlink" title="优化小技巧"></a>优化小技巧</h2><h3 id="异步加载JS"><a href="#异步加载JS" class="headerlink" title="异步加载JS"></a>异步加载JS</h3><p><strong>方法</strong>：将JS文件的引入，放到HTML的body结束标签的上方</p><p><strong>例</strong>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>        xxxxx....        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xx/xx.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原理</strong>：首先要明白，HTML的加载是从上往下一行一行解释执行的，把js文件的引入放到下面，这样就会先把HTML页面展示出来，然后再加载js。这样看起来的效果就是，大体的页面先出来，而js让它慢慢加载执行，如果你把js放到网页的上方，效果就是必须要加载完js才能继续展示网页，体验极差。</p><p><strong>注意</strong>：原主题的js文件尽量不要动，我们只需将自己增加的一些js按照异步加载的方式做即可，比如一些音乐js插件、实时在线聊天js插件等放到最后即可！因为这些文件要加载的东西很多。</p><h3 id="字蛛"><a href="#字蛛" class="headerlink" title="字蛛"></a>字蛛</h3><p><a href="http://font-spider.org/">官网</a> <a href="https://github.com/aui/font-spider">GitHub</a></p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>你的网站中需要自定义字体（额外添加一些普通电脑中没有的字体），但是一般字体是包含很多字符的，这就导致字体文件的体积很大</p><h4 id="字蛛作用"><a href="#字蛛作用" class="headerlink" title="字蛛作用"></a>字蛛作用</h4><p>字蛛就是自动检测网站的 CSS 与 HTML 文件中的自定义字体（额外加的字体），并将网站中<strong>用到的文字</strong>重新打包成一个新的字体文件，并自动引入；</p><p>而<strong>没用到的文字</strong>就会删除，从而达到压缩字体文件体积的作用。</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm install font-spider -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="在-CSS-中使用-WebFont："><a href="#在-CSS-中使用-WebFont：" class="headerlink" title="在 CSS 中使用 WebFont："></a>在 CSS 中使用 WebFont：</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*声明 WebFont*/</span><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'pinghei'</span><span class="token punctuation">;</span>  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../font/pinghei.eot'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>  <span class="token property">src</span><span class="token punctuation">:</span>    <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../font/pinghei.eot?#font-spider'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../font/pinghei.woff'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../font/pinghei.ttf'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../font/pinghei.svg'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*使用选择器指定字体*/</span><span class="token selector">.home h1, .demo &gt; .test</span> <span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'pinghei'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li>@font-face 中的 src 定义的 .ttf 文件必须存在，其余的格式将由工具自动生成</li><li>开发阶段请使用相对路径的 CSS 与 WebFont</li></ol></blockquote><h4 id="运行-font-spider-命令："><a href="#运行-font-spider-命令：" class="headerlink" title="运行 font-spider 命令："></a>运行 font-spider 命令：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">font-spider ./demo/*.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>页面依赖的字体将会自动压缩好，原 .ttf 字体会备份</p></blockquote><h2 id="将Hexo部署到vps，实现自动发布"><a href="#将Hexo部署到vps，实现自动发布" class="headerlink" title="将Hexo部署到vps，实现自动发布"></a><a href="https://www.cnblogs.com/luoshuitianyi/p/10333928.html" title="Hexo搭建(VPS)">将Hexo部署到vps，实现自动发布</a></h2><h4 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h4><ol><li> 服务器环境配置，安装Git、Nginx配置、创建git用户</li><li> 本地hexo初始化</li><li> 使用Git自动部署并发布博客</li></ol><h4 id="服务器环境搭建"><a href="#服务器环境搭建" class="headerlink" title="服务器环境搭建"></a>服务器环境搭建</h4><ul><li>  <strong>安装Git和NodeJS(Centos环境)</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token function">git</span><span class="token comment"># 安装NodeJS </span><span class="token function">curl</span> --silent --location https://rpm.nodesource.com/setup_5.x <span class="token operator">|</span> <span class="token function">bash</span> -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>  <strong>创建git账号</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adduser <span class="token function">git</span><span class="token function">chmod</span> <span class="token number">740</span> /etc/sudoers<span class="token function">vim</span> /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>添加内容<br>  找到</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## Allow root to run any commands anywhere</span>root    <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>     ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>  添加以下内容</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span>     <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>     ALL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>  保存退出并改回权限</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">400</span> /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>  设置git账号密码</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>  使用<code>su git</code>切换到git用户，再执行下列操作：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换到git用户目录</span><span class="token builtin class-name">cd</span> /home/git<span class="token comment"># 创建.ssh文件夹</span><span class="token function">mkdir</span> ~/.ssh<span class="token comment"># 创建authorized_keys文件并编辑</span><span class="token function">vim</span> ~/.ssh/authorized_keys<span class="token comment"># 如果你还没有生成公钥，那么首先在本地电脑中执行 cat ~/.ssh/id_rsa.pub | pbcopy生成公钥</span><span class="token comment"># 再将公钥复制粘贴到authorized_keys</span><span class="token comment"># 保存关闭authorized_keys后，修改相应权限</span><span class="token function">chmod</span> <span class="token number">600</span> ~/.ssh/authorized_keys<span class="token function">chmod</span> <span class="token number">700</span> ~/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>  然后可以通过本地Git Bash执行ssh命令测试是否可以免密登录</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -v git@服务器ip地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样git用户就添加好了。</p><blockquote><p>Tips: 将公钥拷贝到服务器的~/.ssh/authorized_keys文件中方法有如下几种：</p><ol><li>将公钥通过scp拷贝到服务器上，然后追加到<del>/.ssh/authorized_keys文件中，这种方式比较麻烦。scp -P 22 ~/.ssh/id_rsa.pub user@host:</del>/。</li><li>通过ssh-copy-id程序，就是我演示的方法，ssh-copyid user@host即可</li><li>可以通过cat ~/.ssh/id_rsa.pub | ssh -p 22 user@host ‘cat &gt;&gt; ~/.ssh/authorized_keys’，这个也是比较常用的方法，因为可以更改端口号。 </li></ol></blockquote><ul><li>  <strong>安装Nginx</strong></li><li>准备工作<br>  首先由于nginx的一些模块依赖一些lib库，所以在安装nginx之前，必须先安装这些lib库，这些依赖库主要有g++、gcc、openssl-devel、pcre-devel和zlib-devel 所以执行如下命令安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> gcc-c++yum <span class="token function">install</span> pcre pcre-develyum <span class="token function">install</span> zlib zlib-develyum <span class="token function">install</span> openssl openssl--devel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Ubuntu系统安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libpcre3 libpcre3-dev<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> zlib1g-dev<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openssl libssl-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>安装Nginx<br>  安装之前，最好检查一下是否已经安装有nginx</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> -name nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果系统已经安装了nginx，那么就先卸载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum remove nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后开始安装<br>首先进入<code>/usr/local</code>目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从官网下载最新版的nginx</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -c https://nginx.org/download/nginx-1.14.2.tar.gz <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（注：版本号可更改，去官网查看最新版本号修改即可）</p><p>解压nginx压缩包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf nginx-1.14.2.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会产生一个nginx-1.14.2 目录，这时进入nginx-1.14.2 目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span>  nginx-1.14.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来安装，使用–prefix参数指定nginx安装的目录,make、make install安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（默认安装在/usr/local/nginx，推荐使用默认设置）</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912163925.png"></p><pre class="line-numbers language-none"><code class="language-none">make<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912163918.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912163522.png"></p><p>如果没有报错，顺利完成后，最好看一下nginx的安装目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">whereis</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（where和is要连这些，中间没有空格）</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912163515.png"></p><ul><li>  启动和停止nginx</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/nginx/sbin/./nginx ./nginx -s stop./nginx -s quit./nginx -s reload./nginx -s quit: 此方式停止步骤是待nginx进程处理任务完毕进行停止。./nginx -s stop: 此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询nginx进程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912163454.png"></p><ul><li>  重启 nginx</li></ul><ol><li>先停止再启动（推荐）：<br> 对 nginx 进行重启相当于先停止再启动，即先执行停止命令再执行启动命令。如下：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./nginx -s quit./nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>重新加载配置文件：<br> 当 nginx 的配置文件 nginx.conf 修改后，要想让配置生效需要重启 nginx，使用 -s reload 不用先停止 nginx 再启动 nginx 即可将配置信息在 nginx 中生效，如下：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动成功后，在浏览器可以看到如下页面：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912163437.png"></p><ul><li>  开机自启动</li></ul><p>即在rc.local增加启动代码就可以了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/rc.local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>增加一行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/nginx/sbin/nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到这里，nginx安装完毕，启动、停止、重启操作也都完成。</p><h4 id="建立git裸库"><a href="#建立git裸库" class="headerlink" title="建立git裸库"></a>建立git裸库</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 回到git目录</span><span class="token builtin class-name">cd</span> /home/git<span class="token comment"># 使用git用户创建git裸仓库，以blog.git为例</span><span class="token function">git</span> init --bare blog.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="检查用户组权限"><a href="#检查用户组权限" class="headerlink" title="检查用户组权限"></a>检查用户组权限</h4><p>我们的git裸仓库已经建立好了，离成功又近了一步。为了以防万一，我们要检查一下之前的blog.git、.ssh、blog目录的用户组权限是否都为<code>git:git</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 还记得/var/www/吗？这是之前配置nginx时，我们自己选定的网站根目录，请依据你自己的设置更改，如果没有的话自己</span>ll -a /www/wwwroot/hexoll -a /home/git/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果有哪个不是，执行下面相应的命令后再查看</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chown</span> -R git:git /www/wwwroot/hexo<span class="token function">sudo</span> <span class="token function">chmod</span> -R <span class="token number">755</span> /www/wwwroot/hexo<span class="token function">sudo</span> <span class="token function">chown</span> git:git -R /home/git/blog.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="使用git-hooks同步网站根目录"><a href="#使用git-hooks同步网站根目录" class="headerlink" title="使用git-hooks同步网站根目录"></a>使用git-hooks同步网站根目录</h4><p>简单来说，我们使用一个钩子文件：post-receive，每当git仓库接收到内容的时候，就会自动调用这个钩子，把内容同步到网站根目录。<br> 在git用户下执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 新建一个post-receive文件并编辑</span><span class="token function">vim</span> ~/blog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在里面输入以下内容，注意修改为自己的设置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">set</span> -e<span class="token assign-left variable">GIT_REPO</span><span class="token operator">=</span>/home/git/blog.git<span class="token assign-left variable">TMP_GIT_CLONE</span><span class="token operator">=</span>/tmp/blog<span class="token assign-left variable">PUBLIC_WWW</span><span class="token operator">=</span>/www/wwwroot/hexo<span class="token function">rm</span> -rf <span class="token variable">${TMP_GIT_CLONE}</span><span class="token function">git</span> clone <span class="token variable">$GIT_REPO</span> <span class="token variable">$TMP_GIT_CLONE</span><span class="token builtin class-name">cd</span> <span class="token variable">$TMP_GIT_CLONE</span><span class="token keyword">for</span> <span class="token for-or-select variable">b</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">git</span> branch -r <span class="token operator">|</span> <span class="token function">grep</span> -v -- <span class="token string">'-&gt;'</span><span class="token variable">`</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">git</span> branch --track <span class="token variable">${b<span class="token operator">##</span>origin<span class="token operator">/</span>}</span> <span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token keyword">done</span><span class="token function">git</span> checkout main<span class="token function">rm</span> -rf <span class="token variable">${PUBLIC_WWW}</span>/*<span class="token function">cp</span> -rf <span class="token variable">${TMP_GIT_CLONE}</span>/* <span class="token variable">${PUBLIC_WWW}</span><span class="token function">ls</span> <span class="token variable">${PUBLIC_WWW}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存退出后，执行以下赋予这个文件可执行权限。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> -R git:git ~/blog.git/hooks/post-receive<span class="token function">chmod</span> +x ~/blog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>好了，以上就是服务器端需要配置的内容。我们还差最后一步就可以完成整个部署了！</p><h4 id="修改配置文件nginx-conf"><a href="#修改配置文件nginx-conf" class="headerlink" title="修改配置文件nginx.conf"></a>修改配置文件nginx.conf</h4><p>修改上面的配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /usr/local/nginx/conf/nginx_config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="然后修改其中两个部分，如下所示："><a href="#然后修改其中两个部分，如下所示：" class="headerlink" title="然后修改其中两个部分，如下所示："></a>然后修改其中两个部分，如下所示：</h4><p><img src="https://cimg1.17lai.site/data/2021/09/1220210912163900.jpeg"></p><p>然后<code>重启nginx</code>，方法见<code>nginx安装</code>部分。</p><h4 id="配置本地Hexo的-config-yml"><a href="#配置本地Hexo的-config-yml" class="headerlink" title="配置本地Hexo的_config.yml"></a>配置本地Hexo的<code>_config.yml</code></h4><p>非常简单，只需要找到本地Hexo博客的站点配置文件<code>_config.yml</code>，找到以下内容并修改：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>   <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@你的服务器IP<span class="token punctuation">:</span>/home/git/blog.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>保存后，剩下的就是Hexo的日常操作了，这里就不赘述了，写完文章后，在你的本地博客根目录执行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo c <span class="token operator">&amp;&amp;</span> hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就可以实现线上博客的自动更新了！一切搞定！</p><h3 id="Rsync同步部署静态文件方法"><a href="#Rsync同步部署静态文件方法" class="headerlink" title="Rsync同步部署静态文件方法"></a>Rsync同步部署静态文件方法</h3><blockquote><p>使用rsync同步</p></blockquote><p>本地生成静态文件后rsync同步到vps网页目录，lnap使用宝塔配置，这里只需要一个nginx。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># rsync [options] from_dir to_dir</span><span class="token comment"># 替换这里的ip为你的服务器ip</span><span class="token function">rsync</span> -avzP  /home/17lai.blog  root@8.8.8.8:/www/wwwroot/hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Hexo-自动部署"><a href="#Hexo-自动部署" class="headerlink" title="Hexo 自动部署"></a>Hexo 自动部署</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol><li><code>Hexo</code> 博客源码的仓库，在 <code>GitHub</code> 上。</li><li><code>ssh</code> 密钥，参考文章：<a href="https://sitoi.cn/posts/43508.html">Windows 下利用 Git 生成 SSH KEY 并配置到 GitHub</a></li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>为需要部署的平台添加密钥</li><li>修改 <code>_config.yml</code> 中的 <code>deploy</code> 配置</li><li>在 GitHub 上设置 <code>Secrets</code></li><li>创建 GitHub Action</li></ol><h3 id="为需要部署的平台添加密钥"><a href="#为需要部署的平台添加密钥" class="headerlink" title="为需要部署的平台添加密钥"></a>为需要部署的平台添加密钥</h3><p>按照之前的教程，只要你之前成功将 Hexo 的博客部署到 GitHub 上，那你电脑在 <code>~/.ssh</code> 目录下一定有以下三个文件：</p><ul><li><code>id_rsa</code>：私钥</li><li><code>id_rsa.pub</code>：公钥</li><li><code>known_hosts</code>：记录对所有用户都可信赖的远程主机的公钥</li></ul><p>将 <code>id_rsa.pub</code>（公钥）添加到不同平台中即可，参考文章：<a href="https://sitoi.cn/posts/43508.html#%E6%9F%A5%E7%9C%8B-SSH-KEY">Windows 下利用 Git 生成 SSH KEY 并配置到 GitHub</a></p><p>下面是不同平台添加的地址：</p><ul><li><a href="https://github.com/settings/ssh/new">GitHub</a></li><li><a href="https://gitlab.com/profile/keys">GitLab</a></li><li><a href="https://e.coding.net/">Coding</a></li><li><a href="https://gitee.com/profile/sshkeys">Gitee</a></li></ul><h3 id="修改-config-yml-中的-deploy-配置"><a href="#修改-config-yml-中的-deploy-配置" class="headerlink" title="修改 _config.yml 中的 deploy 配置"></a>修改 <code>_config.yml</code> 中的 <code>deploy</code> 配置</h3><p>请使用 <code>ssh</code> (即以 <code>git@</code> 开头的 <code>clone</code> 链接) 的连接方式，根据直接的实际地址填写。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span>      <span class="token key atrule">github</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>Sitoi/Sitoi.github.io.git      <span class="token key atrule">coding</span><span class="token punctuation">:</span> git@e.coding.net<span class="token punctuation">:</span>Sitoi/Sitoi.git      <span class="token key atrule">gitee</span><span class="token punctuation">:</span> git@gitee.com<span class="token punctuation">:</span>sitoi/sitoi.git      <span class="token key atrule">gitlab</span><span class="token punctuation">:</span> git@gitlab.com<span class="token punctuation">:</span>Sitoi/sitoi.gitlab.io.git    <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在-GitHub-上设置-Secrets"><a href="#在-GitHub-上设置-Secrets" class="headerlink" title="在 GitHub 上设置 Secrets"></a>在 GitHub 上设置 <code>Secrets</code></h3><ol><li><p>进入到你在 <code>GitHub</code> 上面的源码仓库</p></li><li><p>点击右上角的 <code>Settings</code></p></li></ol><p><img src="https://cimg1.17lai.site/data/2021/10/1220211012133009.png" alt="Settings"></p><p>   Settings</p><ol start="3"><li><p>点击左侧的 <code>Secrets</code></p></li><li><p>点击右上角的 <code>New secret</code></p></li></ol><p><img src="https://cimg1.17lai.site/data/2021/10/1220211012133002.png" alt="New secret"></p><p>   New secret</p><ol start="5"><li>在 <code>Name</code> 中输入 <code>HEXO_DEPLOY_PRI</code>，在 <code>Value</code> 中填入 <code>id_rsa</code>（私钥）的全部内容</li></ol><p><img src="https://cimg1.17lai.site/data/2021/10/1220211012132955.png" alt="Add secret"></p><p>   Add secret</p><h3 id="创建-GitHub-Action"><a href="#创建-GitHub-Action" class="headerlink" title="创建 GitHub Action"></a>创建 GitHub Action</h3><ol><li>点击项目上方的 <code>Action</code> 按钮</li></ol><p><img src="https://cimg1.17lai.site/data/2021/10/1220211012132954.png" alt="Action"></p><p>   Action</p><ol start="2"><li>点击 <code>set up a workflow yourself</code> 创建 <code>Workflow</code></li></ol><p><img src="https://cimg1.17lai.site/data/2021/10/1220211012132947.png" alt="Workflow"></p><p>   Workflow</p><ol start="3"><li>修改 <code>main.yaml</code> 的内容</li></ol><p><img src="https://cimg1.17lai.site/data/2021/10/1220211012132940.png" alt="Create Workflow"></p><p>   Create Workflow</p><blockquote><p>根据实际情况修改成你自己的内容</p></blockquote><ul><li>Git 推送使用的用户名：git config –global user.name ‘sitoi’：</li><li>Git 推送使用的邮箱：git config –global user.email ‘<a href="mailto:133397418@qq.com">133397418@qq.com</a>‘</li><li>Hexo 的版本：npm i <a href="mailto:hexo@4.1.1">hexo@4.1.1</a> -g</li></ul>   <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo CI<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> butterfly<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">butterfly-build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">strategy</span><span class="token punctuation">:</span>      <span class="token key atrule">matrix</span><span class="token punctuation">:</span>        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>10.x<span class="token punctuation">]</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v1      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Use Node.js 10.x        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v1        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">'10.x'</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> env prepare        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token key atrule">HEXO_DEPLOY_PRI</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.HEXO_DEPLOY_PRI <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          mkdir -p ~/.ssh/          echo "$HEXO_DEPLOY_PRI" &gt; ~/.ssh/id_rsa          chmod 600 ~/.ssh/id_rsa          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts          ssh-keyscan gitlab.com &gt;&gt; ~/.ssh/known_hosts          ssh-keyscan e.coding.net &gt;&gt; ~/.ssh/known_hosts          ssh-keyscan gitee.com &gt;&gt; ~/.ssh/known_hosts          git config --global user.name 'sito'          git config --global user.email '133397418@qq.com'          npm i          npm i hexo@4.1.1 -g</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> gen        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          hexo clean          hexo generate          hexo deploy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>将你的源码推送到 <code>GitHub</code> 上，你的博客一会就会自动更新了。</li></ol><h3 id="以-token-方式部署到-Github"><a href="#以-token-方式部署到-Github" class="headerlink" title="以 token 方式部署到 Github"></a>以 token 方式部署到 Github</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span>    <span class="token key atrule">github</span><span class="token punctuation">:</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> &lt;repository url<span class="token punctuation">&gt;</span>      <span class="token key atrule">branch</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span>      <span class="token key atrule">token</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">message</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>message<span class="token punctuation">]</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>git user<span class="token punctuation">]</span>  <span class="token key atrule">email</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>git email<span class="token punctuation">]</span>  <span class="token key atrule">extend_dirs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>extend directory<span class="token punctuation">]</span>  <span class="token key atrule">ignore_hidden</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># default is true</span>  <span class="token key atrule">ignore_pattern</span><span class="token punctuation">:</span> regexp  <span class="token comment"># whatever file that matches the </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="新增折叠功能"><a href="#新增折叠功能" class="headerlink" title="新增折叠功能"></a>新增折叠功能</h2><blockquote><p>这里利用<code>hexo-sliding-spoiler</code>插件间接实现折叠功能，在matery主题中零修改源代码实现折叠功能。</p><p>另一种修改代码实现折叠效果，参考<a href="https://www.cnblogs.com/woshimrf/p/hexo-fold-block.html">Hexo next博客添加折叠块功能添加折叠代码块</a>。</p></blockquote><h3 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-sliding-spoiler --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h3><p>根目录配置文件<code>_config.yml</code>中添加</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">plugin</span><span class="token punctuation">:</span><span class="token punctuation">-</span> hexo<span class="token punctuation">-</span>sliding<span class="token punctuation">-</span>spoiler<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>到这里已经实现折叠功能了。</p><h3 id="进一步完善美化"><a href="#进一步完善美化" class="headerlink" title="进一步完善美化"></a>进一步完善美化</h3><p>修改<a href="mailto:node_modules_hexo-sliding-spoiler@1.2.1">node_modules_hexo-sliding-spoiler@1.2.1</a>@hexo-sliding-spoiler\assets\spoiler.css</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.spoiler</span> <span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 20px 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #E5E5E5<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #E5E5E5<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span>all .6s<span class="token punctuation">}</span><span class="token selector">.spoiler .spoiler-title</span> <span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 -15px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 5px 15px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #353535<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.spoiler.collapsed .spoiler-title:before</span> <span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"▶ "</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.spoiler.expanded .spoiler-title:before</span> <span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"▼ "</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">{% spoiler title %}content{% endspoiler %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实例</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">{% spoiler 点击显/隐内容 %}内容测试{% endspoiler %}{% spoiler 点击显/隐内容 %}内容测试{% endspoiler %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cimg1.17lai.site/data/2021/10/1220211012105432.png"></p><h2 id="让blog支持通知功能"><a href="#让blog支持通知功能" class="headerlink" title="让blog支持通知功能"></a>让blog支持通知功能</h2><h3 id="安装插件-2"><a href="#安装插件-2" class="headerlink" title="安装插件"></a>安装插件</h3><p>插件的 GitHub 仓库<a href="https://github.com/glazec/hexo-web-push-notification"> hexo-web-push-notification</a></p><p>在你的博客站点目录执行下面的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-web-push-notification --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你安装了 <code>cnpm</code> 或者 <code>yarn</code> 等可执行下面的命令，安装依赖包的速度更快：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm i hexo-web-push-notification --save <span class="token comment">#安装cnpm的执行这个命令</span><span class="token function">yarn</span> <span class="token function">add</span> hexo-web-push-notification <span class="token comment">#安装yarn的执行这个命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>紧接着再你的博客站点目录下的配置文件，而不是<em>主题配置文件</em>，添加以下配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">webPushNotification</span><span class="token punctuation">:</span>  <span class="token key atrule">webpushrKey</span><span class="token punctuation">:</span> <span class="token string">"your webpushr rest api key"</span>  <span class="token key atrule">webpushrAuthToken</span><span class="token punctuation">:</span> <span class="token string">"your webpushr authorize token"</span>  <span class="token key atrule">trackingCode</span><span class="token punctuation">:</span> <span class="token string">"AEGlpbdgvBCWXqXI6PtsUzobY7TLV9gwJU8bzMktrwfrSERg_xnLVbjpCw8x2GmFmi1ZcLTz0ni6OnX5MAwoM88"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>webpushrKey</code>,<code>webpushrAuthToken</code> 和 <code>trackingCode</code> 的值在官网注册得到。</p><h3 id="官网注册"><a href="#官网注册" class="headerlink" title="官网注册"></a>官网注册</h3><p>点击右边的图标即可进入👉 ： <a href="https://app.webpushr.com/signup">传送门</a></p><p>注册完之后，然后会让你重新登录，登录之后，然后填写相关的信息即可。</p><ol><li>填写图中所显示的相关网站信息，填写完之后，点击下一步</li></ol><p><img src="https://cimg1.17lai.site/data/2021/10/1220211012112936.png"></p><blockquote><p> <code>Web push notications</code> 仅支持 HTTPS 的网站，不支持 HTTP 的网站</p></blockquote><p>根据网站类型，并根据网站指引进行操作，以 <code>Hexo</code> 为例</p><p><img src="https://cimg1.17lai.site/data/2021/10/1220211012114232.png"></p><blockquote><p>info， 其中将第二步中所指的代码复制粘贴到你的 <code>footer.ejs</code> 或者 <code>layout.ejs</code>，对于 hexo 用户，建议将其加入 <code>index.ejs</code> 即可。因为主题的不同，所以代码添加的位置不同，简单的说，就是放在网站的 <code>&lt;/body&gt;</code> 标签之前，根据你的主题而言，自己添加。</p></blockquote><p>接着将以下代码插入到网页中就可以了。确保每一个你想要询问用户接受通知的页面都要包含以下代码。</p><p>其中，上图步骤二中的代码有 <code>trackingCode</code> 的值，如下图中所标明的一长串字母。</p><p><img src="https://cimg1.17lai.site/data/2021/10/1220211012114333.png"></p><p>验证安装</p><p><img src="https://cimg1.17lai.site/data/2021/10/1220211012114406.png" alt="安装成功"></p><p>部署之后可能会遇到无法正常发送通知的情况.</p><p>进入目录<code> node_modules/hexo-web-push-notification/index.js文件中第22行'summary': util.stripHTML(newPost.excerpt)</code>,这里取值取的是excerpt，改成summary即可。</p><p>修改前</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> JSONFeed <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'title'</span><span class="token operator">:</span> newPost<span class="token punctuation">.</span>title<span class="token punctuation">,</span>        <span class="token string">'id'</span><span class="token operator">:</span> newPost<span class="token punctuation">.</span>path<span class="token punctuation">,</span>        <span class="token string">'date_published'</span><span class="token operator">:</span> newPost<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'summary'</span><span class="token operator">:</span> util<span class="token punctuation">.</span><span class="token function">stripHTML</span><span class="token punctuation">(</span>newPost<span class="token punctuation">.</span>excerpt<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'url'</span><span class="token operator">:</span> newPost<span class="token punctuation">.</span>permalink<span class="token punctuation">,</span>        <span class="token string">'tags'</span><span class="token operator">:</span> newPost<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> v<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'categories'</span><span class="token operator">:</span> newPost<span class="token punctuation">.</span>categories<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> v<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> JSONFeed <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'title'</span><span class="token operator">:</span> newPost<span class="token punctuation">.</span>title<span class="token punctuation">,</span>        <span class="token string">'id'</span><span class="token operator">:</span> newPost<span class="token punctuation">.</span>path<span class="token punctuation">,</span>        <span class="token string">'date_published'</span><span class="token operator">:</span> newPost<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'summary'</span><span class="token operator">:</span> util<span class="token punctuation">.</span><span class="token function">stripHTML</span><span class="token punctuation">(</span>newPost<span class="token punctuation">.</span>summary<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'url'</span><span class="token operator">:</span> newPost<span class="token punctuation">.</span>permalink<span class="token punctuation">,</span>        <span class="token string">'tags'</span><span class="token operator">:</span> newPost<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> v<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'categories'</span><span class="token operator">:</span> newPost<span class="token punctuation">.</span>categories<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> v<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="让hexo支持pwa"><a href="#让hexo支持pwa" class="headerlink" title="让hexo支持pwa"></a>让hexo支持pwa</h2><blockquote><p>pwa中文叫渐进式网页应用，pwa网站可以直接添加网址站到桌面，就相当于在系统中直接安装了一个app，打开的效果也和app差不多，加载速度也很快，部分功能可以直接离线使用。Google的Workbox标准，目前来看需要Chrome支持</p><ul><li>hexo-pwa 很久没更新，看到资料都是支持4.x版本hexo。 </li><li>hexo-offline 亲自验证，支持最新5.x的hexo。</li></ul></blockquote><h3 id="安装hexo-offline"><a href="#安装hexo-offline" class="headerlink" title="安装hexo-offline"></a>安装hexo-offline</h3><pre class="line-numbers language-none"><code class="language-none">npm install hexo-offline --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关于这个插件的详细使用方法可以看下面这里</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/JLHwung/hexo-offline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置hexo-offline"><a href="#配置hexo-offline" class="headerlink" title="配置hexo-offline"></a>配置hexo-offline</h3><p>之后我们在站点根目录_config.yml如下配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># offline config passed to sw-precache.</span><span class="token key atrule">service_worker</span><span class="token punctuation">:</span>  <span class="token key atrule">maximumFileSizeToCacheInBytes</span><span class="token punctuation">:</span> <span class="token number">5242880</span>  <span class="token key atrule">staticFileGlobs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> /<span class="token important">**/*.</span><span class="token punctuation">{</span>js<span class="token punctuation">,</span>html<span class="token punctuation">,</span>css<span class="token punctuation">,</span>png<span class="token punctuation">,</span>jpg<span class="token punctuation">,</span>gif<span class="token punctuation">,</span>svg<span class="token punctuation">,</span>eot<span class="token punctuation">,</span>ttf<span class="token punctuation">,</span>woff<span class="token punctuation">,</span>woff2<span class="token punctuation">}</span>  <span class="token punctuation">-</span> /lib/<span class="token important">**/*.js</span>  <span class="token punctuation">-</span> /lib/<span class="token important">**/*.css</span>  <span class="token punctuation">-</span> /images/*  <span class="token punctuation">-</span> /js/src/<span class="token important">**/*.js</span>  <span class="token key atrule">stripPrefix</span><span class="token punctuation">:</span> public  <span class="token key atrule">verbose</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">runtimeCaching</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">urlPattern</span><span class="token punctuation">:</span> /*      <span class="token key atrule">handler</span><span class="token punctuation">:</span> cacheFirst      <span class="token key atrule">options</span><span class="token punctuation">:</span>        <span class="token key atrule">origin</span><span class="token punctuation">:</span> cdn.bootcss.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意哦不是主题的_config.yml文件</p><p>之后生成manifest.json文件，进入下面这个网站</p><pre class="line-numbers language-none"><code class="language-none">https://app-manifest.firebaseapp.com/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>填入相关的参数，如下</p><p><img src="https://cimg1.17lai.site/data/2021/09/1820210918204544.png"></p><blockquote><p>Tips: 一定需要一个512x512的icon！</p></blockquote><p>之后点击generate.zip 把配置都下载过来</p><p>把manifest.json和images文件夹直接复制到hexo下source文件夹中，最后我们编辑主题，在head里添加</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manifest<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/manifest.json<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果使用的是hexo next主题，在</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">themes/next/layout/_partials/head/head.swig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果使用的是hexo matery主题，在</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">themes<span class="token operator">/</span>matery<span class="token operator">/</span>layout<span class="token operator">/</span>_partial<span class="token operator">/</span>head<span class="token punctuation">.</span>ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cimg1.17lai.site/data/2021/09/1820210918220357.png"></p><p>这个文件中添加上面这句话即可，最后直接重新生成站点，部署即可</p><h3 id="验证和使用"><a href="#验证和使用" class="headerlink" title="验证和使用"></a>验证和使用</h3><p>需要https访问，看到这个齿轮</p><p><img src="https://cimg1.17lai.site/data/2021/09/1820210918222354.png" alt="F12 sources"></p><p>然后在浏览器地址栏可以看到应用标志</p><blockquote><p>Tips: offline 需要https才能正常使用</p></blockquote><p><img src="https://cimg1.17lai.site/data/2021/09/1820210918231523.png" alt="地址栏"></p><p>点击打开，会看到如下结果，试一下？</p><p><img src="https://cimg1.17lai.site/data/2021/09/1820210918231644.png" alt="离线博客"></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="指令说明"><a href="#指令说明" class="headerlink" title="指令说明"></a>指令说明</h3><ul><li><p><code>hexo server</code> #启动本地服务器，用于预览主题。Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</p></li><li><p><code>hexo server -s</code> #以静态模式启动</p></li><li><p><code>hexo server -p 5000</code> #更改访问端口 (默认端口为 4000，’ctrl + c’关闭 server)</p></li><li><p><code>hexo server -i IP地址</code> #自定义 IP</p></li><li><p><code>hexo clean</code> #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的 public 文件夹</p></li><li><p><code>hexo g</code> #生成静态网页 (执行 $ <code>hexo g</code>后会在站点根目录下生成 public 文件夹, hexo 会将”/blog/source/“ 下面的.md 后缀的文件编译为.html 后缀的文件,存放在”/blog/public/ “ 路径下)</p></li><li><p><code>hexo d</code> #自动生成网站静态文件，并将本地数据部署到设定的仓库(如 github)</p></li><li><p><code>hexo init</code> 文件夹名称 #初始化 XX 文件夹名称</p></li><li><p><code>npm update hexo -g</code>#升级</p></li><li><p><code>npm install hexo -g</code> #安装</p></li><li><p><code>node-v</code> #查看 node.js 版本号</p></li><li><p><code>npm -v</code> #查看 npm 版本号</p></li><li><p><code>git --version</code> #查看 git 版本号</p></li><li><p><code>hexo -v</code> #查看 hexo 版本号</p></li></ul><h3 id="简写指令"><a href="#简写指令" class="headerlink" title="简写指令"></a>简写指令</h3><pre class="line-numbers language-none"><code class="language-none">hexo n "我的第一篇文章"` 等价于 `hexo new "我的第一篇文章"` 还等价于 `hexo new post "我的第一篇文章"hexo p` 等价于 `hexo publishhexo g` 等价于 `hexo generatehexo s`等价于 `hexo serverhexo d` 等价于 `hexo deployhexo g -d`等价于`hexo generate --deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注: <code>hexo clean</code> 没有 简写, <code>git --version</code> 没有简写</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h4 id="通过hexo-g-d部署时报Error-Spawn-failed错误"><a href="#通过hexo-g-d部署时报Error-Spawn-failed错误" class="headerlink" title="通过hexo g -d部署时报Error: Spawn failed错误:"></a>通过<code>hexo g -d</code>部署时报<code>Error: Spawn failed</code>错误:</h4><blockquote><p>这是由于 git 本地记录的提交版本号与 github 上不一致导致的，通过<code>git reset --hard commitCode</code>即可解决。</p></blockquote><ul><li>检查本地最近提交记录，获取最后一次提交记录的更新时间及标识，如<code>280a7fdd46fcfd7d34e652aec15523dcd247fac8</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> .deploy_git<span class="token function">cat</span> .git/logs/HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>获取 github pages 服务所关联分支的最近一次提交记录，获取更新时间及标识。地址一般为：<code>https://github.com/用户名/仓库名/commits/分支名</code>，如<code>https://github.com/lxl80/blog/commits/gh-pages</code></li><li>如果发现提交最新的提交时间/标识不一致，通过以下命令即可解决:</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --hard f085038efdf79546c09641d37b2a2429c1ae8e60 <span class="token comment">#github上最新的提交标识</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="fsevents报错"><a href="#fsevents报错" class="headerlink" title="fsevents报错"></a>fsevents报错</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> ERR<span class="token operator">!</span> code EBADPLATFORM <span class="token function">npm</span> ERR<span class="token operator">!</span> notsup Unsupported platform <span class="token keyword">for</span>fsevents@2.3.2: wanted <span class="token punctuation">{</span><span class="token string">"os"</span><span class="token builtin class-name">:</span><span class="token string">"darwin"</span>,<span class="token string">"arch"</span><span class="token builtin class-name">:</span><span class="token string">"any"</span><span class="token punctuation">}</span> <span class="token punctuation">(</span>current:<span class="token punctuation">{</span><span class="token string">"os"</span><span class="token builtin class-name">:</span><span class="token string">"win32"</span>,<span class="token string">"arch"</span><span class="token builtin class-name">:</span><span class="token string">"x64"</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token function">npm</span> ERR<span class="token operator">!</span> notsup Valid OS:    darwin <span class="token function">npm</span>ERR<span class="token operator">!</span> notsup Valid Arch:  any <span class="token function">npm</span> ERR<span class="token operator">!</span> notsup Actual OS:   win32 <span class="token function">npm</span>ERR<span class="token operator">!</span> notsup Actual Arch: x64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决方法：修改package.json</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"optionalDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token string">"fsevents"</span><span class="token operator">:</span> <span class="token string">"^2.3.2"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="关于百度无法爬取GitHub内容解决方案"><a href="#关于百度无法爬取GitHub内容解决方案" class="headerlink" title="关于百度无法爬取GitHub内容解决方案"></a>关于百度无法爬取GitHub内容解决方案</h4><blockquote><ul><li>使用coding搭建一个可以被百度爬取到的代码托管平台</li><li>使用vps搭建一个hexo 镜像访问，专门针对搜索引擎。</li></ul></blockquote><blockquote><p>Tips: 博主用了第二种方法，2个域名，前端域名用dnspod，采用cloudflare parter cname接入。dnspos有选路选择，针对搜索引擎进入vps搭建的blog，对于其它线路到cloudflare parter 加速过的github pages  cname。后端域名用cloudflare parter 以及免费版cloudflare管理。</p></blockquote><p>既然百度无法爬取GitHub，那么我们只需要找个可以被百度爬取到的代码托管平台即可（并且还提供pages服务），基本只有国内的平台了：<code>Gitee</code>和<code>Coding</code>！Gitee自定义域名要花钱（九十多，都可以买服务器了），而Coding是可以免费自定义域名的。这里推介大家使用企业版的Coding，因为企业版的Coding仓库服务器是在香港的，而普通版的服务器是在新加坡。地理原因，理论上企业版的更快一些！</p><ol><li><p>将博客同时部署到两个仓库：GitHub和Coding</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>xxx/xxx.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@e.coding.net<span class="token punctuation">:</span>xxx/xxx.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在域名那里，配置两个解析</p><blockquote><p>线路类型作用：如果该值填“国内”，国内的IP就会去访问此项对应的<code>记录值地址</code></p><p>同理，如果该值填写“国外”，国外的IP就会去访问“国外”对应的<code>记录值地址</code></p></blockquote><ol><li><code>线路类型</code>为<code>百度</code>或者<code>国内</code>，记录值为<code>Coding仓库的地址</code></li><li><code>线路类型</code>为<code>默认</code>或者<code>国外</code>，记录值为<code>GitHub仓库地址</code></li></ol><p><img src="https://cimg1.17lai.site/data/2021/09/1120210911170615.png"></p></li><li><p>这样来自<code>百度的spider</code>就会去爬<code>国内Coding</code>的地址，而两个仓库的内容又都是一样的，如果请求IP来自国外，它又会去访问<code>国外的GitHub</code>，这样还有利于外国华侨和那些科学上网的用户访问，一石二鸟！（我真他妈天才！）</p></li><li><p>如果你只用Coding仓库，那就不需要这么麻烦了</p></li><li><p>测试百度Spider能不能爬你的域名</p><ol><li><p>在任意目录下执行以下命令（将“你的域名”换成你的域名）</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">curl -A "Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)" -o example.html 你的域名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行完命令，在该目录下会生成一个文件：<code>example.html</code>，打开它，如果显示</p><ul><li><p><code>Moved Permanently</code>，说明301，被重定向了</p></li><li><p><code>Found</code>，也就是爬到了</p></li><li><p>如果打开是你的首页，说明爬取到的内容就是你的首页HTML内容。</p></li><li><p>如果显示：</p><p><img src="https://cimg1.17lai.site/data/2021/09/1120210911170621.png"></p><p>说明域名是解析到GitHub的，403Forbidden访问禁止。</p></li></ul></li></ol></li></ol><h4 id="busuanzi不蒜子计数显示异常，一闪就没"><a href="#busuanzi不蒜子计数显示异常，一闪就没" class="headerlink" title="busuanzi不蒜子计数显示异常，一闪就没"></a>busuanzi不蒜子计数显示异常，一闪就没</h4><blockquote><ol><li><p>原因可能有两种live2d看板娘和busuanzi不蒜子计数冲突</p></li><li><p>busuanzi不蒜子网络访问异常。</p></li></ol><blockquote><ol><li><p>不在leancloud安全名单</p></li><li><p>不是正常域名访问</p></li><li><p>各种网络访问错误等等</p></li></ol></blockquote></blockquote><p>近日安装了live2d看板娘插件，<a href="https://github.com/EYHN/hexo-helper-live2d">github项目地址</a>，安装后却意外发现busuanzi不蒜子计数失效了,在页面中不显示，但强制刷新后出现，再刷新又消失。经排查，未发现问题，但事实是网站源码出现了变化。</p><blockquote><p><em>正常时</em></p></blockquote><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id="busuanzi_container_page_pv" class="info-break-policy" style="display: inline;"&gt;    &lt;i class="far fa-eye fa-fw"&gt;&lt;/i&gt;阅读次数:&amp;nbsp;&amp;nbsp;    &lt;span id="busuanzi_value_page_pv"&gt;433&lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><em>异常时</em></p></blockquote><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id="busuanzi_container_page_pv" class="info-break-policy" style="display: none;"&gt;    &lt;i class="far fa-eye fa-fw"&gt;&lt;/i&gt;阅读次数:&amp;nbsp;&amp;nbsp;    &lt;span id="busuanzi_value_page_pv"&gt;434&lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对比发现出现了多余的<code>style="display: none;</code>。<br>经过搜索主题源码，发现这个文件<code>themes\matery\source\libs\others\busuanzi.pure.mini.js</code>控制显示。</p><p>可以直接下载下面这个地址的js替换，来自个人blog的js   <a href="https://blog.17lai.site/libs/others/busuanzi.pure.mini.js">busuanzi.pure.mini.js</a>，直接下载这个js替换即可。下面源码经过了展开美化，原始文件是压缩去空格版本的。<br><strong>注意</strong>： 这是一种破坏性修复，没有解决根本问题，临时修复方案。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> bszCaller<span class="token punctuation">,</span> bszTag<span class="token punctuation">;</span><span class="token operator">!</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span>        b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function-variable function">ready</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">||</span> <span class="token string">"interactive"</span> <span class="token operator">===</span> document<span class="token punctuation">.</span>readyState <span class="token operator">||</span> <span class="token string">"complete"</span> <span class="token operator">===</span> document<span class="token punctuation">.</span>readyState <span class="token operator">?</span> <span class="token function">c</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span> <span class="token operator">:</span>            b<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">c</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> c <span class="token operator">=</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span> c <span class="token operator">&gt;</span> a<span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function-variable function">e</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        a <span class="token operator">||</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">d</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span>removeEventListener <span class="token operator">?</span> document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>            <span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> document<span class="token punctuation">.</span>attachEvent <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">"onreadystatechange"</span><span class="token punctuation">,</span>            e<span class="token punctuation">)</span><span class="token punctuation">,</span> window <span class="token operator">==</span> window<span class="token punctuation">.</span>top <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span>addEventListener <span class="token operator">?</span> document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> document<span class="token punctuation">.</span>attachEvent <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>        document<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"onreadystatechange"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">loaded|complete</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> window <span class="token operator">==</span> window<span class="token punctuation">.</span>top <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                a <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">doScroll</span><span class="token punctuation">(</span><span class="token string">"left"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>            <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bszCaller <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function-variable function">fetch</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token string">"BusuanziCallback_"</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">1099511627776</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">evalCall</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"=BusuanziCallback"</span><span class="token punctuation">,</span> <span class="token string">"="</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span> scriptTag <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>                <span class="token string">"SCRIPT"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> scriptTag<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"text/javascript"</span><span class="token punctuation">,</span> scriptTag<span class="token punctuation">.</span>defer <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span> scriptTag<span class="token punctuation">.</span>src <span class="token operator">=</span> a<span class="token punctuation">,</span>            document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"HEAD"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>scriptTag<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">evalCall</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">a</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> scriptTag<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>scriptTag<span class="token punctuation">)</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    bszTag<span class="token punctuation">.</span><span class="token function">hides</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> bszCaller<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    bszTag<span class="token punctuation">.</span><span class="token function">texts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> bszTag<span class="token punctuation">.</span><span class="token function">shows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bszTag <span class="token operator">=</span> <span class="token punctuation">{</span>    bszs<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"site_pv"</span><span class="token punctuation">,</span> <span class="token string">"page_pv"</span><span class="token punctuation">,</span> <span class="token string">"site_uv"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token function-variable function">texts</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> c <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_value_"</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">hides</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> b <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_"</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>            b <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">shows</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> b <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_"</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>            b <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"inline"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>替换的人请操作其实就是把其中的<code>b.style.display="none"</code>中<code>none</code>去掉。</p><h4 id="不蒜子-busuanzi-文章计数出错问题"><a href="#不蒜子-busuanzi-文章计数出错问题" class="headerlink" title="不蒜子 (busuanzi) 文章计数出错问题"></a>不蒜子 (busuanzi) 文章计数出错问题</h4><p>出现这个原因，和 Chrome 85 版本 Referrer Policy 更改有关。什么是 Referrer，简单理解，就是请求 Web 服务器时，可以在 HTTP Request 的请求头 (header) 中加上当前页面的 URL，例如我们在浏览某个博客页面，需要加载一些图片，从服务器请求这些图片时，referrer 就是当前的博客页面 URL。从这里也可以看出，referrer 可能会暴露请求来源的某些信息或者隐私，有一定的隐私或安全风险。之前版本的 Chrome 浏览器，如果网站没有指定自己的 Referrer Policy，那么 Chrome 默认 policy 是 no-referrer-when-downgrade，在 Chrome 85 版本中，为了保护用户的隐私，默认的 Referrer Policy 则变成了 strict-origin-when-cross-origin。</p><ul><li>no-referrer-when-downgrade: 当两个网站的 http 协议安全等级相当，或者目的网站安全协议等级高于当前网站(HTTP –&gt; HTTP, HTTPS –&gt; HTTPS, HTTP –&gt; HTTPS)， referer 将会包含源网站的域名，路径，查询字符串；如果目的网站安全协议等级低于源网站 (HTTPS –&gt; HTTP)，将不会发送这些信息。</li><li>strict-origin-when-cross-origin： 只有当做同一域名请求时 (源网址和目标网址是同一域名），才发送域名，路径和请求字符串，当两个网站安全协议相当时，发送源网站的域名(没有具体路径信息和查询字符串)，如果目标网站安全协议等级低于源网站，不发送 header 信息。</li></ul><p>不蒜子统计博客文章访问量就是通过 referer 来计算的，通过上面的分析，如果 Referrer Policy 是 strict-origin-when-cross-origin，不蒜子接收到的只有博客的域名，没有文章的具体路径，所以具体某个文章的 PV 统计会出现错误。</p><p>修复方法：</p><p>在主题文件夹下/layout/_partial/head.ejs中添加</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>referrer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no-referrer-when-downgrade<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="多个域名映射同一个github-pages"><a href="#多个域名映射同一个github-pages" class="headerlink" title="多个域名映射同一个github pages"></a>多个域名映射同一个github pages</h4><p>可能由于某种原因，换了一个域名，之前又有一些被搜索引擎收录，但是又不想让原来的链接失效，就需要让两个域名都映射到github pages中。本文介绍几种当前可能的方法。欢迎提出更多有效方法。</p><h5 id="直接映射有什么问题？"><a href="#直接映射有什么问题？" class="headerlink" title="直接映射有什么问题？"></a>直接映射有什么问题？</h5><p>你可能会想，两个域名都映射到github pages不就可以了？然而事实并非如此。首先当前github 的CNAME中只支持一个域名。因此CNAME文件中只能有一个域名，而如果在域名映射中将两个域名都映射到username.github.io，那么其中有一个会出现404错误。</p><h5 id="前提-1"><a href="#前提-1" class="headerlink" title="前提"></a>前提</h5><p>以下方法的前提是你已经明白如何为自己的github pages添加自定义域名。</p><h5 id="需要注意什么？"><a href="#需要注意什么？" class="headerlink" title="需要注意什么？"></a>需要注意什么？</h5><ul><li>需要给各大网站提交新的域名网址，重新被收录</li><li>域名变换前面网站的内容结构不能变，否则重定向也没有意义</li><li>当前单纯的域名没有办法进行备案</li><li>注意修改配置文件里的主域名为新的域名</li><li>由于更换了新的域名，导致原来leancloud统计的访问数据需要重新计算，也就是网站访问量被清零了，leancloud也需要更新域名</li><li>新的com域名可申请免费的SSL证书，保证https可访问，而不会提示不安全</li><li>301重定向会将旧地址的权重转义到新地址上</li><li>百度收录速度较慢</li></ul><h5 id="方法一：域名托管平台重定向"><a href="#方法一：域名托管平台重定向" class="headerlink" title="方法一：域名托管平台重定向"></a>方法一：域名托管平台重定向</h5><p>有的域名服务商提供重定向功能，以阿里云为例，在域名映射添加记录的时候，可以选择显性URL或隐性URL。但是自己在尝试这种方法的时候，会提示我URL备案异常。可能是由于这个时候已经用新的域名映射了博客地址，但是新的域名实际上是没有备案的。更无奈的是，目前貌似没有办法单独对域名进行备案。因此本人放弃了该方法。</p><p>如果你的博客也是部署在github上的，那么这种方法就不用尝试了，如果你的博客是部署在自己的服务器上的，那么网上都很多方法，这里就不介绍了。</p><h5 id="方法二：部署两个仓库"><a href="#方法二：部署两个仓库" class="headerlink" title="方法二：部署两个仓库"></a>方法二：部署两个仓库</h5><p>我们注意到，除了github pages，还有coding.net可用。它与github类似。原来的域名映射到这个地址就可以了。而在部署hexo的时候，是可以添加两个仓库地址的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>username/username.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@git.coding.net<span class="token punctuation">:</span>username/username.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> coding<span class="token punctuation">-</span>pages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两个仓库内容唯一的差别就是域名不一样，即CNAME中的记录值不一样。这样当访问两个不同的域名的时候，是访问不同的两个平台仓库。但是原来域名的权重不会转到新的域名中去。</p><h5 id="方法三：新增项目重定向"><a href="#方法三：新增项目重定向" class="headerlink" title="方法三：新增项目重定向"></a>方法三：新增项目重定向</h5><p>假如你已经有username.github.io项目，新建一个名为blog(名字自定义)的项目，在项目的setting中，开启github pages服务，并且将旧的域名映射到username.github.io。</p><p>实际上，github pages并不是只能有一个，例如，你新创建的仓库访问地址为：username.github.io/blog。<br>由于旧的域名映射会导致404错误，那么在我们的新项目中增加一个404.html，在页面中进行跳转即可：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> domain <span class="token operator">=</span> <span class="token string">"换成你自己的新域名"</span><span class="token punctuation">;</span><span class="token keyword">var</span> src <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">;</span><span class="token keyword">var</span> prtc <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> src<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> target <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> src<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> prtc <span class="token operator">+</span> <span class="token string">"://"</span> <span class="token operator">+</span> domain <span class="token operator">+</span> target<span class="token punctuation">;</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span>prtc <span class="token operator">+</span> <span class="token string">"://"</span> <span class="token operator">+</span> domain <span class="token operator">+</span> target<span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，需要利用google的地址更改功能，使得旧网址的权重往新网址转移。<br>找到search console中的地址更改工具（设置按钮中找到）。</p><p>除了增加404页面外，还需要增加CNAME文件，里面的内容是你原先的域名。</p><h2 id="参照"><a href="#参照" class="headerlink" title="参照"></a>参照</h2><ul><li><a href="https://www.lixl.cn/2019/092856736.html">基于Hexo的matery主题搭建博客并深度优化-悟尘记</a></li><li><a href="https://hexo.io/zh-cn/docs/">hexo 官方文档</a></li><li><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">闪烁之狐</a></li><li><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo-theme-matery</a></li><li><a href="https://blog.sky03.cn/posts/42790.html#toc-heading-1">Hexo 进阶之各种优化</a></li><li><a href="https://www.cnblogs.com/Timesi/p/9556236.html">Leancloud+Valine打造Hexo个人博客极简评论系统</a></li><li><a href="https://blog.sky03.cn/posts/42790.html">Hexo进阶之各种优化</a></li><li><a href="https://sitoi.cn/posts/15908.html">自动部署篇</a></li><li><a href="https://www.cnblogs.com/luoshuitianyi/p/10333928.html">Hexo搭建(VPS)</a></li><li><a href="https://boyinthesun.cn/post/error-live2d-busuanzi/">解决live2d看板娘和busuanzi不蒜子计数冲突</a></li><li><a href="https://www.yanbinghu.com/2019/03/29/25951.html">多个域名映射同一个github pages</a></li><li> <a href="https://segmentfault.com/a/1190000016286007">hexo博客简单支持PWA</a></li><li> <a href="https://blog.imlete.cn/article/hexo-seo-autopush.html">Hexo 每天自动提交网站url到搜索引擎</a></li><li> <a href="https://yafine-blog.cn/posts/ebb2.html">Hexo 博客订阅文章通知功能</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker-版-hexo-matery&quot;&gt;&lt;a href=&quot;#Docker-版-hexo-matery&quot; class=&quot;headerlink&quot; title=&quot;Docker 版 hexo + matery&quot;&gt;&lt;/a&gt;Docker 版 hexo + matery&lt;/</summary>
      
    
    
    
    <category term="hexo" scheme="https://blog.17lai.site/categories/hexo/"/>
    
    
    <category term="Github" scheme="https://blog.17lai.site/tags/Github/"/>
    
    <category term="hexo" scheme="https://blog.17lai.site/tags/hexo/"/>
    
    <category term="matery" scheme="https://blog.17lai.site/tags/matery/"/>
    
    <category term="cdn" scheme="https://blog.17lai.site/tags/cdn/"/>
    
    <category term="seo" scheme="https://blog.17lai.site/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>Joplin 插件以及其Markdown语法。All in One!</title>
    <link href="https://blog.17lai.site/note/2021-09-09-the-joplin-plugin-and-its-markdown-syntax./"/>
    <id>https://blog.17lai.site/note/2021-09-09-the-joplin-plugin-and-its-markdown-syntax./</id>
    <published>2021-09-09T14:25:00.000Z</published>
    <updated>2021-10-11T12:25:08.466Z</updated>
    
    <content type="html"><![CDATA[<p>Joplin是一个以Markdown为主要语法的笔记程序，发展到今天增加了许多插件，这些插件也大大增强了它的功能，今天我们就讲讲Joplin的各个插件的作用和使用方法。</p><p>首先我们打开Joplin，依次点击<strong>工具-&gt;选项</strong>设置页面，然后点击<strong>Markdown</strong>选项卡，我们就可以看到如下界面</p><p><img src="https://cimg1.17lai.site/data/2021/09/1020210910083827.png" alt="Joplin插件选择配置界面"></p><p>下面我们一个一个讲解一下每个插件的大概作用和用法，某些插件的详细使用方法可能需要我独立写一篇文章来介绍，这里我就先抛砖引玉大致介绍一下。</p><h2 id="启动软中断插件"><a href="#启动软中断插件" class="headerlink" title="启动软中断插件"></a>启动软中断插件</h2><p>Joplin默认使用的是硬中断方式，那么什么是软中断什么是硬中断呢？如果你刚开始使用Markdown撰写自己的笔记你可能会非常的不习惯，因为标准的Markdown语法里面换行需要两个回车符号，但是像word之类的编辑器都是一个回车，普通人会感觉很不习惯，所以Joplin默认采用了硬中断方式，这样你可以使用一个回车符实现换行。但是当我们启用软中断插件之后，我们就需要两个回车符来实现换行（准确说应该是分段），使用两个空格加一个回车来实现换行，前者的间距会比后者的大。启用软中断其实对于普通人来说不是很好用，很难适应，所以我不建议大家开启该插件！</p><h2 id="启用typographer支持"><a href="#启用typographer支持" class="headerlink" title="启用typographer支持"></a>启用typographer支持</h2><p>这个插件的作用是用来申明我们的版权的，因为有时候我们可能需要将我们的笔记分享给别人，但是想要声明文章是我们写的，我们就可以启用该插件来声明我们的著作权，而且该插件会给我们渲染成指定的版权声明格式，讲讲怎么用：</p><p>我们启用插件之后，在我们想要声明著作权的地方键入：</p><pre class="line-numbers language-none"><code class="language-none">(c)著作权所有人<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后Joplin就会给我们渲染为：</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909174240.png" alt="typographer插件语法渲染结果"></p><p>是不是很熟悉，很多网页的底部都会有这个声明！</p><h2 id="启用数学表达式"><a href="#启用数学表达式" class="headerlink" title="启用数学表达式"></a>启用数学表达式</h2><p>这个是Markdown自带语法，Joplin使用插件来实现的，其实就是大家在<a href="http://lightzhan.xyz/index.php/2020/02/28/markdowntutorial/">Markdown语法</a>里面看到的行内公式使用$…$，行间公式使用$$…$$。需要说明的是Joplin使用的是Katex来解析数学符号，它的语法和Latex的数学公式写法差不多，我到现在还没有碰到很大的不同的地方！</p><h2 id="启用高亮-Mark-句法"><a href="#启用高亮-Mark-句法" class="headerlink" title="启用高亮==Mark==句法"></a>启用高亮<code>==Mark==</code>句法</h2><p>这个其实就是一个语句高亮插件，中间的语句会被高亮显示，有助于我们对重要的内容进行强调，自己一试就一目了然了。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909174304.png" alt="Joplin Mark插件示例"></p><h2 id="启用脚注"><a href="#启用脚注" class="headerlink" title="启用脚注"></a>启用脚注</h2><p>脚注的功能就是对文中的某一个特定的术语等进行解释补充说明，有点像是论文的参考文献，下面是一个简单的示例，相信大家一看就懂</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909174326.png" alt="Joplin 启用脚注插件示例图"></p><p>根据图片你可能明白了脚注的使用方法：在我们想要使用脚注的地方使用[^唯一标识符]注明，然后在文章的最后使用响应的标识符进行说明即可，比如例子中的</p><pre class="line-numbers language-none"><code class="language-none">[^lightzhan]:知乎搜索light zhan即可找到我了<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意那个冒号一定要是英文冒号，中文冒号可能无法被成功解析</strong>。</p><h2 id="启用目录扩展"><a href="#启用目录扩展" class="headerlink" title="启用目录扩展"></a>启用目录扩展</h2><p>启用该扩展，我们就可以使用相应的语法在某个位置插入我们文章的目录，具体的语法为</p><pre class="line-numbers language-none"><code class="language-none">[toc]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意着是一个固定的符号，不需要改变什么，只需要在我们想要插入目录的地方放上**[toc]**即可，例如</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909174350.png" alt="Joplin toc目录生成插件示例图"></p><p>上图最重要的就是坐上脚的[toc]指令，该指令自动生成了右边的整个目录！</p><h2 id="启用下标-sub-和上标-sup-句法"><a href="#启用下标-sub-和上标-sup-句法" class="headerlink" title="启用下标~sub~和上标^sup^句法"></a>启用下标<code>~sub~</code>和上标<code>^sup^</code>句法</h2><p>一看到<del>sub</del>如果不小心就会认为这个是删除线，大错特错了，一定要明白两者的区别，删除线是左右都是两个波浪线，而这个只有一个波浪线，一定要搞清楚这个。下面我们看看这个插件的作用和用法。</p><p>这两个插件的作用其实很简单，就是下标和上标，看例子应该就明白的</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909174420.png"></p><h2 id="启用术语表插件"><a href="#启用术语表插件" class="headerlink" title="启用术语表插件"></a>启用术语表插件</h2><p>对于这个插件得先知道什么是术语表。所谓的术语表其实可以理解为一个定义的列表，很多专业的书籍的前面都会有术语表，因为它需要给出书中所用术语的定义和解释。还不懂？我们在Joplin中启用该插件，然后新建一个笔记，输入如下文字：</p><pre class="line-numbers language-none"><code class="language-none">Qdown:   Qdown是由lightzhan开发的全功能软件下载程序，这里是程序的介绍页哦:http://lightzhan.xyz/index.php/qdown/ LightZhan:   计算机爱好一名，爱折腾哎生活，*欢迎知乎关注lightzhan哦*        可以嵌入一些代码    定义第三段 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些文字会被解析显示为：</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909174558.png" alt="Joplin术语表插件示例"></p><p>对比一下发现了什么没有？术语表的每一项由两个部分组成，第一部分是术语，第二部分是该术语的解释，多个术语及其解释组合在一起就组成了表，这就是术语表！需要特别注意的是术语表的书写格式是固定的，如果你想要快速上手，建议你拷贝上面我提供的示例进行修改，修改两下你就懂格式到底是怎么回事了！</p><h2 id="启用缩写句法"><a href="#启用缩写句法" class="headerlink" title="启用缩写句法"></a>启用缩写句法</h2><p>这个插件很有意思，也很有用。你是否记得有些程序的按钮，当你把鼠标放上去的时候它会显示按钮的作用。不记得了？不存在，我们也使用例子来说明。下面我们启用缩写句法插件，然后新建笔记，在笔记里面输入：</p><pre class="line-numbers language-none"><code class="language-none">*[Qdown]: 由lightzhan开发*[LightZhan]:  欢迎知乎关注我哦Qdown 是由 LightZhan 开发的一款全协议下载器.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>该文本会被Joplin显示为</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909174619.png" alt="Markdown Joplin 缩写表插件示例图"></p><p>这可能并不能完全显示出该插件的作用，因为截图的原因截不到，当我们把鼠标放在Qdown上面的时候，鼠标所在的位置处会弹出“由lightzhan”开发的提示。不理解的可以拷贝上面的代码到Joplin感受一下，记得要开启该插件哦！需要注意的是该句中对应的<strong>缩写词前后都要有空格</strong>，负责你可能看不到上面的效果。</p><h2 id="启用Markdown-emoji"><a href="#启用Markdown-emoji" class="headerlink" title="启用Markdown emoji"></a>启用Markdown emoji</h2><p>该插件是用于在我们的笔记中插入表情的，这是一个简单的示例截图</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909174639.png" alt="Joplin表情插件示例"></p><p>详细的表情和表情的代码，可以参考<a href="https://github.com/zhouie/markdown-emoji">这里</a>。</p><h2 id="启用-insert-句法"><a href="#启用-insert-句法" class="headerlink" title="启用++insert++句法"></a>启用<code>++insert++</code>句法</h2><p>这个插件很好理解，一试便知道作用和用法了</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909174656.png" alt="Joplin insert插件示例"></p><p>说了那么多，就是在对应的文字下面显示一个下划线！</p><p>Markdown是非常好用的笔记书写规范，记着，Markdown不是某一个软件，而是一个通用的笔记书写规范，通过使用该规范进行写作，解析器会按照规定的样式将其渲染显示出来，说得直白点就是用于文字排版的。</p><h2 id="Markdown的排版语法"><a href="#Markdown的排版语法" class="headerlink" title="Markdown的排版语法"></a>Markdown的排版语法</h2><p>这里的讲解如果有不懂的可以参见下一节的示例：</p><ol><li>标题。markdown的标题使用“#”符号开头，一级标题一个”#”，二级标题两个“#”（也就是“##”），以此类推三级标题四级标题…….，不同级的标题会被渲染为不同的大小和样式（根据各个软件和相应的主题而定）；</li><li>粗体。markdown的粗体字使用两个“<strong>”包裹即可，比如 “</strong>你好**”解析后变为“你好”；</li><li>斜体。markdown的斜体使用“<em>”或者“_”包裹，比如“</em>你好*”解析显示为“你好”；</li><li>引用。markdown的引用使用“&gt;”开头，大部分软件要求“&gt;”要和引用内容之间有一个空格；</li><li>代码。对于程序员来说可能想要在文中插入代码，markdown是支持插入代码的，行间代码使用一个”`“符号包裹，注意这个符号是键盘左上角Esc下面的那个键，不是我们所谓的英文上一撇；</li><li>数学公式。markdown的数学解析一般使用latex语法，行内公式使用一个<code>$</code>包裹即可，行间公式使用两个<code>$</code>包裹；</li><li>markdown的列表分为有序列表和无序列表。有序列表就是有序号，无序列表就是 无序号，有序列表就是在数字后面一个点，然后空一格写正文，比如：<code>1. xxxxxxx</code>，第二点需要新起一行<code>2. xxxxxx</code>。无序列表是使用“*”或者“-”开始，后面跟一个空格写上正文。</li><li>markdown的勾选框。markdown的勾选框使用<code>- [ ]</code>，注意字符之间都是有空格的。比如：第一行<code>- [ ] A</code>,第二行<code>- [ ] B</code>。这样对应的渲染结果就是勾选框和对应的选项。注意字符之间的空格！</li><li>表格。markdown的表格非常易于理解，请看下面的示例。</li></ol><h2 id="示例代码和渲染结果"><a href="#示例代码和渲染结果" class="headerlink" title="示例代码和渲染结果"></a>示例代码和渲染结果</h2><p>下面的示例左边是书写文字，右边是渲染结果，<strong>注意书写文字里面的标识符和内容之间的空格</strong>：</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909175337.png"></p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909175353.png"></p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909175417.png"></p><p>需要说明的是上面的粗体显示为了橘红色的字体，这是我自己设置的格式，这个等大家熟悉了后可以使用CSS设计自己喜欢的样式。下面是表格的渲染结果 （其中左边的源代码不用那样对齐 ，横线的个数一处最少3个就行 ，右边是解析后的显示结果） ：</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909175444.png"></p><p>额~，左边左下角那个是鼠标光标，不是文字内容哈。需要说明的是不同的软件的不同的主题可能显示的结果会不一样，但是书写的语法是不变的。</p><h2 id="启用-multimarkdown-表格扩展"><a href="#启用-multimarkdown-表格扩展" class="headerlink" title="启用 multimarkdown 表格扩展"></a>启用 multimarkdown 表格扩展</h2><p>这个插件说高深也不高深，看名字应该就能知道这是一个增强Markdown表格功能的插件，大家记得Markdown的表格是怎么使用的吗？如果忘记的话赶紧看看<a href="http://lightzhan.xyz/index.php/2020/02/28/markdowntutorial/">这篇文章</a>回顾一下，不然下面的内容可能体会不会那么深！</p><p>好啦，我这里假设读者知道markdown的表格是怎么用的，然后我们开始讲解multimarkdown扩展。Markdown自带的表格功能是非常有限的，如果你使用过的话就会发现它能做出来的表格一定是规整的，行和列一定是划分均匀整齐的，但是有时候我们需要的表格可能是这样的：</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909175608.png"></p><p>这种表格使用Markdown的表格是不可能做出来的，因为分组的效果和占用两个格子的效果是做不出来的，但是如果你启用了MultiMarkdown插件，你就可以使用下面的代码渲染出来：</p><pre class="line-numbers language-none"><code class="language-none">|             |          分组                 ||第一个表头     | 第二个表头     | 第三个表头      | ------------ | :-----------: | -----------:   |内容          |          占用两个格子           ||内容          |   **内容**     |         内容    |新的一部分     |     更多       |         更多    |更多          | 带有一个跳过的 '\|'              ||[LightZhan制作]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以把上面的代码拷贝进Joplin编辑器研究一番就能理解MultiMardown表格扩展的用法了，下面我详细讲解一下。</p><p>MultiMarkdown的表格扩展支持下面的功能：</p><ul><li>使得元素占据多个列（上面的示例中有）</li><li>使得元素占据多个行</li><li>在表格上面或者下面对表头进行分组（上面的例子中有）</li><li>在表格的上面或者下面标注表格标题（上面的例子中有）</li><li>在表格中包含分块元素（列表、代码、段落等等）</li><li>表格不需要表头</li></ul><p>上面标注了“上面的例子中有”的我这里就不在讲了，因为代码一研究或者修改修改就知道咋回事的，下面我们主要讲讲上面的例子中没有涉及到的。</p><p><strong>1.使得表格占据多行</strong>。这个其实很好用，但是有两种情况。第一种情况是一个项目占据两格。这种情况要占据多行的话，在我们对应列的起始行写上内容，然后接下来要合并的行直接写“^^”。不明白不存在，我们来一个例子：</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909175656.png" alt="MultiMarkdown表格扩展内容占据多行示例图"></p><p>上面对应的代码是什么呢？看下面：</p><pre class="line-numbers language-none"><code class="language-none">作者| 信息  | 信息 |----:| --------------:         | ---------:         |LightZhan| ligthzhan.xyz ||^^| 更多Joplin教程           | Qdown下载器         |[LightZhan制作，允许规范转载]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把上面的代码拷贝进编辑器改改试试，很容易明白里面的玄机的！</p><p>第二种情况是我们添加块，看下面一点。</p><p>2.<strong>在表格中添加块元素。</strong>这个不用多说，直接在表格的格子里面用Markdown语法写作，渲染成对应的Markdown格式！比如加粗、斜体、代码块等等。下面来一个简单的例子，需要注意的是下面的例子当中我们的内容有几行！</p><pre class="line-numbers language-none"><code class="language-none">|   Markdown   | 渲染结果       ||--------------|---------------||    *斜体*    | *斜体*         | \|              |               ||    - 项目1   | - 项目1        | \|    - 项目2   | - 项目2        ||    ```python | ```python       \|    .1 + .2   | .1 + .2         \|    ```       | ```           |[LightZhan制作，允许规范转载]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意代码后面的”\”，这个符号是指定换行的，如果项目占据多行一定要写上。上面的代码复制黏贴进编辑器可以看到下面的渲染结果</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909175924.png" alt="Joplin多行和内容块的示例图"></p><p><strong>3.表格不需要表头。</strong>这个也很简单，直接不写表头即可。拷贝下面的代码进编辑器</p><pre class="line-numbers language-none"><code class="language-none">----:| --------------: | ---------: |LightZhan| lightzhan.xyz         ||^^| 更多Joplin教程  | Qdown下载器 |[LightZhan制作，允许规范转载]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后你就可以看到惊喜</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909180209.png" alt="Joplin表格扩展没有表头的表格示例图"></p><h2 id="启用Fountain语法支持"><a href="#启用Fountain语法支持" class="headerlink" title="启用Fountain语法支持"></a>启用Fountain语法支持</h2><p>这个插件的目标人群非常少，Fountain语法是用来写电影剧本的，而且要是要细讲的话估计又是一篇文章，因为使用的人非常少，所以我这里就不讲这个了。</p><h2 id="Mermaid插件的作用"><a href="#Mermaid插件的作用" class="headerlink" title="Mermaid插件的作用"></a>Mermaid插件的作用</h2><p>Mermaid是一个用于画流程图、时序图、类图、状态图、甘特图、饼图的Markdown扩展，其中状态图是最新8.4版本的新功能。如果你不知道这些图是干什么的，不存在，下面的教程里面我会每个都给出例子。</p><h2 id="在Joplin里面使用Mermaid"><a href="#在Joplin里面使用Mermaid" class="headerlink" title="在Joplin里面使用Mermaid"></a>在Joplin里面使用Mermaid</h2><p>在Joplin里面如果想要使用Mermaid，那么你需要使用代码块，并且代码的类型填写mermaid，详细的格式如下：</p><pre class="line-numbers language-none"><code class="language-none">```mermaidgraph TD    Start --&gt; Stop```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在渲染区我们就能得到如下的结果</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909180438.png" alt="Mermid绘图渲染示例"></p><h2 id="Mermaid流程图"><a href="#Mermaid流程图" class="headerlink" title="Mermaid流程图"></a>Mermaid流程图</h2><p>下面我们讲解在Mermaid里面画流程图。上一节的示例便是流程图，我们把上一节的代码拿出来分析一下。首先我们看代码的第一行：graph TD，这一行代码有两个作用，graph表示我们图的类型，graph表示流程图，而第二个TD表示图的方向，可能的方向有如下几个</p><ul><li>TB：自顶向下</li><li>BT：自底向上</li><li>RL：从右到左</li><li>LR：从左到右</li><li>TD：和TB一样</li></ul><p>上面我们的例子使用的是TD，如果你对其它的方向不明白，可以把代码拷贝到编辑器里面修改方向参数就可以理解各个方向的意义了。</p><p>上面的代码非常基础，因为如果要实现比较复杂的流程图，我们就需要使用一些比较高级的语法，比如定义节点。所谓的节点，你可以简单的理解为上面图片中的方框，但是如果我们要使用其它形状的节点怎么办呢？在上面的例子中我使用了默认的节点定义方法，也就是直接使用文本,这种方式定义节点的话id和显示文本是一样的，而且形状是固定的矩形。如果要定义不同的节点形状，或者使得id和显示文本不一样，可以使用下面的语法</p><ul><li>定义矩形形状的节点：id[text]</li><li>定义圆角矩形的节点：id(text)</li><li>定义椭圆形的节点：id([text])</li><li>定义圆柱形的节点：id[(text)]</li><li>定义圆形的节点：id((text))</li><li>定义非对称图形的节点：id&gt;text]</li><li>定义菱形的节点：id{text}</li><li>定义六角形的节点：id</li><li>定义平行四边形的节点(两个方向)：id[/text/]或者[\text]</li><li>定义梯形的节点(两个方向)：id[/text] 或者 di[\text/]</li></ul><p>注意上面的id和text是需要我们自己定义替换的，如果同一个id有多个text，取最后一次的定义值！</p><p>有了节点我们还需要将节点连接起来，也就是我们要使用线条或者箭头来进行节点的连接，Mermaid支持下面的方式：</p><ul><li>实线箭头：A–&gt;B</li><li>实线无箭头：A–B</li><li>无箭头实线上带文本：A–text–B</li><li>实线箭头带文本：A–&gt;|text|B 或者 A–text–&gt;B</li><li>虚线箭头：A-.-&gt;B</li><li>虚线箭头带文本：A-.text.-&gt;B</li><li>粗线箭头：A==&gt;B</li><li>粗线箭头带箭头：A==text==&gt;B</li></ul><p>最好的办法就是把上面的代码拷贝进编辑器看看，一看你应该就能理解各个图形的形状！</p><p>上面我们讲解了节点和连线，下面我们说说图形的绘制。上面我使用的例子非常基础，下面来一个复杂点的例子供大家修改和研究</p><pre class="line-numbers language-none"><code class="language-none">```mermaidgraph TD    light[LightZhan]    url[lightzhan.xyz]    QdownUrl[访问LightZhan博客Qdown页面]    Qdown((Qdown))    function[功能]    Qdown--&gt;|作者|light     light--个人主页--&gt;url    Qdown--&gt;function    Qdown--&gt;QdownUrl    function1[极速下载]    function2[磁链/BT下载]    function3[迅雷下载]    function5[下载体验]    function4[Http/Https/FTP/SFTP]    function-.功能1.-&gt;function1    function-.功能2.-&gt;function2    function-.功能3.-&gt;function3    function-.功能4.-&gt;function4    function-.更多功能.-&gt;function5    annocement[本文首发于lightzhan.xyz,允许规范转载]```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码的渲染结果如下：</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909181150.png" alt="Mermaid流程图示例代码渲染结果"></p><p>如果不清楚，可以把上面的代码拷贝到编辑器进行修改和摸索！</p><h2 id="Mermaid时序图"><a href="#Mermaid时序图" class="headerlink" title="Mermaid时序图"></a>Mermaid时序图</h2><p>时序图是用于展示过程的方式和顺序的。举例来说，两个人之间的对话:</p><p>A先问B：Qdown是啥？B回答：Qdown是全功能的下载软件！A又问：哪里可以下载呀？B回答： <a href="http://lightzhan.xyz/index.php/qdown/">http://lightzhan.xyz/index.php/qdown/</a> 。我们使用mermaid绘制时序图来展示上面的对话过程：</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909181418.png" alt="mermaid时序图示例图"></p><p>这样是不是看上去清晰了很多了呢？希望通过这个例子能让你深切地感受到时序图是干什么用的！好了，放上上面的时序图的代码供大家研究：</p><pre class="line-numbers language-none"><code class="language-none">```mermaidsequenceDiagramA-&gt;&gt;B:Qdown是啥？B--&gt;&gt;A:Qdown是全功能的下载软件！A-&gt;&gt;B:哪里可以下载呀？B--&gt;&gt;A:http://lightzhan.xyz/index.php/qdown/```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们来简单分析一下上面的代码。你可能注意到了第一行的sequenceDiagram，这个就是告诉mermaid我们在这里绘制时序图，然后下面有箭头，在时序图里面，mermaid支持下面类型的箭头和线段：</p><ul><li>实线并且没有箭头：A-&gt;B:text</li><li>虚线没有箭头：A–&gt;B:text</li><li>实线带箭头：A-&gt;&gt;B:text</li><li>虚线带箭头：A–&gt;&gt;B:text</li><li>实线并且在终点带一个x：A-xB:text</li><li>虚线并且在终点带一个x：A–xB:text</li></ul><p>上面的text就是要显示在箭头或线段上的文本，在mermaid的时序图里面被称为消息，线段或箭头类型如果有不清楚的可以拷贝到编辑器里面看看，一目了然！</p><p>还记得上面我们在流程图里面的节点吗？在时序图里面不是定义节点，而是定义参与者，也就是上面的A和B。上面的代码中我们定义参与者的方式采用的是默认方式，也就是不显示定义，有时候我们的参与者的名字太长的话可以使用显示定义来定义别名：</p><pre class="line-numbers language-none"><code class="language-none">participant Johnparticipant Aliceparticipant A as Aliceparticipant J as John<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码的第一二行仅仅是显式定义我们的参与者，第三四行给我们的参与者定义别名，定义了别名后我们在下面的使用中就可以直接使用A代替Alice，使用J代替John了，这样输入会方便很多！</p><p>好了，时序图差不多就讲到这里，接下来的一些高级用法大部分我们都用不到，或者要使用的话不如使用专业的绘图软件使用插图的方式导入。</p><h2 id="使用Mermaid绘制类图"><a href="#使用Mermaid绘制类图" class="headerlink" title="使用Mermaid绘制类图"></a>使用Mermaid绘制类图</h2><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><p>在讲解如何绘制类图之前我们先了解一下什么是类图！如果你是计算机专业或者会计算机编程的话应该就懂面向对象编程，对象是类的实例，而这里要绘制的类图就和面向对象编程里面的类相关。</p><p>对于编程人员来说，函数具有参数和返回值，属性具有变量类型，我们举一个例子来说一下：</p><pre class="line-numbers language-none"><code class="language-none">class BankAccount{  +String owner  +BigDecimal balance  +deposit(amount) bool  +withdrawl(amount)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码的渲染结果为：</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909182000.png" alt="BankAccount类图"></p><p>上面的代码是我直接从官方借鉴的，可以直观地看出对于银行账户（BankAccount），一共有两个属性和两个方法，属性都是具有对应的变量类型，而对于函数具有参数（amount），并且deposit函数还具有bool类型的返回值。你或许看到了前面的+号，这个是对应变量或属性的可见性，分别有：</p><ul><li>+ public</li><li>– private</li><li># protected</li><li><code>~</code> Package/Internal</li></ul><p>如果我们想要定义的函数是抽象函数咋办呢？在括号的后面添加*即可：</p><pre class="line-numbers language-none"><code class="language-none">someAbstractMethod()*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在渲染过后抽象函数会使用斜体进行显示，这里就不截图展示了。对于静态函数，将后面的*换为$即可，在显示时静态函数会具有下划线。</p><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><p>在编程中我们常常会用到的关系：</p><table><thead><tr><th>&lt;|–</th><th>继承（Inheritance）</th></tr></thead><tbody><tr><td>*–</td><td>组成（Composition）</td></tr><tr><td>o–</td><td>聚集（Aggregation）</td></tr><tr><td>–&gt;</td><td>关联（Association）</td></tr><tr><td>—</td><td>实线（Link (Solid)）</td></tr><tr><td>…&gt;</td><td>依赖（Dependency）</td></tr><tr><td>…|&gt;</td><td>实现（Realization）</td></tr><tr><td>…</td><td>虚线（Link (Dashed)）</td></tr></tbody></table><p>下面我们举一个例子：“狗”继承自“动物”类别</p><pre class="line-numbers language-none"><code class="language-none">```mermaidclassDiagram    class 动物{        特点1：能动        特点2：能叫    }    class 狗{        特点1：4条腿        特点2：会汪汪叫        特点3：可爱至极        汪汪叫(陌生人)    }    动物 &lt;|-- 狗```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染结果为：</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909182019.png" alt="继承关系展示"></p><p>结合代码和展示结果应该很好理解，这就是一个狗继承自动物的简单例子，我们还可以对关系结果打标签：</p><pre class="line-numbers language-none"><code class="language-none">```mermaidclassDiagram    class 动物{        特点1：能动        特点2：能叫    }    class 狗{        特点1：4条腿        特点2：会汪汪叫        特点3：可爱至极        汪汪叫(陌生人)    }    动物 &lt;|-- 狗:属于（继承）```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在关系指示后面加上冒号，然后后面加上关系说明，这样在渲染结果当中我们就可以看到箭头上出现了我们需要的标签说明：</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909182129.png" alt="给关系加上说明标签"></p><p>好了，使用mermaid绘制类图就讲到这里，还有一些用法不是很常用，我就不讲了。</p><h2 id="使用mermaid绘制饼图"><a href="#使用mermaid绘制饼图" class="headerlink" title="使用mermaid绘制饼图"></a>使用mermaid绘制饼图</h2><p>绘制饼图的需求比较多，很多数据展示需要我们绘制饼图，幸运的是mermaid给我们提供了绘制饼图的功能，使用方法极其简单：</p><pre class="line-numbers language-none"><code class="language-none">```mermaidpie    title LightZhan创作，允许规范转载（http://lightzhan.xyz）    "Joplin" : 42.96    "Qdown" : 50.05    " 黑科技" : 10.01    "其它" :  5```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，pie关键字指定我们要绘制饼图，然后tiltile指定我们的标题，后面是数据分布，注意，mermaid会将我们输入的数据进行计算，上面的数据加起来并不是100，所以我们看到在下面的渲染结果中数据对应不上。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909182237.png"></p><p>Joplin插件非常丰富，你能找到各种各样的功能，这里推荐一些插件使用，见下面这篇文章， <a href="https://blog.17lai.site/note/2021-09-10-the-joplin-plugin-recommend/">Joplin插件推荐</a>。</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul><li><a href="https://lightzhan.xyz/index.php/category/software-installation-and-use/joplin/">lightzhan.xyz</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Joplin是一个以Markdown为主要语法的笔记程序，发展到今天增加了许多插件，这些插件也大大增强了它的功能，今天我们就讲讲Joplin的各个插件的作用和使用方法。&lt;/p&gt;
&lt;p&gt;首先我们打开Joplin，依次点击&lt;strong&gt;工具-&amp;gt;选项&lt;/strong&gt;设置</summary>
      
    
    
    
    <category term="note" scheme="https://blog.17lai.site/categories/note/"/>
    
    
    <category term="note" scheme="https://blog.17lai.site/tags/note/"/>
    
    <category term="Joplin" scheme="https://blog.17lai.site/tags/Joplin/"/>
    
    <category term="MarkDown" scheme="https://blog.17lai.site/tags/MarkDown/"/>
    
    <category term="Mermaid" scheme="https://blog.17lai.site/tags/Mermaid/"/>
    
  </entry>
  
  <entry>
    <title>替代Evernote免费开源笔记Joplin-网盘同步笔记历史版本Markdown可视化</title>
    <link href="https://blog.17lai.site/note/2021-09-09-start-to-use-joplin/"/>
    <id>https://blog.17lai.site/note/2021-09-09-start-to-use-joplin/</id>
    <published>2021-09-09T13:25:00.000Z</published>
    <updated>2021-10-11T12:25:08.472Z</updated>
    
    <content type="html"><![CDATA[<p>Evernote笔记是我们常用的一个笔记服务，国内叫印象笔记，免费版本的Evernote笔记其实已经足够我们使用了，但是对于重度的笔记用户，Evernote某些功能可能需要付费升级才可以使用，而且你的笔记是存放在Evernote的服务器上。</p><p>有些同学可能觉得放在Evernote服务器上的笔记会不安全，况且有些隐私性很强的笔记确实不适合放在公共的服务器上。此时，你需要一个可以保护个人隐私同时还可以与Evernote笔记功能相媲美的免费笔记服务：Joplin，它是一款免费开源的笔记软件。</p><p>Joplin跨平台支持，包括PC桌面端，移动端，甚至提供了命令行版本，原生支持 markdown 格式，搜索速度快，可以通过其他第三方同步工具 (Dropbox/NextCloud/OneDrive/WebDAV/etc) 进行备份以及同步 ，支持浏览器Web clipper即网页剪贴。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135705.png"></p><p>Evernote笔记该有的功能Joplin都有了，如果你不想掏钱购买Evernote付费版本，Joplin将是最佳的替代品。更多的自建服务还有：</p><ol><li> <a href="https://wzfou.com/chevereto/">Chevereto免费相册程序安装与使用-免费自建图床和公共图片相册</a></li><li> <a href="https://wzfou.com/tt-rss/">自建RSS阅读器Tiny Tiny RSS安装和配置自动更新,全文RSS,更换主题,手机RSS登录</a></li><li> <a href="https://wzfou.com/bitwarden-rs/">放弃付费1Password改用免费开源的bitwarden_rs自建密码管理系统-安装,使用和备份</a></li></ol><p><strong>PS：更新记录</strong></p><blockquote><p>1、平时经常要校对文本，以及有大量的文件需要在电脑和移动硬盘同步，可以试试这些免费的同步对比工具：<a href="https://wzfou.com/files-sync-softs/">八大免费的文件对比同步工具-免费文件对比分析与复制同步备份软件</a>。2021.3.24</p><p>2、对于1Password这类的密码管理软件重度依赖，但是苦于囊中羞涩的话，不防自建密码管理平台：<a href="https://wzfou.com/bitwarden-mima/">Bitwarden自建密码存储系统图文教程-开源免费的bitwarden_rs安装与使用</a>。2020.10.10</p></blockquote><h2 id="一、Joplin安装和使用"><a href="#一、Joplin安装和使用" class="headerlink" title="一、Joplin安装和使用"></a>一、Joplin安装和使用</h2><p>网站：</p><ol><li> <a href="https://joplinapp.org/">https://joplinapp.org/</a></li></ol><p>直接到官网下载Joplin安装包，安装好了就可以启动Joplin了，以下是Joplin的软件界面，分成三栏，和我们平时熟悉的笔记软件是一样的。（点击放大）</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135716.png"></p><p>这是Joplin的编辑器，支持 MarkDown，图片、数学公式、复选框等 MarkDown 语法。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135813.png"></p><p>不习惯MarkDown，直接切换为可视编辑即可。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135820.png"></p><p>在Joplin的设置选项中还提供了非常多的MarkDown的插件，对于MarkDown深度用户来是一个福音。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135723.png"></p><h2 id="二、Joplin的特色功能"><a href="#二、Joplin的特色功能" class="headerlink" title="二、Joplin的特色功能"></a>二、Joplin的特色功能</h2><h3 id="2-1-笔记历史版本"><a href="#2-1-笔记历史版本" class="headerlink" title="2.1 笔记历史版本"></a>2.1 笔记历史版本</h3><p>Joplin提供了笔记历史版本，让你轻松地恢复任意时间的笔记版本。在“工具” &gt; “选项” &gt; “笔记历史”中启用，以及设置保留的笔记历史天数。要查看笔记的历史版本，点击编辑器上方的笔记属性图标，然后选择恢复：</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135828.png"></p><h3 id="2-2-E2EE安全加密"><a href="#2-2-E2EE安全加密" class="headerlink" title="2.2 E2EE安全加密"></a>2.2 E2EE安全加密</h3><p>在同步过程中，笔记本、笔记、标签等均以纯文本文件的方式同步，如果你还觉得不安全，你可以开启端到端加密（E2EE），把文件加密后同步到云端。由于 Joplin 的去中心化，密码必须手动在每个终端设置。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135736.png"></p><p><strong>注意：不要在多个设备上同时启用加密，否则可能会造成加密密钥问题。特别提醒：****加密之前，先将笔记导出JEX备份一份，以防万一。</strong></p><h3 id="2-3-Joplin手机APP"><a href="#2-3-Joplin手机APP" class="headerlink" title="2.3 Joplin手机APP"></a>2.3 Joplin手机APP</h3><p>Joplin可以直接在各大应用市场上下载，使用起来也很方便。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135835.png"></p><h3 id="2-4-外部编辑器"><a href="#2-4-外部编辑器" class="headerlink" title="2.4 外部编辑器"></a>2.4 外部编辑器</h3><p>Joplin自带的编辑已经非常强大的，如果你想要使用自己的编辑器来编辑笔记也是可以的，包括 文本编辑器（如 Notepad++）、 Markdown 编辑器（如 Typora）等。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135928.png"></p><p>通过 Ctrl+E，或 Joplin 编辑器上方的图标（如下图）从外部编辑器打开笔记，从外部编辑器打开后，Joplin 将持续监控该文件，当你从外部编辑机保存后，Joplin 将自动同步最新变动。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135841.png"></p><p>你可以在“工具” &gt; “选项” &gt; “通用选项”中指定编辑器的路径。</p><h2 id="三、Joplin同步与备份"><a href="#三、Joplin同步与备份" class="headerlink" title="三、Joplin同步与备份"></a>三、Joplin同步与备份</h2><p>Joplin与其它的笔记软件很大的不同就是没有存储功能，你需要将Joplin的笔记放在自己的主机或者网盘里，幸运的是Joplin支持多种方式的云同步：Nextcloud / Dropbox / OneDrive / File system / WebDAV。</p><h3 id="3-1-Joplin免费网盘同步"><a href="#3-1-Joplin免费网盘同步" class="headerlink" title="3.1 Joplin免费网盘同步"></a>3.1 Joplin免费网盘同步</h3><p>目前，Joplin支持Dropbox 、OneDrive 网盘同步，在同步选项中选择OneDrive，然后就会打开认证。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135739.png"></p><p>同意验证。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135848.png"></p><p>与 OneDrive 同步时，Joplin 会在 OneDrive 中创建一个子目录：<code>/Apps/Joplin</code>，Joplin 仅有此目录的读写权限。如下图：</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135746.png"></p><h3 id="3-2-Joplin使用WebDAV同步"><a href="#3-2-Joplin使用WebDAV同步" class="headerlink" title="3.2 Joplin使用WebDAV同步"></a>3.2 Joplin使用WebDAV同步</h3><p>WebDAV 可以自建，或使用支持 WebDAV 的云盘，另外 NAS（如群晖）通常也支持 WebDAV。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135855.png"></p><p><strong>Nextcloud：</strong>Nextcloud是一个开源的免费的自建个人云存储方案，要启用 Nextcloud 同步，你需要在 Nextcloud 中创建一个目录（比如：Joplin），在左下角的“设置”中获取 WebDAV 的 URL，在 Joplin 同步设置中，填入 WebDAV URL、用户名和密码。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135902.png"></p><p>有关于Nextcloud安装与使用教程，请参考：<a href="https://wzfou.com/nextcloud-lixian/">Oneinstack安装NextCloud以及使用Aria2离线下载和ocDownloader插件配置</a>。</p><p><strong>坚果云：</strong>首次同步时会因为 WebDAV 短时间内的大量请求被坚果云临时限制，坚果云提示为“Too many requests”，这个封锁会持续大约6小时。同步之前，在 Joplin 的“工具” &gt; “选项” &gt; “同步” &gt; “高级选项”中，将“最大并发连接数”改为1可以有效避免。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135753.png"></p><p>关于坚果云的使用方法，请参考：<a href="https://wzfou.com/upyun-jianguoyun/">巧用又拍云FTP和坚果云WebDAV-打造个人文件备份和数据云存储</a>。</p><h2 id="四、Joplin导入与导出"><a href="#四、Joplin导入与导出" class="headerlink" title="四、Joplin导入与导出"></a>四、Joplin导入与导出</h2><p>Joplin可以很方便地支持从Evernote（印象笔记）导入，方法如下：</p><p>从 Evernote（印象笔记）导入：</p><blockquote><p>打开 Evernote，右击要导出的笔记本，选择“导出笔记“，导出 .enex 格式文件。</p><p>在 Joplin 中，选择“文件” &gt; “导入” &gt; “ENEX – Evernote导出文件（Markdown）”即可导入。</p></blockquote><p>从 Markdown 文件导入：</p><blockquote><p>使用 Joplin 可以轻松导入 Markdown 文件或整个目录，选择“文件” &gt; “导入” &gt; “MD – Markdown（文件/目录）”导入即可。</p></blockquote><p>从其他应用程序导入：</p><blockquote><p>通常，很多应用程序都支持导入到 Evernote 中，所以从其他应用程序导入的思路是先导入 Evernote，再导出 .enex 文件，最后导入 Joplin 中。</p></blockquote><p>如下图：</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135909.png"></p><p>如果哪天你不想使用Joplin了，也可以很方便地导出。Joplin 支持多种导出格式，导出格式均为标准格式，可以在不依赖 Joplin 的情况下查看、编辑，部分格式支持无损/有损重新导入：</p><blockquote><p>JEX：Joplin 的无损导出格式，包含所有的元数据如标签、更新时间等。JEX是实际上是一个tar文件，可以直接解压出 MarkDown 文件。这种格式常用于备份，<strong>可以无损重新导入</strong>。</p><p>RAW：同 JEX 格式相似，只是数据会保存为目录，并且每个笔记都会导出为一个单独的文件。<strong>可以无损重新导入</strong>。</p><p>JSON：导出为 JSON 格式的文件。不支持重新导入。</p><p>MD：按照笔记本的分级结构导出为目录，每条笔记在对应的目录中导出为 Markdown 格式的文件，目录名和文件名与原笔记本对应，此种格式易于读取，但是导出的文件将丢失元数据。可以有损导入（丢失元数据）。</p><p>HTML：导出为网页文件，将 Markdown 格式转为 html 标签，带有样式。不支持导入。</p><p>PDF：将单个笔记导出为 PDF 格式的文件。不支持导入。</p></blockquote><p>如下图：</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135801.png"></p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>免费开源的笔记Joplin无论在功能上还是使用体验上基本上与Evernote印象笔记无异了，在隐私保护方面做得非常好，特别适合那些想要保存个人信息笔记的用户。</p><p>使用免费开源的笔记Joplin最大的问题就是找好同步的网盘或者云存储，另外强烈建议大家在对Joplin的设置进行调整时先备份一个，以免同步后删除了所有的笔记。</p><p>编辑整理 From：<a href="https://wzfou.com/joplin/">挖站否</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Evernote笔记是我们常用的一个笔记服务，国内叫印象笔记，免费版本的Evernote笔记其实已经足够我们使用了，但是对于重度的笔记用户，Evernote某些功能可能需要付费升级才可以使用，而且你的笔记是存放在Evernote的服务器上。&lt;/p&gt;
&lt;p&gt;有些同学可能觉得放</summary>
      
    
    
    
    <category term="note" scheme="https://blog.17lai.site/categories/note/"/>
    
    
    <category term="Linux" scheme="https://blog.17lai.site/tags/Linux/"/>
    
    <category term="note" scheme="https://blog.17lai.site/tags/note/"/>
    
    <category term="Joplin" scheme="https://blog.17lai.site/tags/Joplin/"/>
    
    <category term="Docker" scheme="https://blog.17lai.site/tags/Docker/"/>
    
    <category term="Webdav" scheme="https://blog.17lai.site/tags/Webdav/"/>
    
  </entry>
  
  <entry>
    <title>Joplin 入门指南&amp;实践方案</title>
    <link href="https://blog.17lai.site/note/2021-09-09-play-with-joplin/"/>
    <id>https://blog.17lai.site/note/2021-09-09-play-with-joplin/</id>
    <published>2021-09-09T03:25:00.000Z</published>
    <updated>2021-10-11T12:25:08.467Z</updated>
    
    <content type="html"><![CDATA[<p>Evernote笔记是我们常用的一个笔记服务，国内叫印象笔记，免费版本的Evernote笔记其实已经足够我们使用了，但是对于重度的笔记用户，Evernote某些功能可能需要付费升级才可以使用，而且你的笔记是存放在Evernote的服务器上。</p><p>有些同学可能觉得放在Evernote服务器上的笔记会不安全，况且有些隐私性很强的笔记确实不适合放在公共的服务器上。此时，你需要一个可以保护个人隐私同时还可以与Evernote笔记功能相媲美的免费笔记服务：Joplin，它是一款免费开源的笔记软件。</p><p>Joplin跨平台支持，包括PC桌面端，移动端，甚至提供了命令行版本，原生支持 markdown 格式，搜索速度快，可以通过其他第三方同步工具 (Dropbox/NextCloud/OneDrive/WebDAV/etc) 进行备份以及同步 ，支持浏览器Web clipper即网页剪贴。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135705.png"></p><p>Evernote笔记该有的功能Joplin都有了，如果你不想掏钱购买Evernote付费版本，Joplin将是最佳的替代品。更多的自建服务还有：</p><ol><li> <a href="https://wzfou.com/chevereto/">Chevereto免费相册程序安装与使用-免费自建图床和公共图片相册</a></li><li> <a href="https://wzfou.com/tt-rss/">自建RSS阅读器Tiny Tiny RSS安装和配置自动更新,全文RSS,更换主题,手机RSS登录</a></li><li> <a href="https://wzfou.com/bitwarden-rs/">放弃付费1Password改用免费开源的bitwarden_rs自建密码管理系统-安装,使用和备份</a></li></ol><p><strong>PS：更新记录</strong></p><blockquote><p>1、平时经常要校对文本，以及有大量的文件需要在电脑和移动硬盘同步，可以试试这些免费的同步对比工具：<a href="https://wzfou.com/files-sync-softs/">八大免费的文件对比同步工具-免费文件对比分析与复制同步备份软件</a>。2021.3.24</p><p>2、对于1Password这类的密码管理软件重度依赖，但是苦于囊中羞涩的话，不防自建密码管理平台：<a href="https://wzfou.com/bitwarden-mima/">Bitwarden自建密码存储系统图文教程-开源免费的bitwarden_rs安装与使用</a>。2020.10.10</p></blockquote><h2 id="一、Joplin安装和使用"><a href="#一、Joplin安装和使用" class="headerlink" title="一、Joplin安装和使用"></a>一、Joplin安装和使用</h2><p>网站：</p><ol><li> <a href="https://joplinapp.org/">https://joplinapp.org/</a></li></ol><p>直接到官网下载Joplin安装包，安装好了就可以启动Joplin了，以下是Joplin的软件界面，分成三栏，和我们平时熟悉的笔记软件是一样的。（点击放大）</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135716.png"></p><p>这是Joplin的编辑器，支持 MarkDown，图片、数学公式、复选框等 MarkDown 语法。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135813.png"></p><p>不习惯MarkDown，直接切换为可视编辑即可。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135820.png"></p><p>在Joplin的设置选项中还提供了非常多的MarkDown的插件，对于MarkDown深度用户来是一个福音。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135723.png"></p><h2 id="二、Joplin的特色功能"><a href="#二、Joplin的特色功能" class="headerlink" title="二、Joplin的特色功能"></a>二、Joplin的特色功能</h2><h3 id="2-1-笔记历史版本"><a href="#2-1-笔记历史版本" class="headerlink" title="2.1 笔记历史版本"></a>2.1 笔记历史版本</h3><p>Joplin提供了笔记历史版本，让你轻松地恢复任意时间的笔记版本。在“工具” &gt; “选项” &gt; “笔记历史”中启用，以及设置保留的笔记历史天数。要查看笔记的历史版本，点击编辑器上方的笔记属性图标，然后选择恢复：</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135828.png"></p><h3 id="2-2-E2EE安全加密"><a href="#2-2-E2EE安全加密" class="headerlink" title="2.2 E2EE安全加密"></a>2.2 E2EE安全加密</h3><p>在同步过程中，笔记本、笔记、标签等均以纯文本文件的方式同步，如果你还觉得不安全，你可以开启端到端加密（E2EE），把文件加密后同步到云端。由于 Joplin 的去中心化，密码必须手动在每个终端设置。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135736.png"></p><p><strong>注意：不要在多个设备上同时启用加密，否则可能会造成加密密钥问题。特别提醒：****加密之前，先将笔记导出JEX备份一份，以防万一。</strong></p><h3 id="2-3-Joplin手机APP"><a href="#2-3-Joplin手机APP" class="headerlink" title="2.3 Joplin手机APP"></a>2.3 Joplin手机APP</h3><p>Joplin可以直接在各大应用市场上下载，使用起来也很方便。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135835.png"></p><h3 id="2-4-外部编辑器"><a href="#2-4-外部编辑器" class="headerlink" title="2.4 外部编辑器"></a>2.4 外部编辑器</h3><p>Joplin自带的编辑已经非常强大的，如果你想要使用自己的编辑器来编辑笔记也是可以的，包括 文本编辑器（如 Notepad++）、 Markdown 编辑器（如 Typora）等。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135928.png"></p><p>通过 Ctrl+E，或 Joplin 编辑器上方的图标（如下图）从外部编辑器打开笔记，从外部编辑器打开后，Joplin 将持续监控该文件，当你从外部编辑机保存后，Joplin 将自动同步最新变动。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135841.png"></p><p>你可以在“工具” &gt; “选项” &gt; “通用选项”中指定编辑器的路径。</p><h2 id="三、Joplin同步与备份"><a href="#三、Joplin同步与备份" class="headerlink" title="三、Joplin同步与备份"></a>三、Joplin同步与备份</h2><p>Joplin与其它的笔记软件很大的不同就是没有存储功能，你需要将Joplin的笔记放在自己的主机或者网盘里，幸运的是Joplin支持多种方式的云同步：Nextcloud / Dropbox / OneDrive / File system / WebDAV。</p><h3 id="3-1-Joplin免费网盘同步"><a href="#3-1-Joplin免费网盘同步" class="headerlink" title="3.1 Joplin免费网盘同步"></a>3.1 Joplin免费网盘同步</h3><p>目前，Joplin支持Dropbox 、OneDrive 网盘同步，在同步选项中选择OneDrive，然后就会打开认证。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135739.png"></p><p>同意验证。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135848.png"></p><p>与 OneDrive 同步时，Joplin 会在 OneDrive 中创建一个子目录：<code>/Apps/Joplin</code>，Joplin 仅有此目录的读写权限。如下图：</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135746.png"></p><h3 id="3-2-Joplin使用WebDAV同步"><a href="#3-2-Joplin使用WebDAV同步" class="headerlink" title="3.2 Joplin使用WebDAV同步"></a>3.2 Joplin使用WebDAV同步</h3><p>WebDAV 可以自建，或使用支持 WebDAV 的云盘，另外 NAS（如群晖）通常也支持 WebDAV。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135855.png"></p><p><strong>Nextcloud：</strong>Nextcloud是一个开源的免费的自建个人云存储方案，要启用 Nextcloud 同步，你需要在 Nextcloud 中创建一个目录（比如：Joplin），在左下角的“设置”中获取 WebDAV 的 URL，在 Joplin 同步设置中，填入 WebDAV URL、用户名和密码。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135902.png"></p><p>有关于Nextcloud安装与使用教程，请参考：<a href="https://wzfou.com/nextcloud-lixian/">Oneinstack安装NextCloud以及使用Aria2离线下载和ocDownloader插件配置</a>。</p><p><strong>坚果云：</strong>首次同步时会因为 WebDAV 短时间内的大量请求被坚果云临时限制，坚果云提示为“Too many requests”，这个封锁会持续大约6小时。同步之前，在 Joplin 的“工具” &gt; “选项” &gt; “同步” &gt; “高级选项”中，将“最大并发连接数”改为1可以有效避免。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135753.png"></p><p>关于坚果云的使用方法，请参考：<a href="https://wzfou.com/upyun-jianguoyun/">巧用又拍云FTP和坚果云WebDAV-打造个人文件备份和数据云存储</a>。</p><h2 id="四、Joplin导入与导出"><a href="#四、Joplin导入与导出" class="headerlink" title="四、Joplin导入与导出"></a>四、Joplin导入与导出</h2><p>Joplin可以很方便地支持从Evernote（印象笔记）导入，方法如下：</p><p>从 Evernote（印象笔记）导入：</p><blockquote><p>打开 Evernote，右击要导出的笔记本，选择“导出笔记“，导出 .enex 格式文件。</p><p>在 Joplin 中，选择“文件” &gt; “导入” &gt; “ENEX – Evernote导出文件（Markdown）”即可导入。</p></blockquote><p>从 Markdown 文件导入：</p><blockquote><p>使用 Joplin 可以轻松导入 Markdown 文件或整个目录，选择“文件” &gt; “导入” &gt; “MD – Markdown（文件/目录）”导入即可。</p></blockquote><p>从其他应用程序导入：</p><blockquote><p>通常，很多应用程序都支持导入到 Evernote 中，所以从其他应用程序导入的思路是先导入 Evernote，再导出 .enex 文件，最后导入 Joplin 中。</p></blockquote><p>如下图：</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135909.png"></p><p>如果哪天你不想使用Joplin了，也可以很方便地导出。Joplin 支持多种导出格式，导出格式均为标准格式，可以在不依赖 Joplin 的情况下查看、编辑，部分格式支持无损/有损重新导入：</p><blockquote><p>JEX：Joplin 的无损导出格式，包含所有的元数据如标签、更新时间等。JEX是实际上是一个tar文件，可以直接解压出 MarkDown 文件。这种格式常用于备份，<strong>可以无损重新导入</strong>。</p><p>RAW：同 JEX 格式相似，只是数据会保存为目录，并且每个笔记都会导出为一个单独的文件。<strong>可以无损重新导入</strong>。</p><p>JSON：导出为 JSON 格式的文件。不支持重新导入。</p><p>MD：按照笔记本的分级结构导出为目录，每条笔记在对应的目录中导出为 Markdown 格式的文件，目录名和文件名与原笔记本对应，此种格式易于读取，但是导出的文件将丢失元数据。可以有损导入（丢失元数据）。</p><p>HTML：导出为网页文件，将 Markdown 格式转为 html 标签，带有样式。不支持导入。</p><p>PDF：将单个笔记导出为 PDF 格式的文件。不支持导入。</p></blockquote><p>如下图：</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909135801.png"></p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>免费开源的笔记Joplin无论在功能上还是使用体验上基本上与Evernote印象笔记无异了，在隐私保护方面做得非常好，特别适合那些想要保存个人信息笔记的用户。</p><p>使用免费开源的笔记Joplin最大的问题就是找好同步的网盘或者云存储，另外强烈建议大家在对Joplin的设置进行调整时先备份一个，以免同步后删除了所有的笔记。</p><p>编辑整理 From：<a href="https://wzfou.com/joplin/">挖站否</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Evernote笔记是我们常用的一个笔记服务，国内叫印象笔记，免费版本的Evernote笔记其实已经足够我们使用了，但是对于重度的笔记用户，Evernote某些功能可能需要付费升级才可以使用，而且你的笔记是存放在Evernote的服务器上。&lt;/p&gt;
&lt;p&gt;有些同学可能觉得放</summary>
      
    
    
    
    <category term="note" scheme="https://blog.17lai.site/categories/note/"/>
    
    
    <category term="Linux" scheme="https://blog.17lai.site/tags/Linux/"/>
    
    <category term="note" scheme="https://blog.17lai.site/tags/note/"/>
    
    <category term="Joplin" scheme="https://blog.17lai.site/tags/Joplin/"/>
    
    <category term="Docker" scheme="https://blog.17lai.site/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>为知笔记私有化Docker部署</title>
    <link href="https://blog.17lai.site/note/2021-09-09-deploy-wiznote-docker-on-nas/"/>
    <id>https://blog.17lai.site/note/2021-09-09-deploy-wiznote-docker-on-nas/</id>
    <published>2021-09-09T01:25:00.000Z</published>
    <updated>2021-10-11T12:25:08.463Z</updated>
    
    <content type="html"><![CDATA[<p>登陆NAS，打开套件中心，搜索docker，并安装。</p><p>搜索wiznote，找到wiznote/wizserver，双击下载</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909114640.png"></p><p>在NAS中创建共享目录，用于存放笔记数据</p><ol><li>启动File Station</li><li>在docker目录下创建文件夹： wiz</li><li>在wiz文件夹下创建文件夹：data <img src="https://cimg1.17lai.site/data/2021/09/0920210909114704.png"></li><li>双击创建容器，启用资源限制，设置为内存限制4096MB，官方介绍说需要4G内存 <img src="https://cimg1.17lai.site/data/2021/09/0920210909114710.jpeg"></li><li>高级设置，启动自动重新启动</li><li>卷设置，使用刚才我们创建的data目录进行配置，装载路径<code>/wiz/storage</code>，<code>docker/wiz/config</code>装载路径<code>/wiz/app/wizserver/config</code> <img src="https://cimg1.17lai.site/data/2021/09/0920210909114724.png"></li><li>网络设置不动，端口设置添加映射：8888映射80端口（8888可以随便设置，跟访问地址有关）</li></ol><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909114731.png"></p><ol start="8"><li>设置环境变量 <img src="https://cimg1.17lai.site/data/2021/09/0920210909114732.png"> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">SEARCH</span><span class="token operator">=</span>true <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>直接应用，启动docker，然后就静静的等待吧，可以看看镜像的日志，看到这些基本上就差不多启动好了（最新的镜像在NAS上首次启动非常慢，本人等了一个多小时才完全启动完毕，在本地安装速度非常快）<img src="https://cimg1.17lai.site/data/2021/09/0920210909114738.jpeg"></li><li>通过 <code>http://NAS的IP:8888</code>，进行访问，就可以看到已经启动完成 <img src="https://cimg1.17lai.site/data/2021/09/0920210909114744.jpeg" alt="为知笔记启动界面"></li></ol><blockquote><p>默认管理员账号：<a href="mailto:admin@wiz.cn">admin@wiz.cn</a>，密码：123456</p><p>管理后台登陆地址：<a href="http://IP地址:端口/wapp/pages/admin">http://IP地址:端口/wapp/pages/admin</a></p></blockquote><h2 id="NAS开启SSH"><a href="#NAS开启SSH" class="headerlink" title="NAS开启SSH"></a>NAS开启SSH</h2><p>首先在NAS上启动SSH</p><p>登陆NAS，打开<code>控制面板-终端机和SNMP</code>，在<code>启动SSH功能</code>前打上勾</p><p>打开命令行，输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> NAS管理员账号@NAS的IP地址 ssh端口号默认是22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到提示符，输入账号的密码，输入时不可见，输入完成按回车，看到命令行提示符变了，登陆成功。</p><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><p>在命令行中输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> docker <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能提示输入密码，就输入NAS管理员的密码即可，显示列表，查看到如下列表，找到其中运行了为知笔记的一行</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909114805.png"></p><p>复制为知笔记的<code>CONTAINER ID</code>，然后再输入如下命令并回车：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> docker <span class="token builtin class-name">exec</span> -it 粘贴刚复制好的ID号 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>至此进入到容器中</p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>输入如下命令打开配置文件进行编辑：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /wiz/app/wizserver/config/default.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>vi命令的具体使用方法请自行百度，保存好后退出，重启容器生效。</p><p>进入docker，修改文件/wiz/wizserver/app/config/default.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"as"</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token property">"admin"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"admin@wiz.cn"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token property">"share"</span><span class="token operator">:</span> <span class="token punctuation">{</span>       <span class="token property">"admin"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"admin@wiz.cn"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token property">"enableHttps"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>       <span class="token property">"enableSubDomain"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>       <span class="token property">"appShareUrl"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1:5001"</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>127.0.0.1:5001</code>修改为自己的服务器访问地址，可以给docker做个端口映射（因为群晖NAS占用了5001端口），譬如映射8889端口到容器的5001端口，则设置为<code>xxx.xxx.xxx.xxx:8889</code>，分享后的链接即为该链接。</p><p>在NAS上可以用反向代理来解决二级域名的问题。</p><p>分享功能需要用户绑定手机，并完成认证，在docker中登陆数据库，并修改数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入密码，密码在docker中<code>/wiz/wizserver/app/config/default.json</code>中查看</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"mysql"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"as"</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token property">"host"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>   <span class="token property">"user"</span><span class="token operator">:</span> <span class="token string">"root"</span><span class="token punctuation">,</span>   <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"******************"</span><span class="token punctuation">,</span>   <span class="token property">"database"</span><span class="token operator">:</span> <span class="token string">"wizasent"</span><span class="token punctuation">,</span>   <span class="token property">"connectionLimit"</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>   <span class="token property">"connectTimeout"</span><span class="token operator">:</span> <span class="token number">60000</span><span class="token punctuation">,</span>   <span class="token property">"aquireTimeout"</span><span class="token operator">:</span> <span class="token number">60000</span><span class="token punctuation">,</span>   <span class="token property">"waitForConnections"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>password</code>就是密码，进入mysql控制台后，执行以下命令：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> wizasent<span class="token punctuation">;</span><span class="token keyword">update</span> wiz_user <span class="token keyword">set</span> MOBILE<span class="token operator">=</span><span class="token string">'你的手机号'</span><span class="token punctuation">,</span> MOBILE_VERIFY<span class="token operator">=</span><span class="token string">'1'</span> <span class="token keyword">where</span> ID<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>web端登陆为知笔记，并修改默认账号后，修改后的账号无法登陆管理后台，需要做以下配置，修改文件<code>/wiz/wizserver/app/config/default.json</code>，找到以下代码：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"as"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"admin"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"admin@wiz.cn"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"share"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"admin"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"admin@wiz.cn"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"enableHttps"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"enableSubDomain"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"appShareUrl"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1:5001"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>admin@wiz.cn</code>修改为修改后的账号。</p><p>登陆NAS，打开<code>控制面板-应用程序门户-反向代理</code></p><p>点击新增，然后输入如下：</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909114813.png"></p><p>实际测试来源协议选择https时只有网页端可以登陆，客户端无法登陆，暂时还是选择http为好，也可以网页端通过https登陆，客户端通过http登陆，配置两个不同的端口（记得要在路由上配置端口映射）。</p><p>修改<code>default.json</code></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"debug"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"enableHttps"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"storage"</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token property">"__comments"</span><span class="token operator">:</span> <span class="token string">"oss|local|s3|cos"</span><span class="token punctuation">,</span>     <span class="token property">"use"</span><span class="token operator">:</span> <span class="token string">"local"</span><span class="token punctuation">,</span>     <span class="token property">"oss"</span><span class="token operator">:</span> <span class="token punctuation">{</span>       <span class="token property">"bucket"</span><span class="token operator">:</span> <span class="token string">"data_root"</span><span class="token punctuation">,</span>       <span class="token property">"region"</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>       <span class="token property">"accessKeyId"</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>       <span class="token property">"accessKeySecret"</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>       <span class="token property">"internal"</span><span class="token operator">:</span> <span class="token boolean">false</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>enableHttps</code>配置成<code>true</code></p><p>重启服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /wiz/app/wizserverpm2 restart all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>删除<code>/wiz/storage/index/.search</code>文件和<code>/wiz/storage/index/nodes</code>目录</p><p>重启容器</p><p>链接数据库，执行下列SQL</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> wizksent<span class="token punctuation">.</span>wiz_kb_stat <span class="token keyword">set</span> index_new_status<span class="token operator">=</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入容器，执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /wiz/app/wizserverpm2 start app.js --name<span class="token operator">=</span><span class="token string">"index2"</span>  -f -- -c <span class="token number">1</span> -i <span class="token number">1</span> -t <span class="token number">2</span> -s indexpm2 start app.js --name<span class="token operator">=</span><span class="token string">"index2"</span>  -f --  -s copy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pm2 logs index2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载官方插件，并安装到Chrome中</p><p><a href="http://www.wiz.cn/downloads-webclipperchrome.html">http://www.wiz.cn/downloads-webclipperchrome.html</a></p><p>在浏览器中输入<code>chrome://extensions/</code>打开插件列表，开启开发者模式</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909114820.png"></p><p>看ID号，在浏览器中输入<code>chrome://inspect/#extensions</code>在打开的列表中找到<code>WizClipper</code>，点击<code>inspect</code>，开启调试窗口。</p><p>选择<code>Sources</code>标签，并打开文件<code>Scripts\wiz\WizConstant.js</code></p><p>在代码中查看<code>note.wiz.cn</code>和<code>api.wiz.cn</code>的网址全部替换成自己私有云的地址，实测，登陆没问题，保存失败。</p><p><img src="https://cimg1.17lai.site/data/2021/09/0920210909114826.jpeg"></p><h2 id="管理功能"><a href="#管理功能" class="headerlink" title="管理功能"></a>管理功能</h2><ol><li>增加重建索引功能，以备不时之需</li><li>增加备份与恢复功能</li><li>增加markdown语法扩展： flow（流程图）、sequence（时序图）、mermaid（流程图、时序图、甘特图）、LaTeX（公式）</li><li>增加手动配置分享链接</li><li>支持社交绑定的配置</li><li>支持对象存储或webdav存储</li></ol><h2 id="Web-amp-Mac客户端"><a href="#Web-amp-Mac客户端" class="headerlink" title="Web&amp;Mac客户端"></a>Web&amp;Mac客户端</h2><ol><li>增加自定义模板</li><li>增加偏好设置，自定义快捷键（主要是编辑和预览切换的快捷键非常不适应）</li><li>增加同步预览模式，可以参考下Typora，Bear都不错</li><li>增加https访问方式</li><li>支持导出jpg、png、docx格式</li></ol><h2 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h2><ol><li>增加支持私有云登陆</li></ol><p>【部署环境】<br>群晖DS1517+（DSM6.2.2）<br>容器分配内存4G，CPU*2核</p><p>【出现的问题】</p><ol><li>网页版上提示，自动保存失败，网络错误，请尽快保存（最后发现是时区不通道导致的，第8点解决了此问题）</li><li>所有社交平台账号无法绑定</li><li>mywiz邮箱不可修改</li><li>绑定手机无法收到验证码，即无法绑定手机（通过修改数据库搞定）</li><li>存储设置功能多余（因为已经本地化部署了），改成数据备份/恢复就好了</li><li>支付信息是支付到为知去的，这个功能容易产生误解（如果多人使用的话）</li><li> docker容器的时区与宿主机时区不同，添加环境变量解决，TZ=Asia/Shanghai</li></ol><p>编辑整理 From： <a href="https://mp.weixin.qq.com/s/JQBUqdq1YNsGqolQ0jjfNg">大大木头 [为知社区]</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;登陆NAS，打开套件中心，搜索docker，并安装。&lt;/p&gt;
&lt;p&gt;搜索wiznote，找到wiznote/wizserver，双击下载&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cimg1.17lai.site/data/2021/09/0920210909114</summary>
      
    
    
    
    <category term="note" scheme="https://blog.17lai.site/categories/note/"/>
    
    
    <category term="note" scheme="https://blog.17lai.site/tags/note/"/>
    
    <category term="wiz" scheme="https://blog.17lai.site/tags/wiz/"/>
    
    <category term="Docker" scheme="https://blog.17lai.site/tags/Docker/"/>
    
    <category term="linux" scheme="https://blog.17lai.site/tags/linux/"/>
    
    <category term="Nas" scheme="https://blog.17lai.site/tags/Nas/"/>
    
    <category term="群晖" scheme="https://blog.17lai.site/tags/%E7%BE%A4%E6%99%96/"/>
    
  </entry>
  
</feed>
