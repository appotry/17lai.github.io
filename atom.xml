<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夜法之书</title>
  
  <subtitle>做一个深度思考的人</subtitle>
  <link href="https://blog.17lai.fun/atom.xml" rel="self"/>
  
  <link href="https://blog.17lai.fun/"/>
  <updated>2021-09-15T11:49:20.306Z</updated>
  <id>https://blog.17lai.fun/</id>
  
  <author>
    <name>夜法之书</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>1.5 万字 CSS 基础拾遗（核心知识、常见需求）</title>
    <link href="https://blog.17lai.fun/web/2021-09-15-ccs-basec-knowledge/"/>
    <id>https://blog.17lai.fun/web/2021-09-15-ccs-basec-knowledge/</id>
    <published>2021-09-15T11:25:00.000Z</published>
    <updated>2021-09-15T11:49:20.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-5-万字-CSS-基础拾遗（核心知识、常见需求）"><a href="#1-5-万字-CSS-基础拾遗（核心知识、常见需求）" class="headerlink" title="1.5 万字 CSS 基础拾遗（核心知识、常见需求）"></a>1.5 万字 CSS 基础拾遗（核心知识、常见需求）</h2><p>本篇文章围绕了 CSS 的核心知识点和项目中常见的需求来展开。虽然行文偏长，但偏基础，适合初级中级前端阅读，阅读的时候请适当跳过已经掌握的部分。</p><p>这篇文章断断续续写了比较久，也参考了许多优秀的文章，但或许文章里还是存在不好或不对的地方，请多多指教，可以评论里直接提出来哈。</p><p>小tip：后续内容更精彩哦。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912192327.png"></p><h2 id="核心概念和知识点"><a href="#核心概念和知识点" class="headerlink" title="核心概念和知识点"></a>核心概念和知识点</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>CSS 的核心功能是将 CSS 属性设定为特定的值。一个属性与值的键值对被称为<strong>声明</strong>（declaration）。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而如果将一个或者多个声明用 <code>{}</code> 包裹起来后，那就组成了一个<strong>声明块</strong>（declaration block）。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>声明块如果需要作用到对应的 HTML 元素，那还需要加上<strong>选择器</strong>。选择器和声明块组成了<strong>CSS 规则集</strong>（CSS ruleset），常简称为 CSS 规则。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914005346.png"></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">span</span> <span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>“</p><p>规则集中最后一条声明可以省略分号，但是并不建议这么做，因为容易出错。</p></blockquote><p>CSS 中的<strong>注释</strong>：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 单行注释 */</span><span class="token comment">/*      多行      注释  */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 CSS 文件中，除了注释、CSS 规则集以及 @规则 外，定义的一些别的东西都将被浏览器忽略。</p><h3 id="规则"><a href="#规则" class="headerlink" title="@规则"></a>@规则</h3><p>CSS 规则是样式表的主体，通常样式表会包括大量的规则列表。但有时候也需要在样式表中包括其他的一些信息，比如字符集，导入其它的外部样式表，字体等，这些需要专门的语句表示。</p><p>而 @规则 就是这样的语句。CSS 里包含了以下 @规则：</p><ul><li>@namespace 告诉 CSS 引擎必须考虑XML命名空间。</li><li>@media, 如果满足媒体查询的条件则条件规则组里的规则生效。</li><li>@page, 描述打印文档时布局的变化.</li><li>@font-face, 描述将下载的外部的字体。</li><li>@keyframes, 描述 CSS 动画的关键帧。</li><li>@document, 如果文档样式表满足给定条件则条件规则组里的规则生效。 (推延至 CSS Level 4 规范)</li></ul><p>除了以上这几个之外，下面还将对几个比较生涩的 @规则 进行介绍。</p><h4 id="charset"><a href="#charset" class="headerlink" title="@charset"></a>@charset</h4><p>@charset[1] 用于定义样式表使用的字符集。它必须是样式表中的第一个元素。如果有多个 <code>@charset</code> 被声明，只有第一个会被使用，而且不能在HTML元素或HTML页面的 <code>&lt;style&gt;</code> 元素内使用。</p><p>注意：值必须是双引号包裹，且和</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@charset</span> <span class="token string">"UTF-8"</span><span class="token punctuation">;</span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>平时写样式文件都没写 @charset 规则，那这个 CSS 文件到底是用的什么字符编码的呢？</p><p>某个样式表文件到底用的是什么字符编码，浏览器有一套识别顺序（优先级由高到低）：</p><ul><li>文件开头的 Byte order mark[2] 字符值，不过一般编辑器并不能看到文件头里的 BOM 值；</li><li>HTTP 响应头里的 <code>content-type</code> 字段包含的 <code>charset</code> 所指定的值，比如：  <code>Content-Type: text/css; charset=utf-8  </code><br>  `</li><li>CSS 文件头里定义的 @charset 规则里指定的字符编码；</li><li><code>&lt;link&gt;</code> 标签里的 charset 属性，该条已在 HTML5 中废除；</li><li>默认是 <code>UTF-8</code>。</li></ul><h4 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h4><p>@import[3] 用于告诉 CSS 引擎引入一个外部样式表。</p><p>link 和 @import 都能导入一个样式文件，它们有什么区别嘛？</p><ul><li>link 是 HTML 标签，除了能导入 CSS 外，还能导入别的资源，比如图片、脚本和字体等；而 @import 是 CSS 的语法，只能用来导入 CSS；</li><li>link 导入的样式会在页面加载时同时加载，@import 导入的样式需等页面加载完成后再加载；</li><li>link 没有兼容性问题，@import 不兼容 ie5 以下；</li><li>link 可以通过 JS 操作 DOM 动态引入样式表改变样式，而@import不可以。</li></ul><h4 id="supports"><a href="#supports" class="headerlink" title="@supports"></a>@supports</h4><p>@supports[4] 用于查询特定的 CSS 是否生效，可以结合 not、and 和 or 操作符进行后续的操作。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 如果支持自定义属性，则把 body 颜色设置为变量 varName 指定的颜色 */</span>  <span class="token atrule"><span class="token rule">@supports</span> <span class="token punctuation">(</span><span class="token property">--foo</span><span class="token punctuation">:</span> green<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>      <span class="token selector">body</span> <span class="token punctuation">{</span>          <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--varName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><p>层叠样式表，这里的层叠怎么理解呢？其实它是 CSS 中的核心特性之一，用于合并来自多个源的属性值的算法。比如说针对某个 HTML 标签，有许多的 CSS 声明都能作用到的时候，那最后谁应该起作用呢？层叠性说的大概就是这个。</p><p>针对不同源的样式，将按照如下的顺序进行层叠，越往下优先级越高：</p><ul><li>用户代理样式表中的声明(例如，浏览器的默认样式，在没有设置其他样式时使用)。</li><li>用户样式表中的常规声明(由用户设置的自定义样式。由于 Chrome 在很早的时候就放弃了用户样式表的功能，所以这里将不再考虑它的排序。)。</li><li>作者样式表中的常规声明(这些是我们 Web 开发人员设置的样式)。</li><li>作者样式表中的 !important 声明。</li><li>用户样式表中的 !important 声明S。</li></ul><p>理解层叠性的时候需要结合 CSS 选择器的优先级以及继承性来理解。比如针对同一个选择器，定义在后面的声明会覆盖前面的；作者定义的样式会比默认继承的样式优先级更高。</p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>CSS 选择器无疑是其核心之一，对于基础选择器以及一些常用伪类必须掌握。下面列出了常用的选择器。 想要获取更多选择器的用法可以看 MDN CSS Selectors[5]。</p><h4 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h4><ul><li>标签选择器：<code>h1</code></li><li>类选择器：<code>.checked</code></li><li>ID 选择器：<code>#picker</code></li><li>通配选择器：<code>*</code></li></ul><p><strong>属性选择器</strong></p><ul><li><code>[attr]</code>：指定属性的元素；</li><li><code>[attr=val]</code>：属性等于指定值的元素；</li><li><code>[attr*=val]</code>：属性包含指定值的元素；</li><li><code>[attr^=val]</code> ：属性以指定值开头的元素；</li><li><code>[attr$=val]</code>：属性以指定值结尾的元素；</li><li><code>[attr~=val]</code>：属性包含指定值(完整单词)的元素(不推荐使用)；</li><li><code>[attr|=val]</code>：属性以指定值(完整单词)开头的元素(不推荐使用)；</li></ul><h4 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h4><ul><li>相邻兄弟选择器：<code>A + B</code></li><li>普通兄弟选择器：<code>A ~ B</code></li><li>子选择器：<code>A &gt; B</code></li><li>后代选择器：<code>A B</code></li></ul><h4 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h4><p><strong>条件伪类</strong></p><ul><li><code>:lang()</code>：基于元素语言来匹配页面元素；</li><li><code>:dir()</code>：匹配特定文字书写方向的元素；</li><li><code>:has()</code>：匹配包含指定元素的元素；</li><li><code>:is()</code>：匹配指定选择器列表里的元素；</li><li><code>:not()</code>：用来匹配不符合一组选择器的元素；</li></ul><p><strong>行为伪类</strong></p><ul><li><code>:active</code>：鼠标激活的元素；</li><li><code>:hover</code>： 鼠标悬浮的元素；</li><li><code>::selection</code>：鼠标选中的元素；</li></ul><p><strong>状态伪类</strong></p><ul><li><code>:target</code>：当前锚点的元素；</li><li><code>:link</code>：未访问的链接元素；</li><li><code>:visited</code>：已访问的链接元素；</li><li><code>:focus</code>：输入聚焦的表单元素；</li><li><code>:required</code>：输入必填的表单元素；</li><li><code>:valid</code>：输入合法的表单元素；</li><li><code>:invalid</code>：输入非法的表单元素；</li><li><code>:in-range</code>：输入范围以内的表单元素；</li><li><code>:out-of-range</code>：输入范围以外的表单元素；</li><li><code>:checked</code>：选项选中的表单元素；</li><li><code>:optional</code>：选项可选的表单元素；</li><li><code>:enabled</code>：事件启用的表单元素；</li><li><code>:disabled</code>：事件禁用的表单元素；</li><li><code>:read-only</code>：只读的表单元素；</li><li><code>:read-write</code>：可读可写的表单元素；</li><li><code>:blank</code>：输入为空的表单元素；</li><li><code>:current()</code>：浏览中的元素；</li><li><code>:past()</code>：已浏览的元素；</li><li><code>:future()</code>：未浏览的元素；</li></ul><p><strong>结构伪类</strong></p><ul><li><code>:root</code>：文档的根元素；</li><li><code>:empty</code>：无子元素的元素；</li><li><code>:first-letter</code>：元素的首字母；</li><li><code>:first-line</code>：元素的首行；</li><li><code>:nth-child(n)</code>：元素中指定顺序索引的元素；</li><li><code>:nth-last-child(n)</code>：元素中指定逆序索引的元素；；</li><li><code>:first-child</code>：元素中为首的元素；</li><li><code>:last-child</code> ：元素中为尾的元素；</li><li><code>:only-child</code>：父元素仅有该元素的元素；</li><li><code>:nth-of-type(n)</code>：标签中指定顺序索引的标签；</li><li><code>:nth-last-of-type(n)</code>：标签中指定逆序索引的标签；</li><li><code>:first-of-type</code> ：标签中为首的标签；</li><li><code>:last-of-type</code>：标签中为尾标签；</li><li><code>:only-of-type</code>：父元素仅有该标签的标签；</li></ul><h4 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h4><ul><li><code>::before</code>：在元素前插入内容；</li><li><code>::after</code>：在元素后插入内容；</li></ul><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912192225.png"></p><p>优先级就是分配给指定的 CSS 声明的一个权重，它由匹配的选择器中的每一种选择器类型的数值决定。为了记忆，可以把权重分成如下几个等级，数值越大的权重越高：</p><ul><li>10000：!important；</li><li>01000：内联样式；</li><li>00100：ID 选择器；</li><li>00010：类选择器、伪类选择器、属性选择器；</li><li>00001：元素选择器、伪元素选择器；</li><li>00000：通配选择器、后代选择器、兄弟选择器；</li></ul><p>可以看到内联样式（通过元素中 style 属性定义的样式）的优先级大于任何选择器；而给属性值加上 <code>!important</code> 又可以把优先级提至最高，就是因为它的优先级最高，所以需要谨慎使用它，以下有些使用注意事项：</p><ul><li>一定要优先考虑使用样式规则的优先级来解决问题而不是 !important；</li><li>只有在需要覆盖全站或外部 CSS 的特定页面中使用 !important；</li><li>永远不要在你的插件中使用 !important；</li><li>永远不要在全站范围的 CSS 代码中使用 !important；</li></ul><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912192218.jpeg"></p><p>在 CSS 中有一个很重要的特性就是子元素会继承父元素对应属性计算后的值。比如页面根元素 html 的文本颜色默认是黑色的，页面中的所有其他元素都将继承这个颜色，当申明了如下样式后，H1 文本将变成橙色。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">h1</span> <span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设想一下，如果 CSS 中不存在继承性，那么我们就需要为不同文本的标签都设置一下 color，这样一来的后果就是 CSS 的文件大小就会无限增大。</p><p>CSS 属性很多，但并不是所有的属性默认都是能继承父元素对应属性的，那哪些属性存在默认继承的行为呢？一定是那些不会影响到页面布局的属性，可以分为如下几类：</p><ul><li>字体相关：<code>font-family</code>、<code>font-style</code>、<code>font-size</code>、<code>font-weight</code> 等；</li><li>文本相关：<code>text-align</code>、<code>text-indent</code>、<code>text-decoration</code>、<code>text-shadow</code>、<code>letter-spacing</code>、<code>word-spacing</code>、<code>white-space</code>、<code>line-height</code>、<code>color</code> 等；</li><li>列表相关：<code>list-style</code>、<code>list-style-image</code>、<code>list-style-type</code>、<code>list-style-position</code> 等；</li><li>其他属性：<code>visibility</code>、<code>cursor</code> 等；</li></ul><p>对于其他默认不继承的属性也可以通过以下几个属性值来控制继承行为：</p><ul><li><code>inherit</code>：继承父元素对应属性的计算值；</li><li><code>initial</code>：应用该属性的默认值，比如 color 的默认值是 <code>#000</code>；</li><li><code>unset</code>：如果属性是默认可以继承的，则取 <code>inherit</code> 的效果，否则同 <code>initial</code>；</li><li><code>revert</code>：效果等同于 <code>unset</code>，兼容性差。</li></ul><h3 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h3><p>在 CSS 的世界中，会把内容按照从左到右、从上到下的顺序进行排列显示。正常情况下会把页面分割成一行一行的显示，而每行又可能由多列组成，所以从视觉上看起来就是从上到下从左到右，而这就是 CSS 中的流式布局，又叫文档流。文档流就像水一样，能够自适应所在的容器，一般它有如下几个特性：</p><ul><li>块级元素默认会占满整行，所以多个块级盒子之间是从上到下排列的；</li><li>内联元素默认会在一行里一列一列的排布，当一行放不下的时候，会自动切换到下一行继续按照列排布；</li></ul><p><strong>如何脱离文档流呢？</strong></p><p>脱流文档流指节点脱流正常文档流后，在正常文档流中的其他节点将忽略该节点并填补其原先空间。文档一旦脱流，计算其父节点高度时不会将其高度纳入，脱流节点不占据空间。有两种方式可以让元素脱离文档流：浮动和定位。</p><ul><li>使用浮动（float）会将元素脱离文档流，移动到容器左/右侧边界或者是另一个浮动元素旁边，该浮动元素之前占用的空间将被别的元素填补，另外浮动之后所占用的区域不会和别的元素之间发生重叠；</li><li>使用绝对定位（<code>position: absolute;</code>）或者固定定位（<code>position: fixed;</code>）也会使得元素脱离文档流，且空出来的位置将自动被后续节点填补。</li></ul><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><p>在 CSS 中任何元素都可以看成是一个盒子，而一个盒子是由 4 部分组成的：内容（content）、内边距（padding）、边框（border）和外边距（margin）。</p><p>盒模型有 2 种：标准盒模型和 IE 盒模型，本别是由 W3C 和 IExplore 制定的标准。</p><p>如果给某个元素设置如下样式：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #eee<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标准盒模型认为：盒子的实际尺寸 = 内容（设置的宽/高） + 内边距 + 边框</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912192143.png"></p><p>所以 <code>.box</code> 元素内容的宽度就为 <code>200px</code>，而实际的宽度则是 <code>width</code> + <code>padding-left</code> + <code>padding-right</code> + <code>border-left-width</code> + <code>border-right-width</code> = 200 + 10 + 10 + 1 + 1 = 222。</p><p>IE 盒模型认为：盒子的实际尺寸 = 设置的宽/高 = 内容 + 内边距 + 边框</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912192137.png"></p><p><code>.box</code> 元素所占用的实际宽度为 <code>200px</code>，而内容的真实宽度则是 <code>width</code> - <code>padding-left</code> - <code>padding-right</code> - <code>border-left-width</code> - <code>border-right-width</code> = 200 - 10 - 10 - 1 - 1 = 178。</p><p>现在高版本的浏览器基本上默认都是使用标准盒模型，而像 IE6 这种老古董才是默认使用 IE 盒模型的。</p><p>在  CSS3 中新增了一个属性 <code>box-sizing</code>，允许开发者来指定盒子使用什么标准，它有 2 个值：</p><ul><li><code>content-box</code>：标准盒模型；</li><li><code>border-box</code>：IE 盒模型；</li></ul><h3 id="视觉格式化模型"><a href="#视觉格式化模型" class="headerlink" title="视觉格式化模型"></a>视觉格式化模型</h3><p>视觉格式化模型（Visual formatting model）是用来处理和在视觉媒体上显示文档时使用的计算规则。CSS 中一切皆盒子，而视觉格式化模型简单来理解就是规定这些盒子应该怎么样放置到页面中去，这个模型在计算的时候会依赖到很多的因素，比如：盒子尺寸、盒子类型、定位方案（是浮动还是定位）、兄弟元素或者子元素以及一些别的因素。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912192137.jpeg"></p><p>Visual formatting model</p><p>从上图中可以看到视觉格式化模型涉及到的内容很多，有兴趣深入研究的可以结合上图看这个 W3C 的文档 Visual formatting model[6]。所以这里就简单介绍下盒子类型。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912192129.png"></p><p>盒子类型由 display 决定，同时给一个元素设置 display 后，将会决定这个盒子的 2 个显示类型（display type）：</p><ul><li>outer display type（对外显示）：决定了该元素本身是如何布局的，即参与何种格式化上下文；</li><li>inner display type（对内显示）：其实就相当于把该元素当成了容器，规定了其内部子元素是如何布局的，参与何种格式化上下文；</li></ul><h4 id="outer-display-type"><a href="#outer-display-type" class="headerlink" title="outer display type"></a>outer display type</h4><p>对外显示方面，盒子类型可以分成 2 类：block-level box（块级盒子） 和 inline-level box（行内级盒子）。</p><p>依据上图可以列出都有哪些块级和行内级盒子：</p><ul><li>块级盒子：display 为 block、list-item、table、flex、grid、flow-root 等；</li><li>行内级盒子：display 为 inline、inline-block、inline-table 等；</li></ul><p>所有块级盒子都会参与 BFC，呈现垂直排列；而所有行内级盒子都参会 IFC，呈现水平排列。</p><p>除此之外，block、inline 和 inline-block 还有什么更具体的区别呢？</p><p><strong>block</strong></p><ul><li>占满一行，默认继承父元素的宽度；多个块元素将从上到下进行排列；</li><li>设置 width/height 将会生效；</li><li>设置 padding 和 margin 将会生效；</li></ul><p><strong>inline</strong></p><ul><li>不会占满一行，宽度随着内容而变化；多个 inline 元素将按照从左到右的顺序在一行里排列显示，如果一行显示不下，则自动换行；</li><li>设置 width/height 将不会生效；</li><li>设置竖直方向上的 padding 和 margin 将不会生效；</li></ul><p><strong>inline-block</strong></p><ul><li>是行内块元素，不单独占满一行，可以看成是能够在一行里进行左右排列的块元素；</li><li>设置 width/height 将会生效；</li><li>设置 padding 和 margin 将会生效；</li></ul><h4 id="inner-display-type"><a href="#inner-display-type" class="headerlink" title="inner display type"></a>inner display type</h4><p>对内方面，其实就是把元素当成了容器，里面包裹着文本或者其他子元素。container box 的类型依据 display 的值不同，分为 4 种：</p><ul><li>block container：建立 BFC 或者 IFC；</li><li>flex container：建立 FFC；</li><li>grid container：建立 GFC;</li><li>ruby container：接触不多，不做介绍。</li></ul><p>值得一提的是如果把 img 这种替换元素（replaced element）申明为 block 是不会产生 container box 的，因为替换元素比如 img 设计的初衷就仅仅是通过 src 把内容替换成图片，完全没考虑过会把它当成容器。</p><p>参考：</p><ul><li>CSS 原理 - 你所不知道的 display[7]</li><li>格式化上下文[8]</li></ul><h3 id="格式化上下文"><a href="#格式化上下文" class="headerlink" title="格式化上下文"></a>格式化上下文</h3><p>格式化上下文（Formatting Context）是 CSS2.1 规范中的一个概念，大概说的是页面中的一块渲染区域，规定了渲染区域内部的子元素是如何排版以及相互作用的。</p><p>不同类型的盒子有不同格式化上下文，大概有这 4 类：</p><ul><li>BFC (Block Formatting Context) 块级格式化上下文；</li><li>IFC (Inline Formatting Context) 行内格式化上下文；</li><li>FFC (Flex Formatting Context) 弹性格式化上下文；</li><li>GFC (Grid Formatting Context) 格栅格式化上下文；</li></ul><p>其中 BFC 和 IFC 在 CSS 中扮演着非常重要的角色，因为它们直接影响了网页布局，所以需要深入理解其原理。</p><h4 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h4><p>块格式化上下文，它是一个独立的渲染区域，只有块级盒子参与，它规定了内部的块级盒子如何布局，并且与这个区域外部毫不相干。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912192122.png"></p><p>图来源于 yachen168</p><p><strong>BFC 渲染规则</strong></p><ul><li>内部的盒子会在垂直方向，一个接一个地放置；</li><li>盒子垂直方向的距离由 margin 决定，属于同一个 BFC 的两个相邻盒子的 margin 会发生重叠；</li><li>每个元素的 margin 的左边，与包含块 border 的左边相接触(对于从左往右的格式化，否则相反)，即使存在浮动也是如此；</li><li>BFC 的区域不会与 float 盒子重叠；</li><li>BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li><li>计算 BFC 的高度时，浮动元素也参与计算。</li></ul><p><strong>如何创建 BFC？</strong></p><ul><li>根元素：html</li><li>非溢出的可见元素：overflow 不为 visible</li><li>设置浮动：float 属性不为 none</li><li>设置定位：position 为 absolute 或 fixed</li><li>定义成块级的非块级元素：display: inline-block/table-cell/table-caption/flex/inline-flex/grid/inline-grid</li></ul><p><strong>BFC 应用场景</strong></p><p>1、 自适应两栏布局</p><p>应用原理：BFC 的区域不会和浮动区域重叠，所以就可以把侧边栏固定宽度且左浮动，而对右侧内容触发 BFC，使得它的宽度自适应该行剩余宽度。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912192107.gif"></p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;div class=<span class="token string">"layout"</span>&gt;      &lt;div class=<span class="token string">"aside"</span>&gt;aside&lt;/div&gt;      &lt;div class=<span class="token string">"main"</span>&gt;main&lt;/div&gt;  &lt;/div&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.aside</span> <span class="token punctuation">{</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.main</span> <span class="token punctuation">{</span>      &lt;!-- 触发 BFC --&gt;      <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、清除内部浮动</p><p>浮动造成的问题就是父元素高度坍塌，所以清除浮动需要解决的问题就是让父元素的高度恢复正常。而用     BFC 清除浮动的原理就是：计算 BFC 的高度时，浮动元素也参与计算。只要触发父元素的 BFC 即可。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912192102.png"></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.parent</span> <span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、 防止垂直 margin 合并</p><p>BFC 渲染原理之一：同一个 BFC 下的垂直 margin 会发生合并。所以如果让 2 个元素不在同一个 BFC 中即可阻止垂直 margin 合并。那如何让 2 个相邻的兄弟元素不在同一个 BFC 中呢？可以给其中一个元素外面包裹一层，然后触发其包裹层的 BFC，这样一来 2 个元素就不会在同一个 BFC 中了。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912192012.png"></p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;div class=<span class="token string">"layout"</span>&gt;  &lt;div class=<span class="token string">"a"</span>&gt;a&lt;/div&gt;      &lt;div class=<span class="token string">"contain-b"</span>&gt;          &lt;div class=<span class="token string">"b"</span>&gt;b&lt;/div&gt;      &lt;/div&gt;  &lt;/div&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.demo3 .a,  .demo3 .b</span> <span class="token punctuation">{</span>      <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #999<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.contain-b</span> <span class="token punctuation">{</span>      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>针对以上 3 个 示例 ，可以结合这个 BFC 应用示例 配合观看更佳。</p><p>参考：CSS 原理 - Formatting Context[9]</p><h4 id="IFC"><a href="#IFC" class="headerlink" title="IFC"></a>IFC</h4><p>IFC 的形成条件非常简单，块级元素中仅包含内联级别元素，需要注意的是当IFC中有块级元素插入时，会产生两个匿名块将父元素分割开来，产生两个 IFC。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912160820.png"></p><p><strong>IFC 渲染规则</strong></p><ul><li>子元素在水平方向上一个接一个排列，在垂直方向上将以容器顶部开始向下排列；</li><li>节点无法声明宽高，其中 margin 和 padding 在水平方向有效在垂直方向无效；</li><li>节点在垂直方向上以不同形式对齐；</li><li>能把在一行上的框都完全包含进去的一个矩形区域，被称为该行的线盒（line box）。线盒的宽度是由包含块（containing box）和与其中的浮动来决定；</li><li>IFC 中的 line box 一般左右边贴紧其包含块，但 float 元素会优先排列。</li><li>IFC 中的 line box 高度由 line-height 计算规则来确定，同个 IFC 下的多个 line box 高度可能会不同；</li><li>当内联级盒子的总宽度少于包含它们的 line box 时，其水平渲染规则由 text-align 属性值来决定；</li><li>当一个内联盒子超过父元素的宽度时，它会被分割成多盒子，这些盒子分布在多个 line box 中。如果子元素未设置强制换行的情况下，inline box 将不可被分割，将会溢出父元素。</li></ul><p>针对如上的 IFC 渲染规则，你是不是可以分析下下面这段代码的 IFC 环境是怎么样的呢？</p><p><code>&lt;p&gt;It can get &lt;strong&gt;very complicated&lt;/storng&gt; once you start looking into it.&lt;/p&gt;   </code></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912160815.jpeg"></p><p>对应上面这样一串 HTML 分析如下：</p><ul><li>p 标签是一个 block container，对内将产生一个 IFC；</li><li>由于一行没办法显示完全，所以产生了 2 个线盒（line box）；线盒的宽度就继承了 p 的宽度；高度是由里面的内联盒子的 line-height 决定；</li><li>It can get：匿名的内联盒子；</li><li>very complicated：strong 标签产生的内联盒子；</li><li>once you start：匿名的内联盒子；</li><li>looking into it.：匿名的内联盒子。</li></ul><p>参考：Inline formatting contexts[10]</p><p><strong>IFC 应用场景</strong></p><ul><li>水平居中：当一个块要在环境中水平居中时，设置其为 inline-block 则会在外层产生 IFC，通过 text-align 则可以使其水平居中。</li><li>垂直居中：创建一个 IFC，用其中一个元素撑开父元素的高度，然后设置其 vertical-align: middle，其他行内元素则可以在此父元素下垂直居中。</li></ul><p>偷个懒，demo 和图我就不做了。</p><h3 id="层叠上下文"><a href="#层叠上下文" class="headerlink" title="层叠上下文"></a>层叠上下文</h3><p>在电脑显示屏幕上的显示的页面其实是一个三维的空间，水平方向是 X 轴，竖直方向是 Y 轴，而屏幕到眼睛的方向可以看成是 Z 轴。众 HTML 元素依据自己定义的属性的优先级在 Z 轴上按照一定的顺序排开，而这其实就是层叠上下文所要描述的东西。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912160813.png"></p><p>-w566</p><p>我们对层叠上下文的第一印象可能要来源于 z-index，认为它的值越大，距离屏幕观察者就越近，那么层叠等级就越高，事实确实是这样的，但层叠上下文的内容远非仅仅如此：</p><ul><li>z-index 能够在层叠上下文中对元素的堆叠顺序其作用是必须配合定位才可以；</li><li>除了 z-index 之外，一个元素在 Z 轴上的显示顺序还受层叠等级和层叠顺序影响；</li></ul><p>在看层叠等级和层叠顺序之前，我们先来看下如何产生一个层叠上下文，特定的 HTML 元素或者 CSS 属性产生层叠上下文，MDN 中给出了这么一个列表，符合以下任一条件的元素都会产生层叠上下文：</p><ul><li>html 文档根元素</li><li>声明 position: absolute/relative 且 z-index 值不为 auto 的元素；</li><li>声明 position: fixed/sticky 的元素；</li><li>flex 容器的子元素，且 z-index 值不为 auto；</li><li>grid 容器的子元素，且 z-index 值不为 auto；</li><li>opacity 属性值小于 1 的元素；</li><li>mix-blend-mode 属性值不为 normal 的元素；</li><li>以下任意属性值不为 none 的元素：</li><li>transform</li><li>filter</li><li>perspective</li><li>clip-path</li><li>mask / mask-image / mask-border</li><li>isolation 属性值为 isolate 的元素；</li><li>-webkit-overflow-scrolling 属性值为 touch 的元素；</li><li>will-change 值设定了任一属性而该属性在 non-initial 值时会创建层叠上下文的元素；</li><li>contain 属性值为 layout、paint 或包含它们其中之一的合成值（比如 contain: strict、contain: content）的元素。</li></ul><p><strong>层叠等级</strong></p><p>层叠等级指节点在三维空间 Z 轴上的上下顺序。它分两种情况：</p><ul><li>在同一个层叠上下文中，它描述定义的是该层叠上下文中的层叠上下文元素在 Z 轴上的上下顺序；</li><li>在其他普通元素中，它描述定义的是这些普通元素在 Z 轴上的上下顺序；</li></ul><p>普通节点的层叠等级优先由其所在的层叠上下文决定，层叠等级的比较只有在当前层叠上下文中才有意义，脱离当前层叠上下文的比较就变得无意义了。</p><p><strong>层叠顺序</strong></p><p>在同一个层叠上下文中如果有多个元素，那么他们之间的层叠顺序是怎么样的呢？</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912160807.png"></p><p>以下这个列表越往下层叠优先级越高，视觉上的效果就是越容易被用户看到（不会被其他元素覆盖）：</p><ul><li>层叠上下文的 border 和 background</li><li>z-index &lt; 0 的子节点</li><li>标准流内块级非定位的子节点</li><li>浮动非定位的子节点</li><li>标准流内行内非定位的子节点</li><li>z-index: auto/0 的子节点</li><li>z-index &gt; 0的子节点</li></ul><p><strong>如何比较两个元素的层叠等级？</strong></p><ul><li>在同一个层叠上下文中，比较两个元素就是按照上图的介绍的层叠顺序进行比较。</li><li>如果不在同一个层叠上下文中的时候，那就需要比较两个元素分别所处的层叠上下文的等级。</li><li>如果两个元素都在同一个层叠上下文，且层叠顺序相同，则在 HTML 中定义越后面的层叠等级越高。</li></ul><p>参考：彻底搞懂CSS层叠上下文、层叠等级、层叠顺序、z-index[11]</p><h3 id="值和单位"><a href="#值和单位" class="headerlink" title="值和单位"></a>值和单位</h3><p>CSS 的声明是由属性和值组成的，而值的类型有许多种：</p><ul><li>数值：长度值 ，用于指定例如元素 width、border-width、font-size 等属性的值；</li><li>百分比：可以用于指定尺寸或长度，例如取决于父容器的 width、height 或默认的 font-size；</li><li>颜色：用于指定 background-color、color 等；</li><li>坐标位置：以屏幕的左上角为坐标原点定位元素的位置，比如常见的 background-position、top、right、bottom 和 left 等属性；</li><li>函数：用于指定资源路径或背景图片的渐变，比如 url()、linear-gradient() 等；</li></ul><p>而还有些值是需要带单位的，比如 width: 100px，这里的 px 就是表示长度的单位，长度单位除了 px 外，比较常用的还有 em、rem、vw/vh 等。那他们有什么区别呢？又应该在什么时候使用它们呢？</p><h4 id="px"><a href="#px" class="headerlink" title="px"></a>px</h4><p>屏幕分辨率是指在屏幕的横纵方向上的像素点数量，比如分辨率 1920×1080 意味着水平方向含有 1920 个像素数，垂直方向含有 1080 个像素数。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912160800.png"></p><p>而 px 表示的是 CSS 中的像素，在 CSS 中它是绝对的长度单位，也是最基础的单位，其他长度单位会自动被浏览器换算成 px。但是对于设备而言，它其实又是相对的长度单位，比如宽高都为 2px，在正常的屏幕下，其实就是 4 个像素点，而在设备像素比(devicePixelRatio) 为 2 的 Retina 屏幕下，它就有 16 个像素点。所以屏幕尺寸一致的情况下，屏幕分辨率越高，显示效果就越细腻。</p><p>讲到这里，还有一些相关的概念需要理清下：</p><p><strong>设备像素（Device pixels）</strong></p><p>设备屏幕的物理像素，表示的是屏幕的横纵有多少像素点；和屏幕分辨率是差不多的意思。</p><p><strong>设备像素比（DPR）</strong></p><p>设备像素比表示 1 个 CSS 像素等于几个物理像素。</p><p>计算公式：DPR = 物理像素数 / 逻辑像素数；</p><p>在浏览器中可以通过 window.devicePixelRatio 来获取当前屏幕的 DPR。</p><p><strong>像素密度（DPI/PPI）</strong></p><p>像素密度也叫显示密度或者屏幕密度，缩写为 DPI(Dots Per Inch) 或者 PPI(Pixel Per Inch)。从技术角度说，PPI 只存在于计算机显示领域，而 DPI 只出现于打印或印刷领域。</p><p>计算公式：像素密度 = 屏幕对角线的像素尺寸 / 物理尺寸</p><p>比如，对于分辨率为 750 * 1334 的 iPhone 6 来说，它的像素密度为：</p><p><code>Math.sqrt(750 * 750 + 1334 * 1334) / 4.7 = 326ppi   </code></p><p><strong>设备独立像素（DIP）</strong></p><p>DIP 是特别针对 Android设备而衍生出来的，原因是安卓屏幕的尺寸繁多，因此为了显示能尽量和设备无关，而提出的这个概念。它是基于屏幕密度而计算的，认为当屏幕密度是 160 的时候，px = DIP。</p><p>计算公式：dip = px * 160 / dpi</p><h4 id="em"><a href="#em" class="headerlink" title="em"></a>em</h4><p>em 是 CSS 中的相对长度单位中的一个。居然是相对的，那它到底是相对的谁呢？它有 2 层意思：</p><ul><li>在 font-size 中使用是相对于<strong>父元素</strong>的 font-size 大小，比如父元素 font-size: 16px，当给子元素指定 font-size: 2em 的时候，经过计算后它的字体大小会是 32px；</li><li>在其他属性中使用是相对于自身的字体大小，如 width/height/padding/margin 等；</li></ul><p>我们都知道每个浏览器都会给 HTML 根元素 html 设置一个默认的 font-size，而这个值通常是 16px。这也就是为什么 1em = 16px 的原因所在了。</p><p>em 在计算的时候是会层层计算的，比如：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;div&gt;      &lt;p&gt;&lt;/p&gt;  &lt;/div&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token selector">p</span> <span class="token punctuation">{</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对于如上一个结构的 HTML，由于根元素 html 的字体大小是 16px，所以 p 标签最终计算出来后的字体大小会是 16 * 2 * 2 = 64px</p><h4 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h4><p>rem(root em) 和 em 一样，也是一个相对长度单位，不过 rem 相对的是 HTML 的根元素 html。</p><p>rem 由于是基于 html 的 font-size 来计算，所以通常用于自适应网站或者 H5 中。</p><p>比如在做 H5 的时候，前端通常会让 UI 给 750px 宽的设计图，而在开发的时候可以基于 iPhone X 的尺寸 375px * 812px 来写页面，这样一来的话，就可以用下面的 JS 依据当前页面的视口宽度自动计算出根元素 html 的基准 font-size 是多少。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">(function (doc, win)</span> <span class="token punctuation">{</span>      <span class="token selector">var docEl = doc.documentElement,          resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',          psdWidth = 750,  // 设计图宽度          recalc = function ()</span> <span class="token punctuation">{</span>              var clientWidth = docEl.clientWidth<span class="token punctuation">;</span>              if <span class="token punctuation">(</span> !clientWidth <span class="token punctuation">)</span> return<span class="token punctuation">;</span>              <span class="token selector">if ( clientWidth &gt;= 640 )</span> <span class="token punctuation">{</span>                  docEl.style.fontSize = 200 * <span class="token punctuation">(</span> 640 / psdWidth <span class="token punctuation">)</span> + <span class="token string">'px'</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token selector">else</span> <span class="token punctuation">{</span>                  docEl.style.fontSize = 200 * <span class="token punctuation">(</span> clientWidth / psdWidth <span class="token punctuation">)</span> + <span class="token string">'px'</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>    if <span class="token punctuation">(</span> !doc.addEventListener <span class="token punctuation">)</span> return<span class="token punctuation">;</span>      // 绑定事件的时候最好配合防抖函数      win.<span class="token function">addEventListener</span><span class="token punctuation">(</span> resizeEvt<span class="token punctuation">,</span> <span class="token function">debounce</span><span class="token punctuation">(</span>recalc<span class="token punctuation">,</span> 1000<span class="token punctuation">)</span><span class="token punctuation">,</span> false <span class="token punctuation">)</span><span class="token punctuation">;</span>      doc.<span class="token function">addEventListener</span><span class="token punctuation">(</span> <span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> recalc<span class="token punctuation">,</span> false <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token selector">function debounce(func, wait)</span> <span class="token punctuation">{</span>          var timeout<span class="token punctuation">;</span>          <span class="token selector">return function ()</span> <span class="token punctuation">{</span>              var context = this<span class="token punctuation">;</span>              var args = arguments<span class="token punctuation">;</span>              <span class="token selector">clearTimeout(timeout)              timeout = setTimeout(function()</span><span class="token punctuation">{</span>                  func.<span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比如当视口是 375px 的时候，经过计算 html 的 font-size 会是 100px，这样有什么好处呢？好处就是方便写样式，比如从设计图量出来的 header 高度是 50px 的，那我们写样式的时候就可以直接写：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">header</span> <span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> 0.5rem<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912160740.png"></p><p>每个从设计图量出来的尺寸只要除于 100 即可得到当前元素的 rem 值，都不用经过计算，非常方便。偷偷告诉你，如果你把上面那串计算 html 标签 font-size 的 JS 代码中的 200 替换成 2，那在计算 rem 的时候就不需要除于 100 了，从设计图量出多大 px，就直接写多少个 rem。</p><h4 id="vw-vh"><a href="#vw-vh" class="headerlink" title="vw/vh"></a>vw/vh</h4><p>vw 和 vh 分别是相对于屏幕视口宽度和高度而言的长度单位：</p><ul><li>1vw = 视口宽度均分成 100 份中 1 份的长度；</li><li>1vh = 视口高度均分成 100 份中 1 份的长度；</li></ul><p>在 JS 中 100vw = window.innerWidth，100vh = window.innerHeight。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912160734.jpeg"></p><p>vw/vh 的出现使得多了一种写自适应布局的方案，开发者不再局限于 rem 了。</p><p>相对视口的单位，除了 vw/vh 外，还有 vmin 和 vmax：</p><ul><li>vmin：取 vw 和 vh 中值较小的；</li><li>vmax：取 vw 和 vh 中值较大的；</li></ul><h3 id="颜色体系"><a href="#颜色体系" class="headerlink" title="颜色体系"></a>颜色体系</h3><p>CSS 中用于表示颜色的值种类繁多，足够构成一个体系，所以这里就专门拿出一个小节来讲解它。</p><p>根据 CSS 颜色草案[12] 中提到的颜色值类型，大概可以把它们分为这几类：</p><ul><li>颜色关键字</li><li>transparent 关键字</li><li>currentColor 关键字</li><li>RGB 颜色</li><li>HSL 颜色</li></ul><h4 id="颜色关键字"><a href="#颜色关键字" class="headerlink" title="颜色关键字"></a>颜色关键字</h4><p>颜色关键字（color keywords）是不区分大小写的标识符，它表示一个具体的颜色，比如 white（白），黑（black）等；</p><p>可接受的关键字列表在CSS的演变过程中发生了改变：</p><ul><li>CSS 标准 1 只接受 16 个基本颜色，称为 VGA 颜色，因为它们来源于 VGA 显卡所显示的颜色集合而被称为 VGA colors （视频图形阵列色彩）。</li><li>CSS 标准 2 增加了 orange 关键字。</li><li>从一开始，浏览器接受其它的颜色，由于一些早期浏览器是 X11 应用程序，这些颜色大多数是 X11 命名的颜色列表，虽然有一点不同。SVG 1.0 是首个正式定义这些关键字的标准；CSS 色彩标准 3 也正式定义了这些关键字。它们经常被称作扩展的颜色关键字， X11 颜色或 SVG 颜色 。</li><li>CSS 颜色标准 4 添加可 rebeccapurple 关键字来纪念 web 先锋 Eric Meyer。</li></ul><p>如下这张图是 16 个基础色，又叫 VGA 颜色。截止到目前为止 CSS 颜色关键字总共有 146 个，这里可以查看 完整的色彩关键字列表[13]。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912160733.png"></p><p>VGA 颜色</p><p>需要注意的是如果声明的时候的颜色关键字是错误的，浏览器会忽略它。</p><h4 id="transparent-关键字"><a href="#transparent-关键字" class="headerlink" title="transparent 关键字"></a>transparent 关键字</h4><p>transparent 关键字表示一个完全透明的颜色，即该颜色看上去将是背景色。从技术上说，它是带有 alpha 通道为最小值的黑色，是 rgba(0,0,0,0) 的简写。</p><p>透明关键字有什么应用场景呢？</p><p><strong>实现三角形</strong></p><p>下面这个图是用 4 条边框填充的正方形，看懂了它你大概就知道该如何用 CSS 写三角形了。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912160726.png"></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span>      <span class="token property">border-top-color</span><span class="token punctuation">:</span> #ffc107<span class="token punctuation">;</span>      <span class="token property">border-right-color</span><span class="token punctuation">:</span> #00bcd4<span class="token punctuation">;</span>      <span class="token property">border-bottom-color</span><span class="token punctuation">:</span> #e26b6b<span class="token punctuation">;</span>      <span class="token property">border-left-color</span><span class="token punctuation">:</span> #cc7cda<span class="token punctuation">;</span>      <span class="token property">border-width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>      <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用 transparent 实现三角形的原理：</p><ul><li>首先宽高必须是 0px，通过边框的粗细来填充内容；</li><li>那条边需要就要加上颜色，而不需要的边则用 transparent；</li><li>想要什么样姿势的三角形，完全由上下左右 4 条边的中有颜色的边和透明的边的位置决定；</li><li>等腰三角形：设置一条边有颜色，然后紧挨着的 2 边是透明，且宽度是有颜色边的一半；直角三角形：设置一条边有颜色，然后紧挨着的任何一边透明即可。</li></ul><p>看下示例：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912160719.png"></p><p><strong>增大点击区域</strong></p><p>常常在移动端的时候点击的按钮的区域特别小，但是由于现实效果又不太好把它做大，所以常用的一个手段就是通过透明的边框来增大按钮的点击区域：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.btn</span> <span class="token punctuation">{</span>      <span class="token property">border</span><span class="token punctuation">:</span> 5px solid transparent<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="currentColor-关键字"><a href="#currentColor-关键字" class="headerlink" title="currentColor 关键字"></a>currentColor 关键字</h4><p>currentColor 会取当前元素继承父级元素的文本颜色值或声明的文本颜色值，即 computed 后的 color 值。</p><p>比如，对于如下 CSS，该元素的边框颜色会是 red：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.btn</span> <span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> 1px solid currentColor<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="RGB-A-颜色"><a href="#RGB-A-颜色" class="headerlink" title="RGB[A] 颜色"></a>RGB[A] 颜色</h4><p>RGB[A] 颜色是由 R(red)-G(green)-B(blue)-A(alpha) 组成的色彩空间。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912160707.png"></p><p>在 CSS 中，它有两种表示形式：</p><ul><li>十六进制符号；</li><li>函数符；</li></ul><p><strong>十六进制符号</strong></p><p>RGB 中的每种颜色的值范围是 00~ff，值越大表示颜色越深。所以一个颜色正常是 6 个十六进制字符加上 # 组成，比如红色就是 #ff0000。</p><p>如果 RGB 颜色需要加上不透明度，那就需要加上 alpha 通道的值，它的范围也是 00~ff，比如一个带不透明度为 67% 的红色可以这样写 #ff0000aa。</p><p>使用十六进制符号表示颜色的时候，都是用 2 个十六进制表示一个颜色，如果这 2 个字符相同，还可以缩减成只写 1 个，比如，红色 #f00；带 67% 不透明度的红色 #f00a。</p><p><strong>函数符</strong></p><p>当 RGB 用函数表示的时候，每个值的范围是 0<del>255 或者 0%</del>100%，所以红色是 rgb(255, 0, 0)， 或者 rgb(100%, 0, 0)。</p><p>如果需要使用函数来表示带不透明度的颜色值，值的范围是 0<del>1 及其之间的小数或者 0%</del>100%，比如带 67% 不透明度的红色是 rgba(255, 0, 0, 0.67) 或者 rgba(100%, 0%, 0%, 67%)</p><blockquote><p>“</p><p>需要注意的是 RGB 这 3 个颜色值需要保持一致的写法，要嘛用数字要嘛用百分比，而不透明度的值的可以不用和 RGB 保持一致写法。比如 rgb(100%, 0, 0) 这个写法是无效的；而 rgb(100%, 0%, 0%, 0.67) 是有效的。</p></blockquote><p>在第 4 代 CSS 颜色标准中，新增了一种新的函数写法，即可以把 RGB 中值的分隔逗号改成空格，而把 RGB 和 alpha 中的逗号改成 /，比如带 67% 不透明度的红色可以这样写 rgba(255 0 0 / 0.67)。另外还把 rgba 的写法合并到 rgb 函数中了，即 rgb 可以直接写带不透明度的颜色。</p><h4 id="HSL-A-颜色"><a href="#HSL-A-颜色" class="headerlink" title="HSL[A] 颜色"></a>HSL[A] 颜色</h4><p>HSL[A] 颜色是由色相(hue)-饱和度(saturation)-亮度(lightness)-不透明度组成的颜色体系。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912160701.png"></p><ul><li>色相（H）是色彩的基本属性，值范围是 0<del>360 或者 0deg</del>360deg， 0 (或 360) 为红色, 120 为绿色, 240 为蓝色；</li><li>饱和度（S）是指色彩的纯度，越高色彩越纯，低则逐渐变灰，取 0~100% 的数值；0% 为灰色， 100% 全色；</li><li>亮度（L），取 0~100%，0% 为暗，100% 为白；</li><li>不透明度（A），取 0<del>100%，或者0</del>1及之间的小数；</li></ul><p>写法上可以参考 RGB 的写法，只是参数的值不一样。</p><p>给一个按钮设置不透明度为 67% 的红色的 color 的写法，以下全部写法效果一致：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">button</span> <span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span> #ff0000aa<span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> #f00a<span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.67<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>100% 0% 0% / 67%<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">hsla</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 67%<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>0deg 100% 50% / 67%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小提示：在 Chrome DevTools 中可以按住 shift + 鼠标左键可以切换颜色的表示方式。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912160642.gif"></p><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><p>媒体查询是指针对不同的设备、特定的设备特征或者参数进行定制化的修改网站的样式。</p><p>你可以通过给 <code>&lt;link&gt;</code> 加上 media 属性来指定该样式文件只能对什么设备生效，不指定的话默认是 all，即对所有设备都生效：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;link rel=<span class="token string">"stylesheet"</span> src=<span class="token string">"styles.css"</span> media=<span class="token string">"screen"</span> /&gt;  &lt;link rel=<span class="token string">"stylesheet"</span> src=<span class="token string">"styles.css"</span> media=<span class="token string">"print"</span> /&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>都支持哪些设备类型？</p><ul><li>all：适用于所有设备；</li><li>print：适用于在打印预览模式下在屏幕上查看的分页材料和文档；</li><li>screen：主要用于屏幕；</li><li>speech：主要用于语音合成器。</li></ul><blockquote><p>需要注意的是：通过 media 指定的  资源尽管不匹配它的设备类型，但是浏览器依然会加载它。</p></blockquote><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912155838.png"></p><p>除了通过 <code>&lt;link&gt;</code> 让指定设备生效外，还可以通过 <code>@media</code> 让 CSS 规则在特定的条件下才能生效。响应式页面就是使用了 @media 才让一个页面能够同时适配 PC、Pad 和手机端。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1000px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>媒体查询支持逻辑操作符：</p><ul><li>and：查询条件都满足的时候才生效；</li><li>not：查询条件取反；</li><li>only：整个查询匹配的时候才生效，常用语兼容旧浏览器，使用时候必须指定媒体类型；</li><li>逗号或者 or：查询条件满足一项即可匹配；</li></ul><p>媒体查询还支持众多的媒体特性[14]，使得它可以写出很复杂的查询条件：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 用户设备的最小高度为680px或为纵向模式的屏幕设备 */</span>  <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-height</span><span class="token punctuation">:</span> 680px<span class="token punctuation">)</span><span class="token punctuation">,</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">orientation</span><span class="token punctuation">:</span> portrait<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="常见需求"><a href="#常见需求" class="headerlink" title="常见需求"></a>常见需求</h2><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><p>之前我们通常是在预处理器里才可以使用变量，而现在 CSS 里也支持了变量的用法。通过自定义属性就可以在想要使用的地方引用它。</p><p>自定义属性也和普通属性一样具有级联性，申明在 :root 下的时候，在全文档范围内可用，而如果是在某个元素下申明自定义属性，则只能在它及它的子元素下才可以使用。</p><p>自定义属性必须通过 <code>--x</code> 的格式申明，比如：–theme-color: red; 使用自定义属性的时候，需要用 var 函数。比如：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;!-- 定义自定义属性 --&gt;  :root</span> <span class="token punctuation">{</span>      <span class="token property">--theme-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token selector">&lt;!-- 使用变量 --&gt;  h1</span> <span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--theme-color<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912155818.png"></p><p>上图这个是使用 CSS 自定义属性配合 JS 实现的动态调整元素的 box-shadow，具体可以看这个 codepen demo。</p><h3 id="1px-边框解决方案"><a href="#1px-边框解决方案" class="headerlink" title="1px 边框解决方案"></a>1px 边框解决方案</h3><p>Retina 显示屏比普通的屏幕有着更高的分辨率，所以在移动端的 1px 边框就会看起来比较粗，为了美观通常需要把这个线条细化处理。这里有篇文章列举了 7 中方案可以参考一下：7种方法解决移动端Retina屏幕1px边框问题[15]</p><p>而这里附上最后一种通过伪类和 transform 实现的相对完美的解决方案：</p><p>只设置单条底部边框：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.scale-1px-bottom</span> <span class="token punctuation">{</span>      <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.scale-1px-bottom::after</span> <span class="token punctuation">{</span>      <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>      <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">-webkit-transform-origin</span><span class="token punctuation">:</span> 0 0<span class="token punctuation">;</span>      <span class="token property">transform-origin</span><span class="token punctuation">:</span> 0 0<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时设置 4 条边框：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.scale-1px</span> <span class="token punctuation">{</span>      <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>      <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.scale-1px::after</span> <span class="token punctuation">{</span>      <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #000<span class="token punctuation">;</span>      <span class="token property">-webkit-box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>      <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 200%<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 200%<span class="token punctuation">;</span>      <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">-webkit-transform-origin</span><span class="token punctuation">:</span> left top<span class="token punctuation">;</span>      <span class="token property">transform-origin</span><span class="token punctuation">:</span> left top<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>什么是浮动：浮动元素会脱离文档流并向左/向右浮动，直到碰到父元素或者另一个浮动元素。</p><p>为什么要清楚浮动，它造成了什么问题？</p><p>因为浮动元素会脱离正常的文档流，并不会占据文档流的位置，所以如果一个父元素下面都是浮动元素，那么这个父元素就无法被浮动元素所撑开，这样一来父元素就丢失了高度，这就是所谓的浮动造成的父元素高度坍塌问题。</p><p>父元素高度一旦坍塌将对后面的元素布局造成影响，为了解决这个问题，所以需要清除浮动，让父元素恢复高度，那该如何做呢？</p><p>这里介绍两种方法：通过 BFC 来清除、通过 clear 来清除。</p><h4 id="BFC-清除浮动"><a href="#BFC-清除浮动" class="headerlink" title="BFC 清除浮动"></a>BFC 清除浮动</h4><p>前面介绍 BFC 的时候提到过，计算 BFC 高度的时候浮动子元素的高度也将计算在内，利用这条规则就可以清楚浮动。</p><p>假设一个父元素 parent 内部只有 2 个子元素 child，且它们都是左浮动的，这个时候 parent 如果没有设置高度的话，因为浮动造成了高度坍塌，所以 parent 的高度会是 0，此时只要给 parent 创造一个 BFC，那它的高度就能恢复了。</p><p>而产生 BFC 的方式很多，我们可以给父元素设置overflow: auto 来简单的实现 BFC 清除浮动，但是为了兼容 IE 最好用 overflow: hidden。</p><pre class="line-numbers language-none"><code class="language-none">.parent {      overflow: hidden;  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过 overflow: hidden 来清除浮动并不完美，当元素有阴影或存在下拉菜单的时候会被截断，所以该方法使用比较局限。</p><h4 id="通过-clear-清除浮动"><a href="#通过-clear-清除浮动" class="headerlink" title="通过 clear 清除浮动"></a>通过 clear 清除浮动</h4><p>我先把结论贴出来：</p><pre class="line-numbers language-none"><code class="language-none">.clearfix {      zoom: 1;  }  .clearfix::after {      content: "";      display: block;      clear: both;  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种写法的核心原理就是通过 ::after 伪元素为在父元素的最后一个子元素后面生成一个内容为空的块级元素，然后通过 clear 将这个伪元素移动到所有它之前的浮动元素的后面，画个图来理解一下。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912155806.png"></p><p>可以结合这个 codepen demo 一起理解上图的 clear 清楚浮动原理。</p><p>上面这个 demo 或者图里为了展示需要所以给伪元素的内容设置为了 ::after，实际使用的时候需要设置为空字符串，让它的高度为 0，从而父元素的高度都是由实际的子元素撑开。</p><p>该方式基本上是现在人人都在用的清除浮动的方案，非常通用。</p><p>参考：CSS中的浮动和清除浮动，梳理一下[16]</p><h3 id="消除浏览器默认样式"><a href="#消除浏览器默认样式" class="headerlink" title="消除浏览器默认样式"></a>消除浏览器默认样式</h3><p>针对同一个类型的 HTML 标签，不同的浏览器往往有不同的表现，所以在网站制作的时候，开发者通常都是需要将这些浏览器的默认样式清除，让网页在不同的浏览器上能够保持一致。</p><p>针对清除浏览器默认样式这件事，在很早之前 CSS 大师 Eric A. Meyer 就干过。它就是写一堆通用的样式用来重置浏览器默认样式，这些样式通常会放到一个命名为 reset.css 文件中。比如大师的 reset.css[17] 是这么写的：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html, body, div, span, applet, object, iframe,  h1, h2, h3, h4, h5, h6, p, blockquote, pre,  a, abbr, acronym, address, big, cite, code,  del, dfn, em, img, ins, kbd, q, s, samp,  small, strike, strong, sub, sup, tt, var,  b, u, i, center,  dl, dt, dd, ol, ul, li,  fieldset, form, label, legend,  table, caption, tbody, tfoot, thead, tr, th, td,  article, aside, canvas, details, embed,   figure, figcaption, footer, header, hgroup,   menu, nav, output, ruby, section, summary,  time, mark, audio, video</span> <span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>      <span class="token property">font</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>      <span class="token property">vertical-align</span><span class="token punctuation">:</span> baseline<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/* HTML5 display-role reset for older browsers */</span>  <span class="token selector">article, aside, details, figcaption, figure,   footer, header, hgroup, menu, nav, section</span> <span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">body</span> <span class="token punctuation">{</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">ol, ul</span> <span class="token punctuation">{</span>      <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">blockquote, q</span> <span class="token punctuation">{</span>      <span class="token property">quotes</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">blockquote:before, blockquote:after,  q:before, q:after</span> <span class="token punctuation">{</span>      <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>      <span class="token property">content</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">table</span> <span class="token punctuation">{</span>      <span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span>      <span class="token property">border-spacing</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>他的这份 reset.css 据说是被使用最广泛的重设样式的方案了。</p><p>除了 reset.css 外，后来又出现了 Normalize.css[18] 。关于 Normalize.css, 其作者 necolas 专门写了一篇文章介绍了它，并谈到了它和 reset.css 的区别。这个是他写那篇文章的翻译版：让我们谈一谈 Normalize.css[19]。</p><p>文章介绍到：Normalize.css 只是一个很小的CSS文件，但它在默认的 HTML 元素样式上提供了跨浏览器的高度一致性。相比于传统的 CSS reset，Normalize.css 是一种现代的、为 HTML5 准备的优质替代方案，现在已经有很多知名的框架和网站在使用它了。</p><p>Normalize.css 的具体样式可以看这里 Normalize.css</p><p>区别于 reset.css，Normalize.css 有如下特点：</p><ul><li>reset.css 几乎为所有标签都设置了默认样式，而 Normalize.css 则是有选择性的保护了部分有价值的默认值；</li><li>修复了很多浏览器的 bug，而这是 reset.css 没做到的；</li><li>不会让你的调试工具变的杂乱，相反 reset.css 由于设置了很多默认值，所以在浏览器调试工具中往往会看到一大堆的继承样式，显得很杂乱；</li><li>Normalize.css 是模块化的，所以可以选择性的去掉永远不会用到的部分，比如表单的一般化；</li><li>Normalize.css 有详细的说明文档；</li></ul><h3 id="长文本处理"><a href="#长文本处理" class="headerlink" title="长文本处理"></a>长文本处理</h3><p><strong>默认：字符太长溢出了容器</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912155744.png"></p><p><strong>字符超出部分换行</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914005529.png"></p><p><strong>字符超出位置使用连字符</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912155738.png"></p><p><strong>单行文本超出省略</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914005537.png"></p><p><strong>多行文本超出省略</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914005552.png"></p><p>查看以上这些方案的示例： codepen demo</p><p>有意思的是刚好前两天看到 chokcoco 针对文本溢出也写了一篇文章，主要突出的是对整块的文本溢出处理。啥叫整块文本？比如，下面这种技术标签就是属于整块文本：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912155731.png"></p><p>另外他还对 iOS/Safari 做了兼容处理，感兴趣的可以去阅读下：CSS 整块文本溢出省略特性探究[20]。</p><h3 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h3><p>让元素在父元素中呈现出水平垂直居中的形态，无非就 2 种情况：</p><ul><li>单行的文本、inline 或者 inline-block 元素；</li><li>固定宽高的块级盒子；</li><li>不固定宽高的块级盒子；</li></ul><p>以下列到的所有水平垂直居中方案这里写了个 codepen demo，配合示例阅读效果更佳。</p><h4 id="单行的文本、inline-或-inline-block-元素"><a href="#单行的文本、inline-或-inline-block-元素" class="headerlink" title="单行的文本、inline 或 inline-block 元素"></a>单行的文本、inline 或 inline-block 元素</h4><p><strong>水平居中</strong></p><p>此类元素需要水平居中，则父级元素必须是块级元素(<code>block level</code>)，且父级元素上需要这样设置样式：</p><pre class="line-numbers language-none"><code class="language-none">.parent {      text-align: center;  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>垂直居中</strong></p><p>方法一：通过设置上下内间距一致达到垂直居中的效果：</p><pre class="line-numbers language-none"><code class="language-none">.single-line {      padding-top: 10px;      padding-bottom: 10px;  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：通过设置 <code>height</code> 和 <code>line-height</code> 一致达到垂直居中：</p><pre class="line-numbers language-none"><code class="language-none">.single-line {      height: 100px;      line-height: 100px;  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="固定宽高的块级盒子"><a href="#固定宽高的块级盒子" class="headerlink" title="固定宽高的块级盒子"></a>固定宽高的块级盒子</h4><p><strong>方法一：absolute + 负 margin</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914005614.png"></p><p><strong>方法二：absolute + margin auto</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912155724.png"></p><p><strong>方法三：absolute + calc</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914005620.png"></p><h4 id="不固定宽高的块级盒子"><a href="#不固定宽高的块级盒子" class="headerlink" title="不固定宽高的块级盒子"></a>不固定宽高的块级盒子</h4><p>这里列了 6 种方法，参考了颜海镜 写的文章 ，其中的两种 line-height 和 writing-mode 方案看后让我惊呼：还有这种操作？学到了学到了。</p><p><strong>方法一：absolute + transform</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912155717.png"></p><p><strong>方法二：line-height + vertical-align</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914005627.png"></p><p><strong>方法三：writing-mode</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914005633.png"></p><p><strong>方法四：table-cell</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914005634.png"></p><p><strong>方法五：flex</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912155710.png"></p><p><strong>方法六：grid</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912155704.png"></p><h3 id="常用布局"><a href="#常用布局" class="headerlink" title="常用布局"></a>常用布局</h3><h4 id="两栏布局（边栏定宽主栏自适应）"><a href="#两栏布局（边栏定宽主栏自适应）" class="headerlink" title="两栏布局（边栏定宽主栏自适应）"></a>两栏布局（边栏定宽主栏自适应）</h4><p>针对以下这些方案写了几个示例： codepen demo</p><p><strong>方法一：float + overflow（BFC 原理）</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914005646.png"></p><p><strong>方法二：float + margin</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912155657.png"></p><p><strong>方法三：flex</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914005701.png"></p><p><strong>方法四：grid</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912155650.png"></p><h4 id="三栏布局（两侧栏定宽主栏自适应）"><a href="#三栏布局（两侧栏定宽主栏自适应）" class="headerlink" title="三栏布局（两侧栏定宽主栏自适应）"></a>三栏布局（两侧栏定宽主栏自适应）</h4><p>针对以下这些方案写了几个示例： codepen demo</p><p><strong>方法一：圣杯布局</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912155616.png"></p><p><strong>方法二：双飞翼布局</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912155643.png"></p><p><strong>方法三：float + overflow（BFC 原理）</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912155556.png"></p><p><strong>方法四：flex</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912155633.png"></p><p><strong>方法五：grid</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912155549.png"></p><h4 id="多列等高布局"><a href="#多列等高布局" class="headerlink" title="多列等高布局"></a>多列等高布局</h4><p>结合示例阅读更佳：codepen demo</p><p><strong>方法一：padding + 负margin</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914005719.png"></p><p><strong>方法二：设置父级背景图片</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912155542.png"></p><h4 id="三行布局（头尾定高主栏自适应）"><a href="#三行布局（头尾定高主栏自适应）" class="headerlink" title="三行布局（头尾定高主栏自适应）"></a>三行布局（头尾定高主栏自适应）</h4><p>列了 4 种方法，都是基于如下的 HTML 和 CSS 的，结合示例阅读效果更佳：codepen demo</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;div class=<span class="token string">"layout"</span>&gt;      &lt;header&gt;&lt;/header&gt;      &lt;main&gt;          &lt;div class=<span class="token string">"inner"</span>&gt;&lt;/div&gt;      &lt;/main&gt;      &lt;footer&gt;&lt;/footer&gt;  &lt;/div&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html,  body,  .layout</span> <span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">body</span> <span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">header,   footer</span> <span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">main</span> <span class="token punctuation">{</span>      <span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方法一：calc</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912155519.png"></p><p><strong>方法二：absolute</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912155509.png"></p><p><strong>方法三：flex</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912155502.png"></p><p><strong>方法四：grid</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912155500.png"></p><h2 id="结了个尾"><a href="#结了个尾" class="headerlink" title="结了个尾"></a>结了个尾</h2><p>这是我断断续续写了 2 周完成的文章，算是自己对 CSS 的一个总结，虽然写得很长，但不足以覆盖所有 CSS 的知识，比如动画和一些 CSS3 的新特性就完全没涉及，因为这要写下来估计得有大几万字（其实就是懒 😝 ）。</p><p>码字作图不易，如果喜欢或者对你有丝毫帮助的话，帮忙点个👍 哈，点赞就是我的动力。同时也希望自己能坚持认真的写下去，因为在总结提升自己的同时如果也能帮助更多的前端er，那将会让我感觉很开心。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>[1]@charset: <em><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@charset">https://developer.mozilla.org/zh-CN/docs/Web/CSS/@charset</a></em></p><p>[2]Byte order mark: <em><a href="https://en.wikipedia.org/wiki/Byte_order_mark">https://en.wikipedia.org/wiki/Byte_order_mark</a></em></p><p>[3]@import: <em><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@import">https://developer.mozilla.org/zh-CN/docs/Web/CSS/@import</a></em></p><p>[4]@supports: <em><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@supports">https://developer.mozilla.org/zh-CN/docs/Web/CSS/@supports</a></em></p><p>[5]MDN CSS Selectors: <em><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Selectors">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Selectors</a></em></p><p>[6]Visual formatting model: <em><a href="https://www.w3.org/TR/CSS2/visuren.html">https://www.w3.org/TR/CSS2/visuren.html</a></em></p><p>[7]CSS 原理 - 你所不知道的 display: <em><a href="https://yachen168.github.io/article/display.html">https://yachen168.github.io/article/display.html</a></em></p><p>[8]格式化上下文: <em><a href="https://ithelp.ithome.com.tw/articles/10223896?sc=pt">https://ithelp.ithome.com.tw/articles/10223896?sc=pt</a></em></p><p>[9]CSS 原理 - Formatting Context: <em><a href="https://yachen168.github.io/article/Formatting-context.html">https://yachen168.github.io/article/Formatting-context.html</a></em></p><p>[10]Inline formatting contexts: <em><a href="https://www.w3.org/TR/CSS2/visuren.html#inline-formatting">https://www.w3.org/TR/CSS2/visuren.html#inline-formatting</a></em></p><p>[11]彻底搞懂CSS层叠上下文、层叠等级、层叠顺序、z-index: <em><a href="https://juejin.cn/post/6844903667175260174">https://juejin.cn/post/6844903667175260174</a></em></p><p>[12]CSS 颜色草案: <em><a href="https://drafts.csswg.org/css-color-3/">https://drafts.csswg.org/css-color-3/</a></em></p><p>[13]完整的色彩关键字列表: <em><a href="https://codepen.io/bulandent/pen/gOLovwL">https://codepen.io/bulandent/pen/gOLovwL</a></em></p><p>[14]众多的媒体特性: <em><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries#%E5%AA%92%E4%BD%93%E7%89%B9%E6%80%A7">https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries#%E5%AA%92%E4%BD%93%E7%89%B9%E6%80%A7</a></em></p><p>[15]7种方法解决移动端Retina屏幕1px边框问题: <em><a href="https://www.jianshu.com/p/7e63f5a32636">https://www.jianshu.com/p/7e63f5a32636</a></em></p><p>[16]CSS中的浮动和清除浮动，梳理一下: <em><a href="https://www.jianshu.com/p/09bd5873bed4">https://www.jianshu.com/p/09bd5873bed4</a></em></p><p>[17]reset.css: <em><a href="https://meyerweb.com/eric/tools/css/reset/">https://meyerweb.com/eric/tools/css/reset/</a></em></p><p>[18]Normalize.css: <em><a href="https://github.com/necolas/normalize.css">https://github.com/necolas/normalize.css</a></em></p><p>[19]让我们谈一谈 Normalize.css: <em><a href="https://jerryzou.com/posts/aboutNormalizeCss/">https://jerryzou.com/posts/aboutNormalizeCss/</a></em></p><p>[20]CSS 整块文本溢出省略特性探究: <em><a href="https://juejin.cn/post/6938583040469762055">https://juejin.cn/post/6938583040469762055</a></em></p><p>From <a href="https://mp.weixin.qq.com/s/UtYENocSsl0R10h8fww7Iw">https://mp.weixin.qq.com/s/UtYENocSsl0R10h8fww7Iw</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-5-万字-CSS-基础拾遗（核心知识、常见需求）&quot;&gt;&lt;a href=&quot;#1-5-万字-CSS-基础拾遗（核心知识、常见需求）&quot; class=&quot;headerlink&quot; title=&quot;1.5 万字 CSS 基础拾遗（核心知识、常见需求）&quot;&gt;&lt;/a&gt;1.5 万字 C</summary>
      
    
    
    
    <category term="web" scheme="https://blog.17lai.fun/categories/web/"/>
    
    
    <category term="web" scheme="https://blog.17lai.fun/tags/web/"/>
    
    <category term="http" scheme="https://blog.17lai.fun/tags/http/"/>
    
    <category term="ccs" scheme="https://blog.17lai.fun/tags/ccs/"/>
    
  </entry>
  
  <entry>
    <title>Vim 中文指南</title>
    <link href="https://blog.17lai.fun/ide/2021-09-15-vim-checklist/"/>
    <id>https://blog.17lai.fun/ide/2021-09-15-vim-checklist/</id>
    <published>2021-09-15T04:25:00.000Z</published>
    <updated>2021-09-15T12:31:09.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vim中文指南"><a href="#Vim中文指南" class="headerlink" title="Vim中文指南"></a>Vim中文指南</h1><h4 id="Enjoy-this-cheat-sheet-at-its-fullest-within-Dash-the-macOS-documentation-browser"><a href="#Enjoy-this-cheat-sheet-at-its-fullest-within-Dash-the-macOS-documentation-browser" class="headerlink" title="Enjoy this cheat sheet at its fullest within Dash, the macOS documentation browser."></a>Enjoy this cheat sheet at its fullest within <a href="https://kapeli.com/dash">Dash</a>, the macOS documentation browser.</h4><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><table><thead><tr><th><code>:help command</code></th><th>查找帮助例如<code>:help v</code>查找关于命令<code>v</code>的帮助文档, 养成查找帮助文档的好习惯~</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h2 id="退出Vim"><a href="#退出Vim" class="headerlink" title="退出Vim"></a>退出Vim</h2><table><thead><tr><th><code>:q[uit]</code></th><th>退出Vim操作在当文件有更改时会失败.</th></tr></thead><tbody><tr><td><code>:q[uit]!</code></td><td>忽略更改并退出Vim</td></tr><tr><td><code>:qa</code></td><td>退出所有打开的文件</td></tr><tr><td><code>:cq[uit]</code></td><td>忽略更改并退出所有打开的文件</td></tr><tr><td><code>:wq</code></td><td>保存并退出Vim</td></tr><tr><td><code>:wqa</code></td><td>保存并退出所有文件</td></tr><tr><td><code>:wq!</code></td><td>强制保存并退出Vim</td></tr><tr><td><code>:wq {file}</code></td><td>保存当前文件到{file}, 文件如果在编辑的话会失败</td></tr><tr><td><code>:wq! {file}</code></td><td>强制保存当前文件到{file}</td></tr><tr><td><code>:[range]wq[!]</code></td><td>只保存指定行范围内的内容并且退出例如<code>1,2wq!</code>表示只保存第一和第二行的内容，其他的的删除，然后退出</td></tr><tr><td><code>ZZ</code></td><td>保存并且强制退出Vim等同于<code>wq!</code></td></tr><tr><td><code>ZQ</code></td><td>强制退出不保存相当于<code>q!</code></td></tr></tbody></table><h2 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h2><table><thead><tr><th><code>:e[dit]</code></th><th>编辑(重新载入)当前文件当文件被另一个用户重新保存时，:e命令会重新从文件系统加载文件</th></tr></thead><tbody><tr><td><code>:e[dit]!</code></td><td>强制编辑(重新载入)当前文件忽略当前更改，强制从文件系统重新加载文件，当需要忽略当前更改时有用</td></tr><tr><td><code>:e[dit] {file}</code></td><td>编辑{file}</td></tr><tr><td><code>:e[dit]! {file}</code></td><td>编辑{file}忽略当前文件的更改，强制编辑{file}</td></tr><tr><td><code>gf</code></td><td>编辑光标下文件名所代表的文件助记: goto file</td></tr></tbody></table><h2 id="插入文本"><a href="#插入文本" class="headerlink" title="插入文本"></a>插入文本</h2><table><thead><tr><th><code>a</code></th><th>在光标后开始插入</th></tr></thead><tbody><tr><td><code>A</code></td><td>在光标所在行尾开始插入</td></tr><tr><td><code>i</code></td><td>在光标前开始插入</td></tr><tr><td><code>I</code></td><td>在光标所在行头开始插入</td></tr><tr><td><code>o</code></td><td>在当前光标下新起一行开始编辑</td></tr><tr><td><code>O</code></td><td>在当前光标上新起一行开始编辑</td></tr></tbody></table><h2 id="插入文件"><a href="#插入文件" class="headerlink" title="插入文件"></a>插入文件</h2><table><thead><tr><th><code>:r[ead] [name]</code></th><th>读取并插入[name]的文件内容到当前光标下例如 <code>:r sys.log</code> 将sys.log的内容插入到当前光标下</th></tr></thead><tbody><tr><td><code>:r[ead] !{cmd}</code></td><td>执行命令并且将命令的标准输出插入到当前光标下例如 <code>:r !date</code> 把当前日期插入到当前光标下一行</td></tr></tbody></table><h2 id="删除文本"><a href="#删除文本" class="headerlink" title="删除文本"></a>删除文本</h2><table><thead><tr><th><code>x</code></th><th>删除光标之后的字符</th></tr></thead><tbody><tr><td><code>&lt;Del&gt;``X</code></td><td>删除光标之前的字符</td></tr><tr><td><code>d{motion}</code></td><td>删除{motion}所代表范围内的文本例如 <code>dw</code>删除光标所在单词中光标以及后面的单词 ; <code>daw</code>删除光标所在单词; <code>d$</code>删除光标所在行后面的字符; <code>d0</code>删除光标所在行前面的字符</td></tr><tr><td><code>[count]dd</code></td><td>删除光标及以下一共[count]行， 如不指定[count]则删除光标所在行</td></tr><tr><td><code>D</code></td><td>删除光标所在行后面的字符相当于 <code>d$</code></td></tr><tr><td><code>{Visual}x``{Visual}d</code></td><td>在可视化模式下删除选中的字符查看可视化模式下的文本选择类目</td></tr><tr><td><code>{Visual}CTRL-H``{Visual}&lt;BS&gt;</code></td><td>在选择模式下删除选中的文本, <code>gh</code>进入选择模式</td></tr><tr><td><code>{Visual}X``{Visual}D</code></td><td>在可视化模式下删除选中的行</td></tr><tr><td><code>:[range]d[elete]</code></td><td>删除[range]范围内的行默认情况下删除当前光标所在行, 例如<code>:2d</code>删除第二行, <code>:2,3d</code>删除第二到第三行</td></tr><tr><td><code>:[range]d[elete] {count}</code></td><td>从指定范围开始删除{count}行例如<code>:2d 10</code>从第二行开始删除十行</td></tr></tbody></table><h2 id="变更-替换文本"><a href="#变更-替换文本" class="headerlink" title="变更/替换文本"></a>变更/替换文本</h2><table><thead><tr><th><code>r{char}</code></th><th>用{char}替换光标下的字符</th></tr></thead><tbody><tr><td><code>R</code></td><td>进入插入模式，但是对于输入是替换而不是插入例如按<code>R</code>后输入1234,如果插入的位置原本有字符,那么原来的字符将被替换成1234,行的长度不会增加</td></tr><tr><td><code>~</code></td><td>切换光标所在字符的大小写，并且光标向右移可以在光标所在处连续将后面的字符的大小写更改</td></tr><tr><td><code>g~{motion}</code></td><td>替换{motion}范围内的文本的大小写</td></tr><tr><td><code>{Visual}~</code></td><td>切换选中文本的大小写</td></tr><tr><td><code>{Visual}U</code></td><td>切换选中文本到大写</td></tr><tr><td><code>SHIFT+I+&lt;comment-char&gt;+ESC+ESC</code></td><td>块插入按<code>CTRL+V</code>进入块选择，选择完之后按照上述操作输入想插入的字符</td></tr><tr><td><code>x</code></td><td>块删除按<code>CTRL+V</code>进入块选择，然后<code>x</code>删除选中的字符</td></tr></tbody></table><h2 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h2><table><thead><tr><th><code>%</code></th><th>跳转和光标上的字符对应的字符上去例如文本[error], 在[上<code>%</code>会跳转到]上,反之跳转到[上</th></tr></thead><tbody><tr><td><code>*</code></td><td>搜索光标所在单词并高亮</td></tr></tbody></table><h2 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h2><p>范围允许将命令应用于当前缓冲区中的一组行。对于大多数命令，默认范围是当前行。<code>:21s/old/new/g</code> - 替换第21行的old为new<code>:1s/old/new/g</code> - 第一行<code>:$s/old/new/g</code> - 最后一行<code>:%s/old/new/g</code> - 所有行<code>:.,$s/old/new/g</code> - 当前行到最后一行</p><h2 id="替换-substitute"><a href="#替换-substitute" class="headerlink" title="替换(substitute)"></a>替换(substitute)</h2><table><thead><tr><th>对范围内的每一行替换{pattern}为{string}<code>:[range]s[ubstitute]/{pattern}/{string}/[c][e][g][p][r][i][I] [count]</code></th></tr></thead><tbody><tr><td>重复上一步:使用相同的搜索模式和替换字符串进行替换，但不使用相同的标志<code>:[range]s[ubstitute] [c][e][g][r][i][I] [count] :[range]&amp;[c][e][g][r][i][I] [count]</code>你可以添加其他的标志。</td></tr><tr><td>替换时你能使用的参数如下:<code>[c]</code> 确认每一次替换，Vim会执行对应匹配的内容. 你能输入以下命令:<code>y</code> 替换(Y)<code>n</code> 跳过(N)<code>a</code> 替换其余所有<code>q</code> 退出<code>CTRL-E</code> 向上滚动屏幕<code>CTRL-Y</code> 向下滚动屏幕<code>[e]</code> 当搜索模式失败时，不要发出错误消息，继续进行<code>[g]</code> 替换行中出现的所有项。如果没有此参数，则仅对每行中的第一个匹配进行替换<code>[i]</code> 忽略匹配时的大小写<code>[I]</code> 不忽略匹配时的大小写<code>[p]</code> 打印替换的最后一行内容</td></tr></tbody></table><h2 id="拷贝-移动文本"><a href="#拷贝-移动文本" class="headerlink" title="拷贝/移动文本"></a>拷贝/移动文本</h2><table><thead><tr><th><code>"{a-zA-Z0-9.%#:-"}</code></th><th>使用寄存器存储临时数据，用于下一次操作<a href="https://harttle.land/2016/07/25/vim-registers.html">寄存器分类</a></th></tr></thead><tbody><tr><td><code>:reg[isters]``:di[splay]</code></td><td>展示所有寄存器的值</td></tr><tr><td><code>:reg[isters] {arg}``:di[splay] [arg]</code></td><td>查看指定寄存器的值</td></tr><tr><td><code>["x]y{motion}</code></td><td>复制{motion}所代表的内容[到寄存器x]</td></tr><tr><td><code>["x][count]yy``["x][count]Y</code></td><td>复制[count]行(默认当前行)[到寄存器x]</td></tr><tr><td><code>{Visual}["x]y</code></td><td>可视化模式下复制选中文本[到寄存器x]见选择文本相关内容</td></tr><tr><td><code>{Visual}["x]Y</code></td><td>可视化模式下复制选中行[到寄存器x]</td></tr><tr><td><code>:[range]y[ank] [x]</code></td><td>复制[range]行范围[到寄存器x]</td></tr><tr><td><code>:[range]y[ank] [x] {count}</code></td><td>复制{count}行[到寄存器x], [range]取最后一个数字默认取当前行</td></tr><tr><td><code>["x][count]p</code></td><td>粘贴[寄存器x]内容[count]次到光标后默认是匿名寄存器</td></tr><tr><td><code>["x][count]P</code></td><td>粘贴[寄存器x]内容[count]次到光标前</td></tr><tr><td><code>["x]gp</code></td><td>同<code>p</code>, 然后将光标移至新文本后</td></tr><tr><td><code>["x]gP</code></td><td>同<code>P</code>, 然后将光标移至新文本后</td></tr><tr><td><code>:[line]pu[t] [x]</code></td><td>粘贴[寄存器x]内容到[line]行后默认当前行</td></tr><tr><td><code>:[line]pu[t]! [x]</code></td><td>粘贴[寄存器x]内容到[line]行前</td></tr></tbody></table><h2 id="撤消、重做和重复"><a href="#撤消、重做和重复" class="headerlink" title="撤消、重做和重复"></a>撤消、重做和重复</h2><table><thead><tr><th><code>[count]u</code></th><th>撤销前[count]个修改</th></tr></thead><tbody><tr><td><code>:u[ndo]</code></td><td>撤销上一次操作</td></tr><tr><td><code>[count]CTRL-R</code></td><td>重做[count]个撤销操作,即恢复</td></tr><tr><td><code>:red[o]</code></td><td>重做上个撤销操作</td></tr><tr><td><code>U</code></td><td>恢复当前行（即一次撤销对当前行的全部操作）</td></tr><tr><td><code>.</code></td><td>重复上一命令对编辑缓冲区的修改</td></tr></tbody></table><h2 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h2><table><thead><tr><th>基础命令<code>  k              &lt;上&gt; h   l      &lt;左&gt;         &lt;右&gt;  j              &lt;下&gt;</code></th><th></th></tr></thead><tbody><tr><td><code>[count]h``[count]&lt;Left&gt;</code></td><td>向左移动</td></tr><tr><td><code>[count]l``[count]&lt;Right&gt;``[count]&lt;Space&gt;</code></td><td>向右移动</td></tr><tr><td><code>[count]k``[count]&lt;Up&gt;``[count]CTRL-P</code></td><td>向上移动</td></tr><tr><td><code>[count]j``[count]&lt;Down&gt;``[count]CTRL-J``[count]&lt;NL&gt;``[count]CTRL-N</code></td><td>向下移动</td></tr><tr><td><code>0``&lt;Home&gt;</code></td><td>行首</td></tr><tr><td><code>^</code></td><td>到行首的第一个非空字符</td></tr><tr><td><code>$``&lt;End&gt;</code></td><td>行尾</td></tr><tr><td><code>g0``g&lt;Home&gt;</code></td><td>对于超出屏幕的一行，移动到屏幕的最左边不是整行的最左边，而是屏幕的最左边</td></tr><tr><td><code>g^</code></td><td>与<code>g0</code>不同的是移动到第一个非空字符</td></tr><tr><td><code>g$``g&lt;End&gt;</code></td><td>对于超出屏幕的一行，移动到屏幕的最右边不是整行的最右边，而是屏幕的最右边</td></tr><tr><td><code>f{char}</code></td><td>在当前行往右边寻找下一个{char}出现的位置<code>fd</code>寻找下一个d出现的位置</td></tr><tr><td><code>F{char}</code></td><td>在当前行往左边寻找上一个{char}出现的位置与<code>f{char}</code>命令相反</td></tr><tr><td><code>t{char}</code></td><td>正向移动到下一个{char}的前一个字符上</td></tr><tr><td><code>T{char}</code></td><td>反向移动到上一个{char}的后一个字符上</td></tr><tr><td><code>[count];</code></td><td>重复上一个<code>f``F``t``T</code>命令[count]次</td></tr><tr><td><code>[count],</code></td><td>反方向重复上一个<code>f``F``t``T</code>命令[count]次当跳转过头了之后可以使用<code>,</code>操作回到之前的位置</td></tr><tr><td><code>- &lt;minus&gt;</code></td><td>向上[count]行，光标回到行首第一个非空字符上</td></tr><tr><td><code>+``CTRL-M``&lt;CR&gt;</code></td><td>向下[count]行，光标回到行首第一个非空字符上</td></tr><tr><td><code>_ &lt;underscore&gt;</code></td><td>向下[count]-1行，光标回到行首第一个非空字符上</td></tr><tr><td><code>CTRL-End``G</code></td><td>去第[count]行首第一个非空字符默认:最后一行</td></tr><tr><td><code>CTRL-Home``gg</code></td><td>去第[count]行首第一个非空字符默认:第一行</td></tr><tr><td><code>SHIFT-Right``w</code></td><td>按照标点或者空格向右移动[count]个词，光标在词的开头例如ii d d d,e,d w,dd, 对于空格和标点w都作为分隔符</td></tr><tr><td><code>CTRL-Right``W</code></td><td>按照空格向右移动[count]个词，光标在词的开头例如ii d d d,e,d w,dd, 对于空格W作为分隔符</td></tr><tr><td><code>e</code></td><td>按照标点或者空格向右移动[count]个词，光标在词的结尾</td></tr><tr><td><code>E</code></td><td>按照空格向右移动[count]个词，光标在词的结尾</td></tr><tr><td><code>SHIFT-Left``b</code></td><td>按照标点或者空格向左移动[count]个词，光标在词的开头</td></tr><tr><td><code>CTRL-Left``B</code></td><td>按照空格向左移动[count]个词，光标在词的开头</td></tr><tr><td><code>ge</code></td><td>按照标点或者空格向左移动[count]个词，光标在词的结尾</td></tr><tr><td><code>gE</code></td><td>按照空格向左移动[count]个词，光标在词的结尾</td></tr><tr><td><code>H</code></td><td>移动光标到屏幕上方</td></tr><tr><td><code>M</code></td><td>移动光标到屏幕中间</td></tr><tr><td><code>L</code></td><td>移动光标到屏幕底部</td></tr><tr><td><code>zz</code></td><td>当前行滚动到屏幕中间</td></tr><tr><td><code>zt</code></td><td>当前行滚动到屏幕顶部</td></tr><tr><td><code>zb</code></td><td>当前行滚动到屏幕底部</td></tr><tr><td>以下命令在<code>words</code>或者<code>WORDS</code>间移动 <code>word</code>由字母、数字和下划线组成，或者由其他非空白字符组成，用空格(空格、制表符、<eol>)分隔。这可以通过“iskeyword”选项进行更改。 <code>WORD</code>由一系列非空白字符组成，用空格分隔。空行也被认为是一个单词和一个单词。</eol></td><td></td></tr><tr><td><code>(</code></td><td>向后跳过[count]个sentences</td></tr><tr><td><code>)</code></td><td>向前跳过[count]个sentences</td></tr><tr><td><code>{</code></td><td>向后跳过[count]个段落</td></tr><tr><td><code>}</code></td><td>向前跳过[count]个段落</td></tr><tr><td><code>]]</code></td><td>向前跳过[count]节或者跳到下个第一列的{通过<code>:help ]]</code>获取帮助信息</td></tr><tr><td><code>][</code></td><td>向前跳过[count]节或者跳到下个第一列的}通过<code>:help ][</code>获取帮助信息</td></tr><tr><td><code>[[</code></td><td>向后跳过[count]节或者跳到下个第一列的{通过<code>:help [[</code>获取帮助信息</td></tr><tr><td><code>[]</code></td><td>向后跳过[count]节或者跳到下个第一列的}通过<code>:help []</code>获取帮助信息</td></tr></tbody></table><h2 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h2><table><thead><tr><th><code>m{a-zA-Z}</code></th><th>在光标所在位置设置标记{a-zA-Z}标记可以方便在文档的不同位置之间跳转</th></tr></thead><tbody><tr><td>`m’<code>m\</code></td><td>设置前面的上下文标记通过<code>:help m'</code>获取更多信息</td></tr><tr><td><code>:[range]ma[rk] {a-zA-Z}``:[range]k{a-zA-Z}</code></td><td>在[range]的最后一个数字所在行首设置标记{a-zA-Z}默认为光标所在行</td></tr><tr><td><code>'{a-z}</code></td><td>跳转到标记{a-z}例如<code>'a</code>跳转到标记a</td></tr><tr><td><code>'{A-Z0-9}</code></td><td>跳转到标记{A-Z0-9}大写标记可以跨越不同的缓冲区, 即可以在不同的文件之间跳转</td></tr><tr><td>``{a-z}`</td><td>跳转到标记{a-z}</td></tr><tr><td>``{A-Z0-9}`</td><td>跳转到标记{A-Z0-9},这个命令跨越不同的缓冲区</td></tr><tr><td><code>:marks</code></td><td>列出所有标记</td></tr><tr><td><code>:marks {arg}</code></td><td>列出指定的标记</td></tr></tbody></table><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><table><thead><tr><th><code>/{pattern}[/]&lt;CR&gt;</code></th><th>往前搜索匹配{pattern}的内容例如<code>/df</code>从光标处向前搜索匹配df的内容</th></tr></thead><tbody><tr><td><code>/{pattern}/{offset}&lt;CR&gt;</code></td><td>往上或往下{offset}行向前搜索匹配{pattern}的内容</td></tr><tr><td><code>/&lt;CR&gt;</code></td><td>重复上一次向前搜索</td></tr><tr><td><code>//{offset}&lt;CR&gt;</code></td><td>重复上一次向前搜索</td></tr><tr><td><code>?{pattern}[?]&lt;CR&gt;</code></td><td>向后搜索匹配{pattern}的内容</td></tr><tr><td><code>?{pattern}?{offset}&lt;CR&gt;</code></td><td>往上或往下{offset}行向后搜索匹配{pattern}的内容</td></tr><tr><td><code>?&lt;CR&gt;</code></td><td>重复上一次向后搜索</td></tr><tr><td><code>??{offset}&lt;CR&gt;</code></td><td>重复上一次向后搜索</td></tr><tr><td><code>n</code></td><td>跳到下一个搜索结果</td></tr><tr><td><code>N</code></td><td>跳到上一个搜索结果</td></tr><tr><td><code>:lv {pattern} [g][j] {file(s)}</code></td><td>使用内部的grep命令在文件中搜索,,结果放在QuickFix列表中，列表可以使用<code>:cw</code>打开’g’ 返回所有匹配项，而不仅仅是每行一个匹配项’j’ 不自动调到第一个匹配项递归搜索使用<code>**</code>模式例如<code>**/*.c</code></td></tr></tbody></table><h2 id="选择文本-可视化模式Visual-Mode"><a href="#选择文本-可视化模式Visual-Mode" class="headerlink" title="选择文本(可视化模式Visual Mode)"></a>选择文本(可视化模式Visual Mode)</h2><table><thead><tr><th>要选择文本，请使用下面的命令之一进入可视化模式，并使用运动命令高亮显示感兴趣的文本。然后，对文本使用一些命令。可以使用的操作符是:<code>~</code> 切换大小写<code>d</code> 删除<code>c</code> 更改<code>y</code> 复制<code>&gt;</code> 右挪<code>&lt;</code> 左挪<code>!</code> 使用外部命令过滤<code>=</code> 使用’equalprg’过滤<code>gq</code> 将行格式化为“textwidth”长度</th><th></th></tr></thead><tbody><tr><td><code>v</code></td><td>按字符启动可视化模式</td></tr><tr><td><code>V</code></td><td>按行启动可视化模式(水平方向)</td></tr><tr><td><code>CTRL-V</code> <code>CTRL-Q</code></td><td>按行启动可视化模式(垂直方向)</td></tr><tr><td><code>&lt;Esc&gt;</code></td><td>退出可视化模式</td></tr><tr><td><code>viw</code></td><td>可视化模式下选择当前光标所在单词</td></tr></tbody></table><h2 id="暂停"><a href="#暂停" class="headerlink" title="暂停"></a>暂停</h2><table><thead><tr><th><code>CTRL-Z</code></th><th>暂停Vim将vim放置在后台, 使用<code>jobs</code>命令可以查看有哪些后台vim在运行， 使用<code>fg 序号</code>命令可以将对应的vim转到前台</th></tr></thead><tbody><tr><td><code>:sus[pend][!]``:st[op][!]</code></td><td>暂停Vim!</td></tr></tbody></table><h2 id="多窗口"><a href="#多窗口" class="headerlink" title="多窗口"></a>多窗口</h2><table><thead><tr><th><code>:e filename</code></th><th>编辑另一个文件</th></tr></thead><tbody><tr><td><code>:split filename</code></td><td>水平拆分窗口然后打开另一个文件</td></tr><tr><td><code>CTRL-W v</code></td><td>垂直拆分窗口</td></tr><tr><td><code>CTRL-W s</code></td><td>水平拆分当前窗口</td></tr><tr><td><code>CTRL-W Arrow Up</code></td><td>移动光标到上一个窗口</td></tr><tr><td><code>CTRL-W CTRL-W</code></td><td>循环切换窗口</td></tr><tr><td><code>CTRL-W_</code></td><td>最大化当前矿口</td></tr><tr><td><code>CTRL-W=</code></td><td>所有窗口一样大</td></tr><tr><td><code>10 CTRL-W+</code></td><td>将当前窗口增大10行高度</td></tr><tr><td><code>:vsplit file</code></td><td>垂直拆分并打开另一个文件</td></tr><tr><td><code>:sview file</code></td><td><code>split</code>的readonly模式</td></tr><tr><td><code>:hide</code></td><td>关闭当前窗口</td></tr><tr><td><code>:only</code></td><td>仅保持当前窗口打开</td></tr><tr><td><code>:ls</code></td><td>展示当前缓存区列表（文件列表）</td></tr><tr><td><code>:b 2</code></td><td>打开缓冲区中编号为2的文件</td></tr><tr><td><code>:bd[n]</code></td><td>关闭当前缓冲区</td></tr></tbody></table><h2 id="标签式浏览"><a href="#标签式浏览" class="headerlink" title="标签式浏览"></a>标签式浏览</h2><table><thead><tr><th>当编辑程序时，通常需要跳转到另一个位置。Vim使用一个标记文件来列出每个单词和 的位置。标记文件必须由能够处理文件语法的实用程序创建，并且必须在进行了重要的编辑之后进行更新。</th><th></th></tr></thead><tbody><tr><td><code>CTRL-]``LMB-on-tag+CTRL``g LMB-on-tag</code></td><td>跳转到标签</td></tr><tr><td><code>CTRL+t</code></td><td>跳转后返回</td></tr><tr><td><code>:tags</code></td><td>显示标签堆栈</td></tr></tbody></table><h2 id="内部列表"><a href="#内部列表" class="headerlink" title="内部列表"></a>内部列表</h2><table><thead><tr><th>Vim使用一个全局的QuickFix列表. 列表包含了由其他命令填充的文件位置.Vim每个窗口有一个位置列表。该列表类似于QuickFix列表，包含文件中的位置列表。</th><th></th></tr></thead><tbody><tr><td><code>:cw</code></td><td>打开全局的QuickFix列表</td></tr><tr><td><code>:ccl</code></td><td>关闭QuickFix列表</td></tr><tr><td><code>:lw</code></td><td>打开位置列表</td></tr></tbody></table><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ul><li>基于 <a href="http://www.fprintf.net/vimCheatSheet.html">fprintf</a>.</li><li>由<a href="https://github.com/cstfb">cstfb</a>基于<a href="https://github.com/ariefbayu">Arief Bayu Purwanto</a> 制作的Vim速查表翻译而来.</li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1520210915150901.png" alt="vim速查"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vim中文指南&quot;&gt;&lt;a href=&quot;#Vim中文指南&quot; class=&quot;headerlink&quot; title=&quot;Vim中文指南&quot;&gt;&lt;/a&gt;Vim中文指南&lt;/h1&gt;&lt;h4 id=&quot;Enjoy-this-cheat-sheet-at-its-fullest-within-</summary>
      
    
    
    
    <category term="ide" scheme="https://blog.17lai.fun/categories/ide/"/>
    
    
    <category term="vim" scheme="https://blog.17lai.fun/tags/vim/"/>
    
    <category term="ide" scheme="https://blog.17lai.fun/tags/ide/"/>
    
  </entry>
  
  <entry>
    <title>深度学习之视频人脸识别系列</title>
    <link href="https://blog.17lai.fun/ai/2021-09-14-deep-learning-of-face-recognition/"/>
    <id>https://blog.17lai.fun/ai/2021-09-14-deep-learning-of-face-recognition/</id>
    <published>2021-09-14T04:25:00.000Z</published>
    <updated>2021-09-14T08:38:35.963Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系列1-简介"><a href="#系列1-简介" class="headerlink" title="系列1 简介"></a>系列1 简介</h2><p>出品 | 磐创AI技术团队</p><p>【磐创AI导读】本文是深度学习之视频<a href="https://cloud.tencent.com/product/facerecognition?from=10680">人脸识别</a>系列的第一篇文章，介绍了人脸识别领域的一些基本概念，分析了深度学习在人脸识别的基本流程，并总结了近年来科研领域的研究进展，最后分析了静态数据与视频动态数据在人脸识别技术上的差异。欢迎大家点击上方篮子关注我们的公众号：磐创AI。</p><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a><strong>一、基本概念</strong></h2><h3 id="1-人脸识别（face-identification）"><a href="#1-人脸识别（face-identification）" class="headerlink" title="1. 人脸识别（face identification）"></a><strong>1. 人脸识别（face identification）</strong></h3><p>人脸识别是1对n的比对，给定一张人脸图片，如何在n张人脸图片中找到同一张人脸图片，相对于一个分类问题，将一张人脸划分到n张人脸中的一张。类似于管理人员进行的人脸识别门禁系统。</p><h3 id="2-人脸验证（face-verification）"><a href="#2-人脸验证（face-verification）" class="headerlink" title="2.人脸验证（face verification）"></a><strong>2.人脸验证（face verification）</strong></h3><p>人脸验证的1对1的比对，给定两张人脸图片，判断这两张人脸是否为同一人，类似于手机的人脸解锁系统，事先在手机在录入自己的脸部信息，然后在开锁时比对摄像头捕捉到的人脸是否与手机上录入的人脸为同一个人。</p><h3 id="3-人脸检测（face-detection）"><a href="#3-人脸检测（face-detection）" class="headerlink" title="3.人脸检测（face detection）"></a><strong>3.人脸检测（face detection）</strong></h3><p>人脸检测是在一张图片中把人脸检测出来，即在图片上把人脸用矩形框出来，并得到矩形的坐标，如下图所示。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914140027.png"></p><h3 id="4-人脸关键点检测"><a href="#4-人脸关键点检测" class="headerlink" title="4. 人脸关键点检测"></a><strong>4. 人脸关键点检测</strong></h3><p>根据输入的人脸图像，识别出面部关键特征点，如眼睛、鼻尖、嘴角点、眉毛以及人脸各部件轮廓点的坐标，如下图所示。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914140105.png"></p><h3 id="5-人脸矫正（人脸对齐）"><a href="#5-人脸矫正（人脸对齐）" class="headerlink" title="5. 人脸矫正（人脸对齐）"></a><strong>5. 人脸矫正（人脸对齐）</strong></h3><p>通过人脸关键点检测得到人脸的关键点坐标，然后根据人脸的关键点坐标调整人脸的角度，使人脸对齐，由于输入图像的尺寸是大小不一的，人脸区域大小也不相同，角度不一样，所以要通过坐标变换，对人脸图像进行归一化操作，如下图所示。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914140120.png"></p><h2 id="二、基于深度学习的人脸识别算法基本流程"><a href="#二、基于深度学习的人脸识别算法基本流程" class="headerlink" title="二、基于深度学习的人脸识别算法基本流程"></a><strong>二、基于深度学习的人脸识别算法基本流程</strong></h2><p>随着神经网络的迅速发展和其对图像数据的强大的特征提取，深度学习运用于人脸识别也成为热点研究方向；2014年的开山之作DeepFace，第一个真正将<a href="https://cloud.tencent.com/solution/bigdata?from=10680">大数据</a>和深度学习结合应用于人脸识别与验证，确立人脸识别的常规流程：图片-&gt;人脸与关键点检测-&gt;人脸对齐-&gt;人脸表征（representation）-&gt;分类。首先将图片中的人脸检测处理并通过关键点进行对齐，如何输入到神经网络，得到特征向量，通过分类训练过程，该向量即为人脸的特征向量。要求出两张人脸的相似度即计算两个特征的向量度量之差，方法包括：SVM、SiameseNetwork、JointBayesian、L1距离、L2距离、cos距离等。</p><h2 id="三、科研领域近期进展"><a href="#三、科研领域近期进展" class="headerlink" title="三、科研领域近期进展"></a><strong>三、科研领域近期进展</strong></h2><p>科研领域近期进展主要集中于loss函数的研究，包括DeepId2（Contrastive Loss）、FaceNet（Triplet loss）、L-Softmax、SphereFace（A-Softmax）、Center Loss、L2-Softmax、NormFace、CosFace（AM-Softmax）、ArcFace（AA-Softmax）等。</p><h2 id="四、基于视频人脸识别和图片人脸识别的区别"><a href="#四、基于视频人脸识别和图片人脸识别的区别" class="headerlink" title="四、基于视频人脸识别和图片人脸识别的区别"></a><strong>四、基于视频人脸识别和图片人脸识别的区别</strong></h2><p><strong>（_该小结部分参考于博客园 - 米罗西<a href="http://www.cnblogs.com/zhehan54/p/6727631.html_%EF%BC%89">http://www.cnblogs.com/zhehan54/p/6727631.html_）</a></strong></p><p>相对于图片数据，目前视频人脸识别有很多挑战，包括：（1）视频数据一般为户外，视频图像质量比较差；（2）人脸图像比较小且模糊；（3）视频人脸识别对实时性要求更高。</p><p>但是视频数据也有一些优越性，视频数据同时具有空间信息和时间信息，在时间和空间的联合空间中描述人脸和识别人脸会具有一定提升空间。在视频数据中人脸跟踪是一个提高识别的方法，首先检测出人脸，然后跟踪人脸特征随时间的变化。当捕捉到一帧比较好的图像时，再使用图片人脸识别算法进行识别。这类方法中跟踪和识别是单独进行的，时间信息只在跟踪阶段用到。</p><p>【总结】：本期文章主要介绍了基于深度学习的人脸识别算法的一些基本入门知识，下一期我给大家介绍人脸识别中获取神经网络输入的算法，即关于人脸检测、人脸关键点检测与人脸对齐的一些重要算法和相关论文解析。</p><h2 id="系列2-人脸检测与对齐"><a href="#系列2-人脸检测与对齐" class="headerlink" title="系列2 人脸检测与对齐"></a>系列2 人脸检测与对齐</h2><h2 id="一、人脸检测与关键点检测"><a href="#一、人脸检测与关键点检测" class="headerlink" title="一、人脸检测与关键点检测"></a><strong>一、人脸检测与关键点检测</strong></h2><h3 id="1-问题描述："><a href="#1-问题描述：" class="headerlink" title="1. 问题描述："></a><strong>1. 问题描述：</strong></h3><p>人脸检测解决的问题为给定一张图片，输出图片中人脸的位置，即使用方框框住人脸，输出方框的左上角坐标和右下角坐标或者左上角坐标和长宽。算法难点包括：人脸大小差异、人脸遮挡、图片模糊、角度与姿态差异、表情差异等。而关键检测则是输出人脸关键点的坐标，如左眼（x1，y1）、右眼（x2，y2）、鼻子（x3，y3）、嘴巴左上角（x4，y4）、嘴巴右上角（x5，y5）等。</p><h3 id="2-深度学习相关算法："><a href="#2-深度学习相关算法：" class="headerlink" title="2. 深度学习相关算法："></a><strong>2. 深度学习相关算法：</strong></h3><h4 id="（1）Cascade-CNN"><a href="#（1）Cascade-CNN" class="headerlink" title="（1）Cascade CNN"></a><strong>（1）Cascade CNN</strong></h4><p>Cascade CNN源于发表于2015年CVPR上的一篇论文A Convolutional Neural Network Cascade for Face Detection【2】，作者提出了一种级连的CNN网络结构用于人脸检测。算法主体框架是基于V-J的瀑布流思想【1】，是传统技术和深度网络相结合的一个代表，Cascade CNN包含了多个分类器，这些分类器使用级联结构进行组织，与V-J不同的地方在于Cascade CNN采用卷积网络作为每一级的分类器。整个网络的处理流程如下图所示：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914140330.png"></p><p>整个处理流程里包含了六个网络：12-net、12-calibration-net、24-net、24-calibration-net、48-net、48-calibration-net，其中三个二分类网络用于分类其是否为人脸，另外三个calibration网络用于矫正人脸框边界。其中第二个网络之后、第四个网络之后、第五个网络之后使用NMS算法过滤掉冗余的框。</p><p>12-net，24-net和48-net的网络结构如下图所示：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914140401.png"></p><p>13-12-calibration-net，24-calibration-net，48-calibration-net的结构如下图所示：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914140426.png"></p><p>该算法结合了V-J框架构造了级连的CNN网络结构并设计边界矫正网络用来专门矫正人脸框边界，在AFW数据集上准确率达到97.97%。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914140457.png"></p><h4 id="（2）Faceness-Net"><a href="#（2）Faceness-Net" class="headerlink" title="（2）Faceness-Net"></a><strong>（2）Faceness-Net</strong></h4><p>Faceness-Net源于论文A convolutional neural network cascade for face detection【3】，该算法基于DCNN网络【5】的人脸局部特征分类器，算法首先进行人脸局部特征的检测，使用多个基于DCNN网络的facial parts分类器对人脸进行评估，然后根据每个部件的得分进行规则分析得到Proposal的人脸区域，然后从局部到整体得到人脸候选区域，再对人脸候选区域进行<a href="https://cloud.tencent.com/product/facerecognition?from=10680">人脸识别</a>和矩形框坐标回归，该过程分为两个步骤。</p><p>第一个步骤：每个人脸局部特征使用attribute-aware网络检测并生成人脸局部图，其中一共五个特征属性： 头发、眼睛、鼻子、嘴巴、胡子。然后通过人脸局部图根据评分构建人脸候选区域，具体如下图所示：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914140529.png"></p><p>第二个步骤：训练一个多任务的卷积网络来完成人脸二分类和矩形框坐标回归，进一步提升其效果，具体如下图所示：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914140548.png"></p><p>Faceness从脸部特征的角度来解决人脸检测中的遮挡和姿态角度问题，其整体性能在当时是非常好的，在AFW数据集上准确率可以达到98.05%。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914140611.png"></p><h4 id="（3）MTCNN"><a href="#（3）MTCNN" class="headerlink" title="（3）MTCNN"></a><strong>（3）MTCNN</strong></h4><p>MTCNN源于论文Joint Face Detection and Alignment using Multi-task Cascaded Convolutional Networks【6】，是基于多任务级联卷积神经网络来解决人脸检测和对齐问题，同时输出图片的人脸矩阵框和关键点坐标（左眼、右眼、鼻子、嘴巴左上角、嘴巴右上角）。MTCNN为三阶的级联卷积神经网络，整体框架如下图所示：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914140644.png"></p><p>输入阶段：为应对目标多尺度问题，将原始图像resize到不同尺寸，构建图像金字塔，作为三阶级联架构的输入，这样处理可以更好地检测大小不一的人脸。</p><p>第一阶段：通过一个全部由卷积层组成的CNN，取名P-Net，获取候选人脸框、关键点坐标和人脸分类（是人脸或不是），之后采用NMS过滤掉高重叠率的候选窗口。如下图所示：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914140717.png"></p><p>第二阶段：第一阶段输出的候选人脸框作为更为复杂的R-Net网络的输入，R-Net进一步筛除大量错误的候选人脸框，同样也通过NMS过滤掉高重叠率的候选窗口。如下图所示：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914140741.png"></p><p>第三阶段：与第二阶段类似，最终网络输出人脸框坐标、关键点坐标和人脸分类（是人脸或不是）。如下图所示：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914140801.png"></p><p>MTCNN通过三级的级联卷积神经网络对任务进行从粗到细的处理，还提出在线困难样本生成策略（online hard sample mining ）可以进一步提升性能。兼并了速度与准确率，速度在<a href="https://cloud.tencent.com/product/gpu?from=10680">GPU</a>上可以达到99FPS，在 FDDB数据集上可以达到95.04准确率，具体如下图所示：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914140818.png"></p><h2 id="二、人脸对齐（部分参考于GraceDD的博客文章）"><a href="#二、人脸对齐（部分参考于GraceDD的博客文章）" class="headerlink" title="二、人脸对齐（部分参考于GraceDD的博客文章）"></a><strong>二、人脸对齐（部分参考于GraceDD的博客文章）</strong></h2><p>人脸对齐通过人脸关键点检测得到人脸的关键点坐标，然后根据人脸的关键点坐标调整人脸的角度，使人脸对齐，由于输入图像的尺寸是大小不一的，人脸区域大小也不相同，角度不一样，所以要通过坐标变换，对人脸图像进行归一化操作。人脸关键点检测有很多算法可以使用包括：ASM、AAM、DCNN 、TCDCN 、MTCNN 、TCNN、TCNN等，这里就不详细介绍，主要说一下得到人脸关键点之后如何进行人脸对齐，是所有人脸达到归一化效果，该过程如下图所示：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914140841.png"></p><p>该过程涉及到图像的仿射变换，简单来说，“仿射变换”就是：“线性变换”+“平移”，即坐标的变换。假如我们希望人脸图片归一化为尺寸大小600<em>600，左眼位置在（180，200），右眼位置在（420，200）。 这样人脸中心在图像高度的1/3位置，并且两个眼睛保持水平，所以我们选择左眼角位置为( 0.3</em>width, height / 3 )，右眼角位置为（0.7*width , height / 3） 。</p><p>利用这两个点计算图像的变换矩阵（similarity transform），该矩阵是一个2*3的矩阵，如下：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652.png" alt="image-20210914140905779"></p><p>如果我们想对一个矩形进行变换，其中x、y方向的缩放因为分别为sx，sy，同时旋转一个角度 ，然后再在x方向平移tx, 在y方向平移ty</p><p>利用opencv的estimateRigidTransform方法，可以获得这样的变换矩阵，但遗憾的是，estimateRigidTransform至少需要三个点，所以我们需要构选第三个点，构造方法是用第三个点与已有的两个点构成等边三角形，这样第三个点的坐标为： </p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914140918.png"></p><p>代码如下：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914140938.png"></p><p>经过上一步的处理之后，所有的图像都变成一样大小，并且又三个关键点的位置是保持一致的，但因为除了三个点对齐了之外，其他点并没有对齐。所以根据得到的变换矩阵对剩下所有的点进行仿射变换，opencv代码如下所示：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914141001.png"></p><p>img为输入图像;</p><p>warped为变换后图像，类型与src一致;</p><p>M为变换矩阵，需要通过其它函数获得，当然也可以手动输入;</p><p>Image_size为输出图像的大小;</p><h2 id="三、-总结"><a href="#三、-总结" class="headerlink" title="三、 总结"></a><strong>三、 总结</strong></h2><p>本期文章主要介绍了人脸检测与对齐的相关算法，下一期我给大家介绍一下人脸表征的相关算法，即通过深度学习提取人脸特征，通过比较人脸特征进行人脸识别与验证。</p><h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a><strong>参考文献：</strong></h3><ul><li>【1】 S.Z.Li, L.Zhu, Z.Q.Zhang, A.Blake, H.J.Zhang, H.Y.Shum. Statistical learning of multi-view face detection. In: Proceedings of the 7-th European Conference on Computer Vision. Copenhagen, Denmark: Springer, 2002.67-81.</li><li>【2】Li H, Lin Z, Shen X, et al. A convolutional neural network cascade for face detection[C]//Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition. 2015: 5325-5334.</li><li>【3】Yang S, Luo P, Loy C C, et al. Faceness-Net: Face detection through deep facial part responses[J]. IEEE transactions on pattern analysis and machine intelligence, 2017.</li><li>【4】Yang S, Luo P, Loy C C, et al. From facial parts responses to face detection: A deep learning approach[C]//Proceedings of the IEEE International Conference on Computer Vision. 2015: 3676-3684.</li><li>【5】Sun Y, Wang X, Tang X. Deep convolutional network cascade for facial point detection[C]//Proceedings of the IEEE conference on computer vision and pattern recognition. 2013: 3476-3483.</li><li>【6】Zhang K, Zhang Z, Li Z, et al. Joint face detection and alignment using multitask cascaded convolutional networks[J]. IEEE Signal Processing Letters, 2016, 23(10): 1499-1503.</li></ul><h2 id="系列3：人脸表征"><a href="#系列3：人脸表征" class="headerlink" title="系列3：人脸表征"></a>系列3：人脸表征</h2><h2 id="一、人脸表征"><a href="#一、人脸表征" class="headerlink" title="一、人脸表征"></a><strong>一、人脸表征</strong></h2><p>把人脸图像通过神经网络，得到一个特定维数的特征向量，该向量可以很好地表征人脸数据，使得不同人脸的两个特征向量距离尽可能大，同一张人脸的两个特征向量尽可能小，这样就可以通过特征向量来进行人脸识别。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914141235.png" alt="image-20210914141233355"></p><h2 id="二、论文综述"><a href="#二、论文综述" class="headerlink" title="二、论文综述"></a><strong>二、论文综述</strong></h2><h3 id="1-DeepFace："><a href="#1-DeepFace：" class="headerlink" title="1. DeepFace："></a><strong>1.</strong> <strong>DeepFace：</strong></h3><p>2014年论文DeepFace: Closing the Gap toHuman-Level Performance in Face Verification提出了DeepFace算法，第一个真正将<a href="https://cloud.tencent.com/solution/bigdata?from=10680">大数据</a>和深度学习神经网络结合应用于人脸识别与验证。在该人脸识别模型中分为四个阶段：人脸检测 =&gt; 人脸对齐 =&gt; 人脸表征 =&gt; 人脸分类，在LFW数据集中可以达到97.00%的准确率。</p><p>（1）人脸检测与对齐：该模型使用3D模型来将人脸对齐，该方法过于繁琐，在实际应用中很少使用，经过3D对齐以后，形成的图像都是152×152的图像，具体步骤如下图。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-1.png" alt="image-20210914141257351"></p><p>分为如下几步：</p><p>a. 人脸检测，使用6个基点  b. 二维剪切，将人脸部分裁剪出来  c. 67个基点，然后Delaunay三角化，在轮廓处添加三角形来避免不连续  d. 将三角化后的人脸转换成3D形状  e. 三角化后的人脸变为有深度的3D三角网  f. 将三角网做偏转，使人脸的正面朝前。  g. 最后放正的人脸  h. 一个新角度的人脸（在论文中没有用到）</p><p>（2）人脸表征：人脸表征使用了5个卷积层和1个最大池化层、1个全连接层，如下图所示。前三层的目的在于提取低层次的特征,为了网络保留更多图像信息只使用了一层池化层；后面三层都是使用参数不共享的卷积核，因为主要是因为人脸不同的区域的特征是不一样的，具有很大的区分性，比如鼻子和眼睛所表示的特征是不一样的，但是使用参数不共享的卷积核也增加了模型计算量以及需要更多的训练数据。最后输出的4096维向量进行L2归一化。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914141316.png" alt="image-20210914141314693"></p><p>a. Conv：32个11×11×3的卷积核</p><p>b. max-pooling: 3×3， stride=2</p><p>c. Conv: 16个9×9的卷积核</p><p>d. Local-Conv: 16个9×9的卷积核，Local的意思是卷积核的参数不共享</p><p>e. Local-Conv: 16个7×7的卷积核，参数不共享</p><p>f. Local-Conv: 16个5×5的卷积核，参数不共享</p><p>g. Fully-connected: 4096维</p><p>h. Softmax: 4030维</p><p>（3）分类：论文介绍了两种方法进行分类，加权的卡方距离和使用Siamese网络结构，设f1和f2为特征向量，上一个步骤的输出，则有：</p><p>①加权卡方距离：计算公式如下，加权参数由线性SVM计算得到：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-2.png" alt="image-20210914141335052"></p><p>②Siamese网络：网络结构是成对进行训练，得到的特征表示再使用如下公式进行计算距离：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-3.png" alt="image-20210914141351772"></p><h3 id="2-DeepID1："><a href="#2-DeepID1：" class="headerlink" title="2. DeepID1："></a><strong>2.</strong> <strong>DeepID1：</strong></h3><p>DeepID1 是2014年Deep LearningFace Representation from Predicting 10,000 Classes一文提出的，是DeepID三部曲的第一篇。DeepID1 使用softmax多分类训练，主要思想第一个是数据集的增大，包括训练集使用celebface，包含87628张图片，5436个人脸，增大了训练集；使用多尺寸输入，通过5个landmarks将每张人脸划分成10regions，每张图片提取60patches=10regions<em>3scales</em>2(RGB orgray)，第二个是网络结构，DeepID提取的人脸特征就是一个由连接第三层与第四层组成的全连接层特征，如下图所示，每个patches经过这个cnn网络，第四层的特征更加全局化（global），第三层的特征更加细节，因此DeepID连接了两者，以求同时包含全局，细节信息。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-4.png" alt="image-20210914141407002"></p><p>60个patches使用60个CNN,每个CNN提取2*160=320维特征（与水平翻转一起输入），总网络模型如下图所示，最后分别使用联合贝叶斯算法与神经网络进行分类，并比较结果。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-5.png" alt="image-20210914141422288"></p><p>模型最终以CelebFaces+中202,599图像作为训练集， patch数提升为100（10r<em>10s</em>2） ，特征数提升为100<em>160</em>2=32000 然后使用PCA降为150维 ，使用联合贝叶斯算法进行验证， 最终在LFW上达到97.20%的验证准确率。</p><h3 id="3-DeepID2："><a href="#3-DeepID2：" class="headerlink" title="3. DeepID2："></a><strong>3.</strong> <strong>DeepID2：</strong></h3><p>DeepID2是Deep Learning Face Representationby Joint Identification-Verification一文提出的，对DeepID1进行了进一步的改进，提出了contrastive loss，在分类任务，我们需要的是减少类内差距（同一人脸），增加类间差距（不同人脸），softmax loss分类的监督信号可以增大类间差距，但是却对类内差距影响不大，所以DeepID2加入了另一个loss，contrastive loss，从而增加验证的监督信号，就可以减少类内差距。</p><p>网络结构类似DeepID1,不同之处在于使用了两种不同的损失函数，网络结构如下图所示。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-6.png" alt="image-20210914141446447"></p><p>损失函数：</p><p>①分类信号，Softmax loss。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-7.png" alt="image-20210914141500255"></p><p>②验证信号，contrastiveloss，使用l2范数距离表示，m为阈值不参与训练，括号内的θve={m}，该损失函数可以让类间的距离给定一个限制margin，即m大小的距离。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-8.png" alt="image-20210914141513032"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-9.png" alt="image-20210914141526964"></p><p>两loss的组合方式： 首先使用2个输入，计算Softmax loss和contrastive loss,总损失为二者通过λ加权求和，通过总损失来执行梯度下降更新卷积参数，通过Softmax loss来更新softmax层的参数。</p><p>整个模型使用celebrate+数据集训练，每张图片使用了21 facial landmarks，分成200patches（20regions<em>5scales</em>2RGB&amp;Gray)，水平翻转后变为400patches，使用了200个卷积神经网络，提取400（200<em>2）个Deepid2特征，使用贪婪算法降为25个Deepid2特征，使用PCA将25</em>160Deepid2特征降为180维，最后使用联合贝叶斯算法进行验证，最终在LFW上得到的最终准确率是98.97%，使用7组25个Deepid2特征，SVM融合可得到准确率为99.15% 。DeepID2在2014 年是人脸领域非常有影响力的工作，也掀起了在人脸领域引进 MetricLearning 的浪潮。 </p><h3 id="4-DeepID2-："><a href="#4-DeepID2-：" class="headerlink" title="4. DeepID2+："></a><strong>4.</strong> <strong>DeepID2+：</strong></h3><p>DeepID2+源于论文Deeply learned facerepresentations are sparse, selective, and robust，DeepID2+是对DeepID2的改进。①卷积层在原来基础上再增加128维，第四层全连接层从160增加到512，训练数据增加了CelebFaces+ dataset，WDRef等，有12000个人脸的大约290,000张图片； ②每个卷积层的后面都加了一个512为的全连接层，并添加contrastive loss监督信号，而不仅在第四层全连接层上有 。网络结构如下图所示。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-10.png" alt="image-20210914141556043"></p><p>最终在LFW数据集上准确率为99.47%。</p><h3 id="5-DeepID3："><a href="#5-DeepID3：" class="headerlink" title="5. DeepID3："></a><strong>5.</strong> <strong>DeepID3：</strong></h3><p>DeepID3源于2015年的Deepid3:Face recognition with very deep neural networks论文，该论文探究了复杂神经网络对人脸识别的作用。论文研究VGG与GoogleNet用于人脸识别的效果，论文在VGG和GooLeNet的基础上进行构建合适的结构，使得方便人脸识别。结果发现DeepID3的结果和DeepID2+相当，可能是由于数据集的瓶颈，需要更大的数据才能有更好的提升，两个网络结构如下图所示。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-11.png" alt="image-20210914141628141"></p><p>网络输出使用PCA降维到300维的向量，使用联合贝叶斯算法进行验证，最终在LFW上得到的最终准确率是99.53%。</p><h3 id="6-FaceNet："><a href="#6-FaceNet：" class="headerlink" title="6. FaceNet："></a><strong>6.</strong> <strong>FaceNet：</strong></h3><p>FaceNet由论文Facenet: A unified embedding forface recognition and clustering提出，这篇 2015 年来自 Google 的 论文同样具有非常大的影响力，不仅仅成功应用了 TripletLoss 在 benchmark 上取得state-of-art 的结果，更因为他们提出了一个绝大部分人脸问题的统一解决框架，即：识别、验证、搜索等问题都可以放到特征空间里做，需要专注解决的仅仅是如何将人脸更好的映射到特征空间。FaceNet在DeepID的基础上，将 ContrastiveLoss 改进为 Triplet Loss，去掉softmaxloss。FaceNet实验了ZFNet类型网络和Inception类型网络，最终Inception类型网络效果更好，网络结构如下图所示。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-12.png" alt="image-20210914141646552"></p><p>FaceNet没有使用PCA降维，而是在网络中直接训练输出128维的向量，用全连接层来完成降维，最后的128维的向量经过Triplet Loss。</p><p>Triplet Loss输入不再是 Image Pair，而是三张图片（Triplet），分别为 Anchor Face（xa），Negative Face（xn）和 Positive Face（xp）。Anchor 与 Positive Face 为同一人，与 Negative Face 为不同人，在特征空间里 Anchor 与 Positive 的距离要小于 Anchor 与 Negative 的距离，且相差超过一个 Margin Alpha。</p><p>loss的目标为：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-13.png" alt="image-20210914141701886"></p><p>总loss公式为：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-14.png" alt="image-20210914141715694"></p><p>Contrastive Loss与Triplet Loss的比较， Contrastive Loss目标是减少类内差距（两个蓝点），增加类间差距（蓝点与红点）；Triplet Loss则是输入三张图片，Anchor 与 Positive 的距离要小于 Anchor 与 Negative 的距离，且相差超过一个 Margin Alpha，即Triplet Loss同时约束了两个距离。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-15.png" alt="image-20210914141729885"></p><p>最后FaceNet在LFW数据集上达到了99.63%的准确率。</p><p>基于 ContrastiveLoss 和 Triplet Loss 的 MetricLearning 符合人的认知规律，在实际应用中也取得了不错的效果，但同时也有很多问题，由于ContrastiveLoss 和 Triplet Loss 的训练样本都基于pair 或者 triplet 的，可能的样本数是 O(N2) 或者 O (N3) 的，所以模型需要很久的计算才能拟合并且训练集需要足够大。</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a><strong>三、总结</strong></h2><p>本期文章主要介绍人脸表征相关算法和论文综述，主要是2014年到2016年的研究成果， ContrastiveLoss 和 Triplet Loss在实际应用中也取得了很好的效果，但是也有很多问题，由于Contrastive Loss 和 Triplet Loss 的训练样本都基于 pair 或者 triplet 的，可能的样本数是 O (N2) 或者 O (N3) 的，所以模型需要很久的计算才能拟合并且训练集要足够大，所以在之后的人脸识别研究中，大部分在于loss函数的研究，这部分将会在下一期给大家介绍。</p><h3 id="参考文献：-1"><a href="#参考文献：-1" class="headerlink" title="参考文献："></a><strong>参考文献：</strong></h3><ul><li>【1】 Taigman Y, Yang M, Ranzato M A, et al.Deepface: Closing the gap to human-level performance in faceverification[C]//Proceedings of the IEEE conference on computer vision andpattern recognition. 2014: 1701-1708.</li><li>【2】Sun Y, Wang X, Tang X. Deep learning facerepresentation from predicting 10,000 classes[C]//Proceedings of the IEEEconference on computer vision and pattern recognition. 2014: 1891-1898.</li><li>【3】Sun Y, Chen Y, Wang X, et al. Deeplearning face representation by joint identification-verification[C]//Advancesin neural information processing systems. 2014: 1988-1996.</li><li>【4】Sun Y, Liang D, Wang X, et al. Deepid3:Face recognition with very deep neural networks[J]. arXiv preprintarXiv:1502.00873, 2015.</li><li>【5】Simonyan K, Zisserman A. Very deepconvolutional networks for large-scale image recognition[J]. arXiv preprintarXiv:1409.1556, 2014.</li><li>【6】Szegedy C, Liu W, Jia Y, et al. Goingdeeper with convolutions[C]//Proceedings of the IEEE conference on computervision and pattern recognition. 2015: 1-9.</li><li>【7】Sun Y, Wang X, Tang X. Deeply learned facerepresentations are sparse, selective, and robust[C]//Proceedings of the IEEEconference on computer vision and pattern recognition. 2015: 2892-2900.</li><li>【8】Schroff F, Kalenichenko D, Philbin J.Facenet: A unified embedding for face recognition andclustering[C]//Proceedings of the IEEE conference on computer vision andpattern recognition. 2015: 815-823.</li></ul><h2 id="系列4：人脸表征-续"><a href="#系列4：人脸表征-续" class="headerlink" title="系列4：人脸表征-续"></a>系列4：人脸表征-续</h2><h2 id="一、人脸表征-1"><a href="#一、人脸表征-1" class="headerlink" title="一、人脸表征"></a><strong>一、人脸表征</strong></h2><p>把人脸图像通过神经网络，得到一个特定维数的特征向量，该向量可以很好地表征人脸数据，使得不同人脸的两个特征向量距离尽可能大，同一张人脸的两个特征向量尽可能小，这样就可以通过特征向量来进行人脸识别。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-16.png" alt="image-20210914142102470"></p><h2 id="二、论文综述-1"><a href="#二、论文综述-1" class="headerlink" title="二、论文综述"></a><strong>二、论文综述</strong></h2><h3 id="1-L-Softmax："><a href="#1-L-Softmax：" class="headerlink" title="1. L-Softmax："></a><strong>1.</strong> <strong>L-Softmax：</strong></h3><p>Softmax Loss函数被广泛应用于深度学习，较为简单实用，但是它并不能够明确引导神经网络学习区分性较高的特征。L-Softmax能够有效地引导网络学习使得样本类内距离较小、类间距离较大的特征，L-Softmax不但能够调节类间距离的间隔（margin）大小，而且能够防止过拟合。</p><p>L-Softmax是对softmax loss的改进，softmax loss公式如下所示：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-17.png" alt="image-20210914142116979"></p><p>其中 fj 表示最终全连接层的类别输出向量 f的第 j个元素, N为训练样本的个数，则 fyi可以表示为 fyi=WTyi xi，其中 0≤θj≤π，最终的损失函数可得：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-18.png" alt="image-20210914142126948"></p><p>softmax的目的是使得WT1x&gt;WT2x，即 ∥W1∥∥x∥cos(θ1)&gt;∥W2∥∥x∥cos(θ2)，从而得到输入x（来自类别1）输出正确的分类结果。L-Softmax通过增加一个正整数变量m，从而产生一个决策余量，能够更加严格地约束上述不等式，即： </p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-19.png" alt="image-20210914142139587"></p><p>其中0≤θ1&lt;π/m。如果W1和W2能够满足∥W1∥∥x∥cos(mθ1)&gt;∥W2∥∥x∥cos(θ2)，那么就必然满足∥W1∥∥x∥cos(θ1)&gt;∥W2∥∥x∥cos(θ2)，这样的约束对学习W1和W2的过程提出了更高的要求，在训练学习过程中，类间要比之前多了一个m的间隔，从而使得1类和2类有了更宽的分类决策边界。这种Margin Based Classification使得学习更加的困难，从而使类间距离增加了一个margin距离，L-Softmax loss的总公式如下：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-20.png" alt="image-20210914142152821"></p><p>当m越大时，分类的边界越大，学习难度当然就越高。</p><p>论文仅使用了WebFace数据集作为训练集和一个简单的卷积网络，就在LFW上达到了98.71%的正确率，证明了L-Softmax loss取得了比softmax loss更好的结果。</p><h3 id="2-SphereFace"><a href="#2-SphereFace" class="headerlink" title="2. SphereFace :"></a><strong>2.</strong> <strong>SphereFace :</strong></h3><p>SphereFace在MegaFace数据集上识别率在2017年排名第一，提出A-Softmax Loss使人脸识别达到不错的效果。A-Softmax Loss基于softmax loss和L-Softmax loss，在二分类模型中，softmax loss为：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-21.png" alt="image-20210914142213416"></p><p>如果x为类别一，则希望p1&gt;p2,则二分类的划分函数为：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-22.png" alt="image-20210914142225374"></p><p>权重归一化||w||为1，b为0，此时特征上的点映射到单位超球面上，则二分类的划分函数为：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-23.png" alt="image-20210914142237238"></p><p>然后使用与L-Softmax loss相同的原理，使</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-24.png" alt="image-20210914142249618"></p><p>则A-Softmax Loss最终为：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-25.png" alt="image-20210914142300263"></p><p>因此A-Softmax Loss是样本类别之间产生了角度距离，让决策函数更加严格并且更加具有可区分性。当m增大，角度距离也会增加。</p><p>A-Softmax与L-Softmax的最大区别在于A-Softmax的权重归一化了，而L-Softmax则没有。A-Softmax权重的归一化导致特征上的点映射到单位超球面上，A-Softmax仅仅能从角度上划分类别，而L-Softmax是在角度与长度方向进行考量，两个方向如果划分不一就会收到干扰，导致精度下降。</p><p>SphereFace使用的模型如下图所示：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-26.png" alt="image-20210914142313114"></p><p>训练与测试过程如下图所示，在测试过程中使用余弦计算相似度：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-27.png" alt="image-20210914142326096"></p><p>最终SphereFace在训练集较小的情况下，LFW数据集上准确率为99.42%。Sphereface效果很好，但是它不优美。在测试阶段，Sphereface通过特征间的余弦值来衡量相似性，即以角度为相似性的度量，在训练阶段，其实Sphereface的损失函数并不是在直接优化特征与类中心的角度，而是优化特征与类中心的角度在乘上一个特征的长度，这就造成了训练跟测试之间目标不一致。</p><h3 id="3-Normface"><a href="#3-Normface" class="headerlink" title="3. Normface :"></a><strong>3.</strong> <strong>Normface :</strong></h3><p>在优化人脸识别任务时，softmax本身优化的是没有归一化的内积结果，但是最后在预测的时候使用的一般是cosine距离或者欧式距离，这会导致优化目标和最终的距离度量其实并不一致。 Normface的核心思想是既然最后在特征对比的时候使用归一化的cosine距离，那么在训练的过程中把特征也做归一化处理，做了归一化之后，softmax的优化就变成了直接优化cosine距离了，归一化过程如下，其中e是为了防止除0的较小正数：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-28.png" alt="image-20210914142337038"></p><p>相应的损失函数如下：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-29.png" alt="image-20210914142347510"></p><p>其中 W 是归一化的权重，f_i 是归一化的特征，参数 s 的引入是因为保证梯度大小的合理性，去掉bias是因为softmax之前的fc有bias的情况下会使得有些类别在角度上没有区分性但是通过bias可以区分，在这种情况下如果对feature做normalize，会使得中间的那个小类别的feature变成一个单位球形并与其他的feature重叠在一起，所以在feature normalize的时候是不能加bias的。</p><p>Normface使用了较小的模型使用多种loss训练，然后在LFW数据集上测试，证明了feature normalize的效果，结果如下：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142413.png" alt="image-20210914142411577"></p><h3 id="4-CosFace"><a href="#4-CosFace" class="headerlink" title="4. CosFace :"></a><strong>4.</strong> <strong>CosFace :</strong></h3><p>Normface用特征归一化解决了Sphereface训练和测试不一致的问题。但是却没有了margin的惩罚，腾讯AI Lab的CosFace或者AM-softmax是在Normface的基础上引入了margin，损失函数为：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-30.png" alt="image-20210914142514072"></p><p>其中特征与权值都做了归一化：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-31.png" alt="image-20210914142524513"></p><p>分类决策为：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-32.png" alt="image-20210914142541778"></p><p>，比之前增加了m的margin，m 是一个超参数，控制惩罚的力度，m 越大，惩罚越强。</p><p>CosFace使用mtcnn进行人脸检测与对齐，人脸表征训练模型使用基于residual units 64层卷积网络的Sphere Face，在5M的训练集上训练，在LFW数据集上测试，精度达到99.73%。</p><h3 id="5-ArcFace"><a href="#5-ArcFace" class="headerlink" title="5. ArcFace :"></a><strong>5.</strong> <strong>ArcFace :</strong></h3><p>ArcFace源于论文Additive angular margin lossfor deep face recognition，也叫做InsightFace，论文基本介绍了近期较为流行的人脸识别模型，loss变化从softmax到AM-softmax，然后提出ArcFace，可以说起到了很好的综述作用，论文从三个方面探讨影响人脸识别模型精度的主要因素。</p><p>（1）数据：数据方面，论文探讨了各个数据集的数据质量和优缺点，并对MS-Celeb-1M，MegaFace FaceScrub做了清洗，清洗后的数据公开。</p><p>（2）网络：详细对比了不同的主流网络结构的性能，包括输入层尺寸大小、最后输出几层的不同结构、基本网络单元残差网络的不同结构、主干网络的不同模型。经过实验的证明，最后的网络结构：输入图片大小112x112；第一层convLayer 卷积核为3<em>3 stride 1时，网络输出7</em>7；主干网络使用ResNet100，并使用改进后的改进的残差网络结构，如下图；最后的几层输出层为最后一个卷积层后+BN-Dropout-FC-BN的结构。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-33.png" alt="image-20210914142557995"></p><p>（3）损失函数：与 AM-softmax相比，区别在于Arcface引入margin的方式不同，损失函数为：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914142652-34.png" alt="image-20210914142612281"></p><p>Arcface的m是在余弦里面，AM-softmax的在外面，ArcFace更为直观并且在超球面维度上有更清晰的解释。Arcface在VGG2和MS-Celeb-1M数据集上训练，在LFW数据集上精度达到99.83%。</p><h2 id="三、总结-1"><a href="#三、总结-1" class="headerlink" title="三、总结"></a><strong>三、总结</strong></h2><p>本期文章主要介绍人脸表征相关算法和论文综述，人脸检测、对齐、特征提取等这些操作都可以在静态数据中完成，下一期将给大家介绍在视频数据中进行人脸识别的另一个重要的算法，视频人脸跟踪的概念与方法。</p><h3 id="参考文献：-2"><a href="#参考文献：-2" class="headerlink" title="参考文献："></a><strong>参考文献：</strong></h3><ul><li>【1】 Liu W, Wen Y, Yu Z, et al. Large-MarginSoftmax Loss for Convolutional Neural Networks[C]//ICML. 2016: 507-516.1708.</li><li>【2】Liu W, Wen Y, Yu Z, et al. Sphereface:Deep hypersphere embedding for face recognition[C]//The IEEE Conference onComputer Vision and Pattern Recognition (CVPR). 2017, 1: 1.</li><li>【3】Wang F, Xiang X, Cheng J, et al. Normface:l 2 hypersphere embedding for face verification[C]//Proceedings of the 2017 ACMon Multimedia Conference. ACM, 2017: 1041-1049.</li><li>【4】Wang F, Cheng J, Liu W, et al. Additivemargin softmax for face verification[J]. IEEE Signal Processing Letters, 2018,25(7): 926-930.</li><li>【5】Wang H, Wang Y, Zhou Z, et al. CosFace:Large margin cosine loss for deep face recognition[J]. arXiv preprintarXiv:1801.09414, 2018.</li><li>【6】Deng J, Guo J, Zafeiriou S. Arcface:Additive angular margin loss for deep face recognition[J]. arXiv preprintarXiv:1801.07698, 2018.</li></ul><p>From： <a href="https://cloud.tencent.com/developer/article/1160037?from=article.detail.1344438">https://cloud.tencent.com/developer/article/1160037?from=article.detail.1344438</a></p><p>出品 | 磐创AI技术团队</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;系列1-简介&quot;&gt;&lt;a href=&quot;#系列1-简介&quot; class=&quot;headerlink&quot; title=&quot;系列1 简介&quot;&gt;&lt;/a&gt;系列1 简介&lt;/h2&gt;&lt;p&gt;出品 | 磐创AI技术团队&lt;/p&gt;
&lt;p&gt;【磐创AI导读】本文是深度学习之视频&lt;a href=&quot;https:</summary>
      
    
    
    
    <category term="ai" scheme="https://blog.17lai.fun/categories/ai/"/>
    
    
    <category term="ai" scheme="https://blog.17lai.fun/tags/ai/"/>
    
    <category term="face" scheme="https://blog.17lai.fun/tags/face/"/>
    
  </entry>
  
  <entry>
    <title>自动曝光原理</title>
    <link href="https://blog.17lai.fun/image/2021-09-14-auto-expose-theory/"/>
    <id>https://blog.17lai.fun/image/2021-09-14-auto-expose-theory/</id>
    <published>2021-09-14T01:25:00.000Z</published>
    <updated>2021-09-14T05:28:43.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自动曝光的原理"><a href="#自动曝光的原理" class="headerlink" title="自动曝光的原理"></a>自动曝光的原理</h2><p>曝光是摄影中十分重要的一个环节，它决定了一张图片的明暗，如下图所示，第一张图片太暗，而第三种图片太亮。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914131959.jpeg"></p><h2 id="曝光由什么来决定"><a href="#曝光由什么来决定" class="headerlink" title="曝光由什么来决定"></a><strong>曝光由什么来决定</strong></h2><p>使用过数码相机的人都知道曝光由光圈、曝光时间、ISO三者共同决定，详细的关系就不赘述。</p><h3 id="光圈：控制进光量；"><a href="#光圈：控制进光量；" class="headerlink" title="光圈：控制进光量；"></a><strong>光圈</strong>：控制进光量；</h3><h3 id="曝光时间：光到达的时间长度；"><a href="#曝光时间：光到达的时间长度；" class="headerlink" title="曝光时间：光到达的时间长度；"></a><strong>曝光时间</strong>：光到达的时间长度；</h3><h3 id="ISO：增益；"><a href="#ISO：增益；" class="headerlink" title="ISO：增益；"></a><strong>ISO</strong>：增益；</h3><p>但是对于手机以及其他电子产品使用的微型摄像头，光圈大小是固定的，所以手机拍照的曝光由<strong>曝光时间</strong>和**增益(ISO)**来控制。</p><h2 id="什么是自动曝光"><a href="#什么是自动曝光" class="headerlink" title="什么是自动曝光"></a><strong>什么是自动曝光</strong></h2><p>数码相机中有一种手动模式，可手动设置光圈、曝光时间、ISO来控制曝光，该模式的使用对摄影师的要求会比较高。另外 数码相机的全自动模式、光圈优先模式、快门优先模式以及手机等电子产品的曝光都属于自动曝光。</p><p>自动曝光就是相机代替人的操作，自动调节曝光时间、光圈、ISO进行曝光，使得所摄物体亮度正常。这句话解释起来很简单，但是存在两个难点问题：第一，相机不如人眼这样可以直观的分辨图像明暗，如何判断这幅图像是否亮度合适；第二，如何调整曝光时间、光圈、ISO,这三者调节的比例。</p><h2 id="自动曝光的标准"><a href="#自动曝光的标准" class="headerlink" title="自动曝光的标准"></a><strong>自动曝光的标准</strong></h2><p>在此之前需要了解物体的亮度与色彩是由物体对光线的反射率来决定的。例如纯黑色的放射率是0，纯白色的反射率是100%，处于中间的灰度的反射率是18%，这就是18%中间灰度。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1420210914132002.png"></p><p>具有一定反射率的物体在最终的图像中被还原到了其相应的灰度级，这就意味着达到了正确的曝光。例如摄影师们通常在拍摄之前使用中性灰卡测试曝光是否正常。</p><p>但是相机在各种场景下无法识别物体的反射率，因此采用了一个简单粗暴而又行之有效的方法，统一将图像整体平均亮度设置为中性灰的亮度。该方法基于**科学家认为自然界的平均反射率是18%**这一理论。当然，这个方法也不是走遍天下都不怕，比如拍摄雪景时需要增加曝光补偿，不然会偏暗，因为雪景的亮度远远大于中性灰度。这也就是摄影中的一句口诀的由来“白增黑减”。</p><h2 id="自动曝光算法"><a href="#自动曝光算法" class="headerlink" title="自动曝光算法"></a><strong>自动曝光算法</strong></h2><p>上面已经讲了自动曝光的标准，也就确立了曝光目标，要达到这一目标还要自动曝光算法来实现。</p><p>目前比较常见的算法有平均亮度法、权重均值法、亮度直方图等。其中最普遍的就是平均亮度法。<strong>平均亮度法</strong>就是对图像所以像素亮度求平均值，通过不断调整曝光参数最终达到目标亮度。而<strong>权重均值法</strong>是对图像不同区域设置不同权重来计算图像亮度，例如相机中的各种测光模式的选择就是改变不同区域的权重。<strong>亮度直方图法</strong>是通过为直方图中峰值分配不同权重来计算图像亮度。</p><p>自动曝光实现的过程：</p><p>第一步：对当前图像进行亮度统计；</p><p>第二步：根据当前图像亮度确定曝光值；</p><p>第三步：计算新的曝光参数，曝光时间、光圈、增益；</p><p>第四步：将新的曝光参数应用到相机；</p><p>第五步：重复步骤一到四，直到亮度满足要求。</p><h2 id="曝光参数调整-曝光表"><a href="#曝光参数调整-曝光表" class="headerlink" title="曝光参数调整_曝光表"></a><strong>曝光参数调整_曝光表</strong></h2><p>前面留下两个问题：“第一，相机不如人眼这样可以直观的分辨图像明暗，如何判断这幅图像是否亮度合适；第二，如何调整曝光时间、光圈、ISO,这三者调节的比例。” 第一个问题在前面有过解释，第二个问题也就是自动曝光实现步骤的第三步，曝光值由光圈、曝光时间、增益沟通决定，当计算出一个曝光量，曝光三要素有很多种组合方式。一般情况下有曝光曲线，每个曝光量对应一组参数。手机中曝光曲线可以通过Tuning调整。</p><p>From: <a href="https://zhuanlan.zhihu.com/p/33462189">积极的悲观主义者</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;自动曝光的原理&quot;&gt;&lt;a href=&quot;#自动曝光的原理&quot; class=&quot;headerlink&quot; title=&quot;自动曝光的原理&quot;&gt;&lt;/a&gt;自动曝光的原理&lt;/h2&gt;&lt;p&gt;曝光是摄影中十分重要的一个环节，它决定了一张图片的明暗，如下图所示，第一张图片太暗，而第三种图片太亮</summary>
      
    
    
    
    <category term="image" scheme="https://blog.17lai.fun/categories/image/"/>
    
    
    <category term="3a" scheme="https://blog.17lai.fun/tags/3a/"/>
    
    <category term="ae" scheme="https://blog.17lai.fun/tags/ae/"/>
    
    <category term="image" scheme="https://blog.17lai.fun/tags/image/"/>
    
  </entry>
  
  <entry>
    <title>浏览器的渲染过程</title>
    <link href="https://blog.17lai.fun/web/2021-09-13-the-browser-rendering-process/"/>
    <id>https://blog.17lai.fun/web/2021-09-13-the-browser-rendering-process/</id>
    <published>2021-09-13T14:25:00.000Z</published>
    <updated>2021-09-13T17:01:38.208Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>通常，我们只需要编写HTML，CSS，JavaScript，浏览器上就能呈现出漂亮的网页了，但是浏览器是如何使用我们的代码在屏幕上渲染像素的呢？</p></blockquote><h3 id="首先，请先看一张大图"><a href="#首先，请先看一张大图" class="headerlink" title="首先，请先看一张大图"></a><strong>首先，请先看一张大图</strong></h3><p>浏览器将HTML，CSS，JavaScript代码转换成屏幕上所能呈现的实际像素，这期间所经历的一系列步骤，叫做关键渲染路径（Critical Rendering Path）。其中包含：</p><ul><li>  构建对象模型（DOM，CSSOM）</li><li>  构建渲染树（RenderTree）</li><li>  布局</li><li>  渲染</li></ul><p>在构建对象模型到构建渲染树的这一过程，还穿插着JS脚本的加载和执行。如下图所示：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913220512.jpeg"></p><h3 id="1-DOMTree的构建"><a href="#1-DOMTree的构建" class="headerlink" title="1.DOMTree的构建"></a><strong>1.DOMTree的构建</strong></h3><p>浏览器的渲染从解析HTML文档开始，宏观上，可以分为下面几个步骤：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913220515.jpeg"></p><ul><li>第一步（解析）：从网络或者磁盘下读取的HTML原始字节码，通过设置的charset编码，转换成相字符  </li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913220653.jpeg"></p><ul><li>第二步（token化）：通过词法分析器，将字符串解析成Token，Token中会标注出当前的Token是<code>开始标签</code>，还是<code>结束标签</code>，或者<code>文本标签</code>等。  </li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913220522.jpeg"></p><ul><li>第三步（生成Nodes并构建DOM树）：浏览器会根据Tokens里记录的<code>开始标签</code>，<code>结束标签</code>，将Tokens之间相互串联起来_（带有结束标签的Token不会生成Node）_。<br>  Node包含了这个节点的所有属性。例如<code>&lt;img src="xxx.png" &gt;</code>标签最终生成出的节点对象中会保存图片地址等信息。<br>  事实上，在构建DOM树时，不是要等所有的Tokens都转换成Nodes后才开始，而是一边生成Token一边采取<code>深度遍历算法</code>消耗Token来生成Node，如下图所示：<br>  图中有颜色的小数字代表构建的具体步骤，可以看出，首先生成出<code>html Token</code>,并消耗Token创建出<code>html 节点对象</code>，接着生成<code>head Token</code>并消耗Token创建出<code>head节点对象</code>……，当所有的Tokens都消耗完了，紧接着DOM树也就构建完了。  </li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913220658.jpeg"></p><p>这里抛出个小问题，为什么有时在js中访问DOM时浏览器会报错呢？<br>因为在上述的解析的过程中，如果碰到了<code>script</code>或者<code>link</code>标签，就会根据<code>src</code>对应的地址去加载资源，在<code>script</code>标签没有设置<code>async/defer</code>属性时，这个加载过程是<code>下载并执行完全部的代码</code>，此时，DOM树还没有完全创建完毕，这个时候如果js企图访问script标签后面的DOM元素，浏览器就会抛出<strong>找不到该DOM元素</strong>的错误。<br>值得注意的是：从bytes到Tokens的这个过程，浏览器都可以交给其他单独的线程去处理，不会堵塞浏览器的渲染线程。但是后面的部分就都在渲染线程下进行了，也就是我们常说的js单线程环境。</p><h3 id="2-CSSOMTree的构建"><a href="#2-CSSOMTree的构建" class="headerlink" title="2.CSSOMTree的构建"></a><strong>2.CSSOMTree的构建</strong></h3><p>DOM会记录页面的内容，但是浏览器还需要知道这些内容该用什么样式去展示，所以还需要构建CSSOMTree。CSSOM的生成过程和DOM的生成过程十分相似，也是：1.解析，2.Token化，3.生成Nodes并构建CSSOMTree：</p><p>假设浏览器收到了下面这样一段css:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p</span> <span class="token punctuation">{</span><span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p span</span> <span class="token punctuation">{</span><span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">span</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">img</span> <span class="token punctuation">{</span><span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终会生成如下的CSSOMTree:</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913220529.jpeg"></p><p>从图中可以看出，最开始<code>body</code>有一个样式规则是<code>font-size:16px</code>，之后，在body这个样式基础上每个子节点还会添加自己单独的样式规则，比如<code>span</code>又添加了一个样式规则<code>color:red</code>。正是因为样式这种类似于继承的特性，浏览器设定了一条规则：<strong>CSSOMTree需要等到完全构建后才可以被使用，因为后面的属性可能会覆盖掉前面的设置</strong>。比如在上面的css代码基础上再添加一行代码<code>p {font-size:12px}</code>，那么之前设置的<code>16px</code>将会被覆盖成<code>12px</code>。</p><p>下面是官方给的一种解释：</p><blockquote><p>未构建完的CSSOMTree是不准确的，浏览器必须等到CSSOMTree构建完毕后才能进入下一阶段。<br>所以，CSS的加载速度与构建CSSOMTree的速度将直接影响首屏渲染速度，因此在默认情况下CSS被视为阻塞渲染的资源，需要将它尽早、尽快地下载到客户端，以便缩短首次渲染的时间。</p></blockquote><p>那么回到上面生成DOM时提到的JS问题：<strong>在标签没有设置<code>async/defer</code>属性时，js会阻塞DOM的生成</strong>。原因是js会改变DOMTree的内容，如果不阻塞，会出现一边生成DOM内容，一边修改DOM内容的情况，无法确保最终生成的DOMTree是确定唯一的。</p><p>同理，JS也会可以修改CSS样式，影响CSSOMTree最终的结果。而我们前面提到，不完整的CSSOMTree是不可以被使用的，如果JS试图在<strong>浏览器还未完成CSSOMTree的下载和构建</strong>时去操作CSS样式，浏览器会<strong>暂停脚本的运行和DOM的构建</strong>，直至浏览器完成了CSSOM的下载和构建。也就是说，<strong>JS脚本的出现会让CSSOM的构建阻塞DOM的构建</strong>。</p><blockquote><p>平时谈及页面性能优化，经常会强调css文件应该放在html文档中的前面引入，js文件应该放在后面引入，这么做的原因是什么呢？</p></blockquote><p>举个例子：本来，DOM构建和CSSOM构建是两个过程，井水不犯河水。假设DOM构建完成需要1s，CSSOM构建也需要1s，在DOM构建了0.2s时发现了一个<code>link</code>标签，此时完成这个操作需要的时间大概是1.2s，如下图所示：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913220540.jpeg"></p><p>而此时我们在HTML文档的中间插中入了一段JS代码，在DOM构建中间的过程中发现了这个<code>script</code>标签，假设这段JS代码只需要执行0.0001s，那么完成这个操作需要的时间就会变成：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913220546.jpeg"></p><p>那如果我们把css放到前面，js放到最后引入时，构建时间会变成：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913220705.jpeg"></p><p>由此可见，虽然只是插入了小小的一段只运行0.0001s的js代码，不同的引入时机也会严重影响DOMTree的构建速度。</p><p>简而言之，如果在DOM，CSSOM和JavaScript执行之间引入大量的依赖关系，可能会导致浏览器在处理渲染资源时出现大幅度延迟：</p><ul><li>  当浏览器遇到一个script标签时，DOMTree的构建将被暂停，直至脚本执行完毕</li><li>  JavaScript可以查询和修改DOMTree与CSSOMTree</li><li>  直至CSSOM构建完毕，JavaScript才会执行</li><li>  脚本在文档中的位置很重要</li></ul><h3 id="3-渲染树的构建"><a href="#3-渲染树的构建" class="headerlink" title="3.渲染树的构建"></a><strong>3.渲染树的构建</strong></h3><p>现在，我们已经拥有了完整的DOM树和CSSOM树。DOM 树上每一个节点对应着网页里每一个元素，CSSOM树上每个节点对应着网页里每个元素的样式，并且此时浏览器也可以通过 JavaScript 操作DOM/CSSOM树，动态改变它的结构。但是DOM/CSSOM树本身并不能直接用于排版和渲染，浏览器还会生成另外一棵树：Render树</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913220711.jpeg"></p><p>接下来我们来谈几条概念</p><ul><li><p>  Render 树上的每一个节点被称为：<code>RenderObject</code>。</p></li><li><p>  RenderObject跟 DOM 节点几乎是一一对应的，当一个<code>可见的 DOM 节点</code>被添加到 DOM 树上时，内核就会为它生成对应的 RenderOject 添加到 Render 树上。</p></li><li><p>其中，可见的DOM节点不包括：  </p></li><li><p>  一些不会体现在渲染输出中的节点（<code>&lt;html&gt;&lt;script&gt;&lt;link&gt;….</code>），会直接被忽略掉。</p></li><li><p>  通过CSS隐藏的节点。例如上图中的<code>span</code>节点，因为有一个CSS显式规则在该节点上设置了<code>display:none</code>属性，那么它在生成RenderObject时会被直接忽略掉。</p></li><li><p>  Render 树是衔接浏览器排版引擎和渲染引擎之间的<strong>桥梁</strong>，它是<strong>排版引擎的输出，渲染引擎的输入</strong>。</p></li></ul><p>此时的Render树上，已经包含了网页上所有可见元素的内容和位置信息 排版引擎会根据Render树的内容和结构，准确的计算出元素该在网页上的什么位置。到此，我们已经具备进入布局的一切准备条件，但是通过上面我们知道，布局后面还有一个渲染过程，那么_Render 树是衔接浏览器排版引擎和渲染引擎之间的桥梁，它是排版引擎的输出，渲染引擎的输入。_这句话是什么意思呢？</p><h3 id="RenderObject-and-RenderLayer"><a href="#RenderObject-and-RenderLayer" class="headerlink" title="RenderObject and RenderLayer"></a><strong>RenderObject and RenderLayer</strong></h3><blockquote><p>浏览器渲染引擎并不是直接使用Render树进行绘制，为了方便处理<strong>Positioning,Clipping,Overflow-scroll,CSS Transfrom/Opacrity/Animation/Filter,Mask or Reflection,Z-indexing</strong>等属性，浏览器需要生成另外一棵树：<strong>Layer树</strong></p></blockquote><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913220730.jpeg"></p><p>浏览器会为一些<strong>特定</strong>的<code>RenderObject</code>生成对应的<code>RenderLayer</code>，其中的规则是：</p><ul><li>  是否是页面的根节点 <em>It’s the root object for the page</em></li><li>  是否有css的一些布局属性（relative absolute or a transform) <em>It has explicit CSS position properties (relative, absolute or a transform)</em></li><li>  是否透明 <em>It is transparent</em></li><li>  是否有溢出 <em>Has overflow, an alpha mask or reflection</em></li><li>  是否有css滤镜 <em>Has a CSS filter</em></li><li>  是否包含一个canvas元素使得节点拥有视图上下文 <em>Corresponds to canvas element that has a 3D (WebGL) context or an accelerated 2D context</em></li><li>  是否包含一个video元素 <em>Corresponds to a video element</em></li></ul><p>当满足上面其中一个条件时，这个<code>RrenderObject</code>就会被浏览器选中生成对应的<code>RenderLayer</code>。至于那些没有被命运选中的RrenderObject，会从属与父节点的RenderLayer。最终，每个RrenderObject都会直接或者间接的属于一个RenderLayer。</p><p>浏览器渲染引擎在布局和渲染时会遍历整个Layer树，访问每一个<code>RenderLayer</code>，再遍历从属于这个RenderLayer的 <code>RrenderObject</code>，将每一个 RenderObject 绘制出来。可以理解为：Layer 树决定了网页绘制的层次顺序，而从属于RenderLayer 的 RrenderObject决定了这个 Layer 的内容，所有的 <code>RenderLayer</code> 和 <code>RrenderObject</code> 一起就决定了网页在屏幕上最终呈现出来的内容。</p><h3 id="4-布局"><a href="#4-布局" class="headerlink" title="4.布局"></a><strong>4.布局</strong></h3><p>到目前为止，浏览器计算出了哪些节点是可见的以及它的信息和样式，接下来就需要计算这些节点在设备视口内的确切位置和大小，这个过程我们称之为“布局”。</p><p>布局最后的输出是一个“盒模型”：将所有相对测量值都转换成屏幕上的绝对像素。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913220553.jpeg"></p><h3 id="5-渲染"><a href="#5-渲染" class="headerlink" title="5.渲染"></a><strong>5.渲染</strong></h3><p>最后，既然我们知道了哪些节点可见、它们的计算样式以及几何信息，我们终于可以将这些信息传递给最后一个阶段：将渲染树中的每个节点转换成屏幕上的实际像素：浏览器通过发出“Paint Setup”和“Paint”事件，将渲染树转换成屏幕上的像素。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913220718.jpeg"></p><p>至此，我们就能够在浏览器上看到漂亮的网页了</p><blockquote><p>谈及页面性能优化，我们也常说要尽量减少浏览器的重排和重绘，浏览器重排和重绘时究竟做了哪些工作呢？</p></blockquote><p>我们平时常说的重排，其实就是浏览器计算render树，布局到渲染的这个过程，而重绘就是计算layer树到渲染的这个过程，每当触发一次重绘和重排时，浏览器都需要重新经过一遍上述的计算。很显然，重排会产生比重绘更大的开销，但无论是重排还是重绘，都会给浏览器渲染线程造成很大的负担，所以，我们在实际生产中要严格注意减少重排和重绘的触发。至于如何减少重排和重绘的次数，这里就不多做展开了，详细请听下回分解~</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结：</strong></h3><ul><li>  经过：1.构建对象模型（DOM，CSSOM），2.构建渲染树（RenderTree），3.布局，4.渲染 这几个步骤后，我们就能在浏览器上看到漂亮的网页啦。</li><li>  CSS被视为阻塞渲染的资源，应放到代码的头部尽快加载。</li><li>  同步的JavaScript会暂停DOMTree的构建，应放到代码的尾部最后加载，或者使用<code>async/defer属性</code>异步加载JavaScript。</li><li>  重排和重绘会给浏览器渲染线程造成很大的负担，尽量减少重排和重绘的触发次数</li></ul><h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a><strong>参考文献：</strong></h3><p><a href="https://link.zhihu.com/?target=https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=zh-cn">https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=zh-cn</a></p><p><a href="https://link.zhihu.com/?target=https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn">https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn</a></p><p><a href="https://link.zhihu.com/?target=https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css?hl=zh-cn">https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css?hl=zh-cn</a></p><p><a href="https://link.zhihu.com/?target=https://mp.weixin.qq.com/s?__biz=MzA5NzkwNDk3MQ==&amp;mid=2650588806&amp;idx=1&amp;sn=408a54e7c8102fd6944c9a40b119015a&amp;scene=21%23wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzA5NzkwNDk3MQ==&amp;mid=2650588806&amp;idx=1&amp;sn=408a54e7c8102fd6944c9a40b119015a&amp;scene=21#wechat_redirect</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;通常，我们只需要编写HTML，CSS，JavaScript，浏览器上就能呈现出漂亮的网页了，但是浏览器是如何使用我们的代码在屏幕上渲染像素的呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;首先，请先看一张大图&quot;&gt;&lt;a href=&quot;#首先，</summary>
      
    
    
    
    <category term="web" scheme="https://blog.17lai.fun/categories/web/"/>
    
    
    <category term="web" scheme="https://blog.17lai.fun/tags/web/"/>
    
    <category term="http" scheme="https://blog.17lai.fun/tags/http/"/>
    
    <category term="css" scheme="https://blog.17lai.fun/tags/css/"/>
    
    <category term="js" scheme="https://blog.17lai.fun/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>在浏览器输入 URL 回车之后发生了什么</title>
    <link href="https://blog.17lai.fun/web/2021-09-13-what-happened-when-you-click-http/"/>
    <id>https://blog.17lai.fun/web/2021-09-13-what-happened-when-you-click-http/</id>
    <published>2021-09-13T01:25:00.000Z</published>
    <updated>2021-09-13T14:01:17.145Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p>这个问题已经是老生常谈了，更是经常被作为面试的压轴题出现，网上也有很多文章，但最近闲的无聊，然后就自己做了一篇笔记，感觉比之前理解更透彻了。</p><p>这篇笔记是我这两天看了数十篇文章总结出来的，所以相对全面一点，但由于我是做前端的，所以会比较重点分析浏览器渲染页面那一部分，至于其他部分我会罗列出关键词，感兴趣的可以自行查阅，</p><p><strong>注意：</strong>本文的步骤是建立在，请求的是一个简单的 HTTP 请求，没有 HTTPS、HTTP2、最简单的 DNS、没有代理、并且服务器没有任何问题的基础上，尽管这是不切实际的。</p><h2 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h2><ol><li> URL 解析</li><li> DNS 查询</li><li> TCP 连接</li><li> 处理请求</li><li> 接受响应</li><li> 渲染页面</li></ol><h2 id="一、URL-解析"><a href="#一、URL-解析" class="headerlink" title="一、URL 解析"></a>一、URL 解析</h2><h3 id="地址解析："><a href="#地址解析：" class="headerlink" title="地址解析："></a><strong>地址解析：</strong></h3><p>首先判断你输入的是一个合法的 URL 还是一个待搜索的关键词，并且根据你输入的内容进行自动完成、字符编码等操作。</p><h3 id="HSTS"><a href="#HSTS" class="headerlink" title="HSTS"></a><strong>HSTS</strong></h3><p>由于安全隐患，会使用 HSTS 强制客户端使用 HTTPS 访问页面。详见：<a href="https://www.barretlee.com/blog/2015/10/22/hsts-intro/">你所不知道的 HSTS (opens new window)</a>。</p><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a><strong>其他操作</strong></h3><p>浏览器还会进行一些额外的操作，比如安全检查、访问限制（之前国产浏览器限制 996.icu）。</p><h3 id="检查缓存"><a href="#检查缓存" class="headerlink" title="检查缓存"></a><strong>检查缓存</strong></h3><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913094301.png"></p><h2 id="二、DNS-查询"><a href="#二、DNS-查询" class="headerlink" title="二、DNS 查询"></a>二、DNS 查询</h2><p><strong>基本步骤</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913094305.png"></p><h3 id="1-浏览器缓存"><a href="#1-浏览器缓存" class="headerlink" title="1. 浏览器缓存"></a><strong>1. 浏览器缓存</strong></h3><p>浏览器会先检查是否在缓存中，没有则调用系统库函数进行查询。</p><h3 id="2-操作系统缓存"><a href="#2-操作系统缓存" class="headerlink" title="2. 操作系统缓存"></a><strong>2. 操作系统缓存</strong></h3><p>操作系统也有自己的 DNS 缓存，但在这之前，会向检查域名是否存在本地的 Hosts 文件里，没有则向 DNS 服务器发送查询请求。</p><h3 id="3-路由器缓存"><a href="#3-路由器缓存" class="headerlink" title="3. 路由器缓存"></a><strong>3. 路由器缓存</strong></h3><p>路由器也有自己的缓存。</p><h3 id="4-ISP-DNS-缓存"><a href="#4-ISP-DNS-缓存" class="headerlink" title="4. ISP DNS 缓存"></a><strong>4. ISP DNS 缓存</strong></h3><p>ISP DNS 就是在客户端电脑上设置的首选 DNS 服务器，它们在大多数情况下都会有缓存。</p><h3 id="根域名服务器查询"><a href="#根域名服务器查询" class="headerlink" title="根域名服务器查询"></a><strong>根域名服务器查询</strong></h3><p>在前面所有步骤没有缓存的情况下，本地 DNS 服务器会将请求转发到互联网上的根域，下面这个图很好的诠释了整个流程：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913094311.png"></p><blockquote><p>根域名服务器：<a href="https://zh.wikipedia.org/wiki/%E6%A0%B9%E7%B6%B2%E5%9F%9F%E5%90%8D%E7%A8%B1%E4%BC%BA%E6%9C%8D%E5%99%A8">维基百科 (opens new window)</a></p></blockquote><p><strong>需要注意的点</strong></p><ol><li> 递归方式：一路查下去中间不返回，得到最终结果才返回信息（浏览器到本地 DNS 服务器的过程）</li><li> 迭代方式，就是本地 DNS 服务器到根域名服务器查询的方式。</li><li> 什么是 DNS 劫持</li><li> 前端 dns-prefetch 优化</li></ol><h2 id="三、TCP-连接"><a href="#三、TCP-连接" class="headerlink" title=" 三、TCP 连接"></a> 三、TCP 连接</h2><p>TCP/IP 分为四层，在发送数据时，每层都要对数据进行封装：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913094325.png"></p><h3 id="1-应用层：发送-HTTP-请求"><a href="#1-应用层：发送-HTTP-请求" class="headerlink" title="1. 应用层：发送 HTTP 请求"></a><strong>1. 应用层：发送 HTTP 请求</strong></h3><p>在前面的步骤我们已经得到服务器的 IP 地址，浏览器会开始构造一个 HTTP 报文，其中包括：</p><ul><li>  请求报头（Request Header）：请求方法、目标地址、遵循的协议等等</li><li>  请求主体（其他参数）</li></ul><p>其中需要注意的点：</p><ul><li>  浏览器只能发送 GET、POST 方法，而打开网页使用的是 GET 方法</li></ul><h3 id="2-传输层：TCP-传输报文"><a href="#2-传输层：TCP-传输报文" class="headerlink" title="2. 传输层：TCP 传输报文"></a><strong>2. 传输层：TCP 传输报文</strong></h3><p>传输层会发起一条到达服务器的 TCP 连接，为了方便传输，会对数据进行分割（以报文段为单位），并标记编号，方便服务器接受时能够准确地还原报文信息。</p><p>在建立连接前，会先进行 TCP 三次握手。</p><blockquote><p>关于 TCP/IP 三次握手，网上已经有很多段子和图片生动地描述了。</p><p>相关知识点：</p><ol><li> SYN 泛洪攻击</li></ol></blockquote><h3 id="3-网络层：IP-协议查询-Mac-地址"><a href="#3-网络层：IP-协议查询-Mac-地址" class="headerlink" title="3. 网络层：IP 协议查询 Mac 地址"></a><strong>3. 网络层：IP 协议查询 Mac 地址</strong></h3><p>将数据段打包，并加入源及目标的 IP 地址，并且负责寻找传输路线。</p><p>判断目标地址是否与当前地址处于同一网络中，是的话直接根据 Mac 地址发送，否则使用路由表查找下一跳地址，以及使用 ARP 协议查询它的 Mac 地址。</p><blockquote><p>注意：在 OSI 参考模型中 ARP 协议位于链路层，但在 TCP/IP 中，它位于网络层。</p></blockquote><h3 id="4-链路层：以太网协议"><a href="#4-链路层：以太网协议" class="headerlink" title="4. 链路层：以太网协议"></a><strong>4. 链路层：以太网协议</strong></h3><p><strong>以太网协议</strong></p><p>根据以太网协议将数据分为以“帧”为单位的数据包，每一帧分为两个部分：</p><ul><li>  标头：数据包的发送者、接受者、数据类型</li><li>  数据：数据包具体内容</li></ul><p><strong>Mac 地址</strong></p><p>以太网规定了连入网络的所有设备都必须具备“网卡”接口，数据包都是从一块网卡传递到另一块网卡，网卡的地址就是 Mac 地址。每一个 Mac 地址都是独一无二的，具备了一对一的能力。</p><p><strong>广播</strong></p><p>发送数据的方法很原始，直接把数据通过 ARP 协议，向本网络的所有机器发送，接收方根据标头信息与自身 Mac 地址比较，一致就接受，否则丢弃。</p><p><strong>注意</strong>：接收方回应是单播。</p><blockquote><p>相关知识点：</p><ol><li> ARP 攻击</li></ol></blockquote><p> <strong>服务器接受请求</strong></p><p>接受过程就是把以上步骤逆转过来，参见上图。</p><h2 id="四、服务器处理请求"><a href="#四、服务器处理请求" class="headerlink" title=" 四、服务器处理请求"></a> 四、服务器处理请求</h2><p><strong>大致流程</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913094339.png"></p><h3 id="HTTPD"><a href="#HTTPD" class="headerlink" title="HTTPD"></a><strong>HTTPD</strong></h3><p>最常见的 HTTPD 有 Linux 上常用的 Apache 和 Nginx，以及 Windows 上的 IIS。</p><p>它会监听得到的请求，然后开启一个子进程去处理这个请求。</p><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a><strong>处理请求</strong></h3><p>接受 TCP 报文后，会对连接进行处理，对 HTTP 协议进行解析（请求方法、域名、路径等），并且进行一些验证：</p><ul><li>  验证是否配置虚拟主机</li><li>  验证虚拟主机是否接受此方法</li><li>  验证该用户可以使用该方法（根据 IP 地址、身份信息等）</li></ul><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a><strong>重定向</strong></h3><p>假如服务器配置了 HTTP 重定向，就会返回一个 <code>301</code>永久重定向响应，浏览器就会根据响应，重新发送 HTTP 请求（重新执行上面的过程）。</p><blockquote><p>关于更多：<a href="https://www.cnblogs.com/workest/p/3891321.html">详见这篇文章 (opens new window)</a></p></blockquote><h3 id="URL-重写"><a href="#URL-重写" class="headerlink" title="URL 重写"></a><strong>URL 重写</strong></h3><p>然后会查看 URL 重写规则，如果请求的文件是真实存在的，比如图片、html、css、js 文件等，则会直接把这个文件返回。</p><p>否则服务器会按照规则把请求重写到 一个 REST 风格的 URL 上。</p><p>然后根据动态语言的脚本，来决定调用什么类型的动态文件解释器来处理这个请求。</p><p>以 PHP 语言的 MVC 框架举例，它首先会初始化一些环境的参数，根据 URL 由上到下地去匹配路由，然后让路由所定义的方法去处理请求。</p><h2 id="五、浏览器接受响应"><a href="#五、浏览器接受响应" class="headerlink" title="五、浏览器接受响应"></a>五、浏览器接受响应</h2><p>浏览器接收到来自服务器的响应资源后，会对资源进行分析。</p><p>首先查看 Response header，根据不同状态码做不同的事（比如上面提到的重定向）。</p><p>如果响应资源进行了压缩（比如 gzip），还需要进行解压。</p><p>然后，对响应资源做缓存。</p><p>接下来，根据响应资源里的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MIME (opens new window)</a> 类型去解析响应内容（比如 HTML、Image 各有不同的解析方式）。</p><h2 id="六、渲染页面"><a href="#六、渲染页面" class="headerlink" title="六、渲染页面"></a>六、渲染页面</h2><p><strong>浏览器内核</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913094432.png"></p><p>不同的浏览器内核，渲染过程也不完全相同，但大致流程都差不多。</p><p><strong>基本流程</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913094347.png"></p><h3 id="1-HTML-解析"><a href="#1-HTML-解析" class="headerlink" title="1. HTML 解析"></a><strong>1. HTML 解析</strong></h3><p>首先要知道浏览器解析是从上往下一行一行地解析的。</p><p>解析的过程可以分为四个步骤：</p><h4 id="1-解码（encoding）"><a href="#1-解码（encoding）" class="headerlink" title="1. 解码（encoding）"></a><strong>1. 解码（encoding）</strong></h4><p>传输回来的其实都是一些二进制字节数据，浏览器需要根据文件指定编码（例如 UTF-8）转换成字符串，也就是 HTML 代码。</p><h4 id="2-预解析（pre-parsing）"><a href="#2-预解析（pre-parsing）" class="headerlink" title="2. 预解析（pre-parsing）"></a><strong>2. 预解析（pre-parsing）</strong></h4><p>预解析做的事情是提前加载资源，减少处理时间，它会识别一些会请求资源的属性，比如<code>img</code>标签的<code>src</code>属性，并将这个请求加到请求队列中。</p><h4 id="3-符号化（Tokenization）"><a href="#3-符号化（Tokenization）" class="headerlink" title="3. 符号化（Tokenization）"></a><strong>3. 符号化（Tokenization）</strong></h4><p>符号化是词法分析的过程，将输入解析成符号，HTML 符号包括，开始标签、结束标签、属性名和属性值。</p><p>它通过一个状态机去识别符号的状态，比如遇到<code>&lt;</code>，<code>&gt;</code>状态都会产生变化。</p><h4 id="4-构建树（tree-construction）"><a href="#4-构建树（tree-construction）" class="headerlink" title="4. 构建树（tree construction）"></a><strong>4. 构建树（tree construction）</strong></h4><blockquote><p>注意：符号化和构建树是并行操作的，也就是说只要解析到一个开始标签，就会创建一个 DOM 节点。</p></blockquote><p>在上一步符号化中，解析器获得这些标记，然后以合适的方法创建<code>DOM</code>对象并把这些符号插入到<code>DOM</code>对象中。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913094354.png"></p><h4 id="浏览器容错进制"><a href="#浏览器容错进制" class="headerlink" title="浏览器容错进制"></a><strong>浏览器容错进制</strong></h4><p>你从来没有在浏览器看过类似”语法无效”的错误，这是因为浏览器去纠正错误的语法，然后继续工作。</p><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a><strong>事件</strong></h4><p>当整个解析的过程完成以后，浏览器会通过<code>DOMContentLoaded</code>事件来通知<code>DOM</code>解析完成。</p><h3 id="2-CSS-解析"><a href="#2-CSS-解析" class="headerlink" title="2. CSS 解析"></a>2. CSS 解析</h3><p>一旦浏览器下载了 CSS，CSS 解析器就会处理它遇到的任何 CSS，根据<a href="https://drafts.csswg.org/css-syntax-3/">语法规范 (opens new window)</a>解析出所有的 CSS 并进行标记化，然后我们得到一个规则表。</p><h4 id="CSS-匹配规则"><a href="#CSS-匹配规则" class="headerlink" title="CSS 匹配规则"></a><strong>CSS 匹配规则</strong></h4><p>在匹配一个节点对应的 CSS 规则时，是按照从右到左的顺序的，例如：<code>div p { font-size :14px }</code>会先寻找所有的<code>p</code>标签然后判断它的父元素是否为<code>div</code>。</p><p>所以我们写 CSS 时，尽量用 id 和 class，千万不要过度层叠。</p><h3 id="3-渲染树"><a href="#3-渲染树" class="headerlink" title="3. 渲染树"></a>3. 渲染树</h3><p>其实这就是一个 DOM 树和 CSS 规则树合并的过程。</p><blockquote><p>注意：渲染树会忽略那些不需要渲染的节点，比如设置了<code>display:none</code>的节点。</p></blockquote><h4 id="计算"><a href="#计算" class="headerlink" title="计算"></a><strong>计算</strong></h4><p>通过计算让任何尺寸值都减少到三个可能之一：<code>auto</code>、百分比、px，比如把<code>rem</code>转化为<code>px</code>。</p><h4 id="级联"><a href="#级联" class="headerlink" title="级联"></a><strong>级联</strong></h4><p>浏览器需要一种方法来确定哪些样式才真正需要应用到对应元素，所以它使用一个叫做<code>specificity</code>的公式，这个公式会通过：</p><ol><li> 标签名、class、id</li><li> 是否内联样式</li><li> <code>!important</code></li></ol><p>然后得出一个权重值，取最高的那个。</p><h4 id="渲染阻塞"><a href="#渲染阻塞" class="headerlink" title="渲染阻塞"></a><strong>渲染阻塞</strong></h4><p>当遇到一个<code>script</code>标签时，DOM 构建会被暂停，直至脚本完成执行，然后继续构建 DOM 树。</p><p>但如果 JS 依赖 CSS 样式，而它还没有被下载和构建时，浏览器就会延迟脚本执行，直至 CSS Rules 被构建。</p><p>所有我们知道：</p><ul><li>  CSS 会阻塞 JS 执行</li><li>  JS 会阻塞后面的 DOM 解析</li></ul><p>为了避免这种情况，应该以下原则：</p><ul><li>  CSS 资源排在 JavaScript 资源前面</li><li>  JS 放在 HTML 最底部，也就是 <code>&lt;/body&gt;</code>前</li></ul><p>另外，如果要改变阻塞模式，可以使用 defer 与 async，详见：<a href="https://github.com/xiaoyu2er/blog/issues/8">这篇文章 (opens new window)</a></p><ol start="4"><li>布局与绘制</li></ol><p>确定渲染树种所有节点的几何属性，比如：位置、大小等等，最后输入一个盒子模型，它能精准地捕获到每个元素在屏幕内的准确位置与大小。</p><p>然后遍历渲染树，调用渲染器的 paint() 方法在屏幕上显示其内容。</p><h3 id="5-合并渲染层"><a href="#5-合并渲染层" class="headerlink" title="5. 合并渲染层"></a><strong>5. 合并渲染层</strong></h3><p>把以上绘制的所有图片合并，最终输出一张图片。</p><h3 id="6-回流与重绘"><a href="#6-回流与重绘" class="headerlink" title="6. 回流与重绘"></a><strong>6. 回流与重绘</strong></h3><h4 id="回流-reflow"><a href="#回流-reflow" class="headerlink" title="回流(reflow)"></a><strong>回流(reflow)</strong></h4><p>当浏览器发现某个部分发现变化影响了布局时，需要倒回去重新渲染，会从<code>html</code>标签开始递归往下，重新计算位置和大小。</p><p>reflow 基本是无法避免的，因为当你滑动一下鼠标、resize 窗口，页面就会产生变化。</p><h4 id="重绘-repaint"><a href="#重绘-repaint" class="headerlink" title="重绘(repaint)"></a><strong>重绘(repaint)</strong></h4><p>改变了某个元素的背景色、文字颜色等等不会影响周围元素的位置变化时，就会发生重绘。</p><p>每次重绘后，浏览器还需要合并渲染层并输出到屏幕上。</p><p>回流的成本要比重绘高很多，所以我们应该尽量避免产生回流。</p><p>比如：</p><ul><li>  <code>display:none</code> 会触发回流，而 <code>visibility:hidden</code> 只会触发重绘。</li></ul><ol start="7"><li>JavaScript 编译执行</li></ol><p><strong>大致流程</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913094359.png"></p><p>可以分为三个阶段：</p><h5 id="1-词法分析"><a href="#1-词法分析" class="headerlink" title="1. 词法分析"></a><strong>1. 词法分析</strong></h5><p>JS 脚本加载完毕后，会首先进入语法分析阶段，它首先会分析代码块的语法是否正确，不正确则抛出“语法错误”，停止执行。</p><p>几个步骤：</p><ul><li>  分词，例如将<code>var a = 2</code>，，分成<code>var</code>、<code>a</code>、<code>=</code>、<code>2</code>这样的词法单元。</li><li>  解析，将词法单元转换成抽象语法树（AST）。</li><li>  代码生成，将抽象语法树转换成机器指令。</li></ul><h5 id="2-预编译"><a href="#2-预编译" class="headerlink" title="2. 预编译"></a><strong>2. 预编译</strong></h5><p>JS 有三种运行环境：</p><ul><li>  全局环境</li><li>  函数环境</li><li>  eval</li></ul><p>每进入一个不同的运行环境都会创建一个对应的执行上下文，根据不同的上下文环境，形成一个函数调用栈，栈底永远是全局执行上下文，栈顶则永远是当前执行上下文。</p><p><strong>创建执行上下文</strong></p><p>创建执行上下文的过程中，主要做了以下三件事：</p><ul><li>创建变量对象<ul><li>  参数、函数、变量</li></ul></li><li>建立作用域链<ul><li>  确认当前执行环境是否能访问变量</li></ul></li><li>  确定 This 指向</li></ul><h5 id="3-执行"><a href="#3-执行" class="headerlink" title="3. 执行"></a><strong>3. 执行</strong></h5><p><strong>JS 线程</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913094406.png"></p><p>虽然 JS 是单线程的，但实际上参与工作的线程一共有四个：</p><blockquote><p>其中三个只是协助，只有 JS 引擎线程是真正执行的</p></blockquote><ul><li>  JS 引擎线程：也叫 JS 内核，负责解析执行 JS 脚本程序的主线程，例如 V8 引擎</li><li>  事件触发线程：属于浏览器内核线程，主要用于控制事件，例如鼠标、键盘等，当事件被触发时，就会把事件的处理函数推进事件队列，等待 JS 引擎线程执行</li><li>  定时器触发线程：主要控制<code>setInterval</code>和<code>setTimeout</code>，用来计时，计时完毕后，则把定时器的处理函数推进事件队列中，等待 JS 引擎线程。</li><li>  HTTP 异步请求线程：通过 XMLHttpRequest 连接后，通过浏览器新开的一个线程，监控 readyState 状态变更时，如果设置了该状态的回调函数，则将该状态的处理函数推进事件队列中，等待 JS 引擎线程执行。</li></ul><p><strong>注：浏览器对同一域名的并发连接数是有限的，通常为 6 个。</strong></p><p><strong>宏任务</strong></p><p>分为：</p><ul><li>  同步任务：按照顺序执行，只有前一个任务完成后，才能执行后一个任务</li><li>  异步任务：不直接执行，只有满足触发条件时，相关的线程将该异步任务推进任务队列中，等待 JS 引擎主线程上的任务执行完毕时才开始执行，例如异步 Ajax、DOM 事件，setTimeout 等。</li></ul><p><strong>微任务</strong></p><p>微任务是 ES6 和 Node 环境下的，主要 API 有：<code>Promise</code>，<code>process.nextTick</code>。</p><p>微任务的执行在宏任务的同步任务之后，在异步任务之前。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913094407.png"></p><p><strong>代码例子</strong></p><p>以上代码输出顺序为：1,3,5,4,2</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li>  <a href="https://github.com/skyline75489/what-happens-when-zh_CN">what-happens-when-zh_CN (opens new window)</a></li><li>  <a href="https://alistapart.com/article/tags-to-dom/">Tags to DOM (opens new window)</a></li><li>  <a href="https://heyingye.github.io/2018/04/16/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/">彻底理解浏览器的缓存机制 (opens new window)</a></li><li>  <a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The_rendering_engine">浏览器的工作原理：新式网络浏览器幕后揭秘 (opens new window)</a></li><li>  <a href="https://blog.fundebug.com/2019/01/03/understand-browser-rendering/">深入浅出浏览器渲染原理 (opens new window)</a></li><li>  <a href="https://heyingye.github.io/2018/03/19/js%E5%BC%95%E6%93%8E%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/#%E9%A2%84%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5">js 引擎的执行过程（一） (opens new window)</a></li><li>  还有一些找不到了。。。。。</li></ul><p>From: <a href="https://4ark.me/post/b6c7c0a2.html">4ark.me</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;这个问题已经是老生常谈了，更是经常被作为面试的压轴题出现，网上也有很多文章，但最近闲的无聊，然后就自己做了一篇笔记，感觉比之前理解</summary>
      
    
    
    
    <category term="web" scheme="https://blog.17lai.fun/categories/web/"/>
    
    
    <category term="web" scheme="https://blog.17lai.fun/tags/web/"/>
    
    <category term="http" scheme="https://blog.17lai.fun/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Joplin 插件使用推荐</title>
    <link href="https://blog.17lai.fun/note/2021-09-10-the-joplin-plugin-recommend/"/>
    <id>https://blog.17lai.fun/note/2021-09-10-the-joplin-plugin-recommend/</id>
    <published>2021-09-10T14:25:00.000Z</published>
    <updated>2021-09-13T12:22:20.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Joplin插件推荐"><a href="#Joplin插件推荐" class="headerlink" title="Joplin插件推荐"></a>Joplin插件推荐</h2><blockquote><p>Gif图片加载较慢，请耐心等待！</p></blockquote><h2 id="persistent-text-folding-in-editor"><a href="#persistent-text-folding-in-editor" class="headerlink" title="persistent-text-folding-in-editor"></a><a href="https://github.com/ambrt/joplin-plugin-fold-cm/releases/">persistent-text-folding-in-editor</a></h2><p><img src="https://aws1.discourse-cdn.com/standard14/uploads/cozic/original/2X/3/371b2bfa2825255462241d6390400e0ed4dcf55b.gif" alt="persistent-text-folding-in-editor 演示"></p><ul><li>Ctrl(or Cmd) + Alt + F to fold all</li><li>Ctrl(or Cmd) + Alt + U to unfold all</li></ul><h2 id="Plugin-Conflict-Resolution"><a href="#Plugin-Conflict-Resolution" class="headerlink" title="Plugin: Conflict Resolution"></a><a href="https://discourse.joplinapp.org/t/plugin-conflict-resolution/19204">Plugin: Conflict Resolution</a></h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910084450.png" alt="plugin-conflict-resolution演示"></p><h2 id="Joplin-Kanban-Plugin"><a href="#Joplin-Kanban-Plugin" class="headerlink" title="Joplin Kanban Plugin"></a><a href="https://github.com/joplin/plugin-kanban/wiki">Joplin Kanban Plugin</a></h2><p><img src="https://images.weserv.nl/?url=https://github.com/joplin/plugin-kanban/wiki/images/kanban-screenshot.png" alt="img"></p><p><strong>Usage</strong></p><p>To get started, you’ll need a notebook which will contain all tasks that you want to see on the board. The plugin will only show tasks in a single notebook and it’s sub-notebooks.</p><p>A kanban board is defined by a special type of note, which contains all of its configuration. Create a new note, and paste in the following:</p><pre class="line-numbers language-none"><code class="language-none">```kanbancolumns:  - name: Backlog    backlog: true  - name: Work in progress    tag: wip  - name: Finished    tag: done```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It is important that the confiuration is surrounded by a code block (<code>kanban ... </code>), otherwise it won’t be detected.</p><h2 id="joplin-plugin-nlr"><a href="#joplin-plugin-nlr" class="headerlink" title="joplin_plugin_nlr"></a><a href="https://github.com/fengqiaozhu/joplin_plugin_nlr">joplin_plugin_nlr</a></h2><ol><li> 插件安装后会在工具菜单添加一项：<strong>NLR</strong></li></ol><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910101315.png" alt="1.png"></p><ol start="2"><li>点击 <strong>NLR</strong> 打开新的panel，即可在输入框输入书名或作者名称搜索小说</li></ol><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910101332.png" alt="2.png"></p><ol start="3"><li> 点击卡片右上方 <strong>INFO</strong> 打开新的小说目录，章节卡片右上checkbox选中即代表下载此chapter，选中后，点击上方<strong>DOWNLOAD</strong>开始下载，在笔记列表中即可看到小说文本了。</li></ol><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910101414.png" alt="3.png"></p><h2 id="joplin-outline"><a href="#joplin-outline" class="headerlink" title="joplin-outline"></a><a href="https://github.com/cqroot/joplin-outline">joplin-outline</a></h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910105707.png" alt="image-20210910105705248"></p><h2 id="joplin-persistent-layout"><a href="#joplin-persistent-layout" class="headerlink" title="joplin-persistent-layout"></a><a href="https://github.com/benji300/joplin-persistent-layout">joplin-persistent-layout</a></h2><p>Save editor layout (editor/split view/viewer/rich text) for each note separately.</p><p>To persist the layout for a note follow these steps:</p><ol><li><p>Specify the tags for which a specific layout should be used.</p><ul><li><p>To do this, go to the plugin’s settings/options page and add the tags to the settings.</p></li><li><p>An example configuration could like this:</p><p><a href="https://github.com/benji300/joplin-persistent-layout/blob/master/assets/tags-config.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910105956.png" alt="layout-tags-config"></a></p></li></ul></li><li><p>Make sure that the correct value is selected in <code>View &gt; Layout button sequence</code>.</p><ul><li>To be able to use the layout switching correctly, this setting must be set accordingly. Otherwise the editor layout might not be switched to the expected one.</li><li>For example: If a tag is specified in option <code>Tags for editor layout mode: Rendered Markdown viewer</code> and least one note uses it, the setting must also contain <code>Viewer</code>.</li></ul></li><li><p>Add the appropriate tags to the notes. If not already done.</p><ul><li>When the selected note is changed, the editor layout is switched.</li><li>If none of the selected note’s tags matches a specified layout tag, the default layout from the option <code>Default editor layout</code> is used.<ul><li>If nothing is selected as default editor layout, the currently active editor layout will be kept.</li></ul></li><li>If more than one tag is specified for a note, the first matching one is used.</li></ul></li></ol><h2 id="Plugin-inline-tags"><a href="#Plugin-inline-tags" class="headerlink" title="Plugin: inline tags"></a><a href="https://github.com/roman-r-m/joplin-inline-tags-plugin">Plugin: inline tags</a></h2><p><img src="https://aws1.discourse-cdn.com/standard14/uploads/cozic/original/2X/0/0065618a26a81a8f01a1dc440bbbd1e216266e2f.gif" alt="ezgif.com-gif-maker"></p><h2 id="joplin-plugin-note-overview"><a href="#joplin-plugin-note-overview" class="headerlink" title="joplin-plugin-note-overview"></a><a href="https://github.com/JackGruber/joplin-plugin-note-overview">joplin-plugin-note-overview</a></h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910111844.png" alt="image-20210910111842613"></p><p>Create one or more notes with the following content:</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- note-overview-pluginsearch: -tag:*fields: updated_time, titlealias: updated_time AS Last edit, title AS Titlesort: title DESC--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Several of these blocks can be included in one note, also between text.</p><p>The note content is updated every x minutes (depending on your setting) or manualy by <code>Tools &gt; Create Note overview</code>.</p><h2 id="joplin-plugin-embed-search"><a href="#joplin-plugin-embed-search" class="headerlink" title="joplin-plugin-embed-search"></a><a href="https://github.com/ambrt/joplin-plugin-embed-search">joplin-plugin-embed-search</a></h2><pre class="line-numbers language-none"><code class="language-none">```searchyour search query```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://aws1.discourse-cdn.com/standard14/uploads/cozic/original/2X/9/9dfb27924c8fd373c5db8178e1cda27c74a4e50c.gif" alt="Peek 2021-01-26 19-22"></p><p><strong>Additional features</strong></p><ul><li>you can paste <code>sort:asc</code> or <code>sort:desc</code> to sort notes by title ascending or descending</li><li>A shorthand <code>notebook:this</code>, that narrows search to current notebook only.</li><li>Basic content embedding <code>content:true</code> (beta):</li></ul><p><img src="https://aws1.discourse-cdn.com/standard14/uploads/cozic/original/2X/0/06aa9cff292ac6a5f5f3c3a2acc35d13c0fb65c9.png"></p><h2 id="Spoilers"><a href="#Spoilers" class="headerlink" title="Spoilers"></a>Spoilers</h2><ul><li><ul><li><p>可使用%%遮盖部分文字。</p></li><li><ul><li><p>格式：</p></li><li><ul><li><code>%%扰流板、遮挡板%%</code></li></ul></li><li><p>软件内呈现：</p></li></ul></li></ul></li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910174557.png" alt="点击前">点击前</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910174618.png" alt="点击后">点击后</p><ul><li><ul><li>以及一个类似闪卡的可折叠块</li><li>格式：</li></ul></li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">:[测试，标题测试，内容]:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><ul><li>软件内呈现：</li></ul></li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910174638.png" alt="点击前">点击前</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910180108.png" alt="点击后">点击后</p><h2 id="Notes-statistics"><a href="#Notes-statistics" class="headerlink" title="Notes statistics"></a>Notes statistics</h2><ul><li><ul><li>笔记内部的数据统计。</li></ul></li></ul><h2 id="Note-tabs"><a href="#Note-tabs" class="headerlink" title="Note tabs"></a><a href="https://github.com/benji300/joplin-note-tabs">Note tabs</a></h2><ul><li><ul><li>像浏览器一样浏览文档，支持多个打开放置。</li></ul></li><li><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/benji300/joplin-note-tabs/master/assets/screencast.gif"></p></li></ul><h2 id="Quick-links"><a href="#Quick-links" class="headerlink" title="Quick links"></a>Quick links</h2><ul><li><ul><li>使用<code>@@</code>快速链接笔记文件。</li></ul></li><li><p><img src="https://aws1.discourse-cdn.com/standard14/uploads/cozic/original/2X/9/98abc7c6beb7551c1a8d375d358707143305ef58.gif"></p></li></ul><p><a href="https://github.com/marc0l92/joplin-plugin-jira-issue">Jira Issue</a></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/marc0l92/joplin-plugin-jira-issue/main/doc/usage_example.gif"></p><h2 id="Homenotes"><a href="#Homenotes" class="headerlink" title="Homenotes"></a>Homenotes</h2><ul><li>选择一个笔记作为每次打开软件时的首个笔记，可以把这个功能当作书签用。</li></ul><h2 id="Admonition"><a href="#Admonition" class="headerlink" title="Admonition"></a><a href="https://github.com/maxnegro/joplin-plugin-admonition">Admonition</a></h2><pre class="line-numbers language-none"><code class="language-none">!!! note This is the admonition titleThis is the admonition body!!!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910185118.png" alt="image-20210910185116920"></p><p>The following admonition types, supported by Docarys, are recognized by this plugin:</p><table><thead><tr><th>Type</th></tr></thead><tbody><tr><td>note</td></tr><tr><td>abstract</td></tr><tr><td>info</td></tr><tr><td>tip</td></tr><tr><td>success</td></tr><tr><td>question</td></tr><tr><td>warning</td></tr><tr><td>failure</td></tr><tr><td>danger</td></tr><tr><td>bug</td></tr><tr><td>example</td></tr><tr><td>quote</td></tr></tbody></table><h2 id="Encrypted-notes"><a href="#Encrypted-notes" class="headerlink" title="Encrypted notes"></a>Encrypted notes</h2><ul><li>字面意义，加密笔记，记住密码不得找回。</li></ul><h2 id="Favorites"><a href="#Favorites" class="headerlink" title="Favorites"></a><a href="https://github.com/benji300/joplin-favorites">Favorites</a></h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910225438.png" alt="image-20210910225437074"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910225056.png" alt="img"></p><ul><li><p>收藏夹，支持笔记、标签笔记本的收纳（随取随用）</p></li><li><ul><li>更改收藏夹中的笔记名不会更改原始笔记。</li></ul></li></ul><h2 id="Highlight"><a href="#Highlight" class="headerlink" title="Highlight"></a>Highlight</h2><ul><li>打出<code>[h:colour:scope]</code>后，插件会自动识别成代码。</li></ul><table><thead><tr><th>颜色</th><th>范围（自动选择的）</th></tr></thead><tbody><tr><td>m = mark</td><td>e = empty</td></tr><tr><td>r = red</td><td>w = word</td></tr><tr><td>g = green</td><td>s = sentence</td></tr><tr><td>b = blue</td><td>l = line</td></tr><tr><td>y = yellow</td><td></td></tr></tbody></table><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910225117.png" alt="img"></p><p>其他插件：</p><p><a href="https://github.com/joplin/plugins/blob/master/README.md#plugins">官方插件下载地址及其介绍</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Joplin插件推荐&quot;&gt;&lt;a href=&quot;#Joplin插件推荐&quot; class=&quot;headerlink&quot; title=&quot;Joplin插件推荐&quot;&gt;&lt;/a&gt;Joplin插件推荐&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Gif图片加载较慢，请耐心等待！&lt;/p&gt;
&lt;/bl</summary>
      
    
    
    
    <category term="note" scheme="https://blog.17lai.fun/categories/note/"/>
    
    
    <category term="Joplin" scheme="https://blog.17lai.fun/tags/Joplin/"/>
    
    <category term="MarkDown" scheme="https://blog.17lai.fun/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>基于Hexo的matery主题搭建博客并深度优化</title>
    <link href="https://blog.17lai.fun/hexo/2021-09-10-use-hexo-and-matery-to-make-a-perfect-blog/"/>
    <id>https://blog.17lai.fun/hexo/2021-09-10-use-hexo-and-matery-to-make-a-perfect-blog/</id>
    <published>2021-09-10T14:25:00.000Z</published>
    <updated>2021-09-14T15:10:56.629Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-版-hexo-matery"><a href="#Docker-版-hexo-matery" class="headerlink" title="Docker 版 hexo + matery"></a>Docker 版 hexo + matery</h2><p><a href="https://hub.docker.com/r/bloodstar/hexo">docker-hub</a></p><p><a href="https://github.com/appotry/docker-hexo">Github-hexo</a></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">docker create <span class="token punctuation">-</span><span class="token punctuation">-</span>name=blog.17lai.fun \<span class="token punctuation">-</span>e HEXO_SERVER_PORT=4000 \<span class="token punctuation">-</span>e GIT_USER="17lai" \<span class="token punctuation">-</span>e GIT_EMAIL="17lai@domain.tld" \<span class="token punctuation">-</span>v /mnt/blog.17lai.fun<span class="token punctuation">:</span>/app \<span class="token punctuation">-</span>p 4000<span class="token punctuation">:</span>4000 \bloodstar/hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h2><p><a href="https://hexo.io/zh-cn/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li><li><a href="https://www.npmjs.com/">nmp</a></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装以后，可以使用以下两种方式执行 Hexo：</p><ol><li><code>npx hexo</code></li><li>将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用： <code>hexo</code></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'PATH="$PATH:./node_modules/.bin"'</span> <span class="token operator">&gt;&gt;</span> ~/.profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装淘宝镜像，-加NPM"><a href="#安装淘宝镜像，-加NPM" class="headerlink" title="安装淘宝镜像， 加NPM"></a>安装淘宝镜像， 加NPM</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装CNPM"><a href="#安装CNPM" class="headerlink" title="安装CNPM"></a>安装CNPM</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>后期需要升级的化，进入 blog 目录，先检查更新:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> outdatedPackage                  Current  Wanted  Latest  Locationhexo                       <span class="token number">3.9</span>.0   <span class="token number">3.9</span>.0   <span class="token number">4.2</span>.0  hexo-sitehexo-deployer-git          <span class="token number">1.0</span>.0   <span class="token number">1.0</span>.0   <span class="token number">2.1</span>.0  hexo-sitehexo-generator-archive     <span class="token number">0.1</span>.5   <span class="token number">0.1</span>.5   <span class="token number">1.0</span>.0  hexo-sitehexo-generator-category    <span class="token number">0.1</span>.3   <span class="token number">0.1</span>.3   <span class="token number">1.0</span>.0  hexo-sitehexo-generator-feed        <span class="token number">1.2</span>.2   <span class="token number">1.2</span>.2   <span class="token number">2.2</span>.0  hexo-sitehexo-generator-index       <span class="token number">0.2</span>.1   <span class="token number">0.2</span>.1   <span class="token number">1.0</span>.0  hexo-sitehexo-generator-tag         <span class="token number">0.2</span>.0   <span class="token number">0.2</span>.0   <span class="token number">1.0</span>.0  hexo-sitehexo-renderer-ejs          <span class="token number">0.3</span>.1   <span class="token number">0.3</span>.1   <span class="token number">1.0</span>.0  hexo-sitehexo-renderer-marked       <span class="token number">0.3</span>.2   <span class="token number">0.3</span>.2   <span class="token number">2.0</span>.0  hexo-sitehexo-renderer-stylus       <span class="token number">0.3</span>.3   <span class="token number">0.3</span>.3   <span class="token number">1.1</span>.0  hexo-sitehexo-server                <span class="token number">0.3</span>.3   <span class="token number">0.3</span>.3   <span class="token number">1.0</span>.0  hexo-site<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 <code>package.json</code> 文件，基于 <code>Latest</code> 列内容更新版本号，然后更新并检查版本号：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> --save<span class="token comment"># 检查版本号</span>$ hexo -vhexo: <span class="token number">4.2</span>.0hexo-cli: <span class="token number">3.1</span>.0<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span><span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>此时，通过 <code>hexo s</code> 命令即可在本地启动您的博客站点了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo sINFO  Start processingINFO  Hexo is running at http://localhost:4000 <span class="token builtin class-name">.</span> Press Ctrl+C to stop.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来将安装主题，配置博客托管平台，实现一键发布并刷新 CDN 缓存。</p><h2 id="目录结构说明"><a href="#目录结构说明" class="headerlink" title="目录结构说明"></a>目录结构说明</h2><p>在执行过<code>Hexo deploy</code>命令之后，目录结构新增了<code>.deploy_git</code>，<code>public</code>，<code>.gitignore</code>，如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> $ tree -L <span class="token number">2</span><span class="token builtin class-name">.</span>├── .deploy_git├── node_modules├── public├── scaffolds│   ├── draft.md│   ├── page.md│   └── post.md├── <span class="token builtin class-name">source</span>│   ├── _posts│   ├── _drafts├── themes├── _config.yml├── db.json├── package.json└── package-lock.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>用来配置博客相关的参数，初始化时自动创建。具体参数设置，可参照 <a href="https://hexo.io/zh-cn/docs/configuration">Hexo 配置</a> 文档。</p><h3 id="node-modules-和-package-json"><a href="#node-modules-和-package-json" class="headerlink" title="node_modules 和 package.json"></a>node_modules 和 package.json</h3><p>都是在初始化时自动创建。</p><p><code>node_modules</code>用来存储已安装的各类依赖包。<br><code>package.json</code>用来查看 Hexo 的版本以及相关依赖包的版本。</p><p>Hexo 会默认安装：</p><ul><li>hexo：主程序</li><li>hexo-deployer-git：实现 git 部署方式</li><li>hexo-generator-archive：存档页面生成器</li><li>hexo-generator-category：分类页面生成器</li><li>hexo-generator-index：index 生成器</li><li>hexo-generator-tag：标签页面生成器</li><li>hexo-renderer-ejs：支持 EJS 渲染</li><li>hexo-renderer-marked：Markdown 引擎</li><li>hexo-renderer-stylus：支持 stylus 渲染</li><li>hexo-server：支持本地预览，默认地址 localhost:4000</li></ul><p>新安装的依赖包，也会保存在<code>node_module</code>文件夹下。</p><h3 id="scaffold"><a href="#scaffold" class="headerlink" title="scaffold"></a>scaffold</h3><p>模板文件夹，初始化时自动创建。包含<code>page</code>，<code>post</code>，<code>draft</code>三种模板，分别对应 页面、要发布的文章、草稿。</p><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p>主题文件夹，初始化时自动创建。每一个主题，都有一个单独的文件夹。默认主题为 <a href="https://github.com/hexojs/hexo-theme-landscape">landscape</a>。</p><h3 id="source-，-public-和-deploy-git"><a href="#source-，-public-和-deploy-git" class="headerlink" title="source ， public 和 .deploy_git"></a>source ， public 和 .deploy_git</h3><ul><li>source：资源文件夹。用来存放图片、Markdown 文档（文章、草稿）、各种页面（分类、关于页面等）。</li><li>public：将 source 文件夹里的 Markdown 文档，转换成 index.html。再结合主题进行渲染，就是我们最终看到的博客。</li><li>.deploy_git：将 public 文件夹的内容提交到 Github 后生成，内容与 public 文件夹基本一致。</li></ul><p>这三者的关系大致是：source -&gt; public -&gt; .deploy_git</p><p>执行<code>hexo generate</code>，根据 source，更新 public。<br>执行<code>hexo deploy</code>，根据 public，更新 .deploy_git。</p><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p><a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a> 是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题，点击 <a href="https://www.lixl.cn/">这里</a> 可以查看示例效果。点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到 Hexo 的 <code>themes</code> 文件夹中即可。</p><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议"></a><code>_config.yml</code> 文件的其它修改建议</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建404页"><a href="#新建404页" class="headerlink" title="新建404页"></a>新建404页</h3><p> 新建一个404.md文件</p><p>  在hexo的souce文件夹下创建一个404.md，之后输入如下内容：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token font-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-11-23 21:10:10</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span></span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913191101.png" alt="新建404.md"></p><p>然后<code>hexo g</code>生成页面中就有404。只是页面较丑。</p><h3 id="404页面美化"><a href="#404页面美化" class="headerlink" title="404页面美化"></a>404页面美化</h3><blockquote><p>下载404特效</p><p>点击下载代码:<a href="https://www.lanrenzhijia.com/js/4285.html">点我去代码出处</a></p></blockquote><h4 id="移植"><a href="#移植" class="headerlink" title="移植"></a>移植</h4><h5 id="放入js文件到主题中"><a href="#放入js文件到主题中" class="headerlink" title="放入js文件到主题中"></a>放入js文件到主题中</h5><p>  将下载的压缩包解压，会发现里面有两个js文件和一个html页面，重要的就是js文件，将文件移植到主题的source文件的libs文件夹下，需要自己创建一个文件夹，我给文件夹取的名字叫做404。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913191716.png"></p><h5 id="导入404-js"><a href="#导入404-js" class="headerlink" title="导入404 js"></a>导入404 js</h5><p>因为该主题的js文件都是写_config.yml文件里面的，为了规范，也需要将文件的路径写到该文件夹下</p><p>如下，之后导入js文件的时候就可以使用404bodymovin和404data来代替了</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913192151.png" alt="修改主题_config.yml文件"></p><h5 id="编辑404-esj"><a href="#编辑404-esj" class="headerlink" title="编辑404.esj"></a>编辑404.esj</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token comment">/* don't remove. */</span>    <span class="token selector">.page404-cover</span> <span class="token punctuation">{</span>        <span class="token comment">/* height: 75vh; */</span>        <span class="token property">height</span><span class="token punctuation">:</span> 88vh<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token selector">#svgContainer</span> <span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%- theme.libs.js.my404bodymovin %&gt;<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%- theme.libs.js.my404data %&gt;<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-cover pd-header page404-cover<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>svgContainer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">var</span> svgContainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'svgContainer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> animItem <span class="token operator">=</span> bodymovin<span class="token punctuation">.</span><span class="token function">loadAnimation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          wrapper<span class="token operator">:</span> svgContainer<span class="token punctuation">,</span>          animType<span class="token operator">:</span> <span class="token string">'svg'</span><span class="token punctuation">,</span>          loop<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          animationData<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>animationData<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在就移植成功了，使用下面命令上传，之后输入一个错误的页面就可以查看到了</p><pre class="line-numbers language-none"><code class="language-none">hexo cl &amp;&amp; hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Tips: 不要再本地试验，本地的时候输入错误的页面不会显示404页面的。</p></blockquote><h3 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://www.lixl.cn/medias/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"悟尘记"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"人生就是一场修行，上善若水，厚德载物。"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.lixl.cn/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去参观"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://wiki.hyperledger.org/download/attachments/2392069/fabric?version=1&amp;modificationDate=1540928132000&amp;api=v2"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Fabric"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"A Blockchain Platform for the Enterprise"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://hyperledger-fabric.readthedocs.io/en/master/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://www.bootcdn.cn/assets/img/maoyun.svg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"BootCDN"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"稳定、快速、免费的前端开源项目 CDN 加速服务。"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.bootcdn.cn/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去加速"</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">"preprocess"</span> <span class="token comment"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">"tomorrow"</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># default false</span>  custom_css<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱的配置，可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com/blinkfox<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span>  <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span>  <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span>  <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span>  <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-github<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供参考：</p><ul><li>Facebook: <code>fa-facebook</code></li><li>Twitter: <code>fa-twitter</code></li><li>Google-plus: <code>fa-google-plus</code></li><li>Linkedin: <code>fa-linkedin</code></li><li>Tumblr: <code>fa-tumblr</code></li><li>Medium: <code>fa-medium</code></li><li>Slack: <code>fa-slack</code></li><li>新浪微博: <code>fa-weibo</code></li><li>微信: <code>fa-wechat</code></li><li>QQ: <code>fa-qq</code></li></ul><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置文章基本信息"><a href="#配置文章基本信息" class="headerlink" title="配置文章基本信息"></a>配置文章基本信息</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">new_post_name</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>title.md   <span class="token comment"># 新文章的文件名称</span><span class="token key atrule">default_layout</span><span class="token punctuation">:</span> post       <span class="token comment"># 预设布局</span><span class="token key atrule">auto_spacing</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>        <span class="token comment"># 在中文和英文之间加入空格</span><span class="token key atrule">titlecase</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>           <span class="token comment"># 把标题转换为 title case</span><span class="token key atrule">external_link</span><span class="token punctuation">:</span>             <span class="token comment"># 在新标签中打开链接</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>             <span class="token comment"># 在新标签中打开链接</span>  <span class="token key atrule">field</span><span class="token punctuation">:</span>                   <span class="token comment"># 对整个网站（site）生效或仅对文章（post）生效</span>  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>                 <span class="token comment"># 需要排除的域名。主域名和子域名如 www 需分别配置[]</span><span class="token key atrule">filename_case</span><span class="token punctuation">:</span> <span class="token number">0</span>           <span class="token comment"># 把文件名称转换为 (1) 小写或 (2) 大写</span><span class="token key atrule">render_drafts</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>       <span class="token comment"># 显示草稿，默认为：false</span><span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 启动 Asset 文件夹</span><span class="token key atrule">relative_link</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>       <span class="token comment"># 把链接改为与根目录的相对位址</span><span class="token key atrule">future</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>               <span class="token comment"># 显示未来的文章</span><span class="token key atrule">highlight</span><span class="token punctuation">:</span>                 <span class="token comment"># 代码块的设置</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>            <span class="token comment"># 开启代码块高亮</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>       <span class="token comment"># 显示行数</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>       <span class="token comment"># 如果未指定语言，则启用自动检测</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span>             <span class="token comment"># 用 n 个空格替换 tabs；如果值为空，则不会替换 tabs</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置代码高亮及样式"><a href="#配置代码高亮及样式" class="headerlink" title="配置代码高亮及样式"></a>配置代码高亮及样式</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>                      <span class="token comment"># 代码块的设置</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>                 <span class="token comment"># 开启代码块高亮</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>             <span class="token comment"># 显示行数</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>            <span class="token comment"># 如果未指定语言，则启用自动检测</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>               <span class="token comment"># 用 n 个空格替换 tabs；如果值为空，则不会替换 tabs</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置代码的样式</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">code</span><span class="token punctuation">:</span>  <span class="token key atrule">lang</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>     <span class="token comment"># 代码块是否显示名称</span>  <span class="token key atrule">copy</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>     <span class="token comment"># 代码块是否可复制</span>  <span class="token key atrule">shrink</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 代码块是否可以收缩</span>  <span class="token key atrule">break</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># 代码是否折行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置是否启用转载限制模块"><a href="#配置是否启用转载限制模块" class="headerlink" title="配置是否启用转载限制模块"></a>配置是否启用转载限制模块</h3><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">reprint:  enable: false   #是否启用“转载规则限定模块”  default: cc_by<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>文章转载规则，可以是 <code>cc_by</code>, <code>cc_by_nd</code>, <code>cc_by_sa</code>, <code>cc_by_nc</code>, <code>cc_by_nc_nd</code>, <code>cc_by_nc_sa</code>, <code>cc0</code>, <code>noreprint</code> 或 <code>pay</code> 中的一个</p><h3 id="配置文章阅读密码功能"><a href="#配置文章阅读密码功能" class="headerlink" title="配置文章阅读密码功能"></a>配置文章阅读密码功能</h3><p>阅读文章的密码验证功能，如要使用此功能请激活该配置项，并在对应文章的 <code>Front-matter</code> 中写上 <code>password</code> 的键和加密后的密文即可。</p><blockquote><p>请注意：为了保证密码原文不会被泄露到网页中，文章的密码必须是通过 <code>SHA256</code> 加密的，这样就不会被破解。</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">verifyPassword</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">promptMessage</span><span class="token punctuation">:</span> 请输入访问本文章的密码  <span class="token key atrule">errorMessage</span><span class="token punctuation">:</span>  密码错误，将返回主页！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h3><p>通过 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a> 插件可以实现一键将博客同时部署到多个 git 仓库中。如同时发布到 github 及 gitee 提供的 pages 服务。安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改 Hexo 根目录下的 <code>_config.yml</code> 文件中的如下内容:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">## Docs: https://hexo.io/docs/deployment.html</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/lxl80/blog.git    <span class="token key atrule">branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages    <span class="token key atrule">ignore_hidden</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/lxl80/lxl80.git    <span class="token key atrule">branch</span><span class="token punctuation">:</span> master    <span class="token key atrule">ignore_hidden</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>也可以如本站一样，采用 <a href="https://github.com/75k/hexo-deployer-cos-enhanced">hexo-deployer-cos-enhanced</a> 插件将静态内容部署到腾讯云对象存储服务中，在 DNS 配置中将境内线路解析到腾讯云 CDN 地址，实现加速。部署完成后会自动刷新被更新文件的 CDN 缓存。</p></blockquote><p>安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-cos-enhanced --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>_config.yml</code> 配置如下:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/lxl80/blog.git    <span class="token key atrule">branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages    <span class="token key atrule">ignore_hidden</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> cos    <span class="token key atrule">bucket</span><span class="token punctuation">:</span> lxl80<span class="token punctuation">-</span>130<span class="token important">****</span>    <span class="token key atrule">region</span><span class="token punctuation">:</span> ap<span class="token punctuation">-</span>beijing    <span class="token key atrule">secretId</span><span class="token punctuation">:</span> AKIDh9<span class="token important">****F8FvL</span>    <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> Z3IGiur<span class="token important">****QZR3PgjXmlVg</span>    <span class="token key atrule">cdnConfig</span><span class="token punctuation">:</span>      <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">cdnUrl</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//static.lixl.cn      <span class="token key atrule">bucket</span><span class="token punctuation">:</span> static<span class="token punctuation">-</span>130<span class="token important">****</span>      <span class="token key atrule">region</span><span class="token punctuation">:</span> ap<span class="token punctuation">-</span>beijing      <span class="token key atrule">folder</span><span class="token punctuation">:</span> static      <span class="token key atrule">secretId</span><span class="token punctuation">:</span> AKIDh9<span class="token important">****F8FvL</span>      <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> Z3IGiur<span class="token important">****QZR3PgjXmlVg</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后通过 <code>hexo g -d</code> 即可实现一键发布，并更新 CDN 缓存。</p><h3 id="文章链接转静态短地址（建议安装）"><a href="#文章链接转静态短地址（建议安装）" class="headerlink" title="文章链接转静态短地址（建议安装）"></a>文章链接转静态短地址（建议安装）</h3><p>如果文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件生成文章时生成中文拼音的永久链接，或者用<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 生成静态文章链接。以下结合 hexo-abbrlink 生成类似 <code>/yyyy/mmdd+随机数.html</code> 的文章链接地址。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，修改 <code>permalink:</code> ，并在文件末尾新增 <code>abbrlink:</code>配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>year/<span class="token punctuation">:</span>month<span class="token punctuation">:</span>day<span class="token punctuation">:</span>abbrlink.html<span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>  <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc16 <span class="token comment">#算法选项：crc16丨crc32</span>  <span class="token key atrule">rep</span><span class="token punctuation">:</span> dec <span class="token comment">#输出进制：dec为十进制，hex为十六进制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CND-加速（建议启用）"><a href="#CND-加速（建议启用）" class="headerlink" title="CND 加速（建议启用）"></a>CND 加速（建议启用）</h3><p>放在 Github 的资源在国内加载速度比较慢，因此需要使用 CDN 加速来优化网站打开速度，<a href="https://www.jsdelivr.com/">jsDelivr</a> + Github 便是免费且好用的 CDN，非常适合博客网站使用。也可以选择主流云服务商提供的对象存储+CDN 来获得更快速及稳定的访问效果，费用低到几乎可忽略。</p><p><strong>用法：</strong></p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">https:</span>//cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>例如：</strong></p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">https:</span>//cdn.jsdelivr.net/gh/lxl80/blog@gh-pages/medias/banner/1.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源。</p><blockquote><p>还可以配合 <a href="https://github.com/Molunerfinn/PicGo">PicGo</a>图床上传工具的<strong>自定义域名前缀</strong>来上传图片，使用极其方便。具体使用方法可参见我的另一篇文章: <a href="https://www.lixl.cn/2019/120114500.html">使用 Typora+iPic/PicGo 图床+CDN 实现高效 Markdown 创作</a></p></blockquote><h3 id="Cloudflare-CDN"><a href="#Cloudflare-CDN" class="headerlink" title="Cloudflare CDN"></a>Cloudflare CDN</h3><blockquote><p>配置最简单的CDN方式了。在github  raw链接地址前面加<code>https://images.weserv.nl/?url=</code>, 就会自动使用cloudflare cdn来加速图片访问。使用发现无法加速gif。</p></blockquote><p>本blog主要使用这个方法，如下所示。</p><ul><li>未加速图片地址</li></ul><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">https:</span>//raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910231815.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Cloudflare加速图片地址</li></ul><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">https:</span>//images.weserv.nl?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910231815.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="文章字数统计插件（可选的）"><a href="#文章字数统计插件（可选的）" class="headerlink" title="文章字数统计插件（可选的）"></a>文章字数统计插件（可选的）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">wordCount</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 将这个值设置为 true 即可.</span>  <span class="token key atrule">postWordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">" "</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明已经安装成功了。</p><h3 id="增加百度统计功能"><a href="#增加百度统计功能" class="headerlink" title="增加百度统计功能"></a>增加百度统计功能</h3><p>首先注册<a href="https://tongji.baidu.com/"><strong>百度统计站长版</strong></a>，登陆后点击 新增网站，然后直接输入你的博客地址例如： <a href="https://blog.17lai.fun,网站域名/">https://blog.17lai.fun，网站域名</a> 和 网站首页 都写这个，网站名称 可以填 我的博客，<br>行业类别： 博客—空间周边。</p><p>然后点击左侧菜单的 代码获取，找到</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">hm<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"https://hm.baidu.com/hm.js?……"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>问号后的这一段十六进制代码<br>复制下来，粘贴到 主题配置文件 中的baidu_analytics:后面，注意冒号和值之间要有一个空格，然后将该字段前面的#号删除代表启用此功能。保存后即可</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Add baidu analytics configuration</span><span class="token comment"># 添加 baidu Analytics 配置</span><span class="token key atrule">baiduAnalytics</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> f614xxxxxxxxxxxxxxxx05d25e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Leancloud-Valine打造Hexo个人博客极简评论系统"><a href="#Leancloud-Valine打造Hexo个人博客极简评论系统" class="headerlink" title="Leancloud+Valine打造Hexo个人博客极简评论系统"></a><a href="https://www.cnblogs.com/Timesi/p/9556236.html">Leancloud+Valine打造Hexo个人博客极简评论系统</a></h3><h4 id="Leancloud配置"><a href="#Leancloud配置" class="headerlink" title="Leancloud配置"></a>Leancloud配置</h4><p>首先访问Leancloud官网<code>https://leancloud.cn/</code><br>有Github账号的小伙伴可以用Github账号进行登陆然后绑定邮箱就可以啦！<br>进入之后点击创建应用<br><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1120210911134958.png" alt="img"><br>这样我们就创建好啦！<br><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1120210911135007.png" alt="img"><br>接着点击应用右上角的设置进入设置界面<br><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1120210911135013.png" alt="img"><br>选择应用key，这样就可以看到我们接下来需要使用到的key<br><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1120210911135020.png" alt="img"><br>接着进入应用中心绑定你的个人博客域名<br><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1120210911135027.png" alt="img"></p><h4 id="Valine配置"><a href="#Valine配置" class="headerlink" title="Valine配置"></a>Valine配置</h4><p>然后我们去主题配置文件中进行修改<br>主题配置文件路径：<code>matery\_config.yml</code><br>找到以下参数进行修改</p><pre class="line-numbers language-none"><code class="language-none"># Valine.# You can get your appid and appkey from https://leancloud.cn# more info please open https://valine.js.orgvaline:  enable: true //打开valine评论功能  appid: 你的leancloud appid   appkey: 你的leancloud appkey   notify: false //邮件提醒  verify: true //评论时是否有验证码，需要在Leancloud 设置-&gt;安全中心 中打开  placeholder: 说点什么吧！ //评论框默认显示  avatar: hide //评论者的头像,我这里设置的不显示  guest_info: nick # custom comment header  pageSize: 10 # pagination size<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PS：评论者头像可以进行如下设置<br><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1120210911135034.png" alt="img"></p><p>到此，一个极简评论系统就完成啦！</p><h3 id="添加博客看板娘-动漫人物挂件"><a href="#添加博客看板娘-动漫人物挂件" class="headerlink" title="添加博客看板娘    动漫人物挂件"></a>添加博客看板娘    动漫人物挂件</h3><p>方法：</p><p>获取模型：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装喜欢的模型：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> packagename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将packagename换成模型名字，如我使用的模型：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> live2d-widget-model-shizuku<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后打开博客根目录下的 _config.yml文件，添加如下代码：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Live2D</span><span class="token comment">## https://github.com/EYHN/hexo-helper-live2d</span><span class="token key atrule">live2d</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># enable: false</span>  <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/ <span class="token comment"># Root path of plugin to be on the site (Relative)</span>  <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/ <span class="token comment"># JavaScript path related to plugin's root (Relative)</span>  <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/ <span class="token comment"># Relative model path related to plugin's root (Relative)</span>  <span class="token key atrule">scriptFrom</span><span class="token punctuation">:</span> local <span class="token comment"># Default</span>  <span class="token comment"># scriptFrom: jsdelivr # jsdelivr CDN</span>  <span class="token comment"># scriptFrom: unpkg # unpkg CDN</span>  <span class="token comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # Your custom url</span>  <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># Whether only to replace live2d tag instead of inject to all pages</span>  <span class="token key atrule">log</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># Whether to show logs in console</span>  <span class="token key atrule">model</span><span class="token punctuation">:</span>    <span class="token comment">#use: live2d-widget-model-lwet # npm-module package name</span>    <span class="token comment"># use: wanko # folder name in (hexo base dir)/live2d_models/</span>    <span class="token comment"># use: ./wives/wanko # folder path relative to hexo base dir</span>    <span class="token comment"># 模型：https://huaji8.top/post/live2d-plugin-2.0/</span>    <span class="token key atrule">use</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>wanko@1.0.5/assets/wanko.model.json <span class="token comment"># Your custom url</span>  <span class="token key atrule">display</span><span class="token punctuation">:</span>    <span class="token key atrule">position</span><span class="token punctuation">:</span> left    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">300</span>    <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">400</span>    <span class="token key atrule">hOffset</span><span class="token punctuation">:</span> <span class="token number">50</span>    <span class="token key atrule">vOffset</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">mobile</span><span class="token punctuation">:</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果见本blog左下角</p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p>如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector">.bg-color</span> <span class="token punctuation">{</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #4cbf30 0%<span class="token punctuation">,</span> #0f9d58 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>  <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>  <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>可以直接在 <code>/source/medias/banner</code> 文件夹中更换喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果会 <code>JavaScript</code> 代码，可以修改成自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".bg-cover"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-image"</span><span class="token punctuation">,</span> <span class="token string">"url(/medias/banner/"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".jpg)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 基于Hexo的hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery主题搭建博客并优化<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-10-03 14:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 基于Hexo的hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery主题搭建博客并优化<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-12-30 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 17lai.fun<span class="token key atrule">img</span><span class="token punctuation">:</span> /medias/cover/hexo.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /medias/cover/hexo.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Hexo<span class="token key atrule">keywords</span><span class="token punctuation">:</span> Hexo GitHub blog<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Hexo  <span class="token punctuation">-</span> Blog  <span class="token punctuation">-</span> GitHub<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SEO-优化"><a href="#SEO-优化" class="headerlink" title="SEO 优化"></a>SEO 优化</h2><blockquote><p>搜索引擎优化，又称为 SEO，即 Search Engine Optimization，它是一种通过分析搜索引擎的排名规律，了解各种搜索引擎怎样进行搜索、怎样抓取互联网页面、怎样确定特定关键词的搜索结果排名的技术。Google 自动收录效果还不错，百度就差得远了（<code>GitHub</code>不允许百度的<code>Spider</code>爬取<code>GitHub</code>上的内容）。</p></blockquote><h3 id="网域提交方式"><a href="#网域提交方式" class="headerlink" title="网域提交方式"></a>网域提交方式</h3><ol><li><p>自动提交</p><p>（分三种）</p><ul><li>主动推送</li><li>自动推送</li><li>sitemap（站点地图）</li></ul></li><li><p>手动提交</p><ul><li>即手动地将链接一次性提交给百度</li></ul></li></ol><p>一般自动提交比手动提交效果好一点，自动提交又从效率上来说：</p><p><strong>主动推送&gt;自动推送&gt;sitemap</strong></p><p><strong>自动提交的三种方式</strong>：</p><ol><li><code>主动推送</code>：最为快速的提交方式。将站点当天新产出链接通过此方式推送给百度，以保证新链接可以及时被百度收录。</li><li><code>自动推送</code>：最为便捷的提交方式。将自动推送的JS代码部署在站点的每一个页面源代码中，当部署代码的页面在每次被浏览时，链接就会被自动推送给百度。可以与主动推送配合使用。</li><li><code>sitemap</code>：您可以定期将网站链接放到<code>sitemap文件</code>中，然后将<code>sitemap文件</code>提交给百度。百度会周期性的抓取检查您提交的<code>sitemap</code>，对其中的链接进行处理，但收录速度慢于主动推送。</li></ol><h3 id="使用sitemap方式推送"><a href="#使用sitemap方式推送" class="headerlink" title="使用sitemap方式推送"></a>使用sitemap方式推送</h3><p>安装 sitemap 插件生成站点地图文件:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap --save<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-baidu-sitemap --save  <span class="token comment">#百度专用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装后直接执行 <code>hexo cl&amp;&amp;hexo g -d</code> 命令，就会在网站根目录生成 <code>sitemap.xml</code> 及 <code>baidusitemap.xml</code> 文件。</p><ul><li>在博客目录的_config.yml中添加如下代码</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 通用站点地图</span><span class="token key atrule">sitemap</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> sitemap.xml<span class="token comment"># 百度站点地图</span><span class="token key atrule">baidusitemap</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> baidusitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="百度优化"><a href="#百度优化" class="headerlink" title="百度优化"></a>百度优化</h4><p>登录<a href="https://ziyuan.baidu.com/">百度搜索资源平台</a>， 登录成功之后在 用户中心 –&gt; 站点管理 页面中点击<a href="https://ziyuan.baidu.com/site/siteadd">添加网站</a>，按提示操作。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910231752.png" alt="添加网站"></p><p><strong>添加网站</strong></p><blockquote><p>提示：由于百度的 spider 是爬取不到 GitHub 的内容的，所以在第三步验证网站的时候，建议选择<code>CNAME验证</code>的方式。</p></blockquote><p>经过以上步骤，百度已经知道有我们网站的存在了，但是百度还不知道我们的网站上有什么内容，所以要向百度推送我们的内容。点击 网站支持 –&gt; 数据引入 –&gt; 链接提交菜单，提交站点地图：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910231758.png" alt="提交站点地图"></p><p><strong>提交站点地图</strong></p><p>另外，<code>hexo-theme-matery</code>主题已经内置了 <code>自动推送</code> 的功能， 检查 <code>themes/hexo-theme-matery/_config.yml</code> 文件中如下配置:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 百度搜索资源平台提交链接</span><span class="token key atrule">baiduPush</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>自动推送的 JS 代码部署在站点的每一个页面源代码中，当页面在每次被浏览时，链接就会被自动推送给百度。</p><h4 id="谷歌优化"><a href="#谷歌优化" class="headerlink" title="谷歌优化"></a>谷歌优化</h4><p>登录 <a href="https://search.google.com/search-console?hl=zh-CN">Google Search Console</a>，点击添加资源，输入自己的域名，按提示操作。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910231807.png" alt="添加资源"></p><p><strong>添加资源</strong></p><blockquote><p>提示：需要进行 DNS 验证，进入 DNS 域名解析设置页面，按提示增加 TXT 记录，如下图:</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910231808.png" alt="DNS验证内容填写示例"></p><p><strong>DNS验证内容填写示例</strong></p></blockquote><p>验证成功后，需要提交站点地图。参照下图提交，然后等待收录。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910231815.png" alt="提交站点地图"></p><p><strong>提交站点地图</strong></p><blockquote><p>注意：hexo 配置文件中的 url 一定要输入正确的域名，插件是根据 url 生成站点地图的。</p></blockquote><h3 id="自动推送方式"><a href="#自动推送方式" class="headerlink" title="自动推送方式"></a>自动推送方式</h3><p>只要每个需要被百度爬取的HTML页面中加入一段JS代码即可：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> bp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> curProtocol <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>curProtocol <span class="token operator">===</span> <span class="token string">'https'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        bp<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'https://zz.bdstatic.com/linksubmit/push.js'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        bp<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://push.zhanzhang.baidu.com/push.js'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>bp<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我所使用的matery主题可以自动给每个页面加上这段代码，只需在主题配置文件中配置：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># 百度搜索资源平台提交链接</span><span class="token key atrule">baiduPush</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>即可！</p><p>其他主题一般都有这个功能的实现，如果没有的话，想办法在每个页面加入以上JS代码即可，原理是一样。</p><h3 id="主动推送方式"><a href="#主动推送方式" class="headerlink" title="主动推送方式"></a>主动推送方式</h3><p>安装主动推送插件：<a href="https://github.com/huiwang/hexo-baidu-url-submit">hexo-baidu-url-submit</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-baidu-url-submit --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后打开<code>hexo配置文件</code>，在末尾加入以下配置：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># hexo-baidu-url-submit  百度主动推送</span><span class="token key atrule">baidu_url_submit</span><span class="token punctuation">:</span>  <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token number">80</span> <span class="token comment"># 提交最新的一个链接</span>  <span class="token key atrule">host</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//blog.17lai.fun <span class="token comment"># 在百度站长平台中注册的域名</span>  <span class="token key atrule">token</span><span class="token punctuation">:</span> xxxxxxx <span class="token comment"># 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> baidu_urls.txt <span class="token comment"># 文本文档的地址， 新链接会保存在此文本文档里</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>密匙的获取是在百度的自动提交的主动推送那里。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1120210911153349.png" alt="img"></p><p>再加入新的<code>deploy</code>：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> baidu_url_submitter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如图：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1120210911153357.png" alt="img"></p><p>这样每次执行 <code>hexo d</code> 的时候，新的链接就会被推送了。<br>推送成功时,会有如下终端提示!</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1120210911153404.png" alt="img"></p><p>各种不同的推送反馈字段说明<a href="https://ziyuan.baidu.com/college/courseinfo?id=267&amp;page=2#h2_article_title12">点我</a>查看，一般来说，推送失败基本都是地址不相符造成的，我们只需对比<code>baidu_url_submit</code>在<code>public</code>中生成的<code>baidu_urls.txt</code>的地址,与自己填写在<code>host</code>字段中的地址对比看是否一样即可。</p><h3 id="提交-robots-txt"><a href="#提交-robots-txt" class="headerlink" title="提交 robots.txt"></a>提交 robots.txt</h3><h4 id="robots-txt是干嘛的？"><a href="#robots-txt是干嘛的？" class="headerlink" title="robots.txt是干嘛的？"></a>robots.txt是干嘛的？</h4><blockquote><p><code>robots.txt</code> 是一种存放于网站根目录下的 <code>ASCII</code> 编码的文本文件，它的作用是告诉搜索引擎此网站中哪些内容是可以被爬取的，哪些是禁止爬取的。<br><code>robots.txt</code> 要放在 <code>Hexo根目录</code> 下的 <code>source</code> 文件夹中。</p></blockquote><p>每个人站点目录可能不太一样，可以参考下我的 <code>robots.txt</code> 文件，内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">User-agent</span><span class="token punctuation">:</span> *<span class="token key atrule">Allow</span><span class="token punctuation">:</span> /<span class="token key atrule">Allow</span><span class="token punctuation">:</span> /posts/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /about/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /archives/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /js/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /css/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /contact/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /fonts/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /friends/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /libs/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /medias/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /page/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /tags/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /categories/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多关于 <code>robots.txt</code> 的写法参见 <a href="https://blog.csdn.net/fanghua_vip/article/details/79535639">https://blog.csdn.net/fanghua_vip/article/details/79535639</a></p><p>编写完以上内容再重新部署一下，然后到百度资源平台的<code>数据监控</code>-&gt;<code>Robots</code>点击<code>检测并更新</code> 看能不能检测到。</p><h3 id="配置-Nofollow"><a href="#配置-Nofollow" class="headerlink" title="配置 Nofollow"></a>配置 Nofollow</h3><ul><li>nofollow 是HTML页面中 <code>a标签</code> 的 属性值。</li><li>这个属性的作用是：告诉搜索引擎的爬虫不要追踪该链接，为了对抗博客垃圾留言信息</li></ul><h3 id="URL优化"><a href="#URL优化" class="headerlink" title="URL优化"></a>URL优化</h3><p>一般来说，SEO搜索引擎优化认为，网站的最佳结构是 <strong>用户从首页点击三次就可以到达任何一个页面</strong>，但是我们使用<code>Hexo</code>编译的站点结构的<code>URL</code>是：<code>域名/年/月/日/文章标题</code>四层的结构，这样的<code>URL</code>结构很不利于<code>SEO</code>，爬虫就会经常爬不到我们的文章，于是，我们需要优化一下网站文章的<code>URL</code></p><p><strong>方案一</strong>：</p><p>直接改成<code>域名/文章标题</code>的形式，在<code>Hexo配置文件</code>中修改<code>permalink</code>如下：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># URL</span><span class="token comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//blog.sky03.cn<span class="token key atrule">root</span><span class="token punctuation">:</span> /<span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>title.htmlpermalink_defaults<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这个方式有个不好的地方：</strong></p><p>直接以<code>文章的标题</code>作为URL，而我们所写的文章的标题一般都是中文，但是URL只能用字母数字和标点符号表示，所以中文的URL只能被转义成一堆符号，而且还特别长。</p><p><strong>方案二</strong>：</p><p>安装固定链接插件：<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a></p><p>插件作用：自动为每篇文章生成一串数字作每篇文章的URI地址。每篇文章的<code>Front-matter</code>中会自动增加一个配置项：<code>abbrlink: xxxxx</code>，该项的值就是当前文章的URI地址。</p><ol><li><p>Hexo根目录执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>Hexo配置文件</code>末尾加入以下配置：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># hexo-abbrlink config 、固定文章地址插件</span><span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>  <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc16  <span class="token comment">#算法选项：crc16、crc32，区别见之前的文章，这里默认为crc16丨crc32比crc16复杂一点，长一点</span>  <span class="token key atrule">rep</span><span class="token punctuation">:</span> dec    <span class="token comment">#输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Hexo配置文件</code>中修改<code>permalink</code>如下：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># URL</span><span class="token comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//blog.17lai.fun<span class="token key atrule">root</span><span class="token punctuation">:</span> /<span class="token key atrule">permalink</span><span class="token punctuation">:</span> posts/<span class="token punctuation">:</span>abbrlink.htmlpermalink_defaults<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>这样站点结构就变成了：<code>域名/posts/xxx.html</code></p><h2 id="优化小技巧"><a href="#优化小技巧" class="headerlink" title="优化小技巧"></a>优化小技巧</h2><h3 id="异步加载JS"><a href="#异步加载JS" class="headerlink" title="异步加载JS"></a>异步加载JS</h3><p><strong>方法</strong>：将JS文件的引入，放到HTML的body结束标签的上方</p><p><strong>例</strong>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>        xxxxx....        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xx/xx.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原理</strong>：首先要明白，HTML的加载是从上往下一行一行解释执行的，把js文件的引入放到下面，这样就会先把HTML页面展示出来，然后再加载js。这样看起来的效果就是，大体的页面先出来，而js让它慢慢加载执行，如果你把js放到网页的上方，效果就是必须要加载完js才能继续展示网页，体验极差。</p><p><strong>注意</strong>：原主题的js文件尽量不要动，我们只需将自己增加的一些js按照异步加载的方式做即可，比如一些音乐js插件、实时在线聊天js插件等放到最后即可！因为这些文件要加载的东西很多。</p><h3 id="字蛛"><a href="#字蛛" class="headerlink" title="字蛛"></a>字蛛</h3><p><a href="http://font-spider.org/">官网</a> <a href="https://github.com/aui/font-spider">GitHub</a></p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>你的网站中需要自定义字体（额外添加一些普通电脑中没有的字体），但是一般字体是包含很多字符的，这就导致字体文件的体积很大</p><h4 id="字蛛作用"><a href="#字蛛作用" class="headerlink" title="字蛛作用"></a>字蛛作用</h4><p>字蛛就是自动检测网站的 CSS 与 HTML 文件中的自定义字体（额外加的字体），并将网站中<strong>用到的文字</strong>重新打包成一个新的字体文件，并自动引入；</p><p>而<strong>没用到的文字</strong>就会删除，从而达到压缩字体文件体积的作用。</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm install font-spider -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="在-CSS-中使用-WebFont："><a href="#在-CSS-中使用-WebFont：" class="headerlink" title="在 CSS 中使用 WebFont："></a>在 CSS 中使用 WebFont：</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*声明 WebFont*/</span><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'pinghei'</span><span class="token punctuation">;</span>  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../font/pinghei.eot'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>  <span class="token property">src</span><span class="token punctuation">:</span>    <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../font/pinghei.eot?#font-spider'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../font/pinghei.woff'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../font/pinghei.ttf'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../font/pinghei.svg'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*使用选择器指定字体*/</span><span class="token selector">.home h1, .demo &gt; .test</span> <span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'pinghei'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li>@font-face 中的 src 定义的 .ttf 文件必须存在，其余的格式将由工具自动生成</li><li>开发阶段请使用相对路径的 CSS 与 WebFont</li></ol></blockquote><h4 id="运行-font-spider-命令："><a href="#运行-font-spider-命令：" class="headerlink" title="运行 font-spider 命令："></a>运行 font-spider 命令：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">font-spider ./demo/*.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>页面依赖的字体将会自动压缩好，原 .ttf 字体会备份</p></blockquote><h3 id="将Hexo部署到vps，实现自动发布"><a href="#将Hexo部署到vps，实现自动发布" class="headerlink" title="将Hexo部署到vps，实现自动发布"></a><a href="https://www.cnblogs.com/luoshuitianyi/p/10333928.html" title="Hexo搭建(VPS)">将Hexo部署到vps，实现自动发布</a></h3><h4 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h4><ol><li> 服务器环境配置，安装Git、Nginx配置、创建git用户</li><li> 本地hexo初始化</li><li> 使用Git自动部署并发布博客</li></ol><h4 id="服务器环境搭建"><a href="#服务器环境搭建" class="headerlink" title="服务器环境搭建"></a>服务器环境搭建</h4><ul><li>  <strong>安装Git和NodeJS(Centos环境)</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token function">git</span><span class="token comment"># 安装NodeJS </span><span class="token function">curl</span> --silent --location https://rpm.nodesource.com/setup_5.x <span class="token operator">|</span> <span class="token function">bash</span> -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>  <strong>创建git账号</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adduser <span class="token function">git</span><span class="token function">chmod</span> <span class="token number">740</span> /etc/sudoers<span class="token function">vim</span> /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>添加内容<br>  找到</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## Allow root to run any commands anywhere</span>root    <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>     ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>  添加以下内容</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span>     <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>     ALL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>  保存退出并改回权限</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">400</span> /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>  设置git账号密码</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>  使用<code>su git</code>切换到git用户，再执行下列操作：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换到git用户目录</span><span class="token builtin class-name">cd</span> /home/git<span class="token comment"># 创建.ssh文件夹</span><span class="token function">mkdir</span> ~/.ssh<span class="token comment"># 创建authorized_keys文件并编辑</span><span class="token function">vim</span> ~/.ssh/authorized_keys<span class="token comment"># 如果你还没有生成公钥，那么首先在本地电脑中执行 cat ~/.ssh/id_rsa.pub | pbcopy生成公钥</span><span class="token comment"># 再将公钥复制粘贴到authorized_keys</span><span class="token comment"># 保存关闭authorized_keys后，修改相应权限</span><span class="token function">chmod</span> <span class="token number">600</span> ~/.ssh/authorized_keys<span class="token function">chmod</span> <span class="token number">700</span> ~/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>  然后可以通过本地Git Bash执行ssh命令测试是否可以免密登录</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -v git@服务器ip地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样git用户就添加好了。</p><blockquote><p>Tips: 将公钥拷贝到服务器的~/.ssh/authorized_keys文件中方法有如下几种：</p><ol><li>将公钥通过scp拷贝到服务器上，然后追加到<del>/.ssh/authorized_keys文件中，这种方式比较麻烦。scp -P 22 ~/.ssh/id_rsa.pub user@host:</del>/。</li><li>通过ssh-copy-id程序，就是我演示的方法，ssh-copyid user@host即可</li><li>可以通过cat ~/.ssh/id_rsa.pub | ssh -p 22 user@host ‘cat &gt;&gt; ~/.ssh/authorized_keys’，这个也是比较常用的方法，因为可以更改端口号。 </li></ol></blockquote><ul><li>  <strong>安装Nginx</strong></li><li>准备工作<br>  首先由于nginx的一些模块依赖一些lib库，所以在安装nginx之前，必须先安装这些lib库，这些依赖库主要有g++、gcc、openssl-devel、pcre-devel和zlib-devel 所以执行如下命令安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> gcc-c++yum <span class="token function">install</span> pcre pcre-develyum <span class="token function">install</span> zlib zlib-develyum <span class="token function">install</span> openssl openssl--devel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Ubuntu系统安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libpcre3 libpcre3-dev<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> zlib1g-dev<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openssl libssl-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>安装Nginx<br>  安装之前，最好检查一下是否已经安装有nginx</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> -name nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果系统已经安装了nginx，那么就先卸载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum remove nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后开始安装<br>首先进入<code>/usr/local</code>目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从官网下载最新版的nginx</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -c https://nginx.org/download/nginx-1.14.2.tar.gz <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（注：版本号可更改，去官网查看最新版本号修改即可）</p><p>解压nginx压缩包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf nginx-1.14.2.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会产生一个nginx-1.14.2 目录，这时进入nginx-1.14.2 目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span>  nginx-1.14.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来安装，使用–prefix参数指定nginx安装的目录,make、make install安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（默认安装在/usr/local/nginx，推荐使用默认设置）</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912163925.png"></p><pre class="line-numbers language-none"><code class="language-none">make<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912163918.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912163522.png"></p><p>如果没有报错，顺利完成后，最好看一下nginx的安装目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">whereis</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（where和is要连这些，中间没有空格）</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912163515.png"></p><ul><li>  启动和停止nginx</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/nginx/sbin/./nginx ./nginx -s stop./nginx -s quit./nginx -s reload./nginx -s quit: 此方式停止步骤是待nginx进程处理任务完毕进行停止。./nginx -s stop: 此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询nginx进程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912163454.png"></p><ul><li>  重启 nginx</li></ul><ol><li>先停止再启动（推荐）：<br> 对 nginx 进行重启相当于先停止再启动，即先执行停止命令再执行启动命令。如下：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./nginx -s quit./nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>重新加载配置文件：<br> 当 nginx 的配置文件 nginx.conf 修改后，要想让配置生效需要重启 nginx，使用 -s reload 不用先停止 nginx 再启动 nginx 即可将配置信息在 nginx 中生效，如下：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动成功后，在浏览器可以看到如下页面：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912163437.png"></p><ul><li>  开机自启动</li></ul><p>即在rc.local增加启动代码就可以了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/rc.local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>增加一行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/nginx/sbin/nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到这里，nginx安装完毕，启动、停止、重启操作也都完成。</p><h4 id="建立git裸库"><a href="#建立git裸库" class="headerlink" title="建立git裸库"></a>建立git裸库</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 回到git目录</span><span class="token builtin class-name">cd</span> /home/git<span class="token comment"># 使用git用户创建git裸仓库，以blog.git为例</span><span class="token function">git</span> init --bare blog.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="检查用户组权限"><a href="#检查用户组权限" class="headerlink" title="检查用户组权限"></a>检查用户组权限</h4><p>我们的git裸仓库已经建立好了，离成功又近了一步。为了以防万一，我们要检查一下之前的blog.git、.ssh、blog目录的用户组权限是否都为<code>git:git</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 还记得/var/www/吗？这是之前配置nginx时，我们自己选定的网站根目录，请依据你自己的设置更改，如果没有的话自己</span>ll -a /www/wwwroot/hexoll -a /home/git/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果有哪个不是，执行下面相应的命令后再查看</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chown</span> -R git:git /www/wwwroot/hexo<span class="token function">sudo</span> <span class="token function">chmod</span> -R <span class="token number">755</span> /www/wwwroot/hexo<span class="token function">sudo</span> <span class="token function">chown</span> git:git -R /home/git/blog.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="使用git-hooks同步网站根目录"><a href="#使用git-hooks同步网站根目录" class="headerlink" title="使用git-hooks同步网站根目录"></a>使用git-hooks同步网站根目录</h4><p>简单来说，我们使用一个钩子文件：post-receive，每当git仓库接收到内容的时候，就会自动调用这个钩子，把内容同步到网站根目录。<br> 在git用户下执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 新建一个post-receive文件并编辑</span><span class="token function">vim</span> ~/blog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在里面输入以下内容，注意修改为自己的设置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">set</span> -e<span class="token assign-left variable">GIT_REPO</span><span class="token operator">=</span>/home/git/blog.git<span class="token assign-left variable">TMP_GIT_CLONE</span><span class="token operator">=</span>/tmp/blog<span class="token assign-left variable">PUBLIC_WWW</span><span class="token operator">=</span>/www/wwwroot/hexo<span class="token function">rm</span> -rf <span class="token variable">${TMP_GIT_CLONE}</span><span class="token function">git</span> clone <span class="token variable">$GIT_REPO</span> <span class="token variable">$TMP_GIT_CLONE</span><span class="token builtin class-name">cd</span> <span class="token variable">$TMP_GIT_CLONE</span><span class="token keyword">for</span> <span class="token for-or-select variable">b</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">git</span> branch -r <span class="token operator">|</span> <span class="token function">grep</span> -v -- <span class="token string">'-&gt;'</span><span class="token variable">`</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">git</span> branch --track <span class="token variable">${b<span class="token operator">##</span>origin<span class="token operator">/</span>}</span> <span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token keyword">done</span><span class="token function">git</span> checkout main<span class="token function">rm</span> -rf <span class="token variable">${PUBLIC_WWW}</span>/*<span class="token function">cp</span> -rf <span class="token variable">${TMP_GIT_CLONE}</span>/* <span class="token variable">${PUBLIC_WWW}</span><span class="token function">ls</span> <span class="token variable">${PUBLIC_WWW}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存退出后，执行以下赋予这个文件可执行权限。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> -R git:git ~/blog.git/hooks/post-receive<span class="token function">chmod</span> +x ~/blog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>好了，以上就是服务器端需要配置的内容。我们还差最后一步就可以完成整个部署了！</p><h4 id="修改配置文件nginx-conf"><a href="#修改配置文件nginx-conf" class="headerlink" title="修改配置文件nginx.conf"></a>修改配置文件nginx.conf</h4><p>修改上面的配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /usr/local/nginx/conf/nginx_config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="然后修改其中两个部分，如下所示："><a href="#然后修改其中两个部分，如下所示：" class="headerlink" title="然后修改其中两个部分，如下所示："></a>然后修改其中两个部分，如下所示：</h4><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912163900.jpeg"></p><p>然后<code>重启nginx</code>，方法见<code>nginx安装</code>部分。</p><h4 id="配置本地Hexo的-config-yml"><a href="#配置本地Hexo的-config-yml" class="headerlink" title="配置本地Hexo的_config.yml"></a>配置本地Hexo的_config.yml</h4><p>非常简单，只需要找到本地Hexo博客的站点配置文件_config.yml，找到以下内容并修改：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>   <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@你的服务器IP<span class="token punctuation">:</span>/home/git/blog.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>保存后，剩下的就是Hexo的日常操作了，这里就不赘述了，写完文章后，在你的本地博客根目录执行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo c <span class="token operator">&amp;&amp;</span> hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就可以实现线上博客的自动更新了！一切搞定！</p><h3 id="Rsync同步部署静态文件方法"><a href="#Rsync同步部署静态文件方法" class="headerlink" title="Rsync同步部署静态文件方法"></a>Rsync同步部署静态文件方法</h3><blockquote><p>使用rsync同步</p></blockquote><p>本地生成静态文件后rsync同步到vps网页目录，lnap使用宝塔配置，这里只需要一个nginx。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># rsync [options] from_dir to_dir</span><span class="token comment"># 替换这里的ip为你的服务器ip</span><span class="token function">rsync</span> -avzP  /home/17lai.blog  root@8.8.8.8:/www/wwwroot/hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Hexo-自动部署"><a href="#Hexo-自动部署" class="headerlink" title="Hexo 自动部署"></a>Hexo 自动部署</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol><li><code>Hexo</code> 博客源码的仓库，在 <code>GitHub</code> 上。</li><li><code>ssh</code> 密钥，参考文章：<a href="https://sitoi.cn/posts/43508.html">Windows 下利用 Git 生成 SSH KEY 并配置到 GitHub</a></li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>为需要部署的平台添加密钥</li><li>修改 <code>_config.yml</code> 中的 <code>deploy</code> 配置</li><li>在 GitHub 上设置 <code>Secrets</code></li><li>创建 GitHub Action</li></ol><h3 id="为需要部署的平台添加密钥"><a href="#为需要部署的平台添加密钥" class="headerlink" title="为需要部署的平台添加密钥"></a>为需要部署的平台添加密钥</h3><p>按照之前的教程，只要你之前成功将 Hexo 的博客部署到 GitHub 上，那你电脑在 <code>~/.ssh</code> 目录下一定有以下三个文件：</p><ul><li><code>id_rsa</code>：私钥</li><li><code>id_rsa.pub</code>：公钥</li><li><code>known_hosts</code>：记录对所有用户都可信赖的远程主机的公钥</li></ul><p>将 <code>id_rsa.pub</code>（公钥）添加到不同平台中即可，参考文章：<a href="https://sitoi.cn/posts/43508.html#%E6%9F%A5%E7%9C%8B-SSH-KEY">Windows 下利用 Git 生成 SSH KEY 并配置到 GitHub</a></p><p>下面是不同平台添加的地址：</p><ul><li><a href="https://github.com/settings/ssh/new">GitHub</a></li><li><a href="https://gitlab.com/profile/keys">GitLab</a></li><li><a href="https://e.coding.net/">Coding</a></li><li><a href="https://gitee.com/profile/sshkeys">Gitee</a></li></ul><h3 id="修改-config-yml-中的-deploy-配置"><a href="#修改-config-yml-中的-deploy-配置" class="headerlink" title="修改 _config.yml 中的 deploy 配置"></a>修改 <code>_config.yml</code> 中的 <code>deploy</code> 配置</h3><p>请使用 <code>ssh</code> (即以 <code>git@</code> 开头的 <code>clone</code> 链接) 的连接方式，根据直接的实际地址填写。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span>      <span class="token key atrule">github</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>Sitoi/Sitoi.github.io.git      <span class="token key atrule">coding</span><span class="token punctuation">:</span> git@e.coding.net<span class="token punctuation">:</span>Sitoi/Sitoi.git      <span class="token key atrule">gitee</span><span class="token punctuation">:</span> git@gitee.com<span class="token punctuation">:</span>sitoi/sitoi.git      <span class="token key atrule">gitlab</span><span class="token punctuation">:</span> git@gitlab.com<span class="token punctuation">:</span>Sitoi/sitoi.gitlab.io.git    <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在-GitHub-上设置-Secrets"><a href="#在-GitHub-上设置-Secrets" class="headerlink" title="在 GitHub 上设置 Secrets"></a>在 GitHub 上设置 <code>Secrets</code></h3><ol><li><p>进入到你在 <code>GitHub</code> 上面的源码仓库</p></li><li><p>点击右上角的 <code>Settings</code></p><p><a href="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/repos_settings.png"><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/repos_settings.png" alt="Settings"></a></p><p>Settings</p></li><li><p>点击左侧的 <code>Secrets</code></p></li><li><p>点击右上角的 <code>New secret</code></p><p><a href="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/secrets.png"><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/secrets.png" alt="New secret"></a></p><p>New secret</p></li><li><p>在 <code>Name</code> 中输入 <code>HEXO_DEPLOY_PRI</code>，在 <code>Value</code> 中填入 <code>id_rsa</code>（私钥）的全部内容</p><p><a href="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/add_secret.png"><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/add_secret.png" alt="Add secret"></a></p><p>Add secret</p></li></ol><h3 id="创建-GitHub-Action"><a href="#创建-GitHub-Action" class="headerlink" title="创建 GitHub Action"></a>创建 GitHub Action</h3><ol><li><p>点击项目上方的 <code>Action</code> 按钮</p><p><a href="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/action.png"><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/action.png" alt="Action"></a></p><p>Action</p></li><li><p>点击 <code>set up a workflow yourself</code> 创建 <code>Workflow</code></p><p><a href="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/workflow.png"><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/workflow.png" alt="Workflow"></a></p><p>Workflow</p></li><li><p>修改 <code>main.yaml</code> 的内容</p><p><a href="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/create_workflow.png"><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/create_workflow.png" alt="Create Workflow"></a></p><p>Create Workflow</p><blockquote><p>根据实际情况修改成你自己的内容</p></blockquote><ul><li>Git 推送使用的用户名：git config –global user.name ‘sitoi’：</li><li>Git 推送使用的邮箱：git config –global user.email ‘<a href="mailto:133397418@qq.com">133397418@qq.com</a>‘</li><li>Hexo 的版本：npm i <a href="mailto:hexo@4.1.1">hexo@4.1.1</a> -g</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo CI<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> butterfly<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">butterfly-build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">strategy</span><span class="token punctuation">:</span>      <span class="token key atrule">matrix</span><span class="token punctuation">:</span>        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>10.x<span class="token punctuation">]</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v1      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Use Node.js 10.x        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v1        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">'10.x'</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> env prepare        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token key atrule">HEXO_DEPLOY_PRI</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.HEXO_DEPLOY_PRI <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          mkdir -p ~/.ssh/          echo "$HEXO_DEPLOY_PRI" &gt; ~/.ssh/id_rsa          chmod 600 ~/.ssh/id_rsa          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts          ssh-keyscan gitlab.com &gt;&gt; ~/.ssh/known_hosts          ssh-keyscan e.coding.net &gt;&gt; ~/.ssh/known_hosts          ssh-keyscan gitee.com &gt;&gt; ~/.ssh/known_hosts          git config --global user.name 'sito'          git config --global user.email '133397418@qq.com'          npm i          npm i hexo@4.1.1 -g</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> gen        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          hexo clean          hexo generate          hexo deploy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将你的源码推送到 <code>GitHub</code> 上，你的博客一会就会自动更新了。</p></li></ol><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="指令说明"><a href="#指令说明" class="headerlink" title="指令说明"></a>指令说明</h3><ul><li><p><code>hexo server</code> #启动本地服务器，用于预览主题。Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</p></li><li><p><code>hexo server -s</code> #以静态模式启动</p></li><li><p><code>hexo server -p 5000</code> #更改访问端口 (默认端口为 4000，’ctrl + c’关闭 server)</p></li><li><p><code>hexo server -i IP地址</code> #自定义 IP</p></li><li><p><code>hexo clean</code> #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的 public 文件夹</p></li><li><p><code>hexo g</code> #生成静态网页 (执行 $ <code>hexo g</code>后会在站点根目录下生成 public 文件夹, hexo 会将”/blog/source/“ 下面的.md 后缀的文件编译为.html 后缀的文件,存放在”/blog/public/ “ 路径下)</p></li><li><p><code>hexo d</code> #自动生成网站静态文件，并将本地数据部署到设定的仓库(如 github)</p></li><li><p><code>hexo init</code> 文件夹名称 #初始化 XX 文件夹名称</p></li><li><p><code>npm update hexo -g</code>#升级</p></li><li><p><code>npm install hexo -g</code> #安装</p></li><li><p><code>node-v</code> #查看 node.js 版本号</p></li><li><p><code>npm -v</code> #查看 npm 版本号</p></li><li><p><code>git --version</code> #查看 git 版本号</p></li><li><p><code>hexo -v</code> #查看 hexo 版本号</p></li></ul><h3 id="简写指令"><a href="#简写指令" class="headerlink" title="简写指令"></a>简写指令</h3><pre class="line-numbers language-none"><code class="language-none">hexo n "我的第一篇文章"` 等价于 `hexo new "我的第一篇文章"` 还等价于 `hexo new post "我的第一篇文章"hexo p` 等价于 `hexo publishhexo g` 等价于 `hexo generatehexo s`等价于 `hexo serverhexo d` 等价于 `hexo deployhexo g -d`等价于`hexo generate --deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注: <code>hexo clean</code> 没有 简写, <code>git --version</code> 没有简写</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h4 id="通过hexo-g-d部署时报Error-Spawn-failed错误"><a href="#通过hexo-g-d部署时报Error-Spawn-failed错误" class="headerlink" title="通过hexo g -d部署时报Error: Spawn failed错误:"></a>通过<code>hexo g -d</code>部署时报<code>Error: Spawn failed</code>错误:</h4><blockquote><p>这是由于 git 本地记录的提交版本号与 github 上不一致导致的，通过<code>git reset --hard commitCode</code>即可解决。</p></blockquote><ul><li>检查本地最近提交记录，获取最后一次提交记录的更新时间及标识，如<code>280a7fdd46fcfd7d34e652aec15523dcd247fac8</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> .deploy_git<span class="token function">cat</span> .git/logs/HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>获取 github pages 服务所关联分支的最近一次提交记录，获取更新时间及标识。地址一般为：<code>https://github.com/用户名/仓库名/commits/分支名</code>，如<code>https://github.com/lxl80/blog/commits/gh-pages</code></li><li>如果发现提交最新的提交时间/标识不一致，通过以下命令即可解决:</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --hard f085038efdf79546c09641d37b2a2429c1ae8e60 <span class="token comment">#github上最新的提交标识</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="关于百度无法爬取GitHub内容解决方案"><a href="#关于百度无法爬取GitHub内容解决方案" class="headerlink" title="关于百度无法爬取GitHub内容解决方案"></a>关于百度无法爬取GitHub内容解决方案</h4><p>既然百度无法爬取GitHub，那么我们只需要找个可以被百度爬取到的代码托管平台即可（并且还提供pages服务），基本只有国内的平台了：<code>Gitee</code>和<code>Coding</code>！Gitee自定义域名要花钱（九十多，都可以买服务器了），而Coding是可以免费自定义域名的。这里推介大家使用企业版的Coding，因为企业版的Coding仓库服务器是在香港的，而普通版的服务器是在新加坡。地理原因，理论上企业版的更快一些！</p><ol><li><p>将博客同时部署到两个仓库：GitHub和Coding</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>xxx/xxx.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@e.coding.net<span class="token punctuation">:</span>xxx/xxx.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在域名那里，配置两个解析</p><blockquote><p>线路类型作用：如果该值填“国内”，国内的IP就会去访问此项对应的<code>记录值地址</code></p><p>同理，如果该值填写“国外”，国外的IP就会去访问“国外”对应的<code>记录值地址</code></p></blockquote><ol><li><code>线路类型</code>为<code>百度</code>或者<code>国内</code>，记录值为<code>Coding仓库的地址</code></li><li><code>线路类型</code>为<code>默认</code>或者<code>国外</code>，记录值为<code>GitHub仓库地址</code></li></ol><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1120210911170615.png" alt="img"></p></li><li><p>这样来自<code>百度的spider</code>就会去爬<code>国内Coding</code>的地址，而两个仓库的内容又都是一样的，如果请求IP来自国外，它又会去访问<code>国外的GitHub</code>，这样还有利于外国华侨和那些科学上网的用户访问，一石二鸟！（我真他妈天才！）</p></li><li><p>如果你只用Coding仓库，那就不需要这么麻烦了</p></li><li><p>测试百度Spider能不能爬你的域名</p><ol><li><p>在任意目录下执行以下命令（将“你的域名”换成你的域名）</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">curl -A "Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)" -o example.html 你的域名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行完命令，在该目录下会生成一个文件：<code>example.html</code>，打开它，如果显示</p><ul><li><p><code>Moved Permanently</code>，说明301，被重定向了</p></li><li><p><code>Found</code>，也就是爬到了</p></li><li><p>如果打开是你的首页，说明爬取到的内容就是你的首页HTML内容。</p></li><li><p>如果显示：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1120210911170621.png" alt="img"></p><p>说明域名是解析到GitHub的，403Forbidden访问禁止。</p></li></ul></li></ol></li></ol><h4 id="busuanzi不蒜子计数显示异常，一闪就没"><a href="#busuanzi不蒜子计数显示异常，一闪就没" class="headerlink" title="busuanzi不蒜子计数显示异常，一闪就没"></a>busuanzi不蒜子计数显示异常，一闪就没</h4><blockquote><ol><li><p>原因可能有两种live2d看板娘和busuanzi不蒜子计数冲突</p></li><li><p>busuanzi不蒜子网络访问异常。</p></li></ol><blockquote><ol><li><p>不在leancloud安全名单</p></li><li><p>不是正常域名访问</p></li><li><p>各种网络访问错误等等</p></li></ol></blockquote></blockquote><p>近日安装了live2d看板娘插件，<a href="https://github.com/EYHN/hexo-helper-live2d">github项目地址</a>，安装后却意外发现busuanzi不蒜子计数失效了,在页面中不显示，但强制刷新后出现，再刷新又消失。经排查，未发现问题，但事实是网站源码出现了变化。</p><blockquote><p><em>正常时</em></p></blockquote><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id="busuanzi_container_page_pv" class="info-break-policy" style="display: inline;"&gt;    &lt;i class="far fa-eye fa-fw"&gt;&lt;/i&gt;阅读次数:&amp;nbsp;&amp;nbsp;    &lt;span id="busuanzi_value_page_pv"&gt;433&lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><em>异常时</em></p></blockquote><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id="busuanzi_container_page_pv" class="info-break-policy" style="display: none;"&gt;    &lt;i class="far fa-eye fa-fw"&gt;&lt;/i&gt;阅读次数:&amp;nbsp;&amp;nbsp;    &lt;span id="busuanzi_value_page_pv"&gt;434&lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对比发现出现了多余的<code>style="display: none;</code>。<br>经过搜索主题源码，发现这个文件<code>themes\matery\source\libs\others\busuanzi.pure.mini.js</code>控制显示。</p><p>可以直接下载下面这个地址的js替换，来自个人blog的js   <a href="https://blog.17lai.fun/libs/others/busuanzi.pure.mini.js">busuanzi.pure.mini.js</a>，直接下载这个js替换即可。下面源码经过了展开美化，原始文件是压缩去空格版本的。<br><strong>注意</strong>： 这是一种破坏性修复，没有解决根本问题，临时修复方案。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> bszCaller<span class="token punctuation">,</span> bszTag<span class="token punctuation">;</span><span class="token operator">!</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span>        b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function-variable function">ready</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">||</span> <span class="token string">"interactive"</span> <span class="token operator">===</span> document<span class="token punctuation">.</span>readyState <span class="token operator">||</span> <span class="token string">"complete"</span> <span class="token operator">===</span> document<span class="token punctuation">.</span>readyState <span class="token operator">?</span> <span class="token function">c</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span> <span class="token operator">:</span>            b<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">c</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> c <span class="token operator">=</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span> c <span class="token operator">&gt;</span> a<span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function-variable function">e</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        a <span class="token operator">||</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">d</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span>removeEventListener <span class="token operator">?</span> document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>            <span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> document<span class="token punctuation">.</span>attachEvent <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">"onreadystatechange"</span><span class="token punctuation">,</span>            e<span class="token punctuation">)</span><span class="token punctuation">,</span> window <span class="token operator">==</span> window<span class="token punctuation">.</span>top <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span>addEventListener <span class="token operator">?</span> document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> document<span class="token punctuation">.</span>attachEvent <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>        document<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"onreadystatechange"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">loaded|complete</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> window <span class="token operator">==</span> window<span class="token punctuation">.</span>top <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                a <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">doScroll</span><span class="token punctuation">(</span><span class="token string">"left"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>            <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bszCaller <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function-variable function">fetch</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token string">"BusuanziCallback_"</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">1099511627776</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">evalCall</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"=BusuanziCallback"</span><span class="token punctuation">,</span> <span class="token string">"="</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span> scriptTag <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>                <span class="token string">"SCRIPT"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> scriptTag<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"text/javascript"</span><span class="token punctuation">,</span> scriptTag<span class="token punctuation">.</span>defer <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span> scriptTag<span class="token punctuation">.</span>src <span class="token operator">=</span> a<span class="token punctuation">,</span>            document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"HEAD"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>scriptTag<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">evalCall</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">a</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> scriptTag<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>scriptTag<span class="token punctuation">)</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    bszTag<span class="token punctuation">.</span><span class="token function">hides</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> bszCaller<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    bszTag<span class="token punctuation">.</span><span class="token function">texts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> bszTag<span class="token punctuation">.</span><span class="token function">shows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bszTag <span class="token operator">=</span> <span class="token punctuation">{</span>    bszs<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"site_pv"</span><span class="token punctuation">,</span> <span class="token string">"page_pv"</span><span class="token punctuation">,</span> <span class="token string">"site_uv"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token function-variable function">texts</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> c <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_value_"</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">hides</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> b <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_"</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>            b <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">shows</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> b <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_"</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>            b <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"inline"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>替换的人请操作其实就是把其中的<code>b.style.display="none"</code>中<code>none</code>去掉。</p><h4 id="不蒜子-busuanzi-文章计数出错问题"><a href="#不蒜子-busuanzi-文章计数出错问题" class="headerlink" title="不蒜子 (busuanzi) 文章计数出错问题"></a>不蒜子 (busuanzi) 文章计数出错问题</h4><p>出现这个原因，和 Chrome 85 版本 Referrer Policy 更改有关。什么是 Referrer，简单理解，就是请求 Web 服务器时，可以在 HTTP Request 的请求头 (header) 中加上当前页面的 URL，例如我们在浏览某个博客页面，需要加载一些图片，从服务器请求这些图片时，referrer 就是当前的博客页面 URL。从这里也可以看出，referrer 可能会暴露请求来源的某些信息或者隐私，有一定的隐私或安全风险。之前版本的 Chrome 浏览器，如果网站没有指定自己的 Referrer Policy，那么 Chrome 默认 policy 是 no-referrer-when-downgrade，在 Chrome 85 版本中，为了保护用户的隐私，默认的 Referrer Policy 则变成了 strict-origin-when-cross-origin。</p><ul><li>no-referrer-when-downgrade: 当两个网站的 http 协议安全等级相当，或者目的网站安全协议等级高于当前网站(HTTP –&gt; HTTP, HTTPS –&gt; HTTPS, HTTP –&gt; HTTPS)， referer 将会包含源网站的域名，路径，查询字符串；如果目的网站安全协议等级低于源网站 (HTTPS –&gt; HTTP)，将不会发送这些信息。</li><li>strict-origin-when-cross-origin： 只有当做同一域名请求时 (源网址和目标网址是同一域名），才发送域名，路径和请求字符串，当两个网站安全协议相当时，发送源网站的域名(没有具体路径信息和查询字符串)，如果目标网站安全协议等级低于源网站，不发送 header 信息。</li></ul><p>不蒜子统计博客文章访问量就是通过 referer 来计算的，通过上面的分析，如果 Referrer Policy 是 strict-origin-when-cross-origin，不蒜子接收到的只有博客的域名，没有文章的具体路径，所以具体某个文章的 PV 统计会出现错误。</p><p>修复方法：</p><p>在主题文件夹下/layout/_partial/head.ejs中添加</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>referrer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no-referrer-when-downgrade<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="多个域名映射同一个github-pages"><a href="#多个域名映射同一个github-pages" class="headerlink" title="多个域名映射同一个github pages"></a>多个域名映射同一个github pages</h4><p>可能由于某种原因，换了一个域名，之前又有一些被搜索引擎收录，但是又不想让原来的链接失效，就需要让两个域名都映射到github pages中。本文介绍几种当前可能的方法。欢迎提出更多有效方法。</p><h5 id="为什么用新的域名"><a href="#为什么用新的域名" class="headerlink" title="为什么用新的域名"></a>为什么用新的域名</h5><p>由于原来的<a href="http://www.huyanbing.me域名在微信中打开时,会提示非微信官方网页,不能直接访问,而且即便是点击继续访问,也可能出现由于转换手机预览模式,而导致网页显示不完全.只能通过右下角的访问原网页才能正常访问,因此才想到另外申请一个域名.而com/net%E7%AD%89%E5%9F%9F%E5%90%8D%E5%88%99%E4%B8%8D%E4%BC%9A%E6%9C%89%E7%B1%BB%E4%BC%BC%E7%9A%84%E6%8F%90%E7%A4%BA%E3%80%82">www.huyanbing.me域名在微信中打开时，会提示非微信官方网页，不能直接访问，而且即便是点击继续访问，也可能出现由于转换手机预览模式，而导致网页显示不完全。只能通过右下角的访问原网页才能正常访问，因此才想到另外申请一个域名。而com/net等域名则不会有类似的提示。</a></p><h5 id="直接映射有什么问题？"><a href="#直接映射有什么问题？" class="headerlink" title="直接映射有什么问题？"></a>直接映射有什么问题？</h5><p>你可能会想，两个域名都映射到github pages不就可以了？然而事实并非如此。首先当前github 的CNAME中只支持一个域名。因此CNAME文件中只能有一个域名，而如果在域名映射中将两个域名都映射到username.github.io，那么其中有一个会出现404错误。</p><h5 id="前提-1"><a href="#前提-1" class="headerlink" title="前提"></a>前提</h5><p>以下方法的前提是你已经明白如何为自己的github pages添加自定义域名。</p><h5 id="需要注意什么？"><a href="#需要注意什么？" class="headerlink" title="需要注意什么？"></a>需要注意什么？</h5><ul><li>需要给各大网站提交新的域名网址，重新被收录</li><li>域名变换前面网站的内容结构不能变，否则重定向也没有意义</li><li>当前单纯的域名没有办法进行备案</li><li>注意修改配置文件里的主域名为新的域名</li><li>由于更换了新的域名，导致原来leancloud统计的访问数据需要重新计算，也就是网站访问量被清零了，leancloud也需要更新域名</li><li>新的com域名可申请免费的SSL证书，保证https可访问，而不会提示不安全</li><li>301重定向会将旧地址的权重转义到新地址上</li><li>百度收录速度较慢</li></ul><h5 id="方法一：域名托管平台重定向"><a href="#方法一：域名托管平台重定向" class="headerlink" title="方法一：域名托管平台重定向"></a>方法一：域名托管平台重定向</h5><p>有的域名服务商提供重定向功能，以阿里云为例，在域名映射添加记录的时候，可以选择显性URL或隐性URL。但是自己在尝试这种方法的时候，会提示我URL备案异常。可能是由于这个时候已经用新的域名映射了博客地址，但是新的域名实际上是没有备案的。更无奈的是，目前貌似没有办法单独对域名进行备案。因此本人放弃了该方法。</p><p>如果你的博客也是部署在github上的，那么这种方法就不用尝试了，如果你的博客是部署在自己的服务器上的，那么网上都很多方法，这里就不介绍了。</p><h5 id="方法二：部署两个仓库"><a href="#方法二：部署两个仓库" class="headerlink" title="方法二：部署两个仓库"></a>方法二：部署两个仓库</h5><p>我们注意到，除了github pages，还有coding.net可用。它与github类似。原来的域名映射到这个地址就可以了。而在部署hexo的时候，是可以添加两个仓库地址的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>username/username.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@git.coding.net<span class="token punctuation">:</span>username/username.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> coding<span class="token punctuation">-</span>pages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两个仓库内容唯一的差别就是域名不一样，即CNAME中的记录值不一样。这样当访问两个不同的域名的时候，是访问不同的两个平台仓库。但是原来域名的权重不会转到新的域名中去。</p><h5 id="方法三：新增项目重定向"><a href="#方法三：新增项目重定向" class="headerlink" title="方法三：新增项目重定向"></a>方法三：新增项目重定向</h5><p>假如你已经有username.github.io项目，新建一个名为blog(名字自定义)的项目，在项目的setting中，开启github pages服务，并且将旧的域名映射到username.github.io。</p><p>实际上，github pages并不是只能有一个，例如，你新创建的仓库访问地址为：username.github.io/blog。<br>由于旧的域名映射会导致404错误，那么在我们的新项目中增加一个404.html，在页面中进行跳转即可：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> domain <span class="token operator">=</span> <span class="token string">"换成你自己的新域名"</span><span class="token punctuation">;</span><span class="token keyword">var</span> src <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">;</span><span class="token keyword">var</span> prtc <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> src<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> target <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> src<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> prtc <span class="token operator">+</span> <span class="token string">"://"</span> <span class="token operator">+</span> domain <span class="token operator">+</span> target<span class="token punctuation">;</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span>prtc <span class="token operator">+</span> <span class="token string">"://"</span> <span class="token operator">+</span> domain <span class="token operator">+</span> target<span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，需要利用google的地址更改功能，使得旧网址的权重往新网址转移。<br>找到search console中的地址更改工具（设置按钮中找到）。</p><p>除了增加404页面外，还需要增加CNAME文件，里面的内容是你原先的域名。</p><h2 id="参照"><a href="#参照" class="headerlink" title="参照"></a>参照</h2><ul><li><a href="https://www.lixl.cn/2019/092856736.html">基于Hexo的matery主题搭建博客并深度优化-悟尘记</a></li><li><a href="https://hexo.io/zh-cn/docs/">hexo 官方文档</a></li><li><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">闪烁之狐</a></li><li><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo-theme-matery</a></li><li><a href="https://blog.sky03.cn/posts/42790.html#toc-heading-1">Hexo 进阶之各种优化</a></li><li><a href="https://www.cnblogs.com/Timesi/p/9556236.html">Leancloud+Valine打造Hexo个人博客极简评论系统</a></li><li><a href="https://blog.sky03.cn/posts/42790.html">Hexo进阶之各种优化</a></li><li><a href="https://sitoi.cn/posts/15908.html">自动部署篇</a></li><li><a href="https://www.cnblogs.com/luoshuitianyi/p/10333928.html">Hexo搭建(VPS)</a></li><li><a href="https://boyinthesun.cn/post/error-live2d-busuanzi/">解决live2d看板娘和busuanzi不蒜子计数冲突</a></li><li><a href="https://www.yanbinghu.com/2019/03/29/25951.html">多个域名映射同一个github pages</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker-版-hexo-matery&quot;&gt;&lt;a href=&quot;#Docker-版-hexo-matery&quot; class=&quot;headerlink&quot; title=&quot;Docker 版 hexo + matery&quot;&gt;&lt;/a&gt;Docker 版 hexo + matery&lt;/</summary>
      
    
    
    
    <category term="hexo" scheme="https://blog.17lai.fun/categories/hexo/"/>
    
    
    <category term="Github" scheme="https://blog.17lai.fun/tags/Github/"/>
    
    <category term="blog" scheme="https://blog.17lai.fun/tags/blog/"/>
    
    <category term="hexo" scheme="https://blog.17lai.fun/tags/hexo/"/>
    
    <category term="matery" scheme="https://blog.17lai.fun/tags/matery/"/>
    
    <category term="cdn" scheme="https://blog.17lai.fun/tags/cdn/"/>
    
  </entry>
  
  <entry>
    <title>Joplin 插件以及其Markdown语法。All in One!</title>
    <link href="https://blog.17lai.fun/note/2021-09-09-the-joplin-plugin-and-its-markdown-syntax./"/>
    <id>https://blog.17lai.fun/note/2021-09-09-the-joplin-plugin-and-its-markdown-syntax./</id>
    <published>2021-09-09T14:25:00.000Z</published>
    <updated>2021-09-13T13:07:29.755Z</updated>
    
    <content type="html"><![CDATA[<p>Joplin是一个以Markdown为主要语法的笔记程序，发展到今天增加了许多插件，这些插件也大大增强了它的功能，今天我们就讲讲Joplin的各个插件的作用和使用方法。</p><p>首先我们打开Joplin，依次点击<strong>工具-&gt;选项</strong>设置页面，然后点击<strong>Markdown</strong>选项卡，我们就可以看到如下界面</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910083827.png" alt="Joplin插件选择配置界面"></p><p>下面我们一个一个讲解一下每个插件的大概作用和用法，某些插件的详细使用方法可能需要我独立写一篇文章来介绍，这里我就先抛砖引玉大致介绍一下。</p><h2 id="启动软中断插件"><a href="#启动软中断插件" class="headerlink" title="启动软中断插件"></a>启动软中断插件</h2><p>Joplin默认使用的是硬中断方式，那么什么是软中断什么是硬中断呢？如果你刚开始使用Markdown撰写自己的笔记你可能会非常的不习惯，因为标准的Markdown语法里面换行需要两个回车符号，但是像word之类的编辑器都是一个回车，普通人会感觉很不习惯，所以Joplin默认采用了硬中断方式，这样你可以使用一个回车符实现换行。但是当我们启用软中断插件之后，我们就需要两个回车符来实现换行（准确说应该是分段），使用两个空格加一个回车来实现换行，前者的间距会比后者的大。启用软中断其实对于普通人来说不是很好用，很难适应，所以我不建议大家开启该插件！</p><h2 id="启用typographer支持"><a href="#启用typographer支持" class="headerlink" title="启用typographer支持"></a>启用typographer支持</h2><p>这个插件的作用是用来申明我们的版权的，因为有时候我们可能需要将我们的笔记分享给别人，但是想要声明文章是我们写的，我们就可以启用该插件来声明我们的著作权，而且该插件会给我们渲染成指定的版权声明格式，讲讲怎么用：</p><p>我们启用插件之后，在我们想要声明著作权的地方键入：</p><pre class="line-numbers language-none"><code class="language-none">(c)著作权所有人<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后Joplin就会给我们渲染为：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909174240.png" alt="typographer插件语法渲染结果"></p><p>是不是很熟悉，很多网页的底部都会有这个声明！</p><h2 id="启用数学表达式"><a href="#启用数学表达式" class="headerlink" title="启用数学表达式"></a>启用数学表达式</h2><p>这个是Markdown自带语法，Joplin使用插件来实现的，其实就是大家在<a href="http://lightzhan.xyz/index.php/2020/02/28/markdowntutorial/">Markdown语法</a>里面看到的行内公式使用$…$，行间公式使用$$…$$。需要说明的是Joplin使用的是Katex来解析数学符号，它的语法和Latex的数学公式写法差不多，我到现在还没有碰到很大的不同的地方！</p><h2 id="启用高亮-Mark-句法"><a href="#启用高亮-Mark-句法" class="headerlink" title="启用高亮==Mark==句法"></a>启用高亮<code>==Mark==</code>句法</h2><p>这个其实就是一个语句高亮插件，中间的语句会被高亮显示，有助于我们对重要的内容进行强调，自己一试就一目了然了。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909174304.png" alt="Joplin Mark插件示例"></p><h2 id="启用脚注"><a href="#启用脚注" class="headerlink" title="启用脚注"></a>启用脚注</h2><p>脚注的功能就是对文中的某一个特定的术语等进行解释补充说明，有点像是论文的参考文献，下面是一个简单的示例，相信大家一看就懂</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909174326.png" alt="Joplin 启用脚注插件示例图"></p><p>根据图片你可能明白了脚注的使用方法：在我们想要使用脚注的地方使用[^唯一标识符]注明，然后在文章的最后使用响应的标识符进行说明即可，比如例子中的</p><pre class="line-numbers language-none"><code class="language-none">[^lightzhan]:知乎搜索light zhan即可找到我了<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意那个冒号一定要是英文冒号，中文冒号可能无法被成功解析</strong>。</p><h2 id="启用目录扩展"><a href="#启用目录扩展" class="headerlink" title="启用目录扩展"></a>启用目录扩展</h2><p>启用该扩展，我们就可以使用相应的语法在某个位置插入我们文章的目录，具体的语法为</p><pre class="line-numbers language-none"><code class="language-none">[toc]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意着是一个固定的符号，不需要改变什么，只需要在我们想要插入目录的地方放上**[toc]**即可，例如</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909174350.png" alt="Joplin toc目录生成插件示例图"></p><p>上图最重要的就是坐上脚的[toc]指令，该指令自动生成了右边的整个目录！</p><h2 id="启用下标-sub-和上标-sup-句法"><a href="#启用下标-sub-和上标-sup-句法" class="headerlink" title="启用下标~sub~和上标^sup^句法"></a>启用下标<code>~sub~</code>和上标<code>^sup^</code>句法</h2><p>一看到<del>sub</del>如果不小心就会认为这个是删除线，大错特错了，一定要明白两者的区别，删除线是左右都是两个波浪线，而这个只有一个波浪线，一定要搞清楚这个。下面我们看看这个插件的作用和用法。</p><p>这两个插件的作用其实很简单，就是下标和上标，看例子应该就明白的</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909174420.png" alt="img"></p><h2 id="启用术语表插件"><a href="#启用术语表插件" class="headerlink" title="启用术语表插件"></a>启用术语表插件</h2><p>对于这个插件得先知道什么是术语表。所谓的术语表其实可以理解为一个定义的列表，很多专业的书籍的前面都会有术语表，因为它需要给出书中所用术语的定义和解释。还不懂？我们在Joplin中启用该插件，然后新建一个笔记，输入如下文字：</p><pre class="line-numbers language-none"><code class="language-none">Qdown:   Qdown是由lightzhan开发的全功能软件下载程序，这里是程序的介绍页哦:http://lightzhan.xyz/index.php/qdown/ LightZhan:   计算机爱好一名，爱折腾哎生活，*欢迎知乎关注lightzhan哦*        可以嵌入一些代码    定义第三段 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些文字会被解析显示为：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909174558.png" alt="Joplin术语表插件示例"></p><p>对比一下发现了什么没有？术语表的每一项由两个部分组成，第一部分是术语，第二部分是该术语的解释，多个术语及其解释组合在一起就组成了表，这就是术语表！需要特别注意的是术语表的书写格式是固定的，如果你想要快速上手，建议你拷贝上面我提供的示例进行修改，修改两下你就懂格式到底是怎么回事了！</p><h2 id="启用缩写句法"><a href="#启用缩写句法" class="headerlink" title="启用缩写句法"></a>启用缩写句法</h2><p>这个插件很有意思，也很有用。你是否记得有些程序的按钮，当你把鼠标放上去的时候它会显示按钮的作用。不记得了？不存在，我们也使用例子来说明。下面我们启用缩写句法插件，然后新建笔记，在笔记里面输入：</p><pre class="line-numbers language-none"><code class="language-none">*[Qdown]: 由lightzhan开发*[LightZhan]:  欢迎知乎关注我哦Qdown 是由 LightZhan 开发的一款全协议下载器.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>该文本会被Joplin显示为</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909174619.png" alt="Markdown Joplin 缩写表插件示例图"></p><p>这可能并不能完全显示出该插件的作用，因为截图的原因截不到，当我们把鼠标放在Qdown上面的时候，鼠标所在的位置处会弹出“由lightzhan”开发的提示。不理解的可以拷贝上面的代码到Joplin感受一下，记得要开启该插件哦！需要注意的是该句中对应的<strong>缩写词前后都要有空格</strong>，负责你可能看不到上面的效果。</p><h2 id="启用Markdown-emoji"><a href="#启用Markdown-emoji" class="headerlink" title="启用Markdown emoji"></a>启用Markdown emoji</h2><p>该插件是用于在我们的笔记中插入表情的，这是一个简单的示例截图</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909174639.png" alt="Joplin表情插件示例"></p><p>详细的表情和表情的代码，可以参考<a href="https://github.com/zhouie/markdown-emoji">这里</a>。</p><h2 id="启用-insert-句法"><a href="#启用-insert-句法" class="headerlink" title="启用++insert++句法"></a>启用<code>++insert++</code>句法</h2><p>这个插件很好理解，一试便知道作用和用法了</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909174656.png" alt="Joplin insert插件示例"></p><p>说了那么多，就是在对应的文字下面显示一个下划线！</p><p>Markdown是非常好用的笔记书写规范，记着，Markdown不是某一个软件，而是一个通用的笔记书写规范，通过使用该规范进行写作，解析器会按照规定的样式将其渲染显示出来，说得直白点就是用于文字排版的。</p><h2 id="Markdown的排版语法"><a href="#Markdown的排版语法" class="headerlink" title="Markdown的排版语法"></a>Markdown的排版语法</h2><p>这里的讲解如果有不懂的可以参见下一节的示例：</p><ol><li>标题。markdown的标题使用“#”符号开头，一级标题一个”#”，二级标题两个“#”（也就是“##”），以此类推三级标题四级标题…….，不同级的标题会被渲染为不同的大小和样式（根据各个软件和相应的主题而定）；</li><li>粗体。markdown的粗体字使用两个“<strong>”包裹即可，比如 “</strong>你好**”解析后变为“你好”；</li><li>斜体。markdown的斜体使用“<em>”或者“_”包裹，比如“</em>你好*”解析显示为“你好”；</li><li>引用。markdown的引用使用“&gt;”开头，大部分软件要求“&gt;”要和引用内容之间有一个空格；</li><li>代码。对于程序员来说可能想要在文中插入代码，markdown是支持插入代码的，行间代码使用一个”`“符号包裹，注意这个符号是键盘左上角Esc下面的那个键，不是我们所谓的英文上一撇；</li><li>数学公式。markdown的数学解析一般使用latex语法，行内公式使用一个<code>$</code>包裹即可，行间公式使用两个<code>$</code>包裹；</li><li>markdown的列表分为有序列表和无序列表。有序列表就是有序号，无序列表就是 无序号，有序列表就是在数字后面一个点，然后空一格写正文，比如：<code>1. xxxxxxx</code>，第二点需要新起一行<code>2. xxxxxx</code>。无序列表是使用“*”或者“-”开始，后面跟一个空格写上正文。</li><li>markdown的勾选框。markdown的勾选框使用<code>- [ ]</code>，注意字符之间都是有空格的。比如：第一行<code>- [ ] A</code>,第二行<code>- [ ] B</code>。这样对应的渲染结果就是勾选框和对应的选项。注意字符之间的空格！</li><li>表格。markdown的表格非常易于理解，请看下面的示例。</li></ol><h2 id="示例代码和渲染结果"><a href="#示例代码和渲染结果" class="headerlink" title="示例代码和渲染结果"></a>示例代码和渲染结果</h2><p>下面的示例左边是书写文字，右边是渲染结果，<strong>注意书写文字里面的标识符和内容之间的空格</strong>：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909175337.png" alt="image-20210909175335986"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909175353.png" alt="image-20210909175352352"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909175417.png" alt="image-20210909175416439"></p><p>需要说明的是上面的粗体显示为了橘红色的字体，这是我自己设置的格式，这个等大家熟悉了后可以使用CSS设计自己喜欢的样式。下面是表格的渲染结果 （其中左边的源代码不用那样对齐 ，横线的个数一处最少3个就行 ，右边是解析后的显示结果） ：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909175444.png" alt="img"></p><p>额~，左边左下角那个是鼠标光标，不是文字内容哈。需要说明的是不同的软件的不同的主题可能显示的结果会不一样，但是书写的语法是不变的。</p><h2 id="启用-multimarkdown-表格扩展"><a href="#启用-multimarkdown-表格扩展" class="headerlink" title="启用 multimarkdown 表格扩展"></a>启用 multimarkdown 表格扩展</h2><p>这个插件说高深也不高深，看名字应该就能知道这是一个增强Markdown表格功能的插件，大家记得Markdown的表格是怎么使用的吗？如果忘记的话赶紧看看<a href="http://lightzhan.xyz/index.php/2020/02/28/markdowntutorial/">这篇文章</a>回顾一下，不然下面的内容可能体会不会那么深！</p><p>好啦，我这里假设读者知道markdown的表格是怎么用的，然后我们开始讲解multimarkdown扩展。Markdown自带的表格功能是非常有限的，如果你使用过的话就会发现它能做出来的表格一定是规整的，行和列一定是划分均匀整齐的，但是有时候我们需要的表格可能是这样的：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909175608.png" alt="img"></p><p>这种表格使用Markdown的表格是不可能做出来的，因为分组的效果和占用两个格子的效果是做不出来的，但是如果你启用了MultiMarkdown插件，你就可以使用下面的代码渲染出来：</p><pre class="line-numbers language-none"><code class="language-none">|             |          分组                 ||第一个表头     | 第二个表头     | 第三个表头      | ------------ | :-----------: | -----------:   |内容          |          占用两个格子           ||内容          |   **内容**     |         内容    |新的一部分     |     更多       |         更多    |更多          | 带有一个跳过的 '\|'              ||[LightZhan制作]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以把上面的代码拷贝进Joplin编辑器研究一番就能理解MultiMardown表格扩展的用法了，下面我详细讲解一下。</p><p>MultiMarkdown的表格扩展支持下面的功能：</p><ul><li>使得元素占据多个列（上面的示例中有）</li><li>使得元素占据多个行</li><li>在表格上面或者下面对表头进行分组（上面的例子中有）</li><li>在表格的上面或者下面标注表格标题（上面的例子中有）</li><li>在表格中包含分块元素（列表、代码、段落等等）</li><li>表格不需要表头</li></ul><p>上面标注了“上面的例子中有”的我这里就不在讲了，因为代码一研究或者修改修改就知道咋回事的，下面我们主要讲讲上面的例子中没有涉及到的。</p><p><strong>1.使得表格占据多行</strong>。这个其实很好用，但是有两种情况。第一种情况是一个项目占据两格。这种情况要占据多行的话，在我们对应列的起始行写上内容，然后接下来要合并的行直接写“^^”。不明白不存在，我们来一个例子：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909175656.png" alt="MultiMarkdown表格扩展内容占据多行示例图"></p><p>上面对应的代码是什么呢？看下面：</p><pre class="line-numbers language-none"><code class="language-none">作者| 信息  | 信息 |----:| --------------:         | ---------:         |LightZhan| ligthzhan.xyz ||^^| 更多Joplin教程           | Qdown下载器         |[LightZhan制作，允许规范转载]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把上面的代码拷贝进编辑器改改试试，很容易明白里面的玄机的！</p><p>第二种情况是我们添加块，看下面一点。</p><p>2.<strong>在表格中添加块元素。</strong>这个不用多说，直接在表格的格子里面用Markdown语法写作，渲染成对应的Markdown格式！比如加粗、斜体、代码块等等。下面来一个简单的例子，需要注意的是下面的例子当中我们的内容有几行！</p><pre class="line-numbers language-none"><code class="language-none">|   Markdown   | 渲染结果       ||--------------|---------------||    *斜体*    | *斜体*         | \|              |               ||    - 项目1   | - 项目1        | \|    - 项目2   | - 项目2        ||    ```python | ```python       \|    .1 + .2   | .1 + .2         \|    ```       | ```           |[LightZhan制作，允许规范转载]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意代码后面的”\”，这个符号是指定换行的，如果项目占据多行一定要写上。上面的代码复制黏贴进编辑器可以看到下面的渲染结果</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909175924.png" alt="Joplin多行和内容块的示例图"></p><p>**3.表格不需要表头。**这个也很简单，直接不写表头即可。拷贝下面的代码进编辑器</p><pre class="line-numbers language-none"><code class="language-none">----:| --------------: | ---------: |LightZhan| lightzhan.xyz         ||^^| 更多Joplin教程  | Qdown下载器 |[LightZhan制作，允许规范转载]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后你就可以看到惊喜</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909180209.png" alt="Joplin表格扩展没有表头的表格示例图"></p><h2 id="启用Fountain语法支持"><a href="#启用Fountain语法支持" class="headerlink" title="启用Fountain语法支持"></a>启用Fountain语法支持</h2><p>这个插件的目标人群非常少，Fountain语法是用来写电影剧本的，而且要是要细讲的话估计又是一篇文章，因为使用的人非常少，所以我这里就不讲这个了。</p><h2 id="Mermaid插件的作用"><a href="#Mermaid插件的作用" class="headerlink" title="Mermaid插件的作用"></a>Mermaid插件的作用</h2><p>Mermaid是一个用于画流程图、时序图、类图、状态图、甘特图、饼图的Markdown扩展，其中状态图是最新8.4版本的新功能。如果你不知道这些图是干什么的，不存在，下面的教程里面我会每个都给出例子。</p><h2 id="在Joplin里面使用Mermaid"><a href="#在Joplin里面使用Mermaid" class="headerlink" title="在Joplin里面使用Mermaid"></a>在Joplin里面使用Mermaid</h2><p>在Joplin里面如果想要使用Mermaid，那么你需要使用代码块，并且代码的类型填写mermaid，详细的格式如下：</p><pre class="line-numbers language-none"><code class="language-none">```mermaidgraph TD    Start --&gt; Stop```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在渲染区我们就能得到如下的结果</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909180438.png" alt="Mermid绘图渲染示例"></p><h2 id="Mermaid流程图"><a href="#Mermaid流程图" class="headerlink" title="Mermaid流程图"></a>Mermaid流程图</h2><p>下面我们讲解在Mermaid里面画流程图。上一节的示例便是流程图，我们把上一节的代码拿出来分析一下。首先我们看代码的第一行：graph TD，这一行代码有两个作用，graph表示我们图的类型，graph表示流程图，而第二个TD表示图的方向，可能的方向有如下几个</p><ul><li>TB：自顶向下</li><li>BT：自底向上</li><li>RL：从右到左</li><li>LR：从左到右</li><li>TD：和TB一样</li></ul><p>上面我们的例子使用的是TD，如果你对其它的方向不明白，可以把代码拷贝到编辑器里面修改方向参数就可以理解各个方向的意义了。</p><p>上面的代码非常基础，因为如果要实现比较复杂的流程图，我们就需要使用一些比较高级的语法，比如定义节点。所谓的节点，你可以简单的理解为上面图片中的方框，但是如果我们要使用其它形状的节点怎么办呢？在上面的例子中我使用了默认的节点定义方法，也就是直接使用文本,这种方式定义节点的话id和显示文本是一样的，而且形状是固定的矩形。如果要定义不同的节点形状，或者使得id和显示文本不一样，可以使用下面的语法</p><ul><li>定义矩形形状的节点：id[text]</li><li>定义圆角矩形的节点：id(text)</li><li>定义椭圆形的节点：id([text])</li><li>定义圆柱形的节点：id[(text)]</li><li>定义圆形的节点：id((text))</li><li>定义非对称图形的节点：id&gt;text]</li><li>定义菱形的节点：id{text}</li><li>定义六角形的节点：id</li><li>定义平行四边形的节点(两个方向)：id[/text/]或者[\text]</li><li>定义梯形的节点(两个方向)：id[/text] 或者 di[\text/]</li></ul><p>注意上面的id和text是需要我们自己定义替换的，如果同一个id有多个text，取最后一次的定义值！</p><p>有了节点我们还需要将节点连接起来，也就是我们要使用线条或者箭头来进行节点的连接，Mermaid支持下面的方式：</p><ul><li>实线箭头：A–&gt;B</li><li>实线无箭头：A–B</li><li>无箭头实线上带文本：A–text–B</li><li>实线箭头带文本：A–&gt;|text|B 或者 A–text–&gt;B</li><li>虚线箭头：A-.-&gt;B</li><li>虚线箭头带文本：A-.text.-&gt;B</li><li>粗线箭头：A==&gt;B</li><li>粗线箭头带箭头：A==text==&gt;B</li></ul><p>最好的办法就是把上面的代码拷贝进编辑器看看，一看你应该就能理解各个图形的形状！</p><p>上面我们讲解了节点和连线，下面我们说说图形的绘制。上面我使用的例子非常基础，下面来一个复杂点的例子供大家修改和研究</p><pre class="line-numbers language-none"><code class="language-none">```mermaidgraph TD    light[LightZhan]    url[lightzhan.xyz]    QdownUrl[访问LightZhan博客Qdown页面]    Qdown((Qdown))    function[功能]    Qdown--&gt;|作者|light     light--个人主页--&gt;url    Qdown--&gt;function    Qdown--&gt;QdownUrl    function1[极速下载]    function2[磁链/BT下载]    function3[迅雷下载]    function5[下载体验]    function4[Http/Https/FTP/SFTP]    function-.功能1.-&gt;function1    function-.功能2.-&gt;function2    function-.功能3.-&gt;function3    function-.功能4.-&gt;function4    function-.更多功能.-&gt;function5    annocement[本文首发于lightzhan.xyz,允许规范转载]```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码的渲染结果如下：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909181150.png" alt="Mermaid流程图示例代码渲染结果"></p><p>如果不清楚，可以把上面的代码拷贝到编辑器进行修改和摸索！</p><h2 id="Mermaid时序图"><a href="#Mermaid时序图" class="headerlink" title="Mermaid时序图"></a>Mermaid时序图</h2><p>时序图是用于展示过程的方式和顺序的。举例来说，两个人之间的对话:</p><p>A先问B：Qdown是啥？B回答：Qdown是全功能的下载软件！A又问：哪里可以下载呀？B回答： <a href="http://lightzhan.xyz/index.php/qdown/">http://lightzhan.xyz/index.php/qdown/</a> 。我们使用mermaid绘制时序图来展示上面的对话过程：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909181418.png" alt="mermaid时序图示例图"></p><p>这样是不是看上去清晰了很多了呢？希望通过这个例子能让你深切地感受到时序图是干什么用的！好了，放上上面的时序图的代码供大家研究：</p><pre class="line-numbers language-none"><code class="language-none">```mermaidsequenceDiagramA-&gt;&gt;B:Qdown是啥？B--&gt;&gt;A:Qdown是全功能的下载软件！A-&gt;&gt;B:哪里可以下载呀？B--&gt;&gt;A:http://lightzhan.xyz/index.php/qdown/```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们来简单分析一下上面的代码。你可能注意到了第一行的sequenceDiagram，这个就是告诉mermaid我们在这里绘制时序图，然后下面有箭头，在时序图里面，mermaid支持下面类型的箭头和线段：</p><ul><li>实线并且没有箭头：A-&gt;B:text</li><li>虚线没有箭头：A–&gt;B:text</li><li>实线带箭头：A-&gt;&gt;B:text</li><li>虚线带箭头：A–&gt;&gt;B:text</li><li>实线并且在终点带一个x：A-xB:text</li><li>虚线并且在终点带一个x：A–xB:text</li></ul><p>上面的text就是要显示在箭头或线段上的文本，在mermaid的时序图里面被称为消息，线段或箭头类型如果有不清楚的可以拷贝到编辑器里面看看，一目了然！</p><p>还记得上面我们在流程图里面的节点吗？在时序图里面不是定义节点，而是定义参与者，也就是上面的A和B。上面的代码中我们定义参与者的方式采用的是默认方式，也就是不显示定义，有时候我们的参与者的名字太长的话可以使用显示定义来定义别名：</p><pre class="line-numbers language-none"><code class="language-none">participant Johnparticipant Aliceparticipant A as Aliceparticipant J as John<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码的第一二行仅仅是显式定义我们的参与者，第三四行给我们的参与者定义别名，定义了别名后我们在下面的使用中就可以直接使用A代替Alice，使用J代替John了，这样输入会方便很多！</p><p>好了，时序图差不多就讲到这里，接下来的一些高级用法大部分我们都用不到，或者要使用的话不如使用专业的绘图软件使用插图的方式导入。</p><h2 id="使用Mermaid绘制类图"><a href="#使用Mermaid绘制类图" class="headerlink" title="使用Mermaid绘制类图"></a>使用Mermaid绘制类图</h2><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><p>在讲解如何绘制类图之前我们先了解一下什么是类图！如果你是计算机专业或者会计算机编程的话应该就懂面向对象编程，对象是类的实例，而这里要绘制的类图就和面向对象编程里面的类相关。</p><p>对于编程人员来说，函数具有参数和返回值，属性具有变量类型，我们举一个例子来说一下：</p><pre class="line-numbers language-none"><code class="language-none">class BankAccount{  +String owner  +BigDecimal balance  +deposit(amount) bool  +withdrawl(amount)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码的渲染结果为：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909182000.png" alt="BankAccount类图"></p><p>上面的代码是我直接从官方借鉴的，可以直观地看出对于银行账户（BankAccount），一共有两个属性和两个方法，属性都是具有对应的变量类型，而对于函数具有参数（amount），并且deposit函数还具有bool类型的返回值。你或许看到了前面的+号，这个是对应变量或属性的可见性，分别有：</p><ul><li>+ public</li><li>– private</li><li># protected</li><li><code>~</code> Package/Internal</li></ul><p>如果我们想要定义的函数是抽象函数咋办呢？在括号的后面添加*即可：</p><pre class="line-numbers language-none"><code class="language-none">someAbstractMethod()*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在渲染过后抽象函数会使用斜体进行显示，这里就不截图展示了。对于静态函数，将后面的*换为$即可，在显示时静态函数会具有下划线。</p><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><p>在编程中我们常常会用到的关系：</p><table><thead><tr><th>&lt;|–</th><th>继承（Inheritance）</th></tr></thead><tbody><tr><td>*–</td><td>组成（Composition）</td></tr><tr><td>o–</td><td>聚集（Aggregation）</td></tr><tr><td>–&gt;</td><td>关联（Association）</td></tr><tr><td>—</td><td>实线（Link (Solid)）</td></tr><tr><td>…&gt;</td><td>依赖（Dependency）</td></tr><tr><td>…|&gt;</td><td>实现（Realization）</td></tr><tr><td>…</td><td>虚线（Link (Dashed)）</td></tr></tbody></table><p>下面我们举一个例子：“狗”继承自“动物”类别</p><pre class="line-numbers language-none"><code class="language-none">```mermaidclassDiagram    class 动物{        特点1：能动        特点2：能叫    }    class 狗{        特点1：4条腿        特点2：会汪汪叫        特点3：可爱至极        汪汪叫(陌生人)    }    动物 &lt;|-- 狗```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染结果为：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909182019.png" alt="继承关系展示"></p><p>结合代码和展示结果应该很好理解，这就是一个狗继承自动物的简单例子，我们还可以对关系结果打标签：</p><pre class="line-numbers language-none"><code class="language-none">```mermaidclassDiagram    class 动物{        特点1：能动        特点2：能叫    }    class 狗{        特点1：4条腿        特点2：会汪汪叫        特点3：可爱至极        汪汪叫(陌生人)    }    动物 &lt;|-- 狗:属于（继承）```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在关系指示后面加上冒号，然后后面加上关系说明，这样在渲染结果当中我们就可以看到箭头上出现了我们需要的标签说明：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909182129.png" alt="给关系加上说明标签"></p><p>好了，使用mermaid绘制类图就讲到这里，还有一些用法不是很常用，我就不讲了。</p><h2 id="使用mermaid绘制饼图"><a href="#使用mermaid绘制饼图" class="headerlink" title="使用mermaid绘制饼图"></a>使用mermaid绘制饼图</h2><p>绘制饼图的需求比较多，很多数据展示需要我们绘制饼图，幸运的是mermaid给我们提供了绘制饼图的功能，使用方法极其简单：</p><pre class="line-numbers language-none"><code class="language-none">```mermaidpie    title LightZhan创作，允许规范转载（http://lightzhan.xyz）    "Joplin" : 42.96    "Qdown" : 50.05    " 黑科技" : 10.01    "其它" :  5```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，pie关键字指定我们要绘制饼图，然后tiltile指定我们的标题，后面是数据分布，注意，mermaid会将我们输入的数据进行计算，上面的数据加起来并不是100，所以我们看到在下面的渲染结果中数据对应不上。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909182237.png" alt="img"></p><p>Joplin插件非常丰富，你能找到各种各样的功能，这里推荐一些插件使用，见下面这篇文章， <a href="https://blog.17lai.fun/note/2021-09-10-the-joplin-plugin-recommend/">Joplin插件推荐</a>。</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul><li><a href="https://lightzhan.xyz/index.php/category/software-installation-and-use/joplin/">lightzhan.xyz</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Joplin是一个以Markdown为主要语法的笔记程序，发展到今天增加了许多插件，这些插件也大大增强了它的功能，今天我们就讲讲Joplin的各个插件的作用和使用方法。&lt;/p&gt;
&lt;p&gt;首先我们打开Joplin，依次点击&lt;strong&gt;工具-&amp;gt;选项&lt;/strong&gt;设置</summary>
      
    
    
    
    <category term="note" scheme="https://blog.17lai.fun/categories/note/"/>
    
    
    <category term="note" scheme="https://blog.17lai.fun/tags/note/"/>
    
    <category term="Joplin" scheme="https://blog.17lai.fun/tags/Joplin/"/>
    
    <category term="MarkDown" scheme="https://blog.17lai.fun/tags/MarkDown/"/>
    
    <category term="Mermaid" scheme="https://blog.17lai.fun/tags/Mermaid/"/>
    
  </entry>
  
  <entry>
    <title>替代Evernote免费开源笔记Joplin-网盘同步笔记历史版本Markdown可视化</title>
    <link href="https://blog.17lai.fun/note/2021-09-09-start-to-use-joplin/"/>
    <id>https://blog.17lai.fun/note/2021-09-09-start-to-use-joplin/</id>
    <published>2021-09-09T13:25:00.000Z</published>
    <updated>2021-09-13T12:21:51.875Z</updated>
    
    <content type="html"><![CDATA[<p>Evernote笔记是我们常用的一个笔记服务，国内叫印象笔记，免费版本的Evernote笔记其实已经足够我们使用了，但是对于重度的笔记用户，Evernote某些功能可能需要付费升级才可以使用，而且你的笔记是存放在Evernote的服务器上。</p><p>有些同学可能觉得放在Evernote服务器上的笔记会不安全，况且有些隐私性很强的笔记确实不适合放在公共的服务器上。此时，你需要一个可以保护个人隐私同时还可以与Evernote笔记功能相媲美的免费笔记服务：Joplin，它是一款免费开源的笔记软件。</p><p>Joplin跨平台支持，包括PC桌面端，移动端，甚至提供了命令行版本，原生支持 markdown 格式，搜索速度快，可以通过其他第三方同步工具 (Dropbox/NextCloud/OneDrive/WebDAV/etc) 进行备份以及同步 ，支持浏览器Web clipper即网页剪贴。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_00.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135705.png"></a></p><p>Evernote笔记该有的功能Joplin都有了，如果你不想掏钱购买Evernote付费版本，Joplin将是最佳的替代品。更多的自建服务还有：</p><ol><li> <a href="https://wzfou.com/chevereto/">Chevereto免费相册程序安装与使用-免费自建图床和公共图片相册</a></li><li> <a href="https://wzfou.com/tt-rss/">自建RSS阅读器Tiny Tiny RSS安装和配置自动更新,全文RSS,更换主题,手机RSS登录</a></li><li> <a href="https://wzfou.com/bitwarden-rs/">放弃付费1Password改用免费开源的bitwarden_rs自建密码管理系统-安装,使用和备份</a></li></ol><p><strong>PS：更新记录</strong></p><blockquote><p>1、平时经常要校对文本，以及有大量的文件需要在电脑和移动硬盘同步，可以试试这些免费的同步对比工具：<a href="https://wzfou.com/files-sync-softs/">八大免费的文件对比同步工具-免费文件对比分析与复制同步备份软件</a>。2021.3.24</p><p>2、对于1Password这类的密码管理软件重度依赖，但是苦于囊中羞涩的话，不防自建密码管理平台：<a href="https://wzfou.com/bitwarden-mima/">Bitwarden自建密码存储系统图文教程-开源免费的bitwarden_rs安装与使用</a>。2020.10.10</p></blockquote><h2 id="一、Joplin安装和使用"><a href="#一、Joplin安装和使用" class="headerlink" title="一、Joplin安装和使用"></a>一、Joplin安装和使用</h2><p>网站：</p><ol><li> <a href="https://joplinapp.org/">https://joplinapp.org/</a></li></ol><p>直接到官网下载Joplin安装包，安装好了就可以启动Joplin了，以下是Joplin的软件界面，分成三栏，和我们平时熟悉的笔记软件是一样的。（点击放大）</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_01.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135716.png"></a></p><p>这是Joplin的编辑器，支持 MarkDown，图片、数学公式、复选框等 MarkDown 语法。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_02.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135813.png"></a></p><p>不习惯MarkDown，直接切换为可视编辑即可。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_03.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135820.png"></a></p><p>在Joplin的设置选项中还提供了非常多的MarkDown的插件，对于MarkDown深度用户来是一个福音。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_05.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135723.png"></a></p><h2 id="二、Joplin的特色功能"><a href="#二、Joplin的特色功能" class="headerlink" title="二、Joplin的特色功能"></a>二、Joplin的特色功能</h2><h3 id="2-1-笔记历史版本"><a href="#2-1-笔记历史版本" class="headerlink" title="2.1 笔记历史版本"></a>2.1 笔记历史版本</h3><p>Joplin提供了笔记历史版本，让你轻松地恢复任意时间的笔记版本。在“工具” &gt; “选项” &gt; “笔记历史”中启用，以及设置保留的笔记历史天数。要查看笔记的历史版本，点击编辑器上方的笔记属性图标，然后选择恢复：</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_12.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135828.png"></a></p><h3 id="2-2-E2EE安全加密"><a href="#2-2-E2EE安全加密" class="headerlink" title="2.2 E2EE安全加密"></a>2.2 E2EE安全加密</h3><p>在同步过程中，笔记本、笔记、标签等均以纯文本文件的方式同步，如果你还觉得不安全，你可以开启端到端加密（E2EE），把文件加密后同步到云端。由于 Joplin 的去中心化，密码必须手动在每个终端设置。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_19.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135736.png"></a></p><p><strong>注意：不要在多个设备上同时启用加密，否则可能会造成加密密钥问题。特别提醒：****加密之前，先将笔记导出JEX备份一份，以防万一。</strong></p><h3 id="2-3-Joplin手机APP"><a href="#2-3-Joplin手机APP" class="headerlink" title="2.3 Joplin手机APP"></a>2.3 Joplin手机APP</h3><p>Joplin可以直接在各大应用市场上下载，使用起来也很方便。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_15.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135835.png"></a></p><h3 id="2-4-外部编辑器"><a href="#2-4-外部编辑器" class="headerlink" title="2.4 外部编辑器"></a>2.4 外部编辑器</h3><p>Joplin自带的编辑已经非常强大的，如果你想要使用自己的编辑器来编辑笔记也是可以的，包括 文本编辑器（如 Notepad++）、 Markdown 编辑器（如 Typora）等。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_22.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135928.png"></a></p><p>通过 Ctrl+E，或 Joplin 编辑器上方的图标（如下图）从外部编辑器打开笔记，从外部编辑器打开后，Joplin 将持续监控该文件，当你从外部编辑机保存后，Joplin 将自动同步最新变动。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_21.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135841.png"></a></p><p>你可以在“工具” &gt; “选项” &gt; “通用选项”中指定编辑器的路径。</p><h2 id="三、Joplin同步与备份"><a href="#三、Joplin同步与备份" class="headerlink" title="三、Joplin同步与备份"></a>三、Joplin同步与备份</h2><p>Joplin与其它的笔记软件很大的不同就是没有存储功能，你需要将Joplin的笔记放在自己的主机或者网盘里，幸运的是Joplin支持多种方式的云同步：Nextcloud / Dropbox / OneDrive / File system / WebDAV。</p><h3 id="3-1-Joplin免费网盘同步"><a href="#3-1-Joplin免费网盘同步" class="headerlink" title="3.1 Joplin免费网盘同步"></a>3.1 Joplin免费网盘同步</h3><p>目前，Joplin支持Dropbox 、OneDrive 网盘同步，在同步选项中选择OneDrive，然后就会打开认证。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_06.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135739.png"></a></p><p>同意验证。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_07.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135848.png"></a></p><p>与 OneDrive 同步时，Joplin 会在 OneDrive 中创建一个子目录：<code>/Apps/Joplin</code>，Joplin 仅有此目录的读写权限。如下图：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135746.png"></p><h3 id="3-2-Joplin使用WebDAV同步"><a href="#3-2-Joplin使用WebDAV同步" class="headerlink" title="3.2 Joplin使用WebDAV同步"></a>3.2 Joplin使用WebDAV同步</h3><p>WebDAV 可以自建，或使用支持 WebDAV 的云盘，另外 NAS（如群晖）通常也支持 WebDAV。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_13.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135855.png"></a></p><p>**Nextcloud：**Nextcloud是一个开源的免费的自建个人云存储方案，要启用 Nextcloud 同步，你需要在 Nextcloud 中创建一个目录（比如：Joplin），在左下角的“设置”中获取 WebDAV 的 URL，在 Joplin 同步设置中，填入 WebDAV URL、用户名和密码。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_20.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135902.png"></a></p><p>有关于Nextcloud安装与使用教程，请参考：<a href="https://wzfou.com/nextcloud-lixian/">Oneinstack安装NextCloud以及使用Aria2离线下载和ocDownloader插件配置</a>。</p><p><strong>坚果云：</strong>首次同步时会因为 WebDAV 短时间内的大量请求被坚果云临时限制，坚果云提示为“Too many requests”，这个封锁会持续大约6小时。同步之前，在 Joplin 的“工具” &gt; “选项” &gt; “同步” &gt; “高级选项”中，将“最大并发连接数”改为1可以有效避免。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_14.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135753.png"></a></p><p>关于坚果云的使用方法，请参考：<a href="https://wzfou.com/upyun-jianguoyun/">巧用又拍云FTP和坚果云WebDAV-打造个人文件备份和数据云存储</a>。</p><h2 id="四、Joplin导入与导出"><a href="#四、Joplin导入与导出" class="headerlink" title="四、Joplin导入与导出"></a>四、Joplin导入与导出</h2><p>Joplin可以很方便地支持从Evernote（印象笔记）导入，方法如下：</p><p>从 Evernote（印象笔记）导入：</p><blockquote><p>打开 Evernote，右击要导出的笔记本，选择“导出笔记“，导出 .enex 格式文件。</p><p>在 Joplin 中，选择“文件” &gt; “导入” &gt; “ENEX – Evernote导出文件（Markdown）”即可导入。</p></blockquote><p>从 Markdown 文件导入：</p><blockquote><p>使用 Joplin 可以轻松导入 Markdown 文件或整个目录，选择“文件” &gt; “导入” &gt; “MD – Markdown（文件/目录）”导入即可。</p></blockquote><p>从其他应用程序导入：</p><blockquote><p>通常，很多应用程序都支持导入到 Evernote 中，所以从其他应用程序导入的思路是先导入 Evernote，再导出 .enex 文件，最后导入 Joplin 中。</p></blockquote><p>如下图：</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_09.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135909.png"></a></p><p>如果哪天你不想使用Joplin了，也可以很方便地导出。Joplin 支持多种导出格式，导出格式均为标准格式，可以在不依赖 Joplin 的情况下查看、编辑，部分格式支持无损/有损重新导入：</p><blockquote><p>JEX：Joplin 的无损导出格式，包含所有的元数据如标签、更新时间等。JEX是实际上是一个tar文件，可以直接解压出 MarkDown 文件。这种格式常用于备份，<strong>可以无损重新导入</strong>。</p><p>RAW：同 JEX 格式相似，只是数据会保存为目录，并且每个笔记都会导出为一个单独的文件。<strong>可以无损重新导入</strong>。</p><p>JSON：导出为 JSON 格式的文件。不支持重新导入。</p><p>MD：按照笔记本的分级结构导出为目录，每条笔记在对应的目录中导出为 Markdown 格式的文件，目录名和文件名与原笔记本对应，此种格式易于读取，但是导出的文件将丢失元数据。可以有损导入（丢失元数据）。</p><p>HTML：导出为网页文件，将 Markdown 格式转为 html 标签，带有样式。不支持导入。</p><p>PDF：将单个笔记导出为 PDF 格式的文件。不支持导入。</p></blockquote><p>如下图：</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_10.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135801.png"></a></p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>免费开源的笔记Joplin无论在功能上还是使用体验上基本上与Evernote印象笔记无异了，在隐私保护方面做得非常好，特别适合那些想要保存个人信息笔记的用户。</p><p>使用免费开源的笔记Joplin最大的问题就是找好同步的网盘或者云存储，另外强烈建议大家在对Joplin的设置进行调整时先备份一个，以免同步后删除了所有的笔记。</p><p>编辑整理 From：<a href="https://wzfou.com/joplin/">挖站否</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Evernote笔记是我们常用的一个笔记服务，国内叫印象笔记，免费版本的Evernote笔记其实已经足够我们使用了，但是对于重度的笔记用户，Evernote某些功能可能需要付费升级才可以使用，而且你的笔记是存放在Evernote的服务器上。&lt;/p&gt;
&lt;p&gt;有些同学可能觉得放</summary>
      
    
    
    
    <category term="note" scheme="https://blog.17lai.fun/categories/note/"/>
    
    
    <category term="Linux" scheme="https://blog.17lai.fun/tags/Linux/"/>
    
    <category term="note" scheme="https://blog.17lai.fun/tags/note/"/>
    
    <category term="Docker" scheme="https://blog.17lai.fun/tags/Docker/"/>
    
    <category term="Nas" scheme="https://blog.17lai.fun/tags/Nas/"/>
    
    <category term="Webdav" scheme="https://blog.17lai.fun/tags/Webdav/"/>
    
    <category term="Joplinr" scheme="https://blog.17lai.fun/tags/Joplinr/"/>
    
  </entry>
  
  <entry>
    <title>Joplin 入门指南&amp;实践方案</title>
    <link href="https://blog.17lai.fun/note/2021-09-09-play-with-joplin/"/>
    <id>https://blog.17lai.fun/note/2021-09-09-play-with-joplin/</id>
    <published>2021-09-09T03:25:00.000Z</published>
    <updated>2021-09-13T12:21:36.892Z</updated>
    
    <content type="html"><![CDATA[<p>Evernote笔记是我们常用的一个笔记服务，国内叫印象笔记，免费版本的Evernote笔记其实已经足够我们使用了，但是对于重度的笔记用户，Evernote某些功能可能需要付费升级才可以使用，而且你的笔记是存放在Evernote的服务器上。</p><p>有些同学可能觉得放在Evernote服务器上的笔记会不安全，况且有些隐私性很强的笔记确实不适合放在公共的服务器上。此时，你需要一个可以保护个人隐私同时还可以与Evernote笔记功能相媲美的免费笔记服务：Joplin，它是一款免费开源的笔记软件。</p><p>Joplin跨平台支持，包括PC桌面端，移动端，甚至提供了命令行版本，原生支持 markdown 格式，搜索速度快，可以通过其他第三方同步工具 (Dropbox/NextCloud/OneDrive/WebDAV/etc) 进行备份以及同步 ，支持浏览器Web clipper即网页剪贴。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_00.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135705.png"></a></p><p>Evernote笔记该有的功能Joplin都有了，如果你不想掏钱购买Evernote付费版本，Joplin将是最佳的替代品。更多的自建服务还有：</p><ol><li> <a href="https://wzfou.com/chevereto/">Chevereto免费相册程序安装与使用-免费自建图床和公共图片相册</a></li><li> <a href="https://wzfou.com/tt-rss/">自建RSS阅读器Tiny Tiny RSS安装和配置自动更新,全文RSS,更换主题,手机RSS登录</a></li><li> <a href="https://wzfou.com/bitwarden-rs/">放弃付费1Password改用免费开源的bitwarden_rs自建密码管理系统-安装,使用和备份</a></li></ol><p><strong>PS：更新记录</strong></p><blockquote><p>1、平时经常要校对文本，以及有大量的文件需要在电脑和移动硬盘同步，可以试试这些免费的同步对比工具：<a href="https://wzfou.com/files-sync-softs/">八大免费的文件对比同步工具-免费文件对比分析与复制同步备份软件</a>。2021.3.24</p><p>2、对于1Password这类的密码管理软件重度依赖，但是苦于囊中羞涩的话，不防自建密码管理平台：<a href="https://wzfou.com/bitwarden-mima/">Bitwarden自建密码存储系统图文教程-开源免费的bitwarden_rs安装与使用</a>。2020.10.10</p></blockquote><h2 id="一、Joplin安装和使用"><a href="#一、Joplin安装和使用" class="headerlink" title="一、Joplin安装和使用"></a>一、Joplin安装和使用</h2><p>网站：</p><ol><li> <a href="https://joplinapp.org/">https://joplinapp.org/</a></li></ol><p>直接到官网下载Joplin安装包，安装好了就可以启动Joplin了，以下是Joplin的软件界面，分成三栏，和我们平时熟悉的笔记软件是一样的。（点击放大）</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_01.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135716.png"></a></p><p>这是Joplin的编辑器，支持 MarkDown，图片、数学公式、复选框等 MarkDown 语法。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_02.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135813.png"></a></p><p>不习惯MarkDown，直接切换为可视编辑即可。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_03.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135820.png"></a></p><p>在Joplin的设置选项中还提供了非常多的MarkDown的插件，对于MarkDown深度用户来是一个福音。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_05.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135723.png"></a></p><h2 id="二、Joplin的特色功能"><a href="#二、Joplin的特色功能" class="headerlink" title="二、Joplin的特色功能"></a>二、Joplin的特色功能</h2><h3 id="2-1-笔记历史版本"><a href="#2-1-笔记历史版本" class="headerlink" title="2.1 笔记历史版本"></a>2.1 笔记历史版本</h3><p>Joplin提供了笔记历史版本，让你轻松地恢复任意时间的笔记版本。在“工具” &gt; “选项” &gt; “笔记历史”中启用，以及设置保留的笔记历史天数。要查看笔记的历史版本，点击编辑器上方的笔记属性图标，然后选择恢复：</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_12.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135828.png"></a></p><h3 id="2-2-E2EE安全加密"><a href="#2-2-E2EE安全加密" class="headerlink" title="2.2 E2EE安全加密"></a>2.2 E2EE安全加密</h3><p>在同步过程中，笔记本、笔记、标签等均以纯文本文件的方式同步，如果你还觉得不安全，你可以开启端到端加密（E2EE），把文件加密后同步到云端。由于 Joplin 的去中心化，密码必须手动在每个终端设置。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_19.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135736.png"></a></p><p><strong>注意：不要在多个设备上同时启用加密，否则可能会造成加密密钥问题。特别提醒：****加密之前，先将笔记导出JEX备份一份，以防万一。</strong></p><h3 id="2-3-Joplin手机APP"><a href="#2-3-Joplin手机APP" class="headerlink" title="2.3 Joplin手机APP"></a>2.3 Joplin手机APP</h3><p>Joplin可以直接在各大应用市场上下载，使用起来也很方便。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_15.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135835.png"></a></p><h3 id="2-4-外部编辑器"><a href="#2-4-外部编辑器" class="headerlink" title="2.4 外部编辑器"></a>2.4 外部编辑器</h3><p>Joplin自带的编辑已经非常强大的，如果你想要使用自己的编辑器来编辑笔记也是可以的，包括 文本编辑器（如 Notepad++）、 Markdown 编辑器（如 Typora）等。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_22.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135928.png"></a></p><p>通过 Ctrl+E，或 Joplin 编辑器上方的图标（如下图）从外部编辑器打开笔记，从外部编辑器打开后，Joplin 将持续监控该文件，当你从外部编辑机保存后，Joplin 将自动同步最新变动。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_21.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135841.png"></a></p><p>你可以在“工具” &gt; “选项” &gt; “通用选项”中指定编辑器的路径。</p><h2 id="三、Joplin同步与备份"><a href="#三、Joplin同步与备份" class="headerlink" title="三、Joplin同步与备份"></a>三、Joplin同步与备份</h2><p>Joplin与其它的笔记软件很大的不同就是没有存储功能，你需要将Joplin的笔记放在自己的主机或者网盘里，幸运的是Joplin支持多种方式的云同步：Nextcloud / Dropbox / OneDrive / File system / WebDAV。</p><h3 id="3-1-Joplin免费网盘同步"><a href="#3-1-Joplin免费网盘同步" class="headerlink" title="3.1 Joplin免费网盘同步"></a>3.1 Joplin免费网盘同步</h3><p>目前，Joplin支持Dropbox 、OneDrive 网盘同步，在同步选项中选择OneDrive，然后就会打开认证。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_06.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135739.png"></a></p><p>同意验证。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_07.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135848.png"></a></p><p>与 OneDrive 同步时，Joplin 会在 OneDrive 中创建一个子目录：<code>/Apps/Joplin</code>，Joplin 仅有此目录的读写权限。如下图：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135746.png"></p><h3 id="3-2-Joplin使用WebDAV同步"><a href="#3-2-Joplin使用WebDAV同步" class="headerlink" title="3.2 Joplin使用WebDAV同步"></a>3.2 Joplin使用WebDAV同步</h3><p>WebDAV 可以自建，或使用支持 WebDAV 的云盘，另外 NAS（如群晖）通常也支持 WebDAV。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_13.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135855.png"></a></p><p>**Nextcloud：**Nextcloud是一个开源的免费的自建个人云存储方案，要启用 Nextcloud 同步，你需要在 Nextcloud 中创建一个目录（比如：Joplin），在左下角的“设置”中获取 WebDAV 的 URL，在 Joplin 同步设置中，填入 WebDAV URL、用户名和密码。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_20.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135902.png"></a></p><p>有关于Nextcloud安装与使用教程，请参考：<a href="https://wzfou.com/nextcloud-lixian/">Oneinstack安装NextCloud以及使用Aria2离线下载和ocDownloader插件配置</a>。</p><p><strong>坚果云：</strong>首次同步时会因为 WebDAV 短时间内的大量请求被坚果云临时限制，坚果云提示为“Too many requests”，这个封锁会持续大约6小时。同步之前，在 Joplin 的“工具” &gt; “选项” &gt; “同步” &gt; “高级选项”中，将“最大并发连接数”改为1可以有效避免。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_14.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135753.png"></a></p><p>关于坚果云的使用方法，请参考：<a href="https://wzfou.com/upyun-jianguoyun/">巧用又拍云FTP和坚果云WebDAV-打造个人文件备份和数据云存储</a>。</p><h2 id="四、Joplin导入与导出"><a href="#四、Joplin导入与导出" class="headerlink" title="四、Joplin导入与导出"></a>四、Joplin导入与导出</h2><p>Joplin可以很方便地支持从Evernote（印象笔记）导入，方法如下：</p><p>从 Evernote（印象笔记）导入：</p><blockquote><p>打开 Evernote，右击要导出的笔记本，选择“导出笔记“，导出 .enex 格式文件。</p><p>在 Joplin 中，选择“文件” &gt; “导入” &gt; “ENEX – Evernote导出文件（Markdown）”即可导入。</p></blockquote><p>从 Markdown 文件导入：</p><blockquote><p>使用 Joplin 可以轻松导入 Markdown 文件或整个目录，选择“文件” &gt; “导入” &gt; “MD – Markdown（文件/目录）”导入即可。</p></blockquote><p>从其他应用程序导入：</p><blockquote><p>通常，很多应用程序都支持导入到 Evernote 中，所以从其他应用程序导入的思路是先导入 Evernote，再导出 .enex 文件，最后导入 Joplin 中。</p></blockquote><p>如下图：</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_09.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135909.png"></a></p><p>如果哪天你不想使用Joplin了，也可以很方便地导出。Joplin 支持多种导出格式，导出格式均为标准格式，可以在不依赖 Joplin 的情况下查看、编辑，部分格式支持无损/有损重新导入：</p><blockquote><p>JEX：Joplin 的无损导出格式，包含所有的元数据如标签、更新时间等。JEX是实际上是一个tar文件，可以直接解压出 MarkDown 文件。这种格式常用于备份，<strong>可以无损重新导入</strong>。</p><p>RAW：同 JEX 格式相似，只是数据会保存为目录，并且每个笔记都会导出为一个单独的文件。<strong>可以无损重新导入</strong>。</p><p>JSON：导出为 JSON 格式的文件。不支持重新导入。</p><p>MD：按照笔记本的分级结构导出为目录，每条笔记在对应的目录中导出为 Markdown 格式的文件，目录名和文件名与原笔记本对应，此种格式易于读取，但是导出的文件将丢失元数据。可以有损导入（丢失元数据）。</p><p>HTML：导出为网页文件，将 Markdown 格式转为 html 标签，带有样式。不支持导入。</p><p>PDF：将单个笔记导出为 PDF 格式的文件。不支持导入。</p></blockquote><p>如下图：</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_10.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135801.png"></a></p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>免费开源的笔记Joplin无论在功能上还是使用体验上基本上与Evernote印象笔记无异了，在隐私保护方面做得非常好，特别适合那些想要保存个人信息笔记的用户。</p><p>使用免费开源的笔记Joplin最大的问题就是找好同步的网盘或者云存储，另外强烈建议大家在对Joplin的设置进行调整时先备份一个，以免同步后删除了所有的笔记。</p><p>编辑整理 From：<a href="https://wzfou.com/joplin/">挖站否</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Evernote笔记是我们常用的一个笔记服务，国内叫印象笔记，免费版本的Evernote笔记其实已经足够我们使用了，但是对于重度的笔记用户，Evernote某些功能可能需要付费升级才可以使用，而且你的笔记是存放在Evernote的服务器上。&lt;/p&gt;
&lt;p&gt;有些同学可能觉得放</summary>
      
    
    
    
    <category term="note" scheme="https://blog.17lai.fun/categories/note/"/>
    
    
    <category term="Linux" scheme="https://blog.17lai.fun/tags/Linux/"/>
    
    <category term="note" scheme="https://blog.17lai.fun/tags/note/"/>
    
    <category term="Joplin" scheme="https://blog.17lai.fun/tags/Joplin/"/>
    
    <category term="Docker" scheme="https://blog.17lai.fun/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>为知笔记私有化Docker部署</title>
    <link href="https://blog.17lai.fun/note/2021-09-09-deploy-wiznote-docker-on-nas/"/>
    <id>https://blog.17lai.fun/note/2021-09-09-deploy-wiznote-docker-on-nas/</id>
    <published>2021-09-09T01:25:00.000Z</published>
    <updated>2021-09-13T12:21:25.291Z</updated>
    
    <content type="html"><![CDATA[<p>登陆NAS，打开套件中心，搜索docker，并安装。</p><p>搜索wiznote，找到wiznote/wizserver，双击下载</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114640.png"></p><p>在NAS中创建共享目录，用于存放笔记数据</p><ol><li>启动File Station</li><li>在docker目录下创建文件夹： wiz</li><li>在wiz文件夹下创建文件夹：data <img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114704.png"></li><li>双击创建容器，启用资源限制，设置为内存限制4096MB，官方介绍说需要4G内存 <img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114710.jpeg"></li><li>高级设置，启动自动重新启动</li><li>卷设置，使用刚才我们创建的data目录进行配置，装载路径<code>/wiz/storage</code>，<code>docker/wiz/config</code>装载路径<code>/wiz/app/wizserver/config</code> <img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114724.png"></li><li>网络设置不动，端口设置添加映射：8888映射80端口（8888可以随便设置，跟访问地址有关）</li></ol><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114731.png"></p><ol start="8"><li>设置环境变量 <img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114732.png"> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">SEARCH</span><span class="token operator">=</span>true <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>直接应用，启动docker，然后就静静的等待吧，可以看看镜像的日志，看到这些基本上就差不多启动好了（最新的镜像在NAS上首次启动非常慢，本人等了一个多小时才完全启动完毕，在本地安装速度非常快）<img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114738.jpeg"></li><li>通过 <code>http://NAS的IP:8888</code>，进行访问，就可以看到已经启动完成 <img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114744.jpeg" alt="为知笔记启动界面"></li></ol><blockquote><p>默认管理员账号：<a href="mailto:admin@wiz.cn">admin@wiz.cn</a>，密码：123456</p><p>管理后台登陆地址：<a href="http://IP地址:端口/wapp/pages/admin">http://IP地址:端口/wapp/pages/admin</a></p></blockquote><h2 id="NAS开启SSH"><a href="#NAS开启SSH" class="headerlink" title="NAS开启SSH"></a>NAS开启SSH</h2><p>首先在NAS上启动SSH</p><p>登陆NAS，打开<code>控制面板-终端机和SNMP</code>，在<code>启动SSH功能</code>前打上勾</p><p>打开命令行，输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> NAS管理员账号@NAS的IP地址 ssh端口号默认是22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到提示符，输入账号的密码，输入时不可见，输入完成按回车，看到命令行提示符变了，登陆成功。</p><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><p>在命令行中输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> docker <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能提示输入密码，就输入NAS管理员的密码即可，显示列表，查看到如下列表，找到其中运行了为知笔记的一行</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114805.png"></p><p>复制为知笔记的<code>CONTAINER ID</code>，然后再输入如下命令并回车：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> docker <span class="token builtin class-name">exec</span> -it 粘贴刚复制好的ID号 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>至此进入到容器中</p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>输入如下命令打开配置文件进行编辑：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /wiz/app/wizserver/config/default.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>vi命令的具体使用方法请自行百度，保存好后退出，重启容器生效。</p><p>进入docker，修改文件/wiz/wizserver/app/config/default.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"as"</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token property">"admin"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"admin@wiz.cn"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token property">"share"</span><span class="token operator">:</span> <span class="token punctuation">{</span>       <span class="token property">"admin"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"admin@wiz.cn"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token property">"enableHttps"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>       <span class="token property">"enableSubDomain"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>       <span class="token property">"appShareUrl"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1:5001"</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>127.0.0.1:5001</code>修改为自己的服务器访问地址，可以给docker做个端口映射（因为群晖NAS占用了5001端口），譬如映射8889端口到容器的5001端口，则设置为<code>xxx.xxx.xxx.xxx:8889</code>，分享后的链接即为该链接。</p><p>在NAS上可以用反向代理来解决二级域名的问题。</p><p>分享功能需要用户绑定手机，并完成认证，在docker中登陆数据库，并修改数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入密码，密码在docker中<code>/wiz/wizserver/app/config/default.json</code>中查看</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"mysql"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"as"</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token property">"host"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>   <span class="token property">"user"</span><span class="token operator">:</span> <span class="token string">"root"</span><span class="token punctuation">,</span>   <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"******************"</span><span class="token punctuation">,</span>   <span class="token property">"database"</span><span class="token operator">:</span> <span class="token string">"wizasent"</span><span class="token punctuation">,</span>   <span class="token property">"connectionLimit"</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>   <span class="token property">"connectTimeout"</span><span class="token operator">:</span> <span class="token number">60000</span><span class="token punctuation">,</span>   <span class="token property">"aquireTimeout"</span><span class="token operator">:</span> <span class="token number">60000</span><span class="token punctuation">,</span>   <span class="token property">"waitForConnections"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>password</code>就是密码，进入mysql控制台后，执行以下命令：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> wizasent<span class="token punctuation">;</span><span class="token keyword">update</span> wiz_user <span class="token keyword">set</span> MOBILE<span class="token operator">=</span><span class="token string">'你的手机号'</span><span class="token punctuation">,</span> MOBILE_VERIFY<span class="token operator">=</span><span class="token string">'1'</span> <span class="token keyword">where</span> ID<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>web端登陆为知笔记，并修改默认账号后，修改后的账号无法登陆管理后台，需要做以下配置，修改文件<code>/wiz/wizserver/app/config/default.json</code>，找到以下代码：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"as"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"admin"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"admin@wiz.cn"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"share"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"admin"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"admin@wiz.cn"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"enableHttps"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"enableSubDomain"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"appShareUrl"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1:5001"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>admin@wiz.cn</code>修改为修改后的账号。</p><p>登陆NAS，打开<code>控制面板-应用程序门户-反向代理</code></p><p>点击新增，然后输入如下：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114813.png"></p><p>实际测试来源协议选择https时只有网页端可以登陆，客户端无法登陆，暂时还是选择http为好，也可以网页端通过https登陆，客户端通过http登陆，配置两个不同的端口（记得要在路由上配置端口映射）。</p><p>修改<code>default.json</code></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"debug"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"enableHttps"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"storage"</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token property">"__comments"</span><span class="token operator">:</span> <span class="token string">"oss|local|s3|cos"</span><span class="token punctuation">,</span>     <span class="token property">"use"</span><span class="token operator">:</span> <span class="token string">"local"</span><span class="token punctuation">,</span>     <span class="token property">"oss"</span><span class="token operator">:</span> <span class="token punctuation">{</span>       <span class="token property">"bucket"</span><span class="token operator">:</span> <span class="token string">"data_root"</span><span class="token punctuation">,</span>       <span class="token property">"region"</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>       <span class="token property">"accessKeyId"</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>       <span class="token property">"accessKeySecret"</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>       <span class="token property">"internal"</span><span class="token operator">:</span> <span class="token boolean">false</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>enableHttps</code>配置成<code>true</code></p><p>重启服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /wiz/app/wizserverpm2 restart all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>删除<code>/wiz/storage/index/.search</code>文件和<code>/wiz/storage/index/nodes</code>目录</p><p>重启容器</p><p>链接数据库，执行下列SQL</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> wizksent<span class="token punctuation">.</span>wiz_kb_stat <span class="token keyword">set</span> index_new_status<span class="token operator">=</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入容器，执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /wiz/app/wizserverpm2 start app.js --name<span class="token operator">=</span><span class="token string">"index2"</span>  -f -- -c <span class="token number">1</span> -i <span class="token number">1</span> -t <span class="token number">2</span> -s indexpm2 start app.js --name<span class="token operator">=</span><span class="token string">"index2"</span>  -f --  -s copy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pm2 logs index2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载官方插件，并安装到Chrome中</p><p><a href="http://www.wiz.cn/downloads-webclipperchrome.html">http://www.wiz.cn/downloads-webclipperchrome.html</a></p><p>在浏览器中输入<code>chrome://extensions/</code>打开插件列表，开启开发者模式</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114820.png"></p><p>看ID号，在浏览器中输入<code>chrome://inspect/#extensions</code>在打开的列表中找到<code>WizClipper</code>，点击<code>inspect</code>，开启调试窗口。</p><p>选择<code>Sources</code>标签，并打开文件<code>Scripts\wiz\WizConstant.js</code></p><p>在代码中查看<code>note.wiz.cn</code>和<code>api.wiz.cn</code>的网址全部替换成自己私有云的地址，实测，登陆没问题，保存失败。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114826.jpeg"></p><h2 id="管理功能"><a href="#管理功能" class="headerlink" title="管理功能"></a>管理功能</h2><ol><li>增加重建索引功能，以备不时之需</li><li>增加备份与恢复功能</li><li>增加markdown语法扩展： flow（流程图）、sequence（时序图）、mermaid（流程图、时序图、甘特图）、LaTeX（公式）</li><li>增加手动配置分享链接</li><li>支持社交绑定的配置</li><li>支持对象存储或webdav存储</li></ol><h2 id="Web-amp-Mac客户端"><a href="#Web-amp-Mac客户端" class="headerlink" title="Web&amp;Mac客户端"></a>Web&amp;Mac客户端</h2><ol><li>增加自定义模板</li><li>增加偏好设置，自定义快捷键（主要是编辑和预览切换的快捷键非常不适应）</li><li>增加同步预览模式，可以参考下Typora，Bear都不错</li><li>增加https访问方式</li><li>支持导出jpg、png、docx格式</li></ol><h2 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h2><ol><li>增加支持私有云登陆</li></ol><p>【部署环境】<br>群晖DS1517+（DSM6.2.2）<br>容器分配内存4G，CPU*2核</p><p>【出现的问题】</p><ol><li>网页版上提示，自动保存失败，网络错误，请尽快保存（最后发现是时区不通道导致的，第8点解决了此问题）</li><li>所有社交平台账号无法绑定</li><li>mywiz邮箱不可修改</li><li>绑定手机无法收到验证码，即无法绑定手机（通过修改数据库搞定）</li><li>存储设置功能多余（因为已经本地化部署了），改成数据备份/恢复就好了</li><li>支付信息是支付到为知去的，这个功能容易产生误解（如果多人使用的话）</li><li> docker容器的时区与宿主机时区不同，添加环境变量解决，TZ=Asia/Shanghai</li></ol><p>编辑整理 From： <a href="https://mp.weixin.qq.com/s/JQBUqdq1YNsGqolQ0jjfNg">大大木头 [为知社区]</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;登陆NAS，打开套件中心，搜索docker，并安装。&lt;/p&gt;
&lt;p&gt;搜索wiznote，找到wiznote/wizserver，双击下载&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.weserv.nl/?url=https://raw.githubuse</summary>
      
    
    
    
    <category term="note" scheme="https://blog.17lai.fun/categories/note/"/>
    
    
    <category term="note" scheme="https://blog.17lai.fun/tags/note/"/>
    
    <category term="wiz" scheme="https://blog.17lai.fun/tags/wiz/"/>
    
    <category term="Docker" scheme="https://blog.17lai.fun/tags/Docker/"/>
    
    <category term="linux" scheme="https://blog.17lai.fun/tags/linux/"/>
    
    <category term="Nas" scheme="https://blog.17lai.fun/tags/Nas/"/>
    
    <category term="群晖" scheme="https://blog.17lai.fun/tags/%E7%BE%A4%E6%99%96/"/>
    
  </entry>
  
  <entry>
    <title>Mariadb/Mysql命令行常用命令</title>
    <link href="https://blog.17lai.fun/mysql/2021-09-08-mariadb-and-mysql-command/"/>
    <id>https://blog.17lai.fun/mysql/2021-09-08-mariadb-and-mysql-command/</id>
    <published>2021-09-08T01:25:00.000Z</published>
    <updated>2021-09-13T12:21:15.853Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、初始化等"><a href="#一、初始化等" class="headerlink" title="一、初始化等"></a>一、初始化等</h2><h3 id="1、登陆数据库方法"><a href="#1、登陆数据库方法" class="headerlink" title="1、登陆数据库方法"></a><strong>1、登陆数据库方法</strong></h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql <span class="token operator">-</span>u用户名 <span class="token operator">-</span>p用户密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、修改root及用户密码"><a href="#2、修改root及用户密码" class="headerlink" title="2、修改root及用户密码"></a>2、修改root及用户密码</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> password<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'11111111'</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span> <span class="token operator">and</span> host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">MariaDB <span class="token punctuation">[</span>mysql<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> password<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'11111111'</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span> <span class="token operator">and</span> host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span> MariaDB <span class="token punctuation">[</span>mysql<span class="token punctuation">]</span><span class="token operator">&gt;</span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span>mysql<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、创建用户"><a href="#3、创建用户" class="headerlink" title="3、创建用户"></a><strong>3、创建用户</strong></h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">,</span>password<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4、删除用户"><a href="#4、删除用户" class="headerlink" title="4、删除用户"></a>4、删除用户</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> <span class="token keyword">User</span><span class="token operator">=</span><span class="token string">"test"</span> <span class="token operator">and</span> Host<span class="token operator">=</span><span class="token string">"localhost"</span><span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>　　<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5、删除用户的数据库"><a href="#5、删除用户的数据库" class="headerlink" title="5、删除用户的数据库"></a>5、删除用户的数据库</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">database</span> test1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6、交互模式初始化"><a href="#6、交互模式初始化" class="headerlink" title="6、交互模式初始化"></a>6、交互模式初始化</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql_secure_installation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、-常用操作"><a href="#二、-常用操作" class="headerlink" title="二、 常用操作"></a>二、 常用操作</h2><h3 id="1、显示数据库列表"><a href="#1、显示数据库列表" class="headerlink" title="1、显示数据库列表"></a><strong>1、显示数据库列表</strong></h3><p>　　　　<code>show databases;</code>:查看所有的数据库</p><h3 id="2、创建数据库"><a href="#2、创建数据库" class="headerlink" title="2、创建数据库"></a>2、创建数据库</h3><p>　　　　<code>create database zxg;</code>：创建名尾zxg的数据库</p><h3 id="3、进入数据库"><a href="#3、进入数据库" class="headerlink" title="3、进入数据库"></a>3、进入数据库</h3><p>　　　　<code>use zxg;</code>:进入zxg的数据库</p><h3 id="4、显示库中的数据表"><a href="#4、显示库中的数据表" class="headerlink" title="4、显示库中的数据表"></a>4、显示库中的数据表</h3><p>　　　　<code>show tables;</code>：查看数据库里有多少张表</p><h3 id="5、创建数据表"><a href="#5、创建数据表" class="headerlink" title="5、创建数据表"></a>5、创建数据表</h3><p>　　　　<code>create table t1 (id varchar(20),name varchar(20));</code>:创建名为t1表，并创建两两个字段，id、name，varchar表示设置数据长度，用字符来定义长度单位，其</p><h3 id="6、插入数据"><a href="#6、插入数据" class="headerlink" title="6、插入数据"></a>6、插入数据</h3><p>　　　　<code>insert into t1 values（"1"，"zxg"）;</code>:向表中插入数据</p><h3 id="7、查看数据表"><a href="#7、查看数据表" class="headerlink" title="7、查看数据表"></a>7、查看数据表</h3><p>　　　　<code>select * from t1;</code> ：查看t1表数据内容</p><h3 id="8、多条件查询"><a href="#8、多条件查询" class="headerlink" title="8、多条件查询"></a>8、多条件查询</h3><p>　　　　<code>select * from t1 where id=1 and age = 'zxg ' ;</code>: id、age 多个条件查询</p><h3 id="9、查看字段内容"><a href="#9、查看字段内容" class="headerlink" title="9、查看字段内容"></a>9、查看字段内容</h3><p>　　　　<code>desc t1;</code>:查看t1 表字段内容</p><h3 id="10、修改字段长度"><a href="#10、修改字段长度" class="headerlink" title="10、修改字段长度"></a>10、修改字段长度</h3><p>　　　　<code>alter table t1 modify column name varchar(20);</code>:修改name字段的长度</p><h3 id="11、修改该字段内容"><a href="#11、修改该字段内容" class="headerlink" title="11、修改该字段内容"></a>11、修改该字段内容</h3><p>　　　　<code>update t1 set name='zxg.net' where id=1;</code>：修改name字段的内容</p><h3 id="12、权限刷新"><a href="#12、权限刷新" class="headerlink" title="12、权限刷新"></a><strong>12、权限刷新</strong></h3><p>　　　　<code>flush privileges;</code> :刷新权限</p><h3 id="13、清空表单"><a href="#13、清空表单" class="headerlink" title="13、清空表单"></a>13、清空表单</h3><p>　　　　delete from t1;` :清空表内容</p><h3 id="14、删除数据表"><a href="#14、删除数据表" class="headerlink" title="14、删除数据表"></a>14、删除数据表</h3><p>　　　　`drop table t1:删除表</p><h3 id="15、删除数据库"><a href="#15、删除数据库" class="headerlink" title="15、删除数据库"></a>15、删除数据库</h3><p>　　　　<code>drop database zxg;</code>：删除zxg数据库</p><h3 id="16、查看数据库字符集"><a href="#16、查看数据库字符集" class="headerlink" title="16、查看数据库字符集"></a>16、查看数据库字符集</h3><p>　　　　<code>show variables like '%char%';</code>:查看数据库字符集</p><h3 id="17、查看存储引擎"><a href="#17、查看存储引擎" class="headerlink" title="17、查看存储引擎"></a>17、查看存储引擎</h3><p>　　　　<code>show engines;</code>:查看MySQL存储引擎。</p><h3 id="18、查看默认存储引擎"><a href="#18、查看默认存储引擎" class="headerlink" title="18、查看默认存储引擎"></a>18、查看默认存储引擎</h3><p>　　　　<code>show variables like '%storage_engine%';</code>:查看MySQL默认的存储引擎</p><h3 id="19、修改存储引擎"><a href="#19、修改存储引擎" class="headerlink" title="19、修改存储引擎"></a>19、修改存储引擎</h3><p>　　　　<code>alter table t1 engine=innodb;</code>:修改MySQL t1表存储引擎</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>root<span class="token variable">@web2</span> <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment"># mysql</span>Welcome <span class="token keyword">to</span> the MariaDB monitor<span class="token punctuation">.</span>  Commands <span class="token keyword">end</span> <span class="token keyword">with</span> <span class="token punctuation">;</span> <span class="token operator">or</span> \g<span class="token punctuation">.</span>Your MariaDB connection id <span class="token operator">is</span> <span class="token number">2</span>Server version: <span class="token number">5.5</span><span class="token number">.60</span><span class="token operator">-</span>MariaDB MariaDB Server Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2018</span><span class="token punctuation">,</span> Oracle<span class="token punctuation">,</span> MariaDB Corporation Ab <span class="token operator">and</span> others<span class="token punctuation">.</span> <span class="token keyword">Type</span> <span class="token string">'help;'</span> <span class="token operator">or</span> <span class="token string">'\h'</span> <span class="token keyword">for</span> help<span class="token punctuation">.</span> <span class="token keyword">Type</span> <span class="token string">'\c'</span> <span class="token keyword">to</span> clear the <span class="token keyword">current</span> input statement<span class="token punctuation">.</span> MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------------+</span><span class="token operator">|</span> <span class="token keyword">Database</span>           <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+</span><span class="token operator">|</span> information_schema <span class="token operator">|</span><span class="token operator">|</span> mysql              <span class="token operator">|</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span><span class="token operator">|</span> test               <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+</span><span class="token number">4</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>  <span class="token keyword">create</span> <span class="token keyword">database</span> zxg<span class="token punctuation">;</span>                 Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">use</span> zxg<span class="token punctuation">;</span><span class="token keyword">Database</span> changedMariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>Empty <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> t1<span class="token punctuation">(</span>id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+</span><span class="token operator">|</span> Tables_in_zxg <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+</span><span class="token operator">|</span> t1            <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">MariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> t1 <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"zxg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> t1<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> zxg <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> t1 <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> zxg <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> t1 <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> name<span class="token operator">=</span><span class="token string">'zxg'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> zxg <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">desc</span> t1<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span> <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES <span class="token operator">|</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> name <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES <span class="token operator">|</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-------------+------+-----+---------+-------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">alter</span> <span class="token keyword">table</span> t1 <span class="token keyword">modify</span> <span class="token keyword">column</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>Records: <span class="token number">0</span> Duplicates: <span class="token number">0</span> <span class="token keyword">Warnings</span>: <span class="token number">0</span> MariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">update</span> t1 <span class="token keyword">set</span> name<span class="token operator">=</span><span class="token string">'zxg.net'</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span> Changed: <span class="token number">1</span> <span class="token keyword">Warnings</span>: <span class="token number">0</span>MariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、mysql-数据库字符集设置"><a href="#三、mysql-数据库字符集设置" class="headerlink" title="三、mysql 数据库字符集设置"></a>三、mysql 数据库字符集设置</h2><p>　mysql数据库存储数据时，默认编码为latinl，存储中文字符时，在调用时会显示为乱码，为了解决该乱码问题，需修改该mysql默认字符集为UTE-8　　</p><p>　　 装mariadb的是时候看已经默认为ute-8</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%char%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------------------+----------------------------+</span><span class="token operator">|</span> Variable_name            <span class="token operator">|</span> <span class="token keyword">Value</span>                      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------------+----------------------------+</span><span class="token operator">|</span> character_set_client     <span class="token operator">|</span> utf8                       <span class="token operator">|</span><span class="token operator">|</span> character_set_connection <span class="token operator">|</span> utf8                       <span class="token operator">|</span><span class="token operator">|</span> character_set_database   <span class="token operator">|</span> latin1                     <span class="token operator">|</span><span class="token operator">|</span> character_set_filesystem <span class="token operator">|</span> <span class="token keyword">binary</span>                     <span class="token operator">|</span><span class="token operator">|</span> character_set_results    <span class="token operator">|</span> utf8                       <span class="token operator">|</span><span class="token operator">|</span> character_set_server     <span class="token operator">|</span> latin1                     <span class="token operator">|</span><span class="token operator">|</span> character_set_system     <span class="token operator">|</span> utf8                       <span class="token operator">|</span><span class="token operator">|</span> character_sets_dir       <span class="token operator">|</span> <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">share</span><span class="token operator">/</span>mysql<span class="token operator">/</span>charsets<span class="token operator">/</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------------+----------------------------+</span><span class="token number">8</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　　　如不是，可以设置</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> character_set_client <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span class="token keyword">SET</span> character_set_results <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span class="token keyword">SET</span> character_set_connection <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="四、mysql-数据库密码管理"><a href="#四、mysql-数据库密码管理" class="headerlink" title="四、mysql 数据库密码管理"></a>四、mysql 数据库密码管理</h2><p>　　设置密码访问，密码破解、密码权限、修改密码；</p><h3 id="1、创建用户及授权"><a href="#1、创建用户及授权" class="headerlink" title="1、创建用户及授权"></a>1、创建用户及授权</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">on</span> zxg<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> test<span class="token variable">@localhost</span> identified <span class="token keyword">by</span> <span class="token string">'pas'</span><span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">update</span><span class="token punctuation">,</span><span class="token keyword">delete</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">to</span> test<span class="token variable">@"%"</span> identified <span class="token keyword">by</span> <span class="token string">'pas'</span><span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">on</span> zxg<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> test<span class="token variable">@`192.168.216.53`</span> identified <span class="token keyword">by</span> <span class="token string">'pas'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2、破解密码方法"><a href="#2、破解密码方法" class="headerlink" title="2、破解密码方法"></a>2、破解密码方法</h3><p>　　　　停止服务—》跳过权限方式启动—》单开一个窗口登陆—》登陆修改密码即可</p><p>　　　　1）systemctl stop mariadb</p><p>　　　　2）mysqld_safe –skip-grant-tables &amp;</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>root<span class="token variable">@web2</span> <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment"># mysqld_safe --skip-grant-tables &amp;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">47542</span><span class="token punctuation">[</span>root<span class="token variable">@web2</span> <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment"># 190520 15:45:22 mysqld_safe Logging to '/var/log/mariadb/mariadb.log'.</span><span class="token number">190520</span> <span class="token number">15</span>:<span class="token number">45</span>:<span class="token number">22</span> mysqld_safe <span class="token keyword">Starting</span> mysqld daemon <span class="token keyword">with</span> <span class="token keyword">databases</span> <span class="token keyword">from</span> <span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>root<span class="token variable">@web2</span> <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment"># mysql</span>Welcome <span class="token keyword">to</span> the MariaDB monitor<span class="token punctuation">.</span>  Commands <span class="token keyword">end</span> <span class="token keyword">with</span> <span class="token punctuation">;</span> <span class="token operator">or</span> \g<span class="token punctuation">.</span>Your MariaDB connection id <span class="token operator">is</span> <span class="token number">1</span>Server version: <span class="token number">5.5</span><span class="token number">.60</span><span class="token operator">-</span>MariaDB MariaDB Server Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2018</span><span class="token punctuation">,</span> Oracle<span class="token punctuation">,</span> MariaDB Corporation Ab <span class="token operator">and</span> others<span class="token punctuation">.</span> <span class="token keyword">Type</span> <span class="token string">'help;'</span> <span class="token operator">or</span> <span class="token string">'\h'</span> <span class="token keyword">for</span> help<span class="token punctuation">.</span> <span class="token keyword">Type</span> <span class="token string">'\c'</span> <span class="token keyword">to</span> clear the <span class="token keyword">current</span> input statement<span class="token punctuation">.</span> MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">use</span> mysql<span class="token punctuation">;</span>Reading <span class="token keyword">table</span> information <span class="token keyword">for</span> completion <span class="token keyword">of</span> <span class="token keyword">table</span> <span class="token operator">and</span> <span class="token keyword">column</span> namesYou can turn <span class="token keyword">off</span> this feature <span class="token keyword">to</span> get a quicker startup <span class="token keyword">with</span> <span class="token operator">-</span>A <span class="token keyword">Database</span> changedMariaDB <span class="token punctuation">[</span>mysql<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> password<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'11111111'</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span> <span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">4</span>  Changed: <span class="token number">3</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span> MariaDB <span class="token punctuation">[</span>mysql<span class="token punctuation">]</span><span class="token operator">&gt;</span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span>mysql<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">exit</span>Bye<span class="token punctuation">[</span>root<span class="token variable">@web2</span> <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　　　然后退出”跳过权限方式“ ctrl+c ，正常启动mysql就可以了</p><h2 id="五、mysql-配置文件详解"><a href="#五、mysql-配置文件详解" class="headerlink" title="五、mysql 配置文件详解"></a>五、mysql 配置文件详解</h2><h3 id="1、参数说明"><a href="#1、参数说明" class="headerlink" title="1、参数说明"></a>1、参数说明</h3><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span>                                                              #服务端配置<span class="token key attr-name">port</span>        <span class="token punctuation">=</span> <span class="token value attr-value">3306                                                    #监听端口</span><span class="token key attr-name">socket</span>      <span class="token punctuation">=</span> <span class="token value attr-value">/tmp/mysql.sock                                         #通信设置</span><span class="token key attr-name">user</span>    <span class="token punctuation">=</span> <span class="token value attr-value">mariadb                                                     #使用mariadb用户启动</span><span class="token key attr-name">basedir</span> <span class="token punctuation">=</span> <span class="token value attr-value">/usr/local/mariadb                                          #安装路径</span><span class="token key attr-name">datadir</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/mysql                                                 #数据目录</span><span class="token key attr-name">log_error</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/mysql/mariadb.err                             　　　 #错误日志</span><span class="token key attr-name">pid-file</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/mysql/mariadb.pid                             　　　　#pid进程文件</span>skip-external-locking                                                 #避免mysql的外部锁定，减少出错几率提高稳定性<span class="token key attr-name">key_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">64M                                                 #缓存存储引擎参数，这个参数可以设置为64M</span><span class="token key attr-name">max_allowed_packet</span> <span class="token punctuation">=</span> <span class="token value attr-value">1M                                               #允许最大接收数据包的大小，防止服务器发送过大的数据包，可以设置为16MB或者更大，但设置太大也可能有危险</span><span class="token key attr-name">table_open_cache</span> <span class="token punctuation">=</span> <span class="token value attr-value">256                                                #mysql每打开一个表，都会读入一些数据到table_open_cache缓存中，当MYSQL在这个缓存中找不到相应的信息时，才会去磁盘读取，默认值64，假设系统有200个并发连接，则需将此参数设置为200*N（N为每个连接所需的文件描述符数目）；当设置为很大时，如果系统处理不了那么多文件描述符，那么就会出现客户端失效，连接不上</span><span class="token key attr-name">sort_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">1M                                                 #在表进行order by和group by 排序操作时，由于排序的字段没有索引，会出现Using filesort，为了提高性能，可用此参数增加每个线程分配的缓存区大小，默认时256k，这个参数不要设置过大，一般128~256k，另外一般出现using filesort的时候，要通过增加索引来解决</span><span class="token key attr-name">net_buffer_length</span> <span class="token punctuation">=</span> <span class="token value attr-value">8K                                                #包消息缓冲区初始化net_buffer_length字节，但需要时可以增长到max_allowed_packet字节</span><span class="token key attr-name">read_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">1M                                                 #该参数用于表的顺序扫描，表示每个线程分配的缓冲区大小，比如在进行全表扫描时，mysql会按照数据的存储顺序一次读取数据块，每次读取的数据块首先会暂存在read_buffer_size中，当buffer空间被写满或者全部数据读取结束后，在将buffer中的数据返回给上层调用者，以提高效率默认128k，也不要设置过大</span><span class="token key attr-name">read_rnd_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">512K                                           #该参数用于表的随机读取，表示每个线程分配的缓冲区大小，比如，按照一个非索引字段做order by排序操作时，就会利用这个缓冲区来暂存读取的数据，默认时256k，也不要设置过大</span><span class="token key attr-name">myisam_sort_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">16M                                         #当myisam表执行repair table或创建索引时，用以缓冲排序索引，设置太小可能会遇到"myisam_sort_buffer_size is to small"</span><span class="token key attr-name">thread_cache_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">32                                                #线程池，线程缓冲。用来缓冲空闲的线程，以至于不被销毁，如果线程缓冲在的空闲线程，需要重新建立新连接，则会优先调用线程池中的缓冲，很快就能相应连接请求，每建立一个连接，都需要一个线程与之匹配。</span><span class="token key attr-name">query_cache_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">32M                                                #缓存select语句和结果集大小的参数。查询缓存会存储一个select查询的文本与被传送到客户端的相应结果。如果之后接收到一个相同的查询，服务器会从查询缓存中检索结果，而不是再次分析和执行这个同样的查询。如果你的环境中写操作很少，读操作频繁，那么打开query_cache_type=1，会对性能有明显提升。如果写操作频繁，则应该关闭它（query_cache_type=0）。</span><span class="token key attr-name">tmp_table_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">64M                                                  #临时HEAP数据表的最大长度(默认设置是32M); 超过这个长度的临时数据表将被转换为MyISAM数据表并存入一个临时文件。</span>                                                                      <span class="token comment">#</span><span class="token key attr-name">explicit_defaults_for_timestamp</span> <span class="token punctuation">=</span> <span class="token value attr-value">true                     　　　　　　 #是否显示默认时间戳</span><span class="token comment">#skip-networking                                                      #</span><span class="token key attr-name">max_connections</span> <span class="token punctuation">=</span> <span class="token value attr-value">500                                                 #该参数用来设置最大连接数，告诉你当前你的服务器允许多少并发连接。默认为100，一般设置为512-1000即可。请记住，太多的连接会导致内存的使用量过高并且会锁住你的 MySQL 服务器。一般小网站需要 100-200 的连接数，而较大可能需要 500-800 甚至更多。这里的值很大程度上取决于你 MySQL/MariaDB 的使用情况。</span><span class="token key attr-name">max_connect_errors</span> <span class="token punctuation">=</span> <span class="token value attr-value">100                                              #如果有时网络抽风，或者应用配置错误，或者其他原因导致客户端短时间内不断的尝试连接，客户端可能会被列入黑名单，然后将无法连接，直到再次刷新主机缓存。这个选项默认值太小了，可以考虑设的足够大（如果你的服务器配置够强大的话）。</span><span class="token key attr-name">open_files_limit</span> <span class="token punctuation">=</span> <span class="token value attr-value">65535                                              #mysql打开最大文件数</span>                                                                      <span class="token comment">#</span><span class="token key attr-name">log-bin</span><span class="token punctuation">=</span><span class="token value attr-value">mysql-bin                                                     #这些路径相对于datadir</span><span class="token key attr-name">binlog_format</span><span class="token punctuation">=</span><span class="token value attr-value">mixed                                                   #日志格式</span><span class="token key attr-name">server-id</span>   <span class="token punctuation">=</span> <span class="token value attr-value">1                                                       #给服务器分配一个独一无二的ID编号; n的取值范围是1~2的32次方启用二进制日志功能。在复制数据同步的时候会用到，Helloweba后面会有文章介绍。</span><span class="token key attr-name">expire_logs_days</span> <span class="token punctuation">=</span> <span class="token value attr-value">10                                                 #启用二进制日志后，保留日志的天数。服务器会自动清理指定天数前的日志文件，如果不设置则会导致服务器空间耗尽。一般设置为7～14天。</span>                                                                       <span class="token comment">#</span><span class="token key attr-name">default_storage_engine</span> <span class="token punctuation">=</span> <span class="token value attr-value">InnoDB                                     　#新数据表的默认存储引擎(默认设置是MyISAM)。这项设置还可以通过–default-table-type选项来设置。</span><span class="token key attr-name">innodb_file_per_table</span> <span class="token punctuation">=</span> <span class="token value attr-value">1                                             #提供了更灵活的方式，它把每个数据库的信息保存在一个 .ibd 数据文件中。每个 .idb 文件代表它自己的表空间。通过这样的方式可以更快地完成类似 “TRUNCATE” 的数据库操作，当删除或截断一个数据库表时，你也可以回收未使用的空间。这样配置的另一个好处是你可以将某些数据库表放在一个单独的存储设备。这可以大大提升你磁盘的 I/O 负载。</span><span class="token key attr-name">innodb_data_home_dir</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/mysql                             　　　　#InnoDB主目录，所有与InnoDB数据表有关的目录或文件路径都相对于这个路径。在默认的情况下，这个主目录就是MySQL的数据目录。</span><span class="token key attr-name">innodb_data_file_path</span> <span class="token punctuation">=</span> <span class="token value attr-value">ibdata1:10M:autoextend     　　　　　　　　　　　#用来容纳InnoDB为数据表的表空间: 可能涉及一个以上的文件; 每一个表空间文件的最大长度都必须以字节(B)、兆字节(MB)或千兆字节(GB)为单位给出; 表空间文件的名字必须以分号隔开; 最后一个表空间文件还可以带一个autoextend属性和一个最大长度(max:n)。</span><span class="token key attr-name">innodb_log_group_home_dir</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/mysql                     　　　　　　#用来存放InnoDB日志文件的目录路径(如ib_logfile0、ib_logfile1等)。在默认的情况下，InnoDB驱动程序将使用 MySQL数据目录作为自己保存日志文件的位置。</span><span class="token key attr-name">innodb_buffer_pool_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">256M                                     　　#这个参数是InnoDB存储引擎的核心参数，默认为128KB，这个参数要设置为物理内存的60%～70%。</span><span class="token key attr-name">innodb_log_file_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">64M                                            #事务日志文件写操作缓存区的最大长度(默认设置是1MB)。</span><span class="token key attr-name">innodb_log_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">8M                                           #事务日志所使用的缓存区。InnoDB在写事务日志的时候，为了提高性能，先将信息写入Innodb Log Buffer中，当满足innodb_flush_log_trx_commit参数所设置的相应条件（或者日志缓冲区写满）时，再将日志写到文件（或者同步到磁盘）中。可以通过innodb_log_buffer_size参数设置其可以使用的最大内存空间。默认是8MB，一般为16～64MB即可。</span><span class="token key attr-name">innodb_flush_log_at_trx_commit</span> <span class="token punctuation">=</span> <span class="token value attr-value">1                             　　　　#这个选项决定着什么时候把日志信息写入日志文件以及什么时候把这些文件物理地写(术语称为”同步”)到硬盘上。设置值0的意思是每隔一秒写一次日 志并进行 同步，这可以减少硬盘写操作次数，但可能造成数据丢失; 设置值1(设置设置)的意思是在每执行完一条COMMIT命令就写一次日志并进行同步，这可以防止数据丢失，但硬盘写操作可能会很频繁; 设置值2是一般折衷的办法，即每执行完一条COMMIT命令写一次日志，每隔一秒进行一次同步。</span><span class="token key attr-name">innodb_lock_wait_timeout</span> <span class="token punctuation">=</span> <span class="token value attr-value">50                                         #如果某个事务在等待n秒(s)后还没有获得所需要的资源，就使用ROLLBACK命令放弃这个事务。这项设置对于发现和处理未能被InnoDB数据表驱动 程序识别出来的死锁条件有着重要的意义。这个选项的默认设置是50s。</span>                                                                      <span class="token comment">#</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">mysqldump</span><span class="token punctuation">]</span></span>                                                           #quick                                                                 #<span class="token key attr-name">max_allowed_packet</span> <span class="token punctuation">=</span> <span class="token value attr-value">16M                                              #</span>                                                                                <span class="token comment">#</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">mysql</span><span class="token punctuation">]</span></span>                                                               #no-auto-rehash                                                        #                                                                      <span class="token comment">#</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">myisamchk</span><span class="token punctuation">]</span></span>                                                           #<span class="token key attr-name">key_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">64M                                                 #</span>  <span class="token key attr-name">sort_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">1M                                                 #</span>  <span class="token key attr-name">read_buffer</span> <span class="token punctuation">=</span> <span class="token value attr-value">2M                                                      #</span><span class="token key attr-name">write_buffer</span> <span class="token punctuation">=</span> <span class="token value attr-value">2M                                                     #</span>                                                                      <span class="token comment">#</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">mysqlhotcopy</span><span class="token punctuation">]</span></span>                                                        #interactive-timeout                                                   #<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、mysql数据库索引案例（百万量级）"><a href="#2、mysql数据库索引案例（百万量级）" class="headerlink" title="2、mysql数据库索引案例（百万量级）"></a>2、mysql数据库索引案例（百万量级）</h3><p> [client]                   </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">port    <span class="token operator">=</span><span class="token number">3306</span>                                  socket    <span class="token operator">=</span><span class="token operator">/</span>tmp<span class="token operator">/</span>mysql<span class="token punctuation">.</span>sock                        <span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>                                                                             port        <span class="token operator">=</span> <span class="token number">3306</span>                                                         socket      <span class="token operator">=</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>mysql<span class="token punctuation">.</span>sock                                   <span class="token keyword">user</span>    <span class="token operator">=</span> mysql  server_id　　<span class="token operator">=</span> <span class="token number">10</span>datadir　　<span class="token operator">=</span> <span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>mysql<span class="token operator">/</span>old_passwords　　<span class="token operator">=</span> <span class="token number">1</span>lower_case_table_names　　<span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">character</span><span class="token operator">-</span><span class="token keyword">set</span><span class="token operator">-</span>server　　<span class="token operator">=</span> utf8<span class="token keyword">default</span><span class="token operator">-</span>storage<span class="token operator">-</span><span class="token keyword">engine</span>　　<span class="token operator">=</span> MYISAMlog<span class="token operator">-</span>bin　　<span class="token operator">=</span> bin<span class="token punctuation">.</span>loglog<span class="token operator">-</span>error　　<span class="token operator">=</span> error<span class="token punctuation">.</span>logpid<span class="token operator">-</span><span class="token keyword">file</span>　　<span class="token operator">=</span> mysql<span class="token punctuation">.</span>pidlong_query_time　　<span class="token operator">=</span> <span class="token number">2</span>slow_query_time　　<span class="token operator">=</span> <span class="token number">2</span>slow_query_log　slow_query_log_file　　<span class="token operator">=</span> slow<span class="token punctuation">.</span>logbinlog_cache_size　　<span class="token operator">=</span> <span class="token number">4</span>MBbinlog_format　　<span class="token operator">=</span> mixedmax_binlog_cache_size　　<span class="token operator">=</span> <span class="token number">16</span>MBmax_binlog_size　　<span class="token operator">=</span> <span class="token number">1</span>GBexpire_logs_days　　<span class="token operator">=</span> <span class="token number">30</span>ft_min_word_len　　<span class="token operator">=</span> <span class="token number">4</span>back_log　　<span class="token operator">=</span> <span class="token number">512</span>max_allowed_packet　　<span class="token operator">=</span> <span class="token number">64</span>MBmax_connections　　<span class="token operator">=</span> <span class="token number">4096</span>max_connect_errors　　<span class="token operator">=</span> <span class="token number">100</span>join_buffer_size　　<span class="token operator">=</span> <span class="token number">2</span>MBread_buffer_size　　<span class="token operator">=</span> <span class="token number">2</span>MBread_rnd_buffer_size　　<span class="token operator">=</span> <span class="token number">2</span>MBsort_buffer_size　　　　<span class="token operator">=</span> <span class="token number">2</span>MBquery_cache_size　　<span class="token operator">=</span> <span class="token number">2</span>MBtable_open_cache　　<span class="token operator">=</span> <span class="token number">10000</span>thread_cache_size　　<span class="token operator">=</span> <span class="token number">256</span>max_heap_table_size　　<span class="token operator">=</span> <span class="token number">64</span>MBtmp_table_size　　<span class="token operator">=</span> <span class="token number">64</span>MBthread_stack　　<span class="token operator">=</span> <span class="token number">192</span>KBthread_concurrency　　<span class="token operator">=</span> <span class="token number">24</span><span class="token keyword">local</span><span class="token operator">-</span><span class="token keyword">infile</span>　　<span class="token operator">=</span> <span class="token number">0</span>skip<span class="token operator">-</span><span class="token keyword">show</span><span class="token operator">-</span><span class="token keyword">database</span>skip<span class="token operator">-</span>name<span class="token operator">-</span>resolveskip<span class="token operator">-</span>external<span class="token operator">-</span>lockingconnect_timeout　　<span class="token operator">=</span> <span class="token number">600</span>interactive_timeout　　<span class="token operator">=</span> <span class="token number">600</span>wait_timeout　　<span class="token operator">=</span> <span class="token number">600</span><span class="token comment">#MyISAM</span>key_buffer_size　　<span class="token operator">=</span> <span class="token number">512</span>MBbulk_insert_buffer_size　　<span class="token operator">=</span> <span class="token number">64</span>MBmysiam_sort_buffer_size　　<span class="token operator">=</span> <span class="token number">64</span>MBmysiam_max_sort_file_size　　<span class="token operator">=</span> <span class="token number">1</span>GBmysiam_repair_threads　　<span class="token operator">=</span> <span class="token number">1</span>concurrent_insert　　<span class="token operator">=</span> <span class="token number">2</span>myisam_recover<span class="token comment">#INNODB</span>innodb_buffer_pool_size　　<span class="token operator">=</span> <span class="token number">64</span>Ginnodb_additional_mem_pool_size　　<span class="token operator">=</span> <span class="token number">32</span>MBinnodb_data_file_path　　<span class="token operator">=</span>　ibdata1:<span class="token number">1</span>G<span class="token punctuation">;</span>ibdata2:<span class="token number">1</span>G:autoextendinnodb_read_io_threads　　<span class="token operator">=</span> <span class="token number">8</span>innodb_write_io_threads 　　<span class="token operator">=</span> <span class="token number">8</span>innodb_file_per_table　　<span class="token operator">=</span> <span class="token number">1</span>innodb_flush_log_at_thx_commit　　<span class="token operator">=</span> <span class="token number">2</span>innodb_lock_wait_timeout　　<span class="token operator">=</span> <span class="token number">120</span>innodb_log_buffer_size　　<span class="token operator">=</span> <span class="token number">8</span>MBinnodb_log_file_size　　<span class="token operator">=</span> <span class="token number">256</span>MBinnodb_log_files_in_group　　<span class="token operator">=</span> <span class="token number">3</span>innodb_max_dirty_pages_pct　　<span class="token operator">=</span> <span class="token number">90</span>innodb_thread_concurrency　　<span class="token operator">=</span> <span class="token number">16</span>innodb_open_files　　<span class="token operator">=</span> <span class="token number">10000</span><span class="token comment">#innodb_force_recovery　　= 4</span><span class="token comment">#replication slave</span><span class="token keyword">read</span><span class="token operator">-</span>only<span class="token comment">#skip-salve-start</span>relay<span class="token operator">-</span>log　　<span class="token operator">=</span> relay<span class="token punctuation">.</span>loglog<span class="token operator">-</span>slave<span class="token operator">-</span>updates<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本文参考：</p><p><a href="https://www.centos.bz/2018/02/mariadb-mysql%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6my-cnf%E8%A7%A3%E8%AF%BB/">mariadb-mysql配置文件my-cnf解读</a></p><p><a href="http://c.biancheng.net/mysql/">MySQL教程</a> </p><p>《曝光：Linux企业运维实战》</p><p>夜法之书 整理编辑 <strong>From:</strong> <a href="https://www.cnblogs.com/zhangxingeng/p/10882845.html">zhangxingeng</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、初始化等&quot;&gt;&lt;a href=&quot;#一、初始化等&quot; class=&quot;headerlink&quot; title=&quot;一、初始化等&quot;&gt;&lt;/a&gt;一、初始化等&lt;/h2&gt;&lt;h3 id=&quot;1、登陆数据库方法&quot;&gt;&lt;a href=&quot;#1、登陆数据库方法&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="mysql" scheme="https://blog.17lai.fun/categories/mysql/"/>
    
    
    <category term="Linux" scheme="https://blog.17lai.fun/tags/Linux/"/>
    
    <category term="Docker" scheme="https://blog.17lai.fun/tags/Docker/"/>
    
    <category term="MySql" scheme="https://blog.17lai.fun/tags/MySql/"/>
    
    <category term="Mariadb" scheme="https://blog.17lai.fun/tags/Mariadb/"/>
    
    <category term="技巧" scheme="https://blog.17lai.fun/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>【Gitlab】GitBook+GitLab撰写发布技术文档-Part2:GitLab篇</title>
    <link href="https://blog.17lai.fun/gitbook/2021-09-07-gitbook-gitlab-write-and-publish-technical-documentation-part2-gitlab/"/>
    <id>https://blog.17lai.fun/gitbook/2021-09-07-gitbook-gitlab-write-and-publish-technical-documentation-part2-gitlab/</id>
    <published>2021-09-07T11:25:00.000Z</published>
    <updated>2021-09-13T12:20:55.727Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章介绍了如果用 gitbook 写书，并且我们已经通过 <code>gitbook build</code>命令把书的内容打包成 HTML 格式发布到了<code>_book</code>文件夹中。<br>接下来这篇文章将向大家介绍如何把写好的书发布到 gitlab 上。这里 gitlab 是我们自己搭建在公司内网中的，不过要用到的原理其实都是一样的，就是利用其 CI/CD 功能。<br>关于 CI/CD 网上有很多详细的介绍，这里我就不不再重复啰嗦，如果有想学习的可以参看文末的致谢&amp;引用部分。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>简单来说CI 就类似一个触发器，你可以设定响应触发的条件，比如 master 分支有新的 commit合并进来，或者带有特殊 tag 的合并，亦或者其他指定分支的特殊提交，可以触发指定的指令。<br>一般来说标准的流程是3步，打包(build)、测试(test)和发布(deploy)。也就是我们只需要把源码提交上以后，CI 可以帮我们完成自动化部署工作。<br>考虑到我们在用 gitbook 写书的过程中需要预览时，其实已经在做build 和 test 的工作了，所以我们只需要在代码传到 gitlab 上后，让服务器帮我们执行发布的工作。<br>所以前提是我们搭建好了一个web 服务，然后 CI 帮我们把打包好的内容部署到相应的网站目录中就好了。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>我们就按照原理，来一步一步尝试着完成工作吧。</p><h2 id="CI配置"><a href="#CI配置" class="headerlink" title="CI配置"></a>CI配置</h2><p>还记得我们上一篇文章中最后介绍目录结构时，有提到一个文件： <code>gitlab-ci.yml</code>。 这个文件是用YAML 进行配置，我们来看一下我们要用到的配置文件吧</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">stage</span><span class="token punctuation">:</span> deploy  <span class="token key atrule">script</span><span class="token punctuation">:</span>    <span class="token comment"># make backup</span>    <span class="token punctuation">-</span> sudo rm <span class="token punctuation">-</span>rf /usr/share/nginx/html/TechDocs/example_bak    <span class="token punctuation">-</span> sudo mv /usr/share/nginx/html/TechDocs/example /usr/share/nginx/html/TechDocs/example_bak    <span class="token punctuation">-</span> sudo mkdir /usr/share/nginx/html/TechDocs/example    <span class="token comment"># deploy latest files</span>    <span class="token punctuation">-</span> cd _book    <span class="token punctuation">-</span> sudo cp <span class="token punctuation">-</span>rf . /usr/share/nginx/html/TechDocs/example/  <span class="token key atrule">only</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> master <span class="token comment"># this job will affect only the 'master' branch</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段 yaml 配置就只有deploy 的步骤，我们在 <code>script</code>部分进行了一系列的操作，完成旧文件的备份以及新文件的部署。当我们的代码上传到远端后，就会自动执行 script 里的内容了。让我们尝试下吧。</p><h2 id="查看-CI-任务执行状态"><a href="#查看-CI-任务执行状态" class="headerlink" title="查看 CI 任务执行状态"></a>查看 CI 任务执行状态</h2><p>上传代码到 gitlab 的步骤这里就不介绍了。理论上说，当代码上传到 master 分支后，会自动执行我们设定好的部署任务。我们可以通过访问gitlab对应项目的页面， 在左侧菜单栏点击<code>CI/CD</code>来查看任务的执行情况。<br>但是如果你和我一样是第一次处理 CI 任务，我们会得到下面的提示：</p><p><a href="http://www.microwu.com/MichaelLee/20190116/1.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907192617.png" alt="img"></a></p><p>原因页面上也给出了我们提示<code>This job is waiting to be picked by a runner</code>。</p><h2 id="Runner"><a href="#Runner" class="headerlink" title="Runner"></a>Runner</h2><p>这里就需要引入第2个概念： runner。很容易从字面上理解，runner 就是我们任务的执行者，也很形象，我们提交了一个任务以后，总得有人来执行。这些任务有些是需要shell 脚本执行，有些可能需要登录到远程机器，有些可能需要 docker 的执行权限，所以这些执行者也都有个子的分工，可能有些执行者只负责执行特定项目的任务，有些执行者执行特殊 tag 的。所以接下来我们看看如何才能创建 runner 吧。</p><h3 id="shared-runner"><a href="#shared-runner" class="headerlink" title="shared runner"></a>shared runner</h3><p>前文提到了我们可能需要一些高权限的 runner 来跨项目间来执行任务。因为我们要做的是多个项目的技术文档，所以会有多个 gitbook 的项目，那这些项目的 CI 任务自然是公用1个 runner 就好，这种 runner 就叫做 shared runner。<br>shared runner 的创建需要我们用管理员的帐号登录gitlab 页面，在 admin area 区域，点击 runner 来根据提示创建。</p><p><a href="http://www.microwu.com/MichaelLee/20190116/2.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907192622.png" alt="img"></a></p><p>这个页面会显示当前所有的 runner，包括项目独享的 runner 和共享的 shared runner。 我们看到目前还没有一个可用的 runner，所以之前的任务才会停留在等待 runner 来运行的状态。<br>我们就根据页面的提示来创建 runner 吧。</p><p><a href="http://www.microwu.com/MichaelLee/20190116/3.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907192629.png" alt="img"></a></p><h3 id="安装-gitlab-runner-工具"><a href="#安装-gitlab-runner-工具" class="headerlink" title="安装 gitlab-runner 工具"></a>安装 gitlab-runner 工具</h3><p>第一步是安装工具，可以通过页面上的提示来进行不同主机环境的安装。我们这里用到的是 RHEL/CentOS，其他版本可以参见页面链接。<br>我们登录到自建 gitlab 所在的主机，然后执行以下脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">wget</span> -O /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64$ <span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/gitlab-runner$ <span class="token function">sudo</span> <span class="token function">useradd</span> --comment <span class="token string">'GitLab Runner'</span> --create-home gitlab-runner --shell /bin/bash$ <span class="token function">sudo</span> gitlab-runner <span class="token function">install</span> --user<span class="token operator">=</span>gitlab-runner --working-directory<span class="token operator">=</span>/home/gitlab-runner$ <span class="token function">sudo</span> gitlab-runner start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建-shared-runner"><a href="#新建-shared-runner" class="headerlink" title="新建 shared runner"></a>新建 shared runner</h3><p>工具安装好了之后，我们就可以来创建用户了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gitlab-runner register<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后按照提示，一步一步创建就好了：</p><ol><li>输入URL</li><li>输入token。 URL 和 token 按照页面上给出的提示来创建就好了。token 用来标识创建的 runner 是某个项目特有的，还是 shared runner</li><li>输入 runner 的描述，这个可以随便填写，只要自己能看明白，能区分就好了</li><li>输入特定的 tag。 <strong>注意</strong>，这里最好留空，否则该 runner 仅会执行特定 tag 的提交</li><li>选择执行类型。这里提供了很多常见的执行类型，例如 docker, docker-ssh, shell 等，我们这里输入 shell。</li></ol><p><a href="http://www.microwu.com/MichaelLee/20190116/7.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907192642.png" alt="img"></a></p><p>之后我们就创建好了一个可以执行 shell 命令的 shared runner。再次回到之前的 web 页面上查看我们创建的 runner 信息。</p><p><a href="http://www.microwu.com/MichaelLee/20190116/4.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907192643.png" alt="img"></a></p><p>可以看到页面提示我们已经创建了一个 runner 可以执行<code>all unassigned projects</code>的任务</p><p><a href="http://www.microwu.com/MichaelLee/20190116/5.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907192655.png" alt="img"></a></p><p>我们还可以进入到特定的项目，在设置里面查看 runner 的情况，可以看到已经有一个可用的 shared runner。如果想创建该项目特有的 runner，按照页面上的提示，输入特定的 token 就好了。</p><p><a href="http://www.microwu.com/MichaelLee/20190116/6.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907192654.png" alt="img"></a></p><h3 id="其他细节"><a href="#其他细节" class="headerlink" title="其他细节"></a>其他细节</h3><p>我们重新查看CI任务页面，大多数情况下，你的任务状态会是<code>failed</code>或者<code>pendding</code>。 如果是 failed，我们可以点击查看具体失败的原因，例如我遇到的问题就是 gitlab-runner 用户没有 sudo 权限。<br>如果是 pendding，通常情况下是你的 job 没有合适的 runner 来执行，例如指定了分支或者添加了 tag 导致没有 runner 可用。</p><hr><p>如果一切都设置妥当，我们可以看到 CI 页面任务的最终状态是 passed，也就是成功执行了。这样，gitbook 的内容就成功部署到你的 web 页面上了。</p><h1 id="致谢-amp-引用"><a href="#致谢-amp-引用" class="headerlink" title="致谢&amp;引用"></a>致谢&amp;引用</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/41330476">基于 GitLab 的 CI 实践(https://zhuanlan.zhihu.com/p/41330476)</a></li><li><a href="https://medium.com/@mvpdw06/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-gitlab-ci-ebf0b68ce24b">如何使用 GitLab CI(https://medium.com/@mvpdw06/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-gitlab-ci-ebf0b68ce24b)</a></li><li><a href="https://docs.gitlab.com/ee/ci/runners/">Configuring GitLab Runners(https://docs.gitlab.com/ee/ci/runners/)</a></li><li><a href="https://docs.gitlab.com/runner/register/">Registering Runners(https://docs.gitlab.com/runner/register/)</a></li><li><a href="https://xiaosuiba.github.io/Gitbook-CI-With-Gitlab/">Gitbook CI With Gitlab(https://xiaosuiba.github.io/Gitbook-CI-With-Gitlab/)</a></li><li><a href="https://www.kenming.idv.tw/simple-create-gitbook_at_gitlab_steps/">在 Gitlab 平台簡單創建 GitBook 電子書的步驟(https://www.kenming.idv.tw/simple-create-gitbook_at_gitlab_steps/)</a></li><li><a href="https://getpublii.com/docs/host-static-website-gitlab-pages.html">How to create a static website using GitLab Pages(https://getpublii.com/docs/host-static-website-gitlab-pages.html)</a></li><li><a href="https://docs.gitlab.com/runner/install/linux-manually.html">Install GitLab Runner manually on GNU/Linux(https://docs.gitlab.com/runner/install/linux-manually.html)</a></li></ul><p>From: <a href="http://lipeng1667.github.io/2019/01/15/public-doc-with-gitlab-ci-writing-with-gitbook/">lipeng1667</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上一篇文章介绍了如果用 gitbook 写书，并且我们已经通过 &lt;code&gt;gitbook build&lt;/code&gt;命令把书的内容打包成 HTML 格式发布到了&lt;code&gt;_book&lt;/code&gt;文件夹中。&lt;br&gt;接下来这篇文章将向大家介绍如何把写好的书发布到 gitlab</summary>
      
    
    
    
    <category term="gitbook" scheme="https://blog.17lai.fun/categories/gitbook/"/>
    
    
    <category term="Git" scheme="https://blog.17lai.fun/tags/Git/"/>
    
    <category term="linux" scheme="https://blog.17lai.fun/tags/linux/"/>
    
    <category term="GitBook" scheme="https://blog.17lai.fun/tags/GitBook/"/>
    
  </entry>
  
  <entry>
    <title>【Gitbook】GitBook+GitLab撰写发布技术文档-Part1:GitBook篇</title>
    <link href="https://blog.17lai.fun/gitbook/2021-09-07-gitbook-gitlab-write-and-publish-technical-documents-part1-gitbook-chapter/"/>
    <id>https://blog.17lai.fun/gitbook/2021-09-07-gitbook-gitlab-write-and-publish-technical-documents-part1-gitbook-chapter/</id>
    <published>2021-09-07T01:25:00.000Z</published>
    <updated>2021-09-13T12:21:07.579Z</updated>
    
    <content type="html"><![CDATA[<p>随着工作时间越来越久，项目越做越多，很多时候，手里面的技术文档都是零散的技术点。最近一直在着手把项目的技术开发文档(Technical Document)系统地整理一下。正好看到了非常棒的 GitBook 工具，又顺带研究了如何借助 Gitlab 的 CI/CD 功能实现自动部署。<br>正好开个简短的教程，介绍一下 <code>GitBook</code> + <code>GitLab</code>怎样来撰写并发布文档。<br>第一部分先来介绍一下 GitBook。</p><h1 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h1><p>惯例列出来我们的环境以及用到的工具。</p><ul><li>MacOS 10.12</li><li>Node.js (版本 &gt; 4.0.0)</li><li>Atom/MWebLite</li></ul><p>其实 Gitbook 有官方的编辑器，但是似乎对中文的支持不是很好，而且会有 bug，虽然最新版本做了优化，Mardown 格式的文字有些会自动显示成最终样式，而我个人还是比较喜欢原生的 markdown，所以我个人就没有用官方的编辑器。<br>如果读者注册了 gitbook，并且打算文章都发布到 gitbook 官网上的话，还是建议可以使用官方的编辑器。因为我的目标是发布到公司内网的 gitlab 上，所以这里就用 atom 或者 MWebLite 来编写文档。<br>其实这篇文章过后，大家对 Gitbook 的工作机制就很清楚了，完全可以自由地创作了。</p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装过程非常简单</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> gitbook-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="新建book"><a href="#新建book" class="headerlink" title="新建book"></a>新建book</h2><p>安装成功后，我们就可以开始用gitbook 的命令来进行各种操作了。如果熟悉<code>hexo</code>的同学会发现，其实大同小异，只不过一个用来写blog，一个用来写 book。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> myBook$ <span class="token builtin class-name">cd</span> myBook$ gitbook init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>初始化后，我们能在<code>myBook</code>目录下看到两个 markdown 文f件。这两个文件就是我们写一本书唯二必须要用的文件了。</p><p><a href="http://www.microwu.com/MichaelLee/20190114/1.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907191936.png" alt="img"></a></p><h2 id="预览book"><a href="#预览book" class="headerlink" title="预览book"></a>预览book</h2><p>先不做任何变动，模拟一下我们发布之后的页面的成品吧。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gitbook serve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="http://www.microwu.com/MichaelLee/20190114/2.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907191946.png" alt="img"></a></p><p>我们打开浏览器，在浏览器中输入<code>0.0.0.0:4000</code>就可以在本地预览了。</p><p><a href="http://www.microwu.com/MichaelLee/20190114/3.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907191948.png" alt="img"></a></p><p>可以看到，左侧是我们的菜单栏，自带一个搜索栏，右侧就是我们的 book 的内容了，右上角有默认的诸如 twitter,facebook 等分享快捷方式。基本上和其他人用 gitbook 写出来的页面是一样的。</p><blockquote><p>注：</p><ol><li>gitbook 新版本提供了本地预览功能的热更新，也就是说本地预览的页面会随着我们写书的内容变化而自动更新，这着实是一个很使用的功能。</li><li>在命令行ctrl+c可以关闭本地服务器，即预览页面。</li></ol></blockquote><p>我们可以尝试修改一下书的内容，看一下页面的变化。打开<code>README.md</code>文件，修改成如下内容：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> Introduction</span> Hello World!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再回头看一眼我们的预览页面，是不是自动变成了下面的样子。</p><p><a href="http://www.microwu.com/MichaelLee/20190114/4.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907192001.png" alt="img"></a></p><p>关于 gitbook 自建的 README.md 文件我就不做过多的介绍了，都是一些 Markdown 的基本语法，相信使用 gitbook 的各位一定是对 markdown 语法非常熟悉的了。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>现在我们把注意力放到 gitbook 为我们创建的第二个文件<code>SUMMARY.md</code>上，这个文件决定了我们的目录结构。 一个比较简单的目录结构如下：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> Summary</span> <span class="token list punctuation">*</span> <span class="token url">[<span class="token content">前言</span>](<span class="token url">README.md</span>)</span><span class="token list punctuation">*</span> <span class="token url">[<span class="token content">第一章</span>](<span class="token url">xx.md</span>)</span><span class="token list punctuation">*</span> <span class="token url">[<span class="token content">第二章</span>](<span class="token url">xx.md</span>)</span><span class="token list punctuation">*</span> <span class="token url">[<span class="token content">第三章</span>](<span class="token url">xx.md</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>xx.md</code>就是我们每个章节独立的 markdown 文件，所以用 gitbook 写一本书真的非常方便，一个目录文件，和若干个你的书的内容就好了。</p><p><a href="http://www.microwu.com/MichaelLee/20190114/5.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907192009.png" alt="img"></a></p><h3 id="目录分层"><a href="#目录分层" class="headerlink" title="目录分层"></a>目录分层</h3><p>简单的目录有一个小的问题就是我们目录都只有一级，如果想要分层，比如第一章有1，2，3个小节，该怎么办呢？ 这里有两种方式：</p><h4 id="标题区分"><a href="#标题区分" class="headerlink" title="标题区分"></a>标题区分</h4><p>我们把<code>SUMMARY.md</code>文件修改成如下内容</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> Summary</span> <span class="token title important"><span class="token punctuation">##</span> 前言</span><span class="token list punctuation">*</span> <span class="token url">[<span class="token content">前言</span>](<span class="token url">README.md</span>)</span> <span class="token title important"><span class="token punctuation">##</span> 第一章</span><span class="token list punctuation">*</span> [1.1小节]()<span class="token list punctuation">*</span> [1.2小节]() <span class="token title important"><span class="token punctuation">##</span> 第二章</span><span class="token list punctuation">*</span> [2.1小节]()<span class="token list punctuation">*</span> [2.2小节]() <span class="token title important"><span class="token punctuation">##</span> 第三章</span><span class="token list punctuation">*</span> [3.1小节]()<span class="token list punctuation">*</span> [3.2小节]()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终的样式如下：</p><p><a href="http://www.microwu.com/MichaelLee/20190114/6.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907192025.png" alt="img"></a></p><h4 id="缩进区分"><a href="#缩进区分" class="headerlink" title="缩进区分"></a>缩进区分</h4><p>我们还可以用缩进的方式对目录进行级别的区分</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> Summary</span> <span class="token list punctuation">*</span> <span class="token url">[<span class="token content">前言</span>](<span class="token url">README.md</span>)</span><span class="token list punctuation">*</span> [第一章]()    <span class="token list punctuation">*</span> [1.1小节]()    <span class="token list punctuation">*</span> [1.2小节]()<span class="token list punctuation">*</span> [第二章]()    <span class="token list punctuation">*</span> [2.1小节]()    <span class="token list punctuation">*</span> [2.2小节]()<span class="token list punctuation">*</span> [第三章]()    <span class="token list punctuation">*</span> [3.1小节]()    <span class="token list punctuation">*</span> [3.2小节]()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终的样式如下：</p><p><a href="http://www.microwu.com/MichaelLee/20190114/7.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907192039.png" alt="img"></a></p><p>大家可以根据自己的喜好选择不同的样式，也可以把这两者结合起来一起用，as you wish.</p><h2 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h2><p>通过预览模式，我们可以随时掌握书籍的更新内容。当你完成了部分章节或者全书的编写后，我们需要把写好的内容打包并发布。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gitbook build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行完上面的命令后，我们会发现在根目录下出现了<code>_build</code>文件夹，里面的文件就是我们需要发布的内容，你可以把所有的内容放到你的网站目录下，或者 gitlab/github 的 page页面，就实现了 gitbook 的线上发布了~</p><h1 id="进阶技巧"><a href="#进阶技巧" class="headerlink" title="进阶技巧"></a>进阶技巧</h1><p>看完上面的章节，你已经可以独立完成一本书的编写和发布，接下来的章节，我们提供一些进阶的技巧，你可以安装一些插件、更直观地规划你的目录结构等等。</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>和众多开源的软件一样，gitbook 也有一些插件，这些插件可以让你的书更加完美。这里我仅附上我个人觉得比较有用的几个插件，更多的插件，可以访问<a href="https://plugins.gitbook.com/">社区</a>来获取。<br>插件的引入和修改都是在配置文件中完成的，那我们可以在根目录下创建<code>book.json</code>文件来修改当前书的一些配置，因为是 json 格式的，所以诸如书的标题、作者、内容等都可以在配置文件中完成，我们重点来说插件。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>     <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token string">"-lunr"</span><span class="token punctuation">,</span>          <span class="token string">"-search"</span><span class="token punctuation">,</span>          <span class="token string">"search-plus"</span><span class="token punctuation">,</span>          <span class="token string">"splitter"</span><span class="token punctuation">,</span>          <span class="token string">"copy-code-button"</span><span class="token punctuation">,</span>          <span class="token string">"expandable-chapters-small"</span>     <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上是我的<code>book.json</code>配置文件，只有一个关于插件的配置项，其实总共就4个</p><ul><li>search-plus 让搜索支持中文，注意需要先把默认的两个插件<code>lunr</code>和<code>serach</code>禁用掉，禁用的方式就是在前面加上<code>-</code>号</li><li>spliter 菜单栏宽度可调节</li><li>copy-code-button 代码可以一键 copy</li><li>expandable-chapters-small 菜单栏可以折叠</li></ul><blockquote><p>注：<br>如果引入了新的插件，需要通过<code>gitbook install</code> 命令来安装新的插件，否则在打包发布的时候会提示错误。</p></blockquote><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>一个基本的目录结构是这样的</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">.├── _book/├── book.json├── README.md├── SUMMARY.md├── xx1.md├── xx2.md├── xx3.md├── xx4.md├── ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过为了我们自己方便，个人建议的目录结构如下</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">.├── _book/├── node_modules/├── .gitlab-ci.yml├── book.json├── SUMMARY.md├── content/|   ├── chapter1/|       ├── README.md|       └── something.md|   ├── chapter2/|       ├── README.md|       └── something.md├── res/|   ├── 1.png|   └── 2.jpg|   └── 3.jpeg|   └── ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li><code>_book</code> 目录是我们打包后要发布的文件目录</li><li><code>node_modules</code> 目录是我们安装插件后默认生成的目录</li><li><code>.gitlab-ci.yml</code>这个是 gitlab 要用的 ci 配置文件，下一章节我们马上就会用到</li><li><code>book.json</code> 是我们的配置文件</li><li><code>content</code>目录是我们的书的内容，所有章节都可以分类继续整理，方便自己查看</li><li><code>res</code>目录是我们要用到的一些图片资源文件夹，除了用到床图，我们可以把其他本地图片资源也包含进来</li></ul><h1 id="参考-amp-致谢"><a href="#参考-amp-致谢" class="headerlink" title="参考&amp;致谢"></a>参考&amp;致谢</h1><ul><li><a href="https://gitbook.zhangjikai.com/">Gitbook 简要介绍</a></li><li><a href="https://yangjh.oschina.io/gitbook/">GitBook 学习笔记</a></li></ul><p>From: <a href="http://lipeng1667.github.io/2019/01/15/how-to-write-techdoc-with-gitbook/">lipeng1667</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;随着工作时间越来越久，项目越做越多，很多时候，手里面的技术文档都是零散的技术点。最近一直在着手把项目的技术开发文档(Technical Document)系统地整理一下。正好看到了非常棒的 GitBook 工具，又顺带研究了如何借助 Gitlab 的 CI/CD 功能实现自</summary>
      
    
    
    
    <category term="gitbook" scheme="https://blog.17lai.fun/categories/gitbook/"/>
    
    
    <category term="Git" scheme="https://blog.17lai.fun/tags/Git/"/>
    
    <category term="linux" scheme="https://blog.17lai.fun/tags/linux/"/>
    
    <category term="GitBook" scheme="https://blog.17lai.fun/tags/GitBook/"/>
    
  </entry>
  
  <entry>
    <title>通过宝塔面板实现MySQL性能简单调优</title>
    <link href="https://blog.17lai.fun/mysql/2021-09-06-simple-tuning-of-mysql-performance-through-the-pagoda-panel/"/>
    <id>https://blog.17lai.fun/mysql/2021-09-06-simple-tuning-of-mysql-performance-through-the-pagoda-panel/</id>
    <published>2021-09-06T08:25:00.000Z</published>
    <updated>2021-09-13T12:20:45.686Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>  在PHP+MYSQL架构网站运行过程中，往往会遇到各种性能问题影响，如MySQL、PHP、CPU、磁盘IO、缓存等，其中MySQL瓶颈就是最常见也最难解决的一种影响网站性能的因素；通常，我们会使用redis、memcached等缓存软件来缓存内容，这确实是最优的解决方案之一，但这需要网站程序的支持，然而多数常用网站程序并不支持或者不能完美支持这些缓存软件，今天我们就来谈谈如何通过MySQL自身的配置调整来优化MySQL性能，以缓解MySQL瓶颈问题。</p></blockquote><h2 id="准备："><a href="#准备：" class="headerlink" title="准备："></a><strong>准备：</strong></h2><blockquote><p>​    1、宝塔Linux面板 正式版 5.2.0+ (2017/09/20发布)  测试版5.2.4+ </p><p>​    2、MySQL 5.x</p></blockquote><h3 id="通常MySQL调优我们分以下几部分："><a href="#通常MySQL调优我们分以下几部分：" class="headerlink" title="通常MySQL调优我们分以下几部分："></a><strong>通常MySQL调优我们分以下几部分：</strong></h3><blockquote><p>​    1、MySQL配置参数调优 (需要根据网站运行情况调整) </p><p>​    2、数据表索引调优 (效果明显，但通常优秀的开源程序都不需要调整) </p><p>​    3、SQL语句调优 (这是程序员或DBA干的事)</p></blockquote><p>今天我们主要谈谈如果配合宝塔面板的新功能来进行MySQL配置参数调优，我们先来看两张图片：</p><p>(图1)</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/2720210827205902.png"></p><p>(图2)</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/2720210827205906.png"></p><p>很明显，(图1)显示的是MySQL当前的运行状态，(图2)显示的是MySQL主要配置参数</p><p>下面我们就来解读一下这两张图：</p><h3 id="1、活动-峰值连接数"><a href="#1、活动-峰值连接数" class="headerlink" title="1、活动/峰值连接数"></a><strong>1、活动/峰值连接数</strong></h3><p>​      (图1)中当前活动的连接为1个，自MySQL服务启动以来，最高连接数为54；当最高连接数接近或等于(图2)中的max_connections时，应适当增加max_connections，需要注意的是，不要一下子增加过多，建议每次增加50，观察一段时间，不够再继续增加。</p><h3 id="2、线程缓存命中率"><a href="#2、线程缓存命中率" class="headerlink" title="2、线程缓存命中率"></a><strong>2、线程缓存命中率</strong></h3><p>​      (图1)中线程缓存命中率为99.78%，若这个值小于90%，建议适当增加(图2)中的thread_cache_size，建议每次增加8。</p><h3 id="3、索引命中率"><a href="#3、索引命中率" class="headerlink" title="3、索引命中率"></a><strong>3、索引命中率</strong></h3><p>​      (图1)中索引命中率为99.50%，若这个值小于95%，建议适当增加(图2)中的key_buffer_size，建议每次增加64，需要说明的是，若您的数据库使用的是Innodb引擎，可忽略这个选项</p><p><strong>4、Innodb索引命中率</strong><br>      (图1)中Innodb索引命中率为100%，若这个值小于95%，建议适当增加(图2)中的innodb_buffer_pool_size，建议每次增加64，需要说明的是，若您的数据库没有使用Innodb引擎，可忽略这个选项</p><h3 id="5、查询缓存命中率"><a href="#5、查询缓存命中率" class="headerlink" title="5、查询缓存命中率"></a><strong>5、查询缓存命中率</strong></h3><p>​      MySQL查询缓存是个比较受争议的功能，个人建议当你有在使用redis、memcached等缓存软件时，在(图2)中将query_cache_size设为0可以将其关闭，当你没有使用缓存软件，有多余的内存使用，且数据库瓶颈明显存在时，可以尝试开启查询缓存，这是个非常依赖数据表结构及SQL语句优化的功能，若数据表结构和SQL语句都针对查询缓存进行过优化，它的效果还是很不错的。</p><h3 id="6、创建临时表到磁盘"><a href="#6、创建临时表到磁盘" class="headerlink" title="6、创建临时表到磁盘"></a><strong>6、创建临时表到磁盘</strong></h3><p>​      (图1)中创建临时表到磁盘的比例是0.42%，这说明大部分临时表创建到内存了，不会过多增加磁盘IO的开销，建议，当比例大于2%时适当增加(图1)中的tmp_cache_size，建议每次增加32，当比例大于60%时，放弃吧，有些开源程序并没有专门优化过SQL语句，所以在运行过程中会开启大量临时表，加多少缓存都是不够用的。</p><h3 id="7、已打开的表"><a href="#7、已打开的表" class="headerlink" title="7、已打开的表"></a><strong>7、已打开的表</strong></h3><p>​      当(图1)中的已打开的表接近或等于(图2)中的table_open_cache时，可以适当增加table_open_cache，但若设置过大可能导致您的程序频繁中断MySQL连接，建议在1024以内，最大不要超过2048。</p><h3 id="8、没有使用索引的量、没有使用索引的JOIN量"><a href="#8、没有使用索引的量、没有使用索引的JOIN量" class="headerlink" title="8、没有使用索引的量、没有使用索引的JOIN量"></a><strong>8、没有使用索引的量、没有使用索引的JOIN量</strong></h3><p>​      若不为0，就检查下数据表索引吧，其实只要没有疯涨，比如一天增涨几千，一般可以忽略，必竟优化索引还是程序员或DBA去干比较合适。</p><h3 id="9、排序后的合并次数"><a href="#9、排序后的合并次数" class="headerlink" title="9、排序后的合并次数"></a><strong>9、排序后的合并次数</strong></h3><p>​      如果这个值在缓慢增张，建议适当增加(图2)中的sort_buffer_size，建议每次增加512，但最大不要超过8192，如果这个值一直在疯涨，增加sort_buffer_size也没用，就放弃这个选项吧，这个锅还是给程序开发者背。</p><h3 id="10、锁表次数"><a href="#10、锁表次数" class="headerlink" title="10、锁表次数"></a><strong>10、锁表次数</strong></h3><p>​      如果服务器CPU开销不大的情况下，疯狂锁表，建议你将所有数据表转换成innodb，记得转换前备份哦。</p><h3 id="11、优化方案"><a href="#11、优化方案" class="headerlink" title="11、优化方案"></a><strong>11、优化方案</strong></h3><p>​      这个是我们根据内存大小给的一个推荐优化方案，仅是建议仅用于基础参考值，还是要根据实据情况来调整每一个配置项。</p><p>注意：保存参数配置后不会立即生效，记得要重启MySQL服务。</p><p>写在最后：<br>      因我本人并不是专业DBA，难免有错误或遗漏的地方，还请大家给予指正，另外，可能面板提供的参考数据及调整选项还不够丰富，我们在往后的更新中会根据需要考虑继续增加更多的调整选项，谢谢大家的支持。</p><p>来自网络整理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;  在PHP+MYSQL架构网站运行过程中，往往会遇到各种性能问题影响，如MySQL、PHP、CPU、磁盘IO、缓存等，其中MySQL瓶颈就是最常见也最难解决的一种影响网站性能的因素；通常，我们会使用redis、memcached等缓存软件来缓存内</summary>
      
    
    
    
    <category term="mysql" scheme="https://blog.17lai.fun/categories/mysql/"/>
    
    
    <category term="Linux" scheme="https://blog.17lai.fun/tags/Linux/"/>
    
    <category term="MySQL" scheme="https://blog.17lai.fun/tags/MySQL/"/>
    
    <category term="优化" scheme="https://blog.17lai.fun/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>ESNI和加密DNS - 保护信息隐私的最后一块拼图</title>
    <link href="https://blog.17lai.fun/web/2021-09-06-encrypted-sni-anti-censorship/"/>
    <id>https://blog.17lai.fun/web/2021-09-06-encrypted-sni-anti-censorship/</id>
    <published>2021-09-06T01:25:00.000Z</published>
    <updated>2021-09-13T12:20:31.662Z</updated>
    
    <content type="html"><![CDATA[<p>随着<a href="https://www.ietf.org/blog/tls13/">TLS1.3</a>的发布，让该协议成为有史以来最安全、也是最复杂的TLS协议。在该协议之中，有很多的对于以往协议安全漏洞的修复，包括废弃RSA启用新的秘钥交换机制PSK等等。而<code>Encrypted SNI</code>作为一个<code>TLS1.3</code>的扩展协议用来防止传统的HTTPS流量受到ISP或者陌生网络环境的窥探以及一些网络审查。在过去，由于<code>HTTPS</code>协议之中<code>Server Name Indication - SNI</code>的使用，我们的HTTPS流量经常被窥探我们所访问站点的域名</p><h3 id="那么什么是SNI？⌗"><a href="#那么什么是SNI？⌗" class="headerlink" title="那么什么是SNI？⌗"></a>那么什么是SNI？<a href="#%E9%82%A3%E4%B9%88%E4%BB%80%E4%B9%88%E6%98%AFsni">⌗</a></h3><blockquote><p>服务器名称指示（英语：Server Name Indication，简称SNI）是一个扩展的TLS计算机联网协议，在该协议下，在握手过程开始时客户端告诉它正在连接的服务器要连接的主机名称。这允许服务器在相同的IP地址和TCP端口号上呈现多个证书，并且因此允许在相同的IP地址上提供多个安全（HTTPS）网站（或其他任何基于TLS的服务），而不需要所有这些站点使用相同的证书。它与HTTP/1.1基于名称的虚拟主机的概念相同，但是用于HTTPS。所需的主机名未加密， 因此窃听者可以查看请求的网站 为了使SNI协议起作用，绝大多数访问者必须使用实现它的Web浏览器。使用未实现SNI浏览器的用户将被提供默认证书，因此很可能会收到证书警告</p></blockquote><ul><li>  SNI协议示意图</li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/2820210828144946.webp"></p><ul><li>  TLS1.3完整握手流程</li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/2820210828144904.webp"></p><h3 id="为了弥补缺陷因应运而生的ESNI⌗"><a href="#为了弥补缺陷因应运而生的ESNI⌗" class="headerlink" title="为了弥补缺陷因应运而生的ESNI⌗"></a>为了弥补缺陷因应运而生的ESNI<a href="#%E4%B8%BA%E4%BA%86%E5%BC%A5%E8%A1%A5%E7%BC%BA%E9%99%B7%E5%9B%A0%E5%BA%94%E8%BF%90%E8%80%8C%E7%94%9F%E7%9A%84esni">⌗</a></h3><p>在上述过程之中，存在的问题就是，在ClientHello环节中，TLS会在这个位置以<strong>明文</strong>的形式讲要请求的Host写在数据包之中，如果在网络路由中有任何的监听节点，那么用户所访问网站的域名将暴露无遗，这将是巨大的用户隐私泄露: <img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/2820210828144907.webp"></p><p>所以在最新的关于<a href="https://tools.ietf.org/html/draft-rescorla-tls-esni-00">ESNI的草案</a>中，<code>IETF</code>重新设计了一种加密的Client Hello机制，从而修复了这个问题: <img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/2820210828144915.webp"></p><p><strong>不过这里问题又来了，之前服务器和客户端并没有事先交换任何数据啊，这个加密的凭证从何而来啊？？？</strong></p><h3 id="依靠安全DNS的ESNI⌗"><a href="#依靠安全DNS的ESNI⌗" class="headerlink" title="依靠安全DNS的ESNI⌗"></a>依靠安全DNS的ESNI<a href="#%E4%BE%9D%E9%9D%A0%E5%AE%89%E5%85%A8dns%E7%9A%84esni">⌗</a></h3><p>上一个问题没有难倒工程师们，他们设计了这样一个办法。首先让网站提供者在DNS提供商上公布一个记录，这个记录包含着一个<code>公钥</code>，这个公钥由网站提供者生成，其<code>私钥</code>存储在Web服务器等待着被Web程序读取。如此，当用户想通过TLS1.3协议访问这个域名的时候，首先读取这个公开的公钥，在用公钥加密其想访问的<code>域名Host</code>，装在<code>Client Hello</code>里面发送给目标服务器，目标服务器再用自己的私钥解密，从而和用户建立HTTPS链接，这样就不会暴露Host信息 这时候有人会想，如果有人某Wall想给你的DNS偷天换日，那会不会很不安全啊,请继续向下看</p><p>在<code>ESNI</code>的实现草案之中，里面要求<code>安全加密的DNS</code><strong>是推荐的</strong>。大家都知道我们的DNS查询一般是<code>TCP</code>报文或者是<code>UDP</code>报文，本身它是不加密的，所以如果有人想在篡改你的DNS是相对简单的，大家可能都知道我们伟大的妨炎蔷会使用DNS污染的方式干扰一些网站的正常访问。正式由于DNS的非加密性，DNS也成为了审查信息的利器。此时加密的DNS势在必行</p><h3 id="DNS-over-TLS-DoT-and-DNS-over-HTTPS-DoH-⌗"><a href="#DNS-over-TLS-DoT-and-DNS-over-HTTPS-DoH-⌗" class="headerlink" title="DNS over TLS (DoT) and DNS over HTTPS (DoH)⌗"></a>DNS over TLS (DoT) and DNS over HTTPS (DoH)<a href="#dns-over-tls-dot-and-dns-over-https-doh">⌗</a></h3><p>于是出现了这两种新型的DNS查询方式</p><ul><li>  DNS over HTTPS (DoH)</li></ul><blockquote><p>DNS Over HTTPS (DOH) 是一个进行安全化的域名解析的方案，当前尚处于实验性阶段。其意义在于以加密的HTTPS协议进行DNS解析请求，避免原始DNS协议中用户的DNS解析请求被窃听或者修改的问题（例如中间人攻击）来达到保护用户隐私的目的。 Google及Mozilla基金会正在测试这一协议，作为其提高网络安全性的努力的一部分。 当前，该方案由IETF支持，其规范文档以 RFC 8484 的名义发布。2018年9月5日发布的Firefox 62正式版加入了这项功能，但需要用户手动开启 DNS Over HTTPS利用HTTP协议的GET命令发出经由JSON等编码的DNS解析请求。较于传统的DNS协议，此处的HTTP协议通信处于具有加密作用的SSL/TLS协议（两者统称作HTTPS）的保护之下。但是，由于其基于HTTPS，而HTTPS本身需要经由多次数据来回传递才能完成协议初始化，其域名解析耗时较原DNS协议会显著增加。 传统的DNS协议形成于互联网早期，直接基于UDP或TCP协议，且彼时未虑及现代安全性的需要，未利用密码学等手段进行加密或验证。因而，其无法抵御现代互联网常见的DNS投毒污染等攻击手段或监听。虽然后来的DNSSEC方案通过电子签名进行验证，强化了DNS的安全性，并能够抵御DNS投毒污染等篡改通信的手段，但其对于中间网络设备进行的监听仍然没有抵御能力（随后，监听者可以通过获取的通信数据知晓用户访问了哪一域名，而域名往往与具体的网站相关系）。此外，DNSSEC的起效要求现有的大量DNS解析服务的提供商（常为互联网服务提供商或第三方大型互联网机构）对已有的DNS服务器进行大范围修改等问题，其推进进程并不理想。而对于DNS Over HTTPS，在正确部署服务端并妥善配置客户端的前提下，互联网服务提供商或其它中间网络设备无法解密（亦即无法获知请求的实际内容）或者篡改已经加密的HTTPS通信，故其能够有效保护互联网用户的安全及隐私；另一方面，其基于已经成熟并已广泛部署的HTTPS协议，客户端进行利用较为方便。</p></blockquote><ul><li>  DNS over TLS (DoT)</li></ul><blockquote><p>DNS over TLS (DoT) 是通过传输层安全协议（TLS）来加密并打包域名系统（DNS）的安全协议。此协议旨在防止中间人攻击与控制DNS数据以保护用户隐私。 RFC 7858及RFC 8310定义了DNS over TLS。 截至2018年，Cloudflare、Quad9与CleanBrowsing均向大众提供支持DNS over TLS的公共DNS解析服务。2018年4月，Google宣布Android P将包含对DNS over TLS的支持。PowerDNS的DNSDist也宣布在其最新的1.3.0版本中添加了对DNS over TLS的支持。BIND用户也可以通过stunnel代理提供DNS over TLS服务。</p></blockquote><h3 id="手动配置⌗"><a href="#手动配置⌗" class="headerlink" title="手动配置⌗"></a>手动配置<a href="#%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE">⌗</a></h3><p>Firefox所在的Mozilla宣布从<code>Firefox 62</code>版本之后开始支持<code>ESNI</code>，默认没有开启，需要用户手动配置打开，那么我们现在试验一下 这里Firefox的解决方案是使用<code>DNS over HTTPS (DoH)</code>和<code>ESNI</code></p><ol><li>安装<code>Firefox Nightly</code>版本，这个版本是预发布版本，使得开发这和即可门可以提前尝鲜到新功能。<a href="https://www.mozilla.org/zh-CN/firefox/nightly/all/">下载地址</a></li><li>在浏览器地址栏输入<code>about:config</code>并回车，打开配置页面，在搜索位置搜索<code>network.trr.mode</code>，这个是打开浏览器对于<code>DoH</code>的支持，将此项的数值修改为3（<code>0</code>对应的是不开启此功能；<code>1</code>对应的是交由浏览器选择<code>DoH</code>与传统方式那种更快；<code>2</code>代表优先使用加密DNS查询，如果失败则回落到普通DNS查询；<code>3</code>代表只使用加密DNS查询；<code>5</code>代表明确的关闭此功能）</li><li>继续搜索<code>network.trr.uri</code>，将此项的值修改为<code>https://mozilla.cloudflare-dns.com/dns-query</code>，这个是默认的<code>DoH</code>查询地址，当然我们也可以使用诸如<code>https://1.1.1.1/dns-query</code>、<code>https://dns.google.com/experimental</code>这样的地址，我们可以事先<code>ping</code>检测一下对比哪个延迟更低来使用</li><li>（可选）搜索<code>network.trr.bootstrapAddress</code>，讲此值修改位第三步的DNS域名的<code>IP</code>。此举是为了避免使用操作系统DNS查询域名受到劫持，一般来说这些DNS的<code>IP</code>是不会变的</li></ol><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/2820210828145006.webp"></p><ol start="5"><li>将<code>network.security.esni.enabled</code>设置为<code>true</code>,此举为了打开浏览器对于ESNI的支持（感谢<a href="https://github.com/chenIshi">chenlshi</a>同学的提醒，在原版的文章中我不小心遗漏了这个关键的步骤）</li><li>完成配置后重启浏览器，再打开<a href="https://encryptedsni.com/">在线验证页面验证</a>来查询你的浏览器是否完全支持<code>ESNI</code>功能，如果出现如图说明配置成功了</li></ol><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/2820210828144924.webp"></p><h3 id="验证⌗"><a href="#验证⌗" class="headerlink" title="验证⌗"></a>验证<a href="#%E9%AA%8C%E8%AF%81">⌗</a></h3><p>为了验证是否真的加密了<code>Client Hello</code>，我们使用<code>Wireshark</code>进行网络抓包 由于这个特性仍在试验阶段，并没有太多站点支持这个特性，<a href="https://cloudflare.com/">CloudFlare</a>是第一个全站支持<code>ESNI</code>的网站，这里我们使用<a href="https://blog.cloudflare.com/">blog.cloudflare.com</a>来做测试：</p><ol><li> 首先打开<code>Wireshark</code>的抓包功能，然后开启<code>Chrome</code>浏览器打开上述网址，页面加载完后停止抓包，在得到的结果中查询协议为<code>TLS1.3</code>和报文为<code>Client Hello</code>的报文，通过观察发现域名的Host果然被以明文形式写在数据包中（参见<code>Server_Name</code>字段）：</li></ol><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/2820210828144932.webp"></p><ol start="2"><li> 然后打开<code>Firefox Nightly</code>浏览器重复上述操作，这次发现在整个数据包中根本找不到<code>Server_Name</code>字段，说明<code>Host</code>已经被加密：</li></ol><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/2820210828144933.webp"></p><p>目前来说，我查阅了相关的关键词，仍然没有任何一篇教程有介绍如何在自己的服务器上支持<code>ESNI</code>，同时我也看到在<code>Nginx</code>的论坛里面有人呼吁尽快支持<code>ESNI</code>，所以我推测这个功能仍然在试验期，还没有被这两个Web软件所支持，起劲为止我也没有查阅到任何的Web软件预计支持此项功能。这项扩展已经进入<code>IETF</code>的草案阶段，可以预见到，在不就的将来，这项技术可以普及开来，为我们的网络隐私保驾护航 目前来说，有了<code>HTTPS</code>+<code>TLS1.3</code>+<code>ESNI</code>+<code>DoH/DoT</code>的加持，我们的网络隐私的到了极大的保障，最后还有一个问题是访问服务器<code>IP</code>的泄露仍然无法被避免，迫于<code>IP协议</code>设计的机制，他目前还不能被解决。不过我相信，随着网技术不断的趋于保护个人隐私和更快速的发展方向，这个问题可以最终被解决</p><p>From: <a href="https://blog.hackerchai.com/post/encrypted-sni-anti-censorship/">hackerchai</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;随着&lt;a href=&quot;https://www.ietf.org/blog/tls13/&quot;&gt;TLS1.3&lt;/a&gt;的发布，让该协议成为有史以来最安全、也是最复杂的TLS协议。在该协议之中，有很多的对于以往协议安全漏洞的修复，包括废弃RSA启用新的秘钥交换机制PSK等等。而&lt;co</summary>
      
    
    
    
    <category term="web" scheme="https://blog.17lai.fun/categories/web/"/>
    
    
    <category term="SSL" scheme="https://blog.17lai.fun/tags/SSL/"/>
    
    <category term="TLS" scheme="https://blog.17lai.fun/tags/TLS/"/>
    
    <category term="隐私" scheme="https://blog.17lai.fun/tags/%E9%9A%90%E7%A7%81/"/>
    
    <category term="安全" scheme="https://blog.17lai.fun/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>使用jeckett,sonarr,iyuu,qt,emby打造全自动追剧流程</title>
    <link href="https://blog.17lai.fun/docker/2021-07-09-use-jeckett-sonarr-iyuu-qt-emby-building-automatic-movie-anime-process/"/>
    <id>https://blog.17lai.fun/docker/2021-07-09-use-jeckett-sonarr-iyuu-qt-emby-building-automatic-movie-anime-process/</id>
    <published>2021-09-01T10:25:00.000Z</published>
    <updated>2021-09-13T12:50:06.269Z</updated>
    
    <content type="html"><![CDATA[<p>使用jeckett,sonarr,iyuu,qt,emby打造全自动追剧流程，打造一个完整的HTPC。</p><p>滚动更新： 2021-08-19</p><p>jackett 作为种子源，sonarr剧集管理，bt下载，qbittorrent主力下载，使用iyuu转移辅种，emby，jellyfin做海报墙，sunfinder自动下载字幕。基本算是完美打通全流程自动追剧。bt种子文件命名规则SxxExx的自动识别下载，国内的资源手动查找下载，自动推送到emby刮削好。</p><p>结合本地DNS管理，DNS去广告，Nginx 反向代理去端口访问，形成一个完整解决方案。</p><p>硬链接工具导入到新目录，使用TMM刮削</p><blockquote><p>注意：图床使用github，已经启动CDN加速，如果图片显示问题自己解决。</p></blockquote><h2 id="indexer-种子索引源"><a href="#indexer-种子索引源" class="headerlink" title="indexer 种子索引源"></a><strong>indexer 种子索引源</strong></h2><p>种子索引来源。</p><h2 id="jackett"><a href="#jackett" class="headerlink" title="jackett"></a><strong>jackett</strong></h2><ul><li>docker: linuxserver/jackett:latest</li><li>老牌选手，种子源非常丰富。</li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819002543.png" alt="image-20210819002541295"></p><h2 id="prowlarr"><a href="#prowlarr" class="headerlink" title="prowlarr"></a><strong>prowlarr</strong></h2><ul><li>indexer manager/proxy</li><li>Docker:  <a href="https://hub.docker.com/r/linuxserver/prowlarr">linuxserver/prowlarr:develop</a></li><li>新开发的，和sonarr, lidarr等结合比jackett 配置更简单</li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819002628.png" alt="image-20210819002626939"></p><h2 id="sonarr动画剧集管理"><a href="#sonarr动画剧集管理" class="headerlink" title="sonarr动画剧集管理"></a><strong>sonarr动画剧集管理</strong></h2><p>管理剧集名，查找剧集种子推送到下载工具</p><p>剧集管理示例图片</p><p>管理剧集目录，剧集日历，提醒你那一天哪些节目播放</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001244.png" alt="img"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819211051.png" alt="sonarr 日历提醒"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001328.png" alt="img"></p><p>自动识别下载对英文剧集支持较好，对于中文资源，结合手动识别下载更佳。</p><h3 id="手动识别下载"><a href="#手动识别下载" class="headerlink" title="手动识别下载"></a><strong>手动识别下载</strong></h3><p>示例图片</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001055.png" alt="img"></p><p>电影使用radarr, 音乐使用lidarr，同样可以自动化过程</p><h2 id="emby海报墙，流媒体中心"><a href="#emby海报墙，流媒体中心" class="headerlink" title="emby海报墙，流媒体中心"></a><strong>emby海报墙，流媒体中心</strong></h2><p>emby作为海报墙，元数据查看器，结合tampermonkey js脚本调用外部potplayer播放减少nas服务器压力，并且得到更好解码性能。手机端也有emby客户端。jellyfin，plex也可以</p><p>js脚本: <a href="https://greasyfork.org/scripts/406811-embylaunchpotplayer/code/embyLaunchPotplayer.user.js">embyLaunchPotplayer</a></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001419.png" alt="img"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819000847.png" alt="img"></p><h2 id="jellyfin-开源版本的emby"><a href="#jellyfin-开源版本的emby" class="headerlink" title="jellyfin 开源版本的emby"></a><strong>jellyfin 开源版本的emby</strong></h2><ul><li>jellyfin硬件解码</li><li>jellyfin中文字体显示方块问题</li></ul><p>上面两个问题见下面compose 配置解决方法</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">jellyfin</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> jellyfin/jellyfin    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> jellyfin    <span class="token key atrule">user</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>PUID<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>PGID<span class="token punctuation">}</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> jellyfin    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">devices</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> /dev/dri<span class="token punctuation">:</span>/dev/dri     <span class="token comment">#使jellfin支持硬件解码</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> PUID=$<span class="token punctuation">{</span>PUID<span class="token punctuation">}</span>      <span class="token punctuation">-</span> PGID=$<span class="token punctuation">{</span>PGID<span class="token punctuation">}</span>      <span class="token punctuation">-</span> TZ=$<span class="token punctuation">{</span>TZ<span class="token punctuation">}</span>      <span class="token comment"># 给一些插件做代理</span>      <span class="token punctuation">-</span> http_proxy=http<span class="token punctuation">:</span>//xxx.17lai.fun<span class="token punctuation">:</span>1089/      <span class="token punctuation">-</span> https_proxy=http<span class="token punctuation">:</span>//xxx.17lai.fun<span class="token punctuation">:</span>1089/    <span class="token comment"># ports:    # 使用nginx 反向代理，所以这里就不用开端口了</span>      <span class="token comment"># - 8098:8096</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> $<span class="token punctuation">{</span>USERDIR<span class="token punctuation">}</span>/jellyfin/config<span class="token punctuation">:</span>/config      <span class="token punctuation">-</span> $<span class="token punctuation">{</span>USERDIR<span class="token punctuation">}</span>/jellyfin/cache<span class="token punctuation">:</span>/cache      <span class="token comment"># 把windowsfonts目录下面的字体都复制到`jellyfin/fonts`目录中</span>      <span class="token punctuation">-</span> $<span class="token punctuation">{</span>USERDIR<span class="token punctuation">}</span>/jellyfin/fonts<span class="token punctuation">:</span>/usr/share/fonts    <span class="token comment"># 给jellyfin装载更多字体，使中文显示正确，不再是方块</span>      <span class="token punctuation">-</span> $<span class="token punctuation">{</span>USERDIR<span class="token punctuation">}</span>/nginx/resolv.conf<span class="token punctuation">:</span>/etc/resolv.conf    <span class="token comment"># 定制dns</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>赋予emby，jellyfin访问硬件加速驱动权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">755</span> /dev/dri<span class="token function">chmod</span> <span class="token number">666</span> /dev/dri/renderD128<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="tmm刮削，改名"><a href="#tmm刮削，改名" class="headerlink" title="tmm刮削，改名"></a><strong>tmm刮削，改名</strong></h2><p>一些命名不规范，不能被emby识别的剧集使用tmm刮削改名，配合硬链接工具，可以不影响做种的前提下改名，该目录。大文件硬链接，小文件直接复制方便刮削，推荐一个自己写的硬链接bash shell脚本，PTtool在nas，linux环境使用更方便</p><p>Github: <a href="https://github.com/appotry/PTtool">appotry/PTtool</a></p><p>Gitee: 镜像 <a href="https://gitee.com/bloodwolf/PTtool">bloodwolf/PTtool</a></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001155.png" alt="img"></p><p>注意：使用v3版本，不要升级到v4，v4版本收费。</p><h2 id="硬链接工具"><a href="#硬链接工具" class="headerlink" title="硬链接工具"></a><strong>硬链接工具</strong></h2><p><strong>Github</strong>: <a href="https://github.com/appotry/PTtool"><strong>PTools</strong></a></p><p><strong>使用教程</strong>： <a href="https://blog.17lai.fun/blogging/pt/2021-07-09-linux-pt-hard-link-tools/"><strong>Linux PT硬链接助手使用教程</strong></a></p><blockquote><p>博主编写的脚本，自推一下，在Nas，linux环境使用的Shell 脚本。</p></blockquote><p>PT hard link tools。方便PT用户硬链接文件，在最大可能情况下节约空间，并保持做种。 小于1M的文件直接复制，方便emby，tmm等工具刮削修改nfo等小文件。 大于1M的文件硬链接到目的目录，可以随意修改文件名，但是不能修改文件内容！</p><p>从此，做种，刮削改名两不误！</p><h2 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a><strong>下载工具</strong></h2><h2 id="Transmissoin"><a href="#Transmissoin" class="headerlink" title="Transmissoin"></a><strong>Transmissoin</strong></h2><ul><li> <a href="https://blog.17lai.fun/bt/2021-08-18-transmission-parameter-reference-configuration/"><strong>transmission 使用及其配置</strong></a></li></ul><h2 id="qBittorrent"><a href="#qBittorrent" class="headerlink" title="qBittorrent"></a>qBittorrent</h2><ul><li> <a href="https://blog.17lai.fun/bt/2021-08-18-qbittorrent-parameter-reference-configuration/"><strong>qBittorrent 参数详细设置教程</strong></a></li></ul><p>都分别有docker版本和套件版本。</p><p>虽然下载工具很多，但IYUU只支持这两个辅种工具，开发者的话是这两个工具的RPC调用接口稳定。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819005826.png" alt="image-20210819005824763"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819005858.png" alt="image-20210819005856669"></p><h2 id="辅种工具IYUU"><a href="#辅种工具IYUU" class="headerlink" title="辅种工具IYUU"></a><strong>辅种工具IYUU</strong></h2><p><strong>Doker版本</strong></p><ul><li><p><a href="https://hub.docker.com/r/iyuucn/iyuuautoreseed">iyuucn/iyuuautoreseed</a></p><blockquote><p>命令行版本</p></blockquote></li><li><p><a href="https://hub.docker.com/r/iyuucn/iyuuplus">iyuucn/iyuuplus</a></p><blockquote><p>图形界面版本，更轻松上手。</p></blockquote></li></ul><p>自动辅种，解放双手，更多魔力，更容易养多站。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819010407.png" alt="image-20210819010337086"></p><h2 id="字幕下载"><a href="#字幕下载" class="headerlink" title="字幕下载"></a><strong>字幕下载</strong></h2><p>想要较好的自动下载字幕，最好用前面介绍的tmm刮削改名之后再使用下面工具。</p><h2 id="subfinder-自动下载字幕"><a href="#subfinder-自动下载字幕" class="headerlink" title="subfinder 自动下载字幕"></a>subfinder 自动下载字幕</h2><ul><li>Docker： <a href="https://hub.docker.com/r/superng6/subfinder">superng6/subfinder</a></li></ul><p>下载完成，刮削后的目录，挂载到subfinder的media目录，就会自动下载字幕。</p><p>字幕下载对电影，英文剧集支持较好。对于一些tv，动画手动下载字幕会更好一些。</p><p>注意：官方的配置文件有问题，时效问题。修改URL到最新即可。</p><h2 id="chinesesubfinder"><a href="#chinesesubfinder" class="headerlink" title="chinesesubfinder"></a>chinesesubfinder</h2><ul><li><p>Docker： <a href="https://hub.docker.com/r/allanpk716/chinesesubfinder">allanpk716/chinesesubfinder</a></p></li><li><p>新开发的中文字幕查找工具，上面那个很久没更新了，这个刚出来。使用nfo里面刮削出来的文件名来匹配字幕。所以就原理来说，这个字幕匹配更准确。</p></li></ul><h2 id="bazarr"><a href="#bazarr" class="headerlink" title="bazarr"></a>bazarr</h2><ul><li>Docker：<a href="https://hub.docker.com/r/linuxserver/bazarr">linuxserver/bazarr</a></li><li>字幕下载管理，配合sonarr, radarr 使用效果更好。对于英文剧集命名规范的支持较好，比如<code>[name]S01E01</code></li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819002816.png" alt="image-20210819002815154"></p><hr><h2 id="使用radarr管理电影"><a href="#使用radarr管理电影" class="headerlink" title="使用radarr管理电影"></a><strong>使用radarr管理电影</strong></h2><p>radarr示例图片<img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001114.png" alt="img"></p><h2 id="使用lidarr管理音乐"><a href="#使用lidarr管理音乐" class="headerlink" title="使用lidarr管理音乐"></a><strong>使用lidarr管理音乐</strong></h2><p>lidarr示例图片<br><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001200.png" alt="img"></p><h2 id="使用docker-compose-管理docker配置文件，一键安装，升级"><a href="#使用docker-compose-管理docker配置文件，一键安装，升级" class="headerlink" title="使用docker compose 管理docker配置文件，一键安装，升级"></a>使用docker compose 管理docker配置文件，一键安装，升级</h2><h2 id="使用portainer管理docker"><a href="#使用portainer管理docker" class="headerlink" title="使用portainer管理docker"></a><strong>使用portainer管理docker</strong></h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001116.png" alt="img"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">version: <span class="token string">'3'</span>services:  portainer-ce:    container_name:  portainer-ce    image: portainer/portainer-ce    command: -H unix:///var/run/docker.sock    restart: always    ports:      - <span class="token number">9300</span>:9000      - <span class="token number">9301</span>:8000    environment:      - <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai      - <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8    volumes:      - /var/run/docker.sock:/var/run/docker.sock      - /share/Container/portainer_data:/data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用watchtower自动升级docker"><a href="#使用watchtower自动升级docker" class="headerlink" title="使用watchtower自动升级docker"></a><strong>使用watchtower自动升级docker</strong></h2><p>使所有软件保持最新最佳状态</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001124.png" alt="img"></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">watchtower</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> watchtower    <span class="token key atrule">image</span><span class="token punctuation">:</span> containrrr/watchtower<span class="token punctuation">:</span>latest    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> TZ=Asia/Shanghai      <span class="token punctuation">-</span> WATCHTOWER_CLEANUP=true      <span class="token punctuation">-</span> WATCHTOWER_SCHEDULE=0 0 1 * * *    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">command</span><span class="token punctuation">:</span> nginx redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述配置文件中<code>volumes</code>使用了绝对路径,使这个容器能访问系统<code>docker.sock</code>目录,用于方便监控容器镜像的版本以便更新.其他的一些环境变量,例如时区,清理旧镜像,定时任务都转换为<code>environment</code>,而特殊的<code>command</code>命令则定义了指定监控<code>nginx</code>和<code>redis</code>两个容器。没有command这一行，默认监控升级所有运行中的docker</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 运行一次，更新所有的容器，并清除旧的容器 </span>docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup --run-once<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#只更新nginx和redis</span>docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup --run-once nginx redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="使用muximux来管理多个docker入口"><a href="#使用muximux来管理多个docker入口" class="headerlink" title="使用muximux来管理多个docker入口"></a><strong>使用muximux来管理多个docker入口</strong></h2><p>主页面</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001210.png"></p><p>配置页面</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001131.png" alt="img"></p><h2 id="更进阶定制本地域名访问"><a href="#更进阶定制本地域名访问" class="headerlink" title="更进阶定制本地域名访问"></a><strong>更进阶定制本地域名访问</strong></h2><h2 id="nginx-管理域名访问"><a href="#nginx-管理域名访问" class="headerlink" title="nginx 管理域名访问"></a><strong>nginx 管理域名访问</strong></h2><ul><li>Docker: <a href="https://hub.docker.com/r/bloodstar/nginx-purge">bloodstar/nginx-purge</a></li><li>Github： <a href="https://github.com/appotry/nginx-purge-docker">nginx</a></li><li>去掉烦人的端口后缀，实现80,443 端口复用。这个docker 是博主定制功能版。</li><li>配置SSL证书访问，密码等敏感数据从此加密传输。并可以使用http2高级特性。</li><li><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819010407.png" alt="image-20210819010337086"></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">version: <span class="token string">'3'</span>services:  nginxweb:    image: bloodstar/nginx-purge    container_name: <span class="token string">"nginxweb"</span>    hostname: nginxweb    ports:      - <span class="token string">"80:80"</span>      - <span class="token string">"443:443"</span>    restart: always    volumes:      <span class="token comment"># 映射主机目录</span>      - <span class="token variable">${USERDIR}</span>/nginx/conf.d:/etc/nginx/conf.d:ro      - <span class="token variable">${USERDIR}</span>/nginxproxy/certs:/etc/nginx/certs:ro      - <span class="token variable">${USERDIR}</span>/nginx/nginx.conf:/etc/nginx/nginx.conf:ro<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 这里推荐博主制作的nginx docker镜像： <a href="https://hub.docker.com/r/bloodstar/nginx-purge">bloodstar/nginx-purge</a></p><blockquote><p>支持ARM64, ARMV7, AMD64 ，增加 CA 证书，防火墙，brotli, Proxy-cache-purge, htpasswd 支持</p></blockquote><h2 id="DNS-域名管理"><a href="#DNS-域名管理" class="headerlink" title="DNS 域名管理"></a><strong>DNS 域名管理</strong></h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819003924.png" alt="image-20210819003922283"></p><ul><li><p>和nginx 配合使用。 简单的可以直接修改<code>/etc/hosts</code>。</p></li><li><p>DNSCrypt Proxy： 作为DNS前端访问DOH的DNS</p></li><li><p>DNSMasq： 作为DNS后端，连接到DNSCrypt Proxy，并配置本地域名。还可以添加DNS去广告功能，浏览器插件去广告非常消耗CPU和内存，但是在DNS前端去广告，资源消耗低，并一次性解决所有的访问终端（pc，手机，平板）广告问题。</p><blockquote><p>配置一个去广告，本地域名管理工具。</p></blockquote></li></ul><h2 id="Xteve-看IPTV"><a href="#Xteve-看IPTV" class="headerlink" title="Xteve 看IPTV"></a><strong>Xteve 看IPTV</strong></h2><p>Docker: <a href="https://hub.docker.com/r/dnsforge/xteve">dnsforge/xteve</a></p><p>结合Emby， jellyfin直接看iptv。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819010804.png" alt="image-20210819010802918"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p>tmm，jackett，sonarr最好配置代理。否则，刮削，图片墙可能工作不正常。</p></li><li><p>docker最好配置镜像加速，提高安装docker速度</p></li><li><p>一些docker初始化安装，运行、更新时需要访问github，最好配置代理。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用jeckett,sonarr,iyuu,qt,emby打造全自动追剧流程，打造一个完整的HTPC。&lt;/p&gt;
&lt;p&gt;滚动更新： 2021-08-19&lt;/p&gt;
&lt;p&gt;jackett 作为种子源，sonarr剧集管理，bt下载，qbittorrent主力下载，使用iyuu转移</summary>
      
    
    
    
    <category term="docker" scheme="https://blog.17lai.fun/categories/docker/"/>
    
    
    <category term="Emby" scheme="https://blog.17lai.fun/tags/Emby/"/>
    
    <category term="Sonarr" scheme="https://blog.17lai.fun/tags/Sonarr/"/>
    
    <category term="Jeckett" scheme="https://blog.17lai.fun/tags/Jeckett/"/>
    
    <category term="Portainer" scheme="https://blog.17lai.fun/tags/Portainer/"/>
    
    <category term="Watchtower" scheme="https://blog.17lai.fun/tags/Watchtower/"/>
    
    <category term="Nginx" scheme="https://blog.17lai.fun/tags/Nginx/"/>
    
    <category term="DNSMasq" scheme="https://blog.17lai.fun/tags/DNSMasq/"/>
    
    <category term="DNSCrypt" scheme="https://blog.17lai.fun/tags/DNSCrypt/"/>
    
  </entry>
  
  <entry>
    <title>QNAP 修改应用启动顺序</title>
    <link href="https://blog.17lai.fun/qnap/2021-09-01-qnap-change-app-start-sequence/"/>
    <id>https://blog.17lai.fun/qnap/2021-09-01-qnap-change-app-start-sequence/</id>
    <published>2021-08-31T18:25:00.000Z</published>
    <updated>2021-09-13T12:20:11.140Z</updated>
    
    <content type="html"><![CDATA[<ul><li>关于本blog，<strong>图床</strong>一般使用<strong>github</strong>，已经配置了CDN，如果图片还是未显示请自行代理解决</li></ul><p>有时候，你想修改一下安装的应用启动顺序。该怎么做了？</p><p>在无意中，博主发现了这个技巧。配置方法如下：</p><h2 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0120210901233948.png" alt="image-20210901233946469"></p><h2 id="配置文件内容"><a href="#配置文件内容" class="headerlink" title="配置文件内容"></a>配置文件内容</h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0120210901234357.png" alt="image-20210901234355622"></p><p>RC_Number是qnap配置应用启动顺序，数字越小优先级越高。看着100差不多就是用户程序高优先级上限了。如此，你可以把一些应用调整高优先级启动，例如代理配置v2ray, dns配置DNSCrypt Proxy和DNSMasq，以实现其它应用采用这些服务。把一些应用调整低优先级，如qbittorrent等。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> /etc/config -alhlrwxrwxrwx <span class="token number">1</span> admin administrators <span class="token number">21</span> <span class="token number">2021</span>-08-31 <span class="token number">17</span>:20 /etc/config -<span class="token operator">&gt;</span> /mnt/HDA_ROOT/.config/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="qnap使用init-v系统。"><a href="#qnap使用init-v系统。" class="headerlink" title="qnap使用init v系统。"></a>qnap使用init v系统。</h2><p>如果改为systemd 系统启动，可以加快启动速度。一些应用延迟加载技术看起来也没做好。用户这里修改RC_Number 可以手动实现一些延迟加载功能。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/init.d/QTransmission3.sh start         <span class="token comment">#启动</span>/etc/init.d/QTransmission3.sh stop            <span class="token comment">#停止</span>/etc/init.d/QTransmission3.sh restart        <span class="token comment">#重启</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="原创首发"><a href="#原创首发" class="headerlink" title="原创首发"></a>原创首发</h2><p>可以转载，但必须完整转载，并且带上原始地址链接。</p><hr>]]></content>
    
    
    <summary type="html">QNAP 修改应用启动顺序</summary>
    
    
    
    <category term="qnap" scheme="https://blog.17lai.fun/categories/qnap/"/>
    
    
    <category term="QNAP" scheme="https://blog.17lai.fun/tags/QNAP/"/>
    
    <category term="启动" scheme="https://blog.17lai.fun/tags/%E5%90%AF%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>几种常用管理模型和方法</title>
    <link href="https://blog.17lai.fun/pmbok/2021-08-18-several-common-management-models-and-methods/"/>
    <id>https://blog.17lai.fun/pmbok/2021-08-18-several-common-management-models-and-methods/</id>
    <published>2021-08-18T11:25:00.000Z</published>
    <updated>2021-09-13T12:19:47.823Z</updated>
    
    <content type="html"><![CDATA[<p>这些只是基本的工具，你需要了解。但是，和行业相关的知识更重要。就像做数学题，把一堆错综复杂的线索中归纳总结出来问题，提出解决方法，这中间需要丰富的行业知识，这个没法速成。总结完后，执行阶段，就像数学加减乘除一样，这些是基本的工具和方法。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020449.jpeg"></p><h2 id="PDCA原则意义"><a href="#PDCA原则意义" class="headerlink" title="PDCA原则意义"></a><strong>PDCA原则意义</strong></h2><p>Plan：制定目标与计划；</p><p>Do：任务展开，组织实施；</p><p>Check：对过程中的关键点和最终结果进行检查；</p><p>Action：纠正偏差，对成果进行标准化，并确定新的目标，制定下一轮计划。</p><p>意义：每一项工作，都是一个pdca循环，都需要计划、实施、检查结果，并进一步进行改进，同时进入下一个循环，只有在日积月累的渐进改善中，才可能会有质的飞跃，才可能取得完善每一项工作，完善自己的人生。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020557.jpeg"></p><blockquote><h2 id="PDCA原则的八大步骤"><a href="#PDCA原则的八大步骤" class="headerlink" title="PDCA原则的八大步骤"></a><strong>PDCA原则的八大步骤</strong></h2></blockquote><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020456.jpeg"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020603.jpeg"></p><h2 id="5W2H分析法的意义"><a href="#5W2H分析法的意义" class="headerlink" title="5W2H分析法的意义"></a><strong>5W2H分析法的意义</strong></h2><p>What：工作的内容和达成的目标；</p><p>Why：做这项工作的原因；</p><p>Who：参加这项工作的具体人员，以及负责人；</p><p>When：在什么时间、什么时间段进行工作；</p><p>Where：工作发生的地点 ；</p><p>Which：哪一种方法或途径；</p><p>How：用什么方法进行；</p><p>How much：需要多少成本？</p><p>意义：做任何工作都应该从6W2H来思考，这有助于我们的思路的条理化，杜绝盲目性。我们的汇报也应该用6W2H，能节约写报告及看报告的时间。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020503.jpeg"></p><blockquote><p><strong>5W2H分析法的内容</strong></p></blockquote><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020610.jpeg"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020509.jpeg"></p><h2 id="SMART原则的意义"><a href="#SMART原则的意义" class="headerlink" title="SMART原则的意义"></a><strong>SMART原则的意义</strong></h2><p>Specific 具体的；</p><p>Measurable 可测量的；</p><p>Attainable 可达到的；</p><p>Relevant 相关的；</p><p>Time based 时间的；</p><p>意义：人们在制定工作目标或者任务目标时，考虑一下目标与计划是不是SMART化的。只有具备SMART化的计划才是具有良好可实施性的，也才能指导保证计划得以实现。</p><p>有的又如此解释此原则：</p><p>——S代表具体(Specific)，指绩效考核要切中特定的工作指标，不能笼统；</p><p>——M代表可度量(Measurable)，指绩效指标是数量化或者行为化的，验证这些绩效指标的数据或者信息是可以获得的；</p><p>——A代表可实现(Attainable)，指绩效指标在付出努力的情况下可以实现，避免设立过高或过低的目标；</p><p>——R代表现实性(realistic)，指绩效指标是实实在在的，可以证明和观察；</p><p>——T代表有时限(time bound)，注重完成绩效指标的特定期限。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020516.jpeg"></p><blockquote><p><strong>SMART原则实施要领</strong></p></blockquote><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020517.jpeg"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020523.jpeg"></p><h2 id="STAR法则的意义"><a href="#STAR法则的意义" class="headerlink" title="STAR法则的意义"></a><strong>STAR法则的意义</strong></h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020529.jpeg"></p><blockquote><p><strong>STAR法则的内容</strong></p></blockquote><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020621.jpeg"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020537.jpeg"></p><h2 id="SWOT分析模型的意义"><a href="#SWOT分析模型的意义" class="headerlink" title="SWOT分析模型的意义"></a><strong>SWOT分析模型的意义</strong></h2><p>Strengths：优势</p><p>Weaknesses：劣势</p><p>Opportunities：机会</p><p>Threats：威胁</p><p>意义：帮您清晰地把握全局，分析自己在资源方面的优势与劣势，把握环境提供的机会，防范可能存在的风险与威胁，对我们的成功有非常重要的意义。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020628.jpeg"></p><blockquote><p><strong>SWOT分析模型组合</strong></p></blockquote><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020706.jpeg"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020634.jpeg"></p><h2 id="GROW教练模型的意义"><a href="#GROW教练模型的意义" class="headerlink" title="GROW教练模型的意义"></a><strong>GROW教练模型的意义</strong></h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020544.jpeg"></p><blockquote><p><strong>GROW教练模型的内容</strong></p></blockquote><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020641.jpeg"></p><h2 id="时间管理-重要与紧急"><a href="#时间管理-重要与紧急" class="headerlink" title="时间管理-重要与紧急"></a><strong>时间管理-重要与紧急</strong></h2><p>A、重要且紧急</p><p>紧急状况</p><p>迫切的问题</p><p>限期完成的工作</p><p>你不做其他人也不能做</p><p>B、重要不紧急</p><p>准备工作</p><p>预防措施</p><p>价值观的澄清</p><p>计划</p><p>人际关系的建立</p><p>真正的再创造</p><p>增进自己的能力</p><p>C、紧急不重要</p><p>造成干扰的事、电话、</p><p>信件、报告</p><p>会议</p><p>许多迫在眉捷的急事</p><p>符合别人期望的事</p><p>D、不重要不紧急</p><p>忙碌琐碎的事</p><p>广告函件</p><p>电话</p><p>逃避性活动</p><p>等待时间</p><p>优先顺序=重要性*紧迫性在进行时间安排时，应权衡各种事情的优先顺序，要学会“弹钢琴”；对工作要有前瞻能力，防患于未然，如果总是在忙于救火，那将使我们的工作永远处理被动之中。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819015812.png" alt="揭秘人生七工具：SWOT、PDCA、6W2H、SMART、WBS、时间管理、OKR"></p><h2 id="任务分解法-WBS"><a href="#任务分解法-WBS" class="headerlink" title="任务分解法[WBS]"></a><strong>任务分解法[WBS]</strong></h2><p>即Work Breakdown Structure，如何进行WBS分解：目标→任务→工作→活动</p><p><strong>WBS分解的原则：</strong></p><p>将主体目标逐步细化分解，最底层的任务活动可直接分派到个人去完成；每个任务原则上要求分解到不能再细分为止。</p><p><strong>WBS分解的方法：</strong></p><p>至上而下与至下而上的充分沟通；</p><p>一对一个别交流；</p><p>小组讨论。</p><p><strong>WBS分解的标准：</strong></p><p>分解后的活动结构清晰；</p><p>逻辑上形成一个大的活动；</p><p>集成了所有的关键因素包含临时的里程碑和监控点；</p><p>所有活动全部定义清楚。</p><p>意义：学会分解任务，只有将任务分解得足够细，您才能心里有数，您才能有条不紊地工作，您才能统筹安排您的时间表。</p><h2 id="OKR，目标与关键结果"><a href="#OKR，目标与关键结果" class="headerlink" title="OKR，目标与关键结果"></a><strong>OKR，目标与关键结果</strong></h2><p>OKR 实施过程中起草制定好目标和关键结果是非常重要的一环，有效的 OKR 制定需要满足 SMART 原则——明确的、可衡量的、可实现的、有相关性和有时限性。</p><p>目标（O）回答的是“我们想做什么”的问题，是定性的，要求能够鼓舞人心，激发团队共鸣。</p><p>关键结果（KR）回答的是“我们如何知道自己是否达成了目标要求”的问题，是定量的，设计 KR 最具挑战的部分是如何把目标中定性的描述抽象为定量的表示。</p><p>最后：只有掌握了正确科学的工作方法，才可能在未来的工作中，做到事半功倍的效果，才能更加从容且有重点的开展工作。好的工作方法，是成功的一半！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这些只是基本的工具，你需要了解。但是，和行业相关的知识更重要。就像做数学题，把一堆错综复杂的线索中归纳总结出来问题，提出解决方法，这中间需要丰富的行业知识，这个没法速成。总结完后，执行阶段，就像数学加减乘除一样，这些是基本的工具和方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;h</summary>
      
    
    
    
    <category term="PMBOK" scheme="https://blog.17lai.fun/categories/PMBOK/"/>
    
    
    <category term="管理" scheme="https://blog.17lai.fun/tags/%E7%AE%A1%E7%90%86/"/>
    
    <category term="PDCA" scheme="https://blog.17lai.fun/tags/PDCA/"/>
    
    <category term="5W2H" scheme="https://blog.17lai.fun/tags/5W2H/"/>
    
    <category term="SMART" scheme="https://blog.17lai.fun/tags/SMART/"/>
    
    <category term="SWOT" scheme="https://blog.17lai.fun/tags/SWOT/"/>
    
    <category term="GROW" scheme="https://blog.17lai.fun/tags/GROW/"/>
    
    <category term="OKR" scheme="https://blog.17lai.fun/tags/OKR/"/>
    
    <category term="WBS" scheme="https://blog.17lai.fun/tags/WBS/"/>
    
  </entry>
  
</feed>
