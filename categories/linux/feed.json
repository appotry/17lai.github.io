{
    "version": "https://jsonfeed.org/version/1",
    "title": "夜法之书 • All posts by \"linux\" category",
    "description": "~软件驱动世界~个人独立技术博客，关于Linux,开源，Nas，Docker，嵌入式，理财，健身等主题！",
    "home_page_url": "https://blog.17lai.site",
    "items": [
        {
            "id": "https://blog.17lai.site/posts/e691e603/",
            "url": "https://blog.17lai.site/posts/e691e603/",
            "title": "常用Linux Bash命令教程",
            "date_published": "2022-05-28T13:49:36.000Z",
            "content_html": "<blockquote>\n<p>常用linux命令介绍。入门Linux必学的命令行，熟练掌握后，效率远超Windows GUI操作。重要的是，可以方便的做自动化处理！</p>\n<p><mark>更多命令在线查询</mark> <a href=\"https://linux-command.17lai.site/\">linux-command.17lai.site</a></p>\n</blockquote>\n<span id=\"more\"></span>\n<p><img src=\"https://cimg1.17lai.fun/data/2022/04/2120220421192048.svg\" alt=\"Linux shell\"></p>\n<h2 id=\"Bash-基础\">Bash 基础</h2>\n<h2 id=\"说明\">说明</h2>\n<p>记录在Linux中经常会用到的命令，持续更新。更多命令详解可参考：</p>\n<ul>\n<li><a href=\"https://linuxtools-rst.readthedocs.io/zh_CN/latest/index.html\">Linux Tools Quick Tutorial</a></li>\n<li><a href=\"https://www.runoob.com/linux/linux-command-manual.html\">Linux 命令大全</a></li>\n<li><a href=\"https://wangdoc.com/bash/intro.html\">Bash 脚本教程</a></li>\n<li><a href=\"https://wangdoc.com/ssh/index.html\">SSH 教程</a></li>\n</ul>\n<h3 id=\"Shell选择与切换\">Shell选择与切换</h3>\n<p>在现代的 Linux 上，sh 已经被 bash 代替，<code>/bin/sh</code>往往是指向<code>/bin/bash</code>的符号链接。早期macos系统默认使用bash解释器，在macos10.15系统中官方推荐使用zsh解释器。bash和zsh均是shell的一种，由于bash或zsh本质上都是解释器，他们所共同服务的是shell语言，因此在命令语法上基本相同，zsh能基本完美兼容bash的命令，并且使用起来更加优雅。</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ echo $SHELL               # 查看当前默认shell\n$ cat /etc/shells          # 查看系统安装了哪些shell\n\n$ chsh -s /bin/bash        # 切换bash,读取的配置文件：~/.bash_profile\n$ chsh -s /bin/zsh        # 切换,读取的配置文件：~/.zshrc</code></pre></div></figure>\n<p>当从bash切换为zsh时，如果不想重新配置一遍<code>.zshrc</code>文件，可以在<code>.zshrc</code>文件中加上<code>source ~/.bash_profile</code>，从而直接从<code>.bash_profile</code>文件读取配置。</p>\n<p>如果选择zsh，会获得如下好用的功能：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ cd .....                         # 输入n+1个点，可以往上跳转n层\n$ kill process_name        # 自动补全进程ID\n$ d                                        # 列出最近访问过的目录，然后选择目录前面的数字进行快速跳转\n$ r                                        # 重复执行上一条命令\n$ commond + tab                # 常用命令参数补全提醒</code></pre></div></figure>\n<p>扩展阅读：<a href=\"https://xiaozhou.net/learn-the-command-line-iterm-and-zsh-2017-06-23.html\">程序员内功系列–iTerm与Zsh篇</a></p>\n<h3 id=\"特殊命令符号\">特殊命令符号</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">符号</th>\n<th style=\"text-align:left\">格式</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">;</td>\n<td style=\"text-align:left\">命令1;命令2</td>\n<td style=\"text-align:left\">多个命令顺序执行，命令之间无任何逻辑关系</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&amp;&amp;</td>\n<td style=\"text-align:left\">命令1&amp;&amp;命令2</td>\n<td style=\"text-align:left\">逻辑与：当命令1正确执行后，命令2才会正确执行，否则命令2不会执行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">||</td>\n<td style=\"text-align:left\">命令1||命令2</td>\n<td style=\"text-align:left\">逻辑或：当命令1不正确执行后，命令2才会正确执行，否则命令2不会执行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">|</td>\n<td style=\"text-align:left\">命令1命令2</td>\n<td style=\"text-align:left\">管道符：命令1的正确输出作为命令2的操作对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&amp;</td>\n<td style=\"text-align:left\">命令 &amp;</td>\n<td style=\"text-align:left\">后台执行：把命令放在后台执行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&gt;</td>\n<td style=\"text-align:left\">命令1 &gt; file</td>\n<td style=\"text-align:left\">输出重定向：将命令1的结果输出到文件中，该文件原有内容会被删除</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&gt;&gt;</td>\n<td style=\"text-align:left\">命令1 &gt;&gt; file</td>\n<td style=\"text-align:left\">输出重定向：将命令1的结果附加到文件中，原文件内容不会被删除</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;</td>\n<td style=\"text-align:left\">命令1 &lt; file</td>\n<td style=\"text-align:left\">输入重定向：将file作为命令1的输入</td>\n</tr>\n</tbody>\n</table>\n<p>一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：</p>\n<ul>\n<li>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</li>\n<li>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</li>\n<li>标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。</li>\n</ul>\n<p>如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 <code>/dev/null</code>,以下是常用重定向命令示例：</p>\n<ul>\n<li>将 stderr 重定向到 file：<code>command 2&gt;file</code></li>\n<li>将 stderr 追加到 file 文件末尾：<code>command 2&gt;&gt;file</code>。</li>\n<li>将 stdout 和 stderr 合并后重定向到 file：<code>$ command &gt; file 2&gt;&amp;1</code></li>\n<li>对 stdin 和 stdout 都重定向：<code>command &lt; file1 &gt; file2</code></li>\n<li>屏蔽 stdout 和 stderr：<code>command &gt; /dev/null 2&gt;&amp;1</code></li>\n</ul>\n<blockquote>\n<p>**注意：**0 是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。这里的 <strong>2</strong> 和 <strong>&gt;</strong> 之间不可以有空格，<strong>2&gt;</strong> 是一体的时候才表示错误输出。</p>\n</blockquote>\n<h3 id=\"Bash中的特殊符号\">Bash中的特殊符号</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">通配符</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">匹配一个任意字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:left\">匹配0个或多个任意字符，也就是可以匹配任何内容</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[]</td>\n<td style=\"text-align:left\">匹配括号中任意一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[-]</td>\n<td style=\"text-align:left\">匹配括号中任意一个字符，“-”代表范围</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^]</td>\n<td style=\"text-align:left\">逻辑非，表示匹配不是括号内的一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">‘’</td>\n<td style=\"text-align:left\">单引号，在单引号中所有的特殊符号，如“$”和“`”（反引号）都无特殊含义</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">“”</td>\n<td style=\"text-align:left\">双引号，在双引号中特殊符号都无特殊含义， 但“$”、“`”（反引号）和“\\”是例外，拥有“调用变量值”,“引用命令”和“转义符”的特殊含义</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">“</td>\n<td style=\"text-align:left\">反引号：反引号括起来的内容是系统命令，在Bash中先会执行它和()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$()</td>\n<td style=\"text-align:left\">和反引号作用相同，用来引用系统命令</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#</td>\n<td style=\"text-align:left\">在shell脚本中,#开头的行代表注释</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$</td>\n<td style=\"text-align:left\">用于调用变量的值，如需要调用变量name的值时，需要用的 <code>$name</code> 方式得到</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\</td>\n<td style=\"text-align:left\">转义符，跟在\\之后的特殊字符将失去特殊含义，变为普通字符</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"基础命令\">基础命令</h2>\n<h3 id=\"查看系统基础信息\">查看系统基础信息</h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.0.22        # 免密登录\n$ cat /etc/redhat-release                                   # 查看CentOS版本\n$ lshw                                                      # 查看硬件详细信息\n$ cat /proc/cpuinfo| grep \"cpu cores\"| uniq  　             # 查看cpu核心数\n$ cat /proc/cpuinfo| grep \"physical id\"|uniq| wc -l         # 查看物理cpu个数\n$ cat /proc/cpuinfo | grep \"processor[[:space:]]:\"| wc -l   # 查看逻辑cpu的个数\n\n$ free -h 　                #查看内存大小</code></pre></div></figure>\n<h3 id=\"添加用户\">添加用户</h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 添加用户 lxl80\n$ useradd lxl80 &amp;&amp; echo \"Lixl.cn\" | passwd --stdin lxl80 \n$ vi  /etc/sudoers\n## Allow root to run any commands anywhere\nroot    ALL=(ALL)       ALL\n# 添加以下内容\nweixin  ALL=(ALL) NOPASSWD: ALL\n\n$ vim /etc/ssh/sshd_config    # 禁止root用户远程登录\nPermitRootLogin   no          # 生效要重启sshd进程。\n$ systemctl restart sshd</code></pre></div></figure>\n<h3 id=\"基础设置\">基础设置</h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ yum install -y wget               # 安装wget\n# 修改yum源\n$ cd /etc/yum.repos.d \n$ mv CentOS-Base.repo CentOS-Base.repo.bak\n$ wget -O ./CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo\n$ yum clean all\n$ yum makecache\n\n$ yum update                        # 升级系统及相关软件\n# 安装必备软件\n$ yum install net-tools -y          # 安装常用网络工具\n$ yum install bash-completion -y    # 命令自动补全    \n$ echo -e 'set completion-ignore-case on' &gt;&gt; ~/.inputrc &amp;&amp; bind -f  ~/.inputrc     # 命令补全忽略大小写\n\n$ yum install ntp                   # 与NTP服务器进行的同步\n$ systemctl start ntpd\n$ systemctl enable ntpd\n$ ntpdate -u  cn.ntp.org.cn         # 同步时间\n$ date                              # 检查时间\n\n$ yum -y install crontab            # 安装crontab\n$ crontab -e                        # 创建crontab任务\n# 每天2点同步一次，先通过 which ntpdate 查找命令所在路径\n$ * 2 * * * /sbin/ntpdate cn.ntp.org.cn &gt; /dev/null 2&gt;&amp;1   \n$ service crond reload              # 重启crontab</code></pre></div></figure>\n<h3 id=\"磁盘管理\">磁盘管理</h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 以易读的方式查看磁盘占用情况\n$ df -Th\n$ lsblk 　　               # 查看分区和磁盘,列出所有可用块设备的信息\n$ fdisk -l                # 分区工具查看分区信息，查看所有被系统识别的磁盘\n$ fdisk /dev/sdb  　　     # 分区操作,n,p, , ,w\n\n# 格式化sdb1分区，挂载到/home/weixin，并开机启动自动挂载\n$ mkfs -t ext4 /dev/sdb1 &amp;&amp; mkdir /weixin &amp;&amp; mount /dev/sdb1 /weixin &amp;&amp; echo /dev/sdb1 /weixin ext4 defaults 0 0 &gt;&gt; /etc/fstab\n$ chmod 700 /weixin &amp;&amp; chown weixin:weixin /weixin        # 更改目录权限及归属\n$ resize2fs /dev/sdb      # 扩展ext*磁盘分区文件系统的大小\n$ xfs_growfs /dev/sdb     # 扩展xfs磁盘分区文件系统的大小\n\n$ du -sh *                # 以易读的方式查看当前目录空间占用总计\n$ du -h --max-depth=1     # 查看哪个文件夹或文件占用磁盘最多\n$ du -ch *.tar.gz         # 查看当前文件夹下所有后缀是 tar.gz 的文件的磁盘使用量总和 -c</code></pre></div></figure>\n<h3 id=\"查看网络情况\">查看网络情况</h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ semanage port -l|grep ssh                      # 查看 SELinux 开放给 ssh 使用的端口\n$ semanage port -a -t ssh_port_t -p tcp 12022    # 为 ssh 添加允许使用的端口12022\n$ vi /etc/ssh/sshd_config                               # 查看/修改 ssh 使用的端口\n$ vi /etc/hosts.allow                            # 如果ssh无法链接\nsshd: ALL            ##允许所有ip主机均能连接本机\n\n# 查看当前网络连接情况\n$ netstat -ant|awk '/^tcp/ {++S[$NF]} END {for(a in S) print (a,S[a])}'  \n$ netstat -anlp | grep 1230                  # 查看端口监听\n\n$ systemctl status firewalld                 # 查看防火墙状态\n$ systemctl stop firewalld.service           # 停止防火墙\n$ systemctl disable firewalld.service        # 禁止防火墙开机启动\n$ firewall-cmd --zone=public --permanent --add-port=端口号/tcp    # 新增开放端口\n$ firewall-cmd --zone=public --permanent --remove-port=端口号/tcp # 移除开放端口\n$ firewall-cmd --zone=public --list-ports    # 查看开放端口\n$ firewall-cmd --reload                                   # 刷新防火墙\n\n$ nc -lv 19301                          # 监听本机19301端口\n$ nc 192.168.0.18 19301                 # 连接特定端口\n$ telnet 192.168.0.18 19301                     # 尝试连接19302端口，ctrl+],q退出</code></pre></div></figure>\n<h3 id=\"上传下载文件\">上传下载文件</h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 通过 sftp 上传下载文件\n$ sftp  -i ~/Downloads/newszxl.pem root@106.15.89.34     # 连接服务器\n$ get /data/chainmaker/log/*  .                    # 把log下所有日志下载到本地当前目录\n$ put crypto-config.zip /data/app/chainmaker/      # 把节点证书上传版到服务器\n\n# 通过 scp 远程传输文件\n$ scp -rp /data/ root@192.168.1.3:/data/\n$ scp -rp root@192.168.1.3:/data/ /data/\n\n# 通过 rsync 传输/同步文件,排除/data/dir1/目录下的所有文件，不排除dir1目录\n$ sudo yum install -y rsync\n$ rsync -av --exclude={'.*','dir1/*'} /data/ root@192.168.1.3:/data/</code></pre></div></figure>\n<h3 id=\"清除history\">清除history</h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ history -c                      # 清除所有历史记录\n$ vim ~/.bash_history                       # 按需修改\n$ history -r                      # 重置文件里的内容到内存中，缓存修改</code></pre></div></figure>\n<h3 id=\"窗口管理\">窗口管理</h3>\n<p><a href=\"https://tmux.github.io/\">tmux</a> 是一个终端复用器，可以激活多个终端或窗口，每一个终端都可以访问、运行和控制各自的程序。tmux类似于screen，可以关闭窗口将程序放在后台运行，需要的时候再重新连接。常用快捷键如下：</p>\n<ul>\n<li><code>Ctrl+b %</code>：划分左右两个窗格。</li>\n<li><code>Ctrl+b \"</code>：划分上下两个窗格。</li>\n<li><code>Ctrl+b &lt;方向键&gt;</code>：光标切换到其他窗格。</li>\n<li><code>Ctrl+b x</code>：关闭当前窗格。</li>\n<li><code>Ctrl+b z</code>：当前窗格全屏显示，再使用一次会变回原来大小。</li>\n<li><code>Ctrl+b Ctrl+&lt;方向键&gt;</code>：按箭头方向调整窗格大小。</li>\n</ul>\n<h3 id=\"后台执行\">后台执行</h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">$ command &amp;     # 命令末尾添加＆符号在后台运行\n$ command &gt; /dev/null 2&gt;&amp;1 &amp;   # 将stdout重定向到/dev/null，将stderr重定向到stdout\nctrl + z        # 将一个正在前台执行的命令放到后台，并且处于暂停状态。\n$ bg            # 将一个在后台暂停的命令继续执行。用bg %jobnumber 恢复运行\n$ fg            # 将后台任务切换到前台执行\n$ jobs -l       # 显示当前shell会话中所有已停止和后台进程的状态</code></pre></div></figure>\n<h2 id=\"性能测试\">性能测试</h2>\n<h3 id=\"磁盘测试\">磁盘测试</h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 使用dd磁盘IO简易性能测试\n$ dd if=/dev/zero of=iotestr bs=1024k count=8k conv=fsync   # 测试写性能\n$ dd if=/dev/sda of=/dev/null bs=8k count=1024k  # 测试读性能\n\n# 使用fio进行磁盘专业性能测试\n$ yum install fio -y\n# 测试随机写IOPS：\n$ fio -direct=1 -iodepth=64 -rw=randwrite -ioengine=libaio -bs=4k -size=8G -numjobs=1 -runtime=60 -group_reporting -filename=iotest -name=Rand_Write_IOPS_Test\n# 测试随机读IOPS：\n$ fio -direct=1 -iodepth=64 -rw=randread -ioengine=libaio -bs=4k -size=8G -numjobs=1 -runtime=60 -group_reporting -filename=iotest -name=Rand_Read_IOPS_Test\n# 测试写吞吐量：\n$ fio -direct=1 -iodepth=32 -rw=write -ioengine=libaio -bs=1024k -size=8G -numjobs=1 -runtime=60 -group_reporting -filename=iotest -name=Write_BandWidth_Test\n# 测试读吞吐量：\n$ fio -direct=1 -iodepth=32 -rw=read -ioengine=libaio -bs=1024k -size=8G -numjobs=1 -runtime=60 -group_reporting -filename=iotest -name=Read_BandWidth_Test</code></pre></div></figure>\n<p>延伸阅读：<a href=\"https://cloud.tencent.com/developer/article/1836176?from=15425\">磁盘性能压测—FIO</a></p>\n<h3 id=\"网络测试\">网络测试</h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 网络测试（需要在需要测试的服务器上分别安装iperf）\n$ wget https://iperf.fr/download/source/iperf-3.1.3-source.tar.gz\n$ tar zxvf iperf-3.1.3-source.tar.gz\n$ cd iperf-3.1.3\n$ ./configure\n$ make \n$ make install\n# 服务器端测试命令，后台运行\n$ iperf3 -s -D -i 10 -p 19302 --logfile /data/iperf.log\n# 客户端测试命令，运行60秒,加参数R代表ServerToClient模式\n$ iperf3 -c 192.168.0.18 -t 60 -f M -P 1 -p 19302 --get-server-output\n$ iperf3 -c 192.168.0.18 -t 60 -f M -P 1 -R -p 19302 --get-server-output</code></pre></div></figure>\n<p>延伸阅读：<a href=\"https://docs.azure.cn/zh-cn/articles/azure-operations-guide/virtual-network/aog-virtual-network-iperf-bandwidth-test\">使用 iPerf 进行网络带宽测试</a>，<a href=\"https://www.tuicool.com/articles/emINv2v\">使用 MTR 诊断网络问题</a></p>\n<h2 id=\"系统监\">系统监</h2>\n<h3 id=\"dstat\">dstat</h3>\n<p>dstat 是一个可以取代vmstat，iostat，netstat和ifstat这些命令的多功能产品。使用dstat命令可以查看当前cpu，磁盘，网络，内存页和系统的一些当前状态指标。</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">$ yum install -y dstat\n$ dstat 5     # 5秒统计一次</code></pre></div></figure>\n<p>1、 –total-cpu-usage—- CPU使用率</p>\n<p>usr：用户空间的程序所占百分比；</p>\n<p>sys：系统空间程序所占百分比；</p>\n<p>idel：空闲百分比；</p>\n<p>wai：等待磁盘I/O所消耗的百分比；</p>\n<p>hiq：硬中断次数；</p>\n<p>siq：软中断次数；</p>\n<hr>\n<p>2、-dsk/total-磁盘统计</p>\n<p>read：读总数</p>\n<p>writ：写总数</p>\n<hr>\n<p>3、-net/total- 网络统计</p>\n<p>recv：网络收包总数</p>\n<p>send：网络发包总数</p>\n<hr>\n<p>4、—paging– 内存分页统计</p>\n<p>in： pagein（换入）</p>\n<p>out：page out（换出）</p>\n<p>注：系统的分页活动。分页指的是一种内存管理技术用于查找系统场景，一个较大的分页表明系统正在使用大量的交换空间，通常情况下当系统已经开始用交换空间的时候，就说明你的内存已经不够用了，或者说内存非常分散，理想情况下page in（换入）和page out（换出）的值是0 0。</p>\n<hr>\n<p>5、–system–系统信息</p>\n<p>int：中断次数</p>\n<p>csw：上下文切换</p>\n<p>注：中断（int）和上下文切换（csw）。这项统计仅在有比较基线时才有意义。这一栏中较高的统计值通常表示大量的进程造成拥塞，需要对CPU进行关注。你的服务器一般情况下都会运行运行一些程序，所以这项总是显示一些数值。</p>\n<h3 id=\"vmstat\">vmstat</h3>\n<p>vmstat是Virtual Meomory Statistics（虚拟内存统计）的缩写，可实时动态监视操作系统的虚拟内存、进程、CPU活动。</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ vmstat -S m -t 3     # 3秒刷新一次，以M为单位</code></pre></div></figure>\n<ul>\n<li>r 表示运行队列,当这个值超过了CPU数目，就会出现CPU瓶颈了。</li>\n<li>b 正在等待资源的阻塞内核线程数，大于3表示io性能不好</li>\n<li>bi: 每秒读取的块数</li>\n<li>bo: 每秒写入的块数</li>\n<li>us: 用户进程执行时间(user time)</li>\n<li>sy: 系统进程执行时间(system time)</li>\n<li>id: 空闲时间(包括IO等待时间)</li>\n<li>wa: IO等待所占用的CPU时间的百分比，高过30%时IO压力高。</li>\n</ul>\n<h3 id=\"top\">top</h3>\n<p>top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况。提供了实时的对系统处理器的状态监视。它将显示系统中CPU最“敏感”的任务列表。该命令可以按CPU使用、内存使用和执行时间对任务进行排序；而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定。</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">$ top -s # 在安全模式运行top</code></pre></div></figure>\n<ul>\n<li>Cpu(s) %id：空闲CPU时间百分比</li>\n<li>Cpu(s) %wa：等待I/O的CPU时间百分比</li>\n<li>VIRT：进程占用的虚拟内存，详情可参考: <a href=\"https://www.cnblogs.com/bravery/archive/2012/06/27/2560611.html\">观察进程的内存占用情况</a></li>\n<li>RES：进程占用的物理内存</li>\n<li>SHR：进程使用的共享内存</li>\n<li>i 只显示正在运行的进程</li>\n<li>e 切换内存单位，切换顺序为： k,m,g,t,p</li>\n<li>k 杀掉某进程</li>\n<li>o: COMMAND=chain 过滤进程，只显示启动命令带chain的进程</li>\n</ul>\n<h3 id=\"sysstat\">sysstat</h3>\n<p>一个非常方便的工具，它带有众多的系统资源监控工具，用于监控系统的性能和使用情况。我们在日常使用的工具中有相当一部分是来自sysstat工具包的。同时，它还提供了一种使用cron表达式来制定性能和活动数据的收集计划。以下是包含在sysstat包中的工具：</p>\n<ul>\n<li><a href=\"http://linux.cn/article-4024-1.html\"><strong>iostat</strong></a>: 输出CPU的统计信息和所有I/O设备的输入输出（I/O）统计信息。</li>\n<li><strong>mpstat</strong>: 关于CPU的详细信息（单独输出或者分组输出）。</li>\n<li><strong>pidstat</strong>: 关于运行中的进程/任务、CPU、内存等的统计信息。</li>\n<li><strong>sar</strong>: 保存并输出不同系统资源（CPU、内存、IO、网络、内核等）的详细信息。</li>\n<li><strong>sadc</strong>: 系统活动数据收集器，用于收集sar工具的后端数据。</li>\n<li><strong>sa1</strong>: 系统收集并存储sadc数据文件的二进制数据，与sadc工具配合使用</li>\n<li><strong>sa2</strong>: 配合sar工具使用，产生每日的摘要报告。</li>\n<li><strong>sadf</strong>: 用于以不同的数据格式（CVS或者XML）来格式化sar工具的输出。</li>\n<li><strong>Sysstat</strong>: sysstat工具的man帮助页面。</li>\n<li><strong>nfsiostat</strong>: NFS（Network File System）的I/O统计信息。</li>\n<li><strong>cifsiostat</strong>: CIFS(Common Internet File System)的统计信息。</li>\n</ul>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ yum install sysstat -y                         # 安装\n$ iostat 2 -mxt                                  # 监测IO，2秒刷新一次，以M为单位\n$ pidstat -u 1 10                                # 监测进程，1秒刷新一次</code></pre></div></figure>\n<ul>\n<li>%user：CPU处在用户模式下的时间百分比。</li>\n<li>%nice：CPU处在带NICE值的用户模式下的时间百分比。</li>\n<li>%system：CPU处在系统模式下的时间百分比。</li>\n<li>%iowait：CPU等待输入输出完成时间的百分比。</li>\n<li>%steal：管理程序维护另一个虚拟处理器时，虚拟CPU的无意识等待时间百分比。</li>\n<li>%idle：CPU空闲时间百分比。</li>\n<li>r/s: 每秒完成的读 I/O 设备次数。即 rio/s</li>\n<li>w/s: 每秒完成的写 I/O 设备次数。即 wio/s</li>\n<li>rMB/s: 每秒读M字节数。</li>\n<li>wMB/s: 每秒写K字节数。</li>\n<li>rrqm/s: 每秒进行 merge 的读操作数目。即 rmerge/s</li>\n<li>wrqm/s: 每秒进行 merge 的写操作数目。即 wmerge/s</li>\n<li>avgrq-sz：平均每次设备I/O操作的数据大小，类似于平均每人所买的东西多少</li>\n<li>avgqu-sz：平均I/O队列长度，类似于单位时间里平均排队人数，如果值比较大，表示有大量io在等待。</li>\n<li>await: 平均每次设备I/O操作的等待时间 (毫秒)，类似于平均每人的等待时间，如果远大于svctm说明IO响应太慢。</li>\n<li>r_await：平均每次读请求的等待时间(毫秒)。这包括请求在队列中和执行它们所花费的时间。</li>\n<li>w_await：平均每次写请求的等待时间(毫秒)。这包括请求在队列中和执行它们所花费的时间。</li>\n<li>aqu-sz：发送到设备的请求的平均队列长度。</li>\n</ul>\n<blockquote>\n<p>如果 %util 接近 100%，说明产生的I/O请求太多，I/O系统已经满负荷，该磁盘可能存在瓶颈，同时可以结合vmstat 查看b参数和wa参数。</p>\n<p>另外 await 的参数也要和 svctm 参考比较。差的过高就一定有 IO 的问题。svctm 一般要小于 await (因为同时等待的请求的等待时间被重复计算了)，svctm 的大小一般和磁盘性能有关，CPU/内存的负荷也会对其有影响，请求过多也会间接导致 svctm 的增加。await 的大小一般取决于服务时间(svctm) 以及 I/O 队列的长度和 I/O 请求的发出模式。如果 svctm 比较接近 await，说明 I/O 几乎没有等待时间；如果 await 远大于 svctm，说明 I/O 队列太长，应用得到的响应时间变慢。</p>\n<p>队列长度(avgqu-sz)也可作为衡量系统 I/O 负荷的指标，但由于 avgqu-sz 是按照单位时间的平均值，所以不能反映瞬间的 I/O 洪水。</p>\n<p>更详细的信息，可参考：<a href=\"https://bean-li.github.io/dive-into-iostat/\">深入理解iostat</a></p>\n</blockquote>\n<h3 id=\"iotop\">iotop</h3>\n<p><code>iotop</code> 是一个类似 <code>top</code> 的工具，用来显示实时的磁盘活动。监控 Linux 内核输出的 I/O 使用信息，并且显示一个系统中进程或线程的当前 I/O 使用情况。它显示每个进程/线程读写 I/O 带宽。它同样显示当等待换入和等待 I/O 的线程/进程花费的时间的百分比。</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ yum install iotop\n$ iotop -o   # 仅显示正在占用I/O的进程或者线程，可以随时按o切换\n$ iotop -oP   # 按进程显示</code></pre></div></figure>\n<ul>\n<li>\n<p><code>IO</code>：它显示每个进程的 I/O 利用率，包含磁盘和交换。</p>\n</li>\n<li>\n<p><code>SWAPIN</code>： 它只显示每个进程的交换使用率。</p>\n<p>更多信息可参考：<a href=\"https://cleanli.github.io/cleanhome/posts/2021-01-05/Iotop_usage.html\">https://cleanli.github.io/cleanhome/posts/2021-01-05/Iotop_usage.html</a></p>\n</li>\n</ul>\n<h2 id=\"性能调优\">性能调优</h2>\n<h3 id=\"分析进程调用\">分析进程调用</h3>\n<p>pstack用来跟踪进程栈，如果发现一个服务一直处于work状态（如假死），可以多执行几次pstack，若发现代码栈总是停在同一个位置，很可能就是出问题的地方：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ yum install gdb -y\n$ pstack pid  # 获取进程栈</code></pre></div></figure>\n<p>strace能够动态的跟踪进程执行时的系统调用和所接收的信号：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ yum install -y strace\n$ strace -ttTv o ~/straceout.txt -p 21120 # 查看进程20020的系统调用情况</code></pre></div></figure>\n<h3 id=\"内核参数优化\">内核参数优化</h3>\n<p>对于服务器来说，file-max和ulimit都需要设置，否则会出现文件描述符耗尽的问题。否则会碰到”Too many open files”或者Socket/File: Can’t open so many files等错误。</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 查看用户进程级的能够打开文件句柄的数量，Centos7默认是1024。\n$ ulimit -a \n# 查看系统级别的能够打开的文件句柄的数量，Centos7默认是794168\n$ cat /proc/sys/fs/file-max\n# 永久生效的修改方法，文件末尾加入配置内容：\n$ vim /etc/sysctl.conf\nfs.file-max = 2000000\n# 然后执行命令，使修改配置立即生效：\n$ sysctl -p\n# 查看当前shell的当前用户的打开的最大限制\n$ ulimit -n\n# 修改一个用户的所有shell能打开的最大数，文件末尾加入配置内容：\n$ vim /etc/security/limits.conf\n* soft nofile 65535\n* hard nofile 65535\n# 修改以后，需要重新登录才能生效。如果需要设置当前用户session立即生效，还需要执行：\n$ ulimit -n 65535 </code></pre></div></figure>\n<h2 id=\"文本处理\">文本处理</h2>\n<h3 id=\"Vim常用命令\">Vim常用命令</h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ vi +/pattern filename   # 打幵文件，并将光标置于第一个与pattern匹配的位置\n# u 撤销刚才执行的命令\n# I 在光标所在行的行首插入随后输入的文本，相当于光标移动到行首执行 i 命令\n# o/O 在光标所在行的下面/上面插入新的一行。光标停在空行首，等待输入文本\n# /abc ?abc 从光标所在位置向前/向后查找字符串 abc，如搜索空格加转义符\\\n# ?abc    从光标所在为主向后查找字符串 abc\n# /^abc /abc$    查找以 abc 为行首/为行尾的行\n# n  N    向同一/相反方向重复上次的查找指令\n# gg 跳转到第一行，G 跳转到最后一行\n# :s/a1/a2/g    将当前光标所在行中的所有 a1 用 a2 替换\n# :n1,n2 s/a1/a2/g    将文件中 n1 到 n2 行中所有 a1 都用 a2 替换\n# :%s/a1/a2/g    将文件中所有的 a1 都用 a2 替换\n# x    删除光标所在位置的字符(放入剪贴板)\n# ndd    删除当前行（包括此行）后 n 行文本(放入剪贴板)\n# dG    删除光标所在行一直到文件末尾的所有内容(放入剪贴板)\n# D    删除光标位置到行尾的内容(放入剪贴板)\n# p(P)    将剪贴板中的内容粘贴到光标后(光标后)\n# 列编辑模式\n$ ctrl + v   # 进入列编辑模式,然后通过光标移动选择要编辑的块\n$ shift + i/a        # 在光标前/后插入，ESC自动补全\n$ shift + c   # 修改内容，ESC自动补全</code></pre></div></figure>\n<h3 id=\"文本处理-2\">文本处理</h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ grep \"put block\" logs -R -n               # 在多级目录中对文本递归搜索\n$ grep -e \"ERROR\" -e \"put block\" file # 匹配多个模式\n$ cat LOG.* | tr a-z A-Z | grep \"FROM \" | grep \"WHERE\" &gt; b    # 将日志中的所有带where条件的sql查找查找出来\n$ sort unsort.txt | uniq                             # 消除重复行\n$ sort unsort.txt | uniq -c                        # 统计各行在文件中出现的次数\n$ sort unsort.txt | uniq -d                        # 找出重复行\n$ echo 12345 | tr '0-9' '9876543210'     # 加解密转换，替换对应字符\n$ cat text| tr '\\t' ' '                           # 制表符转空格\n$ cat file | tr -d '0-9'                          # 删除所有数字\n$ cat file | tr -c '0-9'                             # 获取文件中所有数字\n$ cat file | tr -d -c '0-9 \\n'                 # 删除非数字数据\n$ cut -f2,4 filename                                    # 截取文件的第2列和第4列\n$ paste file1 file2    -d \",\"                        # 将两个文本按列拼接到一起,用,分割\n$ wc -l file                                                     # 统计行数\n$ wc -w file                                                     # 统计单词数\n$ wc -c file                                                     # 统计字符数\n$ sed 's/text/replace_text/' file       # 替换每一行的第一处匹配的text\n$ sed 's/text/replace_text/g' file        # 全局替换，输出替换后的内容\n$ sed -i 's/text/replace_text/g' file    # 全局替换，直接替换源文件\n$ sed '/^$/d' file                                        # 移除空白行</code></pre></div></figure>\n<h3 id=\"awk-数据流处理\">awk 数据流处理</h3>\n<p><a href=\"https://en.wikipedia.org/wiki/AWK\"><code>awk</code></a>是文本处理程序，它依次处理文件的每一行，并读取里面的每一个字段。适用于处理日志、CSV 这种每行格式相同的文本文件。参考：<a href=\"https://www.ruanyifeng.com/blog/2018/11/awk.html\">Awk入门</a> 及 <a href=\"https://likegeeks.com/awk-command/\">30个Awk文本处理示例</a></p>\n<p>脚本结构: <code>awk 'BEGIN{statements} statements2 END{statements}'</code>，工作方式：</p>\n<ul>\n<li>执行begin中语句块；</li>\n<li>从文件或stdin中读入一行，然后执行statements2，重复这个过程，直到文件全部被读取完毕；</li>\n<li>执行end语句块；</li>\n</ul>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 使用不带参数的print时，会打印当前行，输入内容如下：\n$ echo -e \"line1\\nline2\" | awk 'BEGIN{print \"start\"} {print} END{print \"End\"}'    \nstart\nline1\nline2\nEnd\n$ awk '{print $0}' demo.txt        # 把demo.txt文件中每一行原样打印出来\n# 用空格分割，输出字段数&gt;30且第四列为特定字符的行中1，4及倒数第二列，第4列转成大写。','代表用空格分割\n$ awk -F ' ' 'NF&gt;3 {if ($4 = \"CONSENSUS\") print $1,toupper($4),$(NF-1)}' panic.log</code></pre></div></figure>\n<h3 id=\"数字证书\">数字证书</h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">// 查看证书信息\n$ openssl x509 -noout -text -in user/admin1/admin1.tls.crt\n$ openssl x509 -in cert.pem -noout -text</code></pre></div></figure>\n<h2 id=\"系统相关\">系统相关</h2>\n<h3 id=\"hostname-查看主机名\">hostname - 查看主机名</h3>\n<p><code>hostname</code>命令用于查看系统的主机名，或是修改系统的主机名。</p>\n<p><code>hostname</code>的常用命令如下：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 显示系统的当前主机名\nhostname\n\n# 修改你系统的主机名\nhostname blinkfox-system\n\n# 使用 -F 选项，从指定的文件中读取主机名\nhostname -F /root/hostname.txt</code></pre></div></figure>\n<h3 id=\"uptime-查看系统运行时间\">uptime - 查看系统运行时间</h3>\n<p><code>uptime</code>命令用于打印系统的运行时间等信息。使用如下：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">uptime</code></pre></div></figure>\n<h3 id=\"w、who-列出登录的用户\">w、who - 列出登录的用户</h3>\n<p><code>w</code>命令用于显示登录用户及他们当前运行的进程。输入的内容格式如下：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">w\n\n# 打印如下\n22:42  up 18 days, 1 hr, 2 users, load averages: 1.23 1.79 1.75\nUSER     TTY      FROM              LOGIN@  IDLE WHAT\nblinkfox console  -                日19   6days -\nblinkfox s000     -                五23       - w</code></pre></div></figure>\n<p><code>who</code>命令有与<code>w</code>命令类似的用途，但它的功能比<code>w</code>命令更强大一些。语法格式如下：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">who [OPTION]... [FILE | ARG1 ARG2]</code></pre></div></figure>\n<p><code>who</code>常用命令如下：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 显示当前登录的所有用户信息\nwho\n\n# 显示系统的启动时间\nwho -b\n\n# 显示系统登录进程\nwho -l\n\n# 显示与当前标准输入关联的用户信息\nwho -m\n\n# 显示系统的运行级别\nwho -r\n\n# 显示所有登录用户的用户名和登录用户数\nwho -q</code></pre></div></figure>\n<h3 id=\"uname-查看系统信息\">uname - 查看系统信息</h3>\n<p><code>uname</code>命令用于打印内核名称和版本、主机名等系统信息。命令的语法如下所示：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">uname [OPTION]...</code></pre></div></figure>\n<p>常用使用方式如下：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 只打印内核的名称\nuname\n\n# 使用 -n 选项，只打印系统的主机名\nuname -n\n\n# 使用 -r 选项，打印内核版本信息\nuname -r\n\n# 使用 -m 选项，打印系统的硬件名称\nuname -m\n\n# 使用 -p 选项，打印系统的处理器类型信息\nuname -p\n\n# 使用 -i 选项，打印系统的硬件平台信息\nuname -i\n\n# 使用 -a 选项，打印上述所有示例中的信息\nuname -a</code></pre></div></figure>\n<h3 id=\"date-显示和设置系统日期和时间\">date - 显示和设置系统日期和时间</h3>\n<p><code>date</code>命令用于以多种格式显示日期和时间，或设置系统的日期和时间。<code>date</code>命令的语法如下所示：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">date [OPTION]... [+FORMAT]\ndate [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]</code></pre></div></figure>\n<p>常用使用命令如下：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 以默认格式显示系统的当前日期时间\ndate\n\n# 格式化当前日期\ndate +\"%Y-%m-%d\"\n\n# 格式化输出昨天的日期\ndate -d \"1 day ago\" +\"%Y-%m-%d\"\n\n# 2秒后格式化输出\ndate -d \"2 second\" +\"%Y-%m-%d %H:%M.%S\"\n\n# 普通格式化转出\ndate -d \"2009-12-12\" +\"%Y/%m/%d %H:%M.%S\"\n\n# apache格式转换\ndate -d \"Dec 5, 2009 12:00:37 AM\" +\"%Y-%m-%d %H:%M.%S\"\n\n# 日期加减操作\ndate +%Y%m%d #显示前天年月日\ndate -d \"+1 day\" +%Y%m%d #显示前一天的日期\ndate -d \"-1 day\" +%Y%m%d #显示后一天的日期\ndate -d \"-1 month\" +%Y%m%d #显示上一月的日期\ndate -d \"+1 month\" +%Y%m%d #显示下一月的日期\ndate -d \"-1 year\" +%Y%m%d #显示前一年的日期\ndate -d \"+1 year\" +%Y%m%d #显示下一年的日期\n\n# 设定时间\ndate -s # 设置当前时间，只有root权限才能设置，其他只能查看\ndate -s 20160816 # 设置成20160816，这样会把具体时间设置成空00:00:00\ndate -s 01:01:01 # 设置具体时间，不会对日期做更改\ndate -s \"01:01:01 2012-05-23\" # 这样可以设置全部时间\ndate -s \"01:01:01 20120523\" # 这样可以设置全部时间\ndate -s \"2012-05-23 01:01:01\" # 这样可以设置全部时间\ndate -s \"20120523 01:01:01\" # 这样可以设置全部时间</code></pre></div></figure>\n<h3 id=\"id-显示用户属性\">id - 显示用户属性</h3>\n<p><code>id</code>命令用于打印输出用户<code>uid</code>、<code>gid</code>、用户名和组名等用户身份信息。<code>id</code>命令的语法如下所示：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">id [OPTION]... [USERNAME]</code></pre></div></figure>\n<p>常见使用命令如下：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 输出当前用户的uid、用户名、gid、组名及用户属于的群组信息\nid\n\n# 使用 -u 选项，输出用户的 uid\nid -u\n\n#-u 选项和 -n 选项结合使用，输出账户的用户名\nid -un\n\n# 使用 -g 选项，输出帐号当前起作用的gid\nid -g\n\n# -g 与 -n 选项结合使用，输出帐号当前起作用的用户组名\nid -gn\n\n# 使用 -G 选项，输出帐号所属的所有群组id\nid -G root\n\n# -G 与 -n 选项结合使用，输出账号所属的所有群组的名称\nid -Gn root</code></pre></div></figure>\n<h2 id=\"文件和目录操作\">文件和目录操作</h2>\n<h3 id=\"touch-创建文件\">touch - 创建文件</h3>\n<p><code>touch</code>命令就可用于创建、变更和修改文件的时间戳。它是 Linux 操作系统的标准程序。<code>touch</code>命令又如下选项：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">-a: 只改变访问时间\n-c: 不创建任何文件\n-m: 只改变修改时间\n-r: 使用指定文件的时间替代当前时间\n-t: 使用 [[CC]YY]MMDDhhmm[.ss] 替代当前时间</code></pre></div></figure>\n<p>touch 命令的常见用法如下：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 创建一个名为 effyl 的新空文件\ntouch effyl\n\n# 同时创建名称分别为 effyl myeffyl lueffyl 的三个文件\ntouch effyl myeffyl lueffyl\n\n# 使用 -a 选项，可以改变或更新文件的最新访问时间，如果文件 effyl 不存在，则新创建一个\ntouch -a effyl\n\n# 使用 -c 选项，可以避免创建一个新文件，并用当前时间更新文件的时间戳\ntouch -c effyl\n\n# 使用 -m 选项，可以只改变文件的修改时间，而访问时间不变\ntouch -m effyl\n\n# 使用 -c 和 -t 选项，来明确设置文件的时间\ntouch -c -t YYMMDDHHMM filename\n\n# 如果想使用文件 myeffyl 的时间戳更新文件 effyl 的时间戳，可以使用 -r 选项\ntouch -r myeffyl effyl</code></pre></div></figure>\n<h3 id=\"mkdir-创建目录\">mkdir - 创建目录</h3>\n<p><code>mkdir</code>命令用于创建一个新目录。最基本的<code>mkdir</code>命令的使用方法如下所示：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 在当前目录下创建一个给定的目录名\nmkdir &lt;dirname&gt;\n\n# 在 backup 中的相对路径创建一个名为 old 的目录\nmkdir backup/old\n\n# 在 backup 中的绝对路径中创建一个名为 old 的目录\nmkdir /home/blinkfox/backup/old\n\n# 使用 -p 选项，会自动创建所有还不存在的父目录\nmkdir -p backup/old\n\n# 使用 -m 选项，可以设置将要创建目录的权限\n# 如：创建一个任何人都有读写访问权限的目录\nmkdir -p -m 777 backup/old</code></pre></div></figure>\n<h3 id=\"cp-复制文件或目录\">cp - 复制文件或目录</h3>\n<p><code>cp</code>命令用于将文件从一个地方复制到另一个地方。原来的文件保持不变，新文件可能保持原名或用一个不同的名字。</p>\n<p>使用 cp 命令复制文件和目录的语法有以下几种：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 复制源文件到目标文件\ncp [OPTION] SOURCE DEST\n\n# 复制一个或多个源文件到一个目录\ncp [OPTION] SOURCE... DIRECTORY\n\n# 同上\ncp [OPTION] -t DIRECTORY SOURCE...</code></pre></div></figure>\n<p>常用使用示例如下：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 在当前目录下，创建一个文件 file.txt 的副本，取名为 newfile.txt\ncp file.txt newfile.txt\n\n# 复制当前目录下的 file.txt 文件到 /tmp 目录下\ncp file.txt /tmp\n\n# 复制当前目录下的所有文件到 /tmp 目录下\ncp * /tmp\n\n# 使用 -p 选项，可以使复制一个文件到新文件时，保留源文件的所有者、权限等信息\ncp -p filename /path/to/new/location/myfile\n\n# 使用 -R 或 -r 选项，恶意递归地复制一个目录\n# 即将一个目录及其下的所有文件和子目录都复制到另一个目录\ncp -R * /home/blinkfox/backup</code></pre></div></figure>\n<h3 id=\"ln-链接文件或目录\">ln - 链接文件或目录</h3>\n<p><code>ln</code>命令用于创建软链接或硬链接。使用 -s 选项，可以创建一个软链接：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 在目录 lib 下创建一个软链接 library.so，链接到 /home/blinkfox/src/library.so\nln -s /home/blinkfox/src/library.so /home/blinkfox/lib\n\n# 创建目录的软链接\nln -s /home/blinkfox/src source</code></pre></div></figure>\n<h3 id=\"mv-移动文件或目录\">mv - 移动文件或目录</h3>\n<p><code>mv</code>命令用于将文件和目录从一个位置移到另外一个位置。除了移动文件，<code>mv</code>命令还可用于修改文件或目录的名字。</p>\n<p>mv 命令的基本语法如下所示：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mv SOURCE... DIRECTORY</code></pre></div></figure>\n<p>常用命令如下：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 将当前目录下的文件 source.txt 移到目录 /tmp 下\nmv source.txt /tmp\n\n# 将目录 dir1、dir2 移到目录 dir_dist 下\nmv dir1 dir2 dir_dist\n\n# 将当前目录下的 old.txt 文件更名为 new.txt\nmv old.txt new.txt\n\n# 使用 -i 选项，在重写覆盖目标文件或目录之前给出提示信息\nmv -i old.txt new.txt\n\n# 将当前目录下的所有文件移动到目录 /tmp 下\nmv * /tmp/\n\n# 使用 -i 选项，从 dir1 中移动那些在目标目录中不存在的文件到目标目录\nmv -u dir1/* dir2/</code></pre></div></figure>\n<h3 id=\"rm-删除文件或目录\">rm - 删除文件或目录</h3>\n<p><code>rm</code>命令用于删除指定的文件和目录。其语法如下所示：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rm [OPTIONS]... FILE...</code></pre></div></figure>\n<p><code>rm</code>的常用命令如下：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 删除当前目录下的文件 file1.txt、file2.txt、file3.txt\nrm file1.txt file2.txt file3.txt\n\n# 删除当前目录下的所有文件\nrm *\n\n# 删除你当前帐号主目录下的 temp 目录中的所有文件\nrm ~/temp/*\n\n# 使用 -i 选项，可以在删除每个文件或目录前提示用户确认\nrm -i *\n\n# 删除当前目录下所有以\".doc\"结尾的文件\nrm *.doc\n\n# 删除当前目录下所有文件名中包含\"movie\"字符串的文件\nrm *movie*\n\n# 删除当前目录下所有以\"a\"开头的文件\nrm a*\n\n# 删除当前目录下整个文件名（包括扩展名）只有 3 个字符的所有文件\nrm ???\n\n# 删除当前目录下文件扩展名有两个字符的所有文件\nrm *.??\n\n# 删除当前目录下文件名中含有字母 a 或 b 或 c 的所有文件\nrm *[abc]*\n\n# 删除当前目录下文件名中包含 0~9 的所有文件\nrm *[0-9]*\n\n# 删除当前目录下文件扩展名是字母 c 或 h 的所有文件\nrm *.[ch]\n\n# 删除 /tmp 目录下的所有文件及其子目录\nrm -rf /tmp/*</code></pre></div></figure>\n<blockquote>\n<ul>\n<li>-f 删除前不提示用户确认，并忽略不存在的文件</li>\n<li>-r 递归地删除目录及其下的内容</li>\n</ul>\n</blockquote>\n<h3 id=\"ls-列出文件名和目录\">ls - 列出文件名和目录</h3>\n<p><code>ls</code>命令是<code>Linux</code>中最常用的命令之一，其作用就是列出文件名和目录。在命令行提示符下，直接输入<code>ls</code>命令，不带任何选项，将列出当前目录下所有文件和目录，但不会显示详细的信息，比如，文件类型、大小、修改日期和时间、权限等。</p>\n<p>以下便是<code>ls</code>命令及其选项的作用说明：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 仅列出当前目录下所有文件和目录\nls\n\n# 每行显示一条记录，每条记录包括文件类型、大小、修改日期和时间、权限等\nls -l\n\n# 将文件大小显示符合人类阅读习惯的格式\nls -lh\n\n# 将使用不同的特殊字符归类不同的文件类型\nls -F\n\n# 以长列表格式列出某个目录的信息\nls -ld /var/log\n\n# 将递归地列出子目录的内容\nls -R /etc/sysconfig/\n\n# 以长列表格式按文件或目录的修改时间倒序地列出文件和目录\nls -ltr\n\n# 以长列表格式按文件大小顺序列出文件和目录\nls -ls\n\n# 列出包括隐藏文件或目录在内的所有文件和目录，包括“.”（当前目录）和“..”（父目录）\nls -a\n\n# 列出包括隐藏文件或目录在内的所有文件和目录，不包括“.”（当前目录）和“..”（父目录）\nls -A\n\n输出的内容类似于-l选项，指示显示uid和gid，替代显示所有者和用户组\nls -n</code></pre></div></figure>\n<h3 id=\"cat-连接显示文件内容\">cat - 连接显示文件内容</h3>\n<p><code>cat</code> 命令也是 Linux 系统中最常用的命令之一。<code>cat</code>命令让我们可以看看文件的内容、连接文件、创建一个或多个文件和重定向输出到终端或文件。</p>\n<p><code>cat</code>命令的语法如下所示：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cat [OPTION] [FILE]...</code></pre></div></figure>\n<p><code>cat</code>常用命令如下：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 使用 cat 命令查看文件 /etc/group 的内容\ncat /etc/group\n\n# 显示多个文件的内容\ncat /etc/redhat-release /etc/issue\n\n# -n 选项，可以显示文件内容的行号\ncat -n /etc/fstab\n\n# -b 选项和 -n 选项类似，但只标识非空白行的行号\ncat -b /etc/fstab\n\n# -e 选项，将在每一行的结尾显示“$”字符\ncat -e /etc/fstab</code></pre></div></figure>\n<blockquote>\n<p>当你只输入 cat 命令，而没有任何参数时，它只是接收标准输入的内容并在标准输出中显示。所以你在输入一行内容并回车后，会在接下来的一行显示相同的内容。你也可以重定向标准输出到一个新文件。</p>\n<p>dd</p>\n</blockquote>\n<h3 id=\"less、more-分屏显示文件\">less、more - 分屏显示文件</h3>\n<p><code>more</code>命令在你使用小的 xterm 窗口时，或是想不使用文本编辑器而只是简单地阅读一个文件时是很有用的。more 命令是一个用于一次翻阅一整屏文件的过滤器。</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 查看一个文件，自动清空屏幕并显示文件开头部分\nmore /etc/inittab\n\n# 指定一次显示num行\nmore -num /etc/inittab</code></pre></div></figure>\n<p>与<code>more</code>命令相比，我个人更喜欢<code>less</code>命令来查看文件。<code>less</code>命令与<code>more</code>命令类似，但<code>less</code>命令向前和向后翻页都支持，而且<code>less</code>命令不需要在查看前加载整个文件，即<code>less</code>命令查看文件更快速。</p>\n<p><code>less</code>常用命令参数如下：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">-b  &lt;缓冲区大小&gt; 设置缓冲区的大小\n-e  当文件显示结束后，自动离开\n-f  强迫打开特殊文件，例如外围设备代号、目录和二进制文件\n-g  只标志最后搜索的关键词\n-i  忽略搜索时的大小写\n-m  显示类似more命令的百分比\n-N  显示每行的行号\n-o  &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来\n-Q  不使用警告音\n-s  显示连续空行为一行\n-S  行过长时间将超出部分舍弃\n-x  &lt;数字&gt; 将“tab”键显示为规定的数字空格\n/字符串：向下搜索“字符串”的功能\n?字符串：向上搜索“字符串”的功能\nn： 重复前一个搜索（与 / 或 ? 有关）\nN： 反向重复前一个搜索（与 / 或 ? 有关）\nb  向后翻一页\nd  向后翻半页\nh  显示帮助界面\nQ  退出less 命令\nu  向前滚动半页\ny  向前滚动一行\n空格键 滚动一行\n回车键 滚动一页\n[pagedown]： 向下翻动一页\n[pageup]：   向上翻动一页</code></pre></div></figure>\n<h3 id=\"head-显示文件头部\">head - 显示文件头部</h3>\n<p><code>head</code>命令用于打印指定输入的开头部分内容。默认情况下，打印每个指定输入的前 10 行内容。</p>\n<p>使用<code>-n</code>选项可以指定打印文件的前 N 行：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 指定打印文件的前5行\nhead -n 5 /etc/inittab\n（或）head -5 /etc/inittab\n\n# 打印文件的前N个字节的数据\nhead -c 10 /etc/inittab</code></pre></div></figure>\n<h3 id=\"tail-显示文件尾部\">tail - 显示文件尾部</h3>\n<p><code>tail</code>命令和<code>head</code>命令相反，它打印指定输入的结尾部分的内容。默认情况下，它打印指定输入的最后 10 行内容。</p>\n<p>使用<code>-n</code>选项可以指定打印文件的最后 N 行：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 指定打印文件的后10行\ntail -n 10 /etc/inittab\ntail -10 /etc/inittab\n\n# 即时打印文件中新写入的行\ntail -f /var/log/messages\n\n# --retry选项表示持续尝试打开某个文件，当你想打开一个稍后才会创建或即使不可用的文件\ntail -f /tmp/debug.log --retry</code></pre></div></figure>\n<h3 id=\"file-查看文件类型\">file - 查看文件类型</h3>\n<p><code>file</code>命令用于接收一个文件作为参数并执行某些测试，已确定正确的文件类型。</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 查看文件类型\nfile /etc/inittab\n\n# 可以MIME类型的格式显示文件类型的信息\nfile -i  /etc/inittab\n\n# 使用-N 选项，输出的队列可以以在文件名之后无空白填充的形式显示\nfile -N *</code></pre></div></figure>\n<h3 id=\"wc-查看文件统计信息\">wc - 查看文件统计信息</h3>\n<p><code>wc</code>命令用于查看文件的行数、单词数和字符数等信息。语法类似如下所示：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">wc filename\nX Y Z /etc/inittab</code></pre></div></figure>\n<p>其中 X 表示行数，Y 表示单词数，Z 表示字节数，filename 表示文件名。</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># -l选项，可以只统计文件的行数信息\nwc -l /etc/inittab\n\n# -w选项，可以只统计文件的单词数信息\nwc -w /etc/inittab\n\n# -c选项，可以只统计文件的字节数信息\nwc -c /etc/inittab\n\n# -L选项，可以只统计文件中最长的行的长度\nwc -L /etc/inittab</code></pre></div></figure>\n<h3 id=\"find-查找文件或目录\">find - 查找文件或目录</h3>\n<p><code>find</code>命令用于根据你指定的参数搜索和定位文件和目录的列表。<code>find</code>命令可以在多种情况下使用，比如你可以通过权限、用户、用户组、文件类型、日期、大小和其他可能的条件来查找文件。</p>\n<p><code>find</code>命令常用使用和说明如下：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 查找指定目录下的某个文件\nfind /etc/ -name inittab\n\n# 在当前目录下查找名称为 inittab 的文件\nfind . -name inittab\n\n# 在当前目录下，文件不区分大小写是example的所有文件\nfind . -iname example\n\n# 找出当前目录下所有以 sh 结尾的文件\nfind . -type f -name \"*.sh\"\n\n# 找出当前目录下，文件权限是 777 的所有文件\nfind . -type f -perm 777\n\n# 找出当前目录下，文件权限不是 777 的所有文件\nfind . -type f ! -perm 777\n\n# 找出当前目录下所有只读文件\nfind . -type f ! -perm /a+w\n\n# 找出你帐号主目录下的所有可执行文件\nfind ~ -type f -perm /a+w\n\n# 找出 /tmp 目录下的.log文件并将其删除：\nfind /tmp/ -type f -name \"*.log\" -exec rm -f {} \\;\n\n# 找出当前目录下的所有空文件\nfind . -type f -empty\n\n# 找出当前目录下的所有空目录\nfind . -type d -empty\n\n# 找出 /tmp 目录下的所有隐藏文件\nfind /tmp/ -type f -name \".*\"\n\n# 找出 /tmp 目录下，所有者是 root 的文件和目录\nfind /tmp/ -user root\n\n# 找出 /tmp 目录下，用户组是 developer 的文件和目录\nfind /tmp/ -group root\n\n# 找出你账号的主目录下，3 天前修改的文件\nfind ~ -type f -mtime 3\n\n# 找出你账号的主目录下，30 天以前修改的所有文件\nfind ~ -type f -mtime +30\n\n# 找出你账号的主目录下，3 天以内修改的所有文件\nfind ~ -type f -mtime -3\n\n# 找出你账号的主目录下，30 天以前，60 天以内修改的所有文件\nfind ~ -type f -mtime +30 -mtime -60\n\n# 找出 /etc 目录下，一小时以内变更过的文件\nfind /etc -type f -cmin -60\n\n# 找出 /etc 目录下，一小时以内访问过的文件\nfind /etc -type f -amin -60\n\n# 找出你账号主目录下，大小是50MB的所有文件\nfind ~ -type f -size 50MB\n\n# 找出你账号主目录下，大于50MB小于100MB的所有文件\nfind ~ -type f -size +50MB -size -100MB\n\n# 找出你账号主目录下，大于100MB的文件并将其删除\nfind ~ -type f -size +100MB -exec rm -rf {} \\;</code></pre></div></figure>\n<h2 id=\"文本处理-3\">文本处理</h2>\n<h3 id=\"sort-文本排序\">sort - 文本排序</h3>\n<p><code>sort</code>命令用于将文本文件的行排序。默认情况下，<code>sort</code>命令是按照字符串的字母顺序排序。</p>\n<p>sort 的常用命令如下：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 将文本内容按字母顺序排序\nsort example.txt\n\n# 使用 -u 选项，移除所有重复行后排序\nsort -u example.txt\n\n# 使用 -n 选项，将令数字按数值的大小排序\nsort -n example.txt\n\n# 使用 -r 选项，以倒序方式排序\nsort -n -r example.txt\n\n# 同时将 file1、file2 的内容排序\nsort file1 file2</code></pre></div></figure>\n<h3 id=\"uniq-文本去重\">uniq - 文本去重</h3>\n<p><code>uniq</code>命令用于移除或发现文件中重复的条目。</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 它将移除文件中重复的行并显示单一行\nuniq example.txt\n\n# 可以统计重复行出现的次数\nuniq -c example.txt\n\n# 使用 -d 选项，只显示文件中有重复的行并只显示一次\nuniq -d example.txt\n\n# 使用 -D 选项，显示文件中所有重复的行\nuniq -D example.txt\n\n# 使用 -u 选项，只显示文件中不重复的行\nuniq -u example.txt\n\n# 使用 -w 选项，限制 uniq 命令只比较每行的前 3 个字符是否重复\nuniq -w 3 example.txt\n\n# 使用 -s 选项，避免 uniq 命令比较每行的前 3 个字符，只比较后面的字符是否重复\nuniq -s 3 example.txt\n\n# 使用 -f 选项，避免 uniq 命令比较第一列的内容，只比较后面的字符是否重复\nuniq -f 1 example.txt</code></pre></div></figure>\n<h3 id=\"tr-替换或删除字符\">tr - 替换或删除字符</h3>\n<p><code>tr</code>命令主要用于删除文件中控制字符或进行字符转换。使用<code>tr</code>时要转换两个字符串：字符串 1 用于查询，字符串 2 用于处理各种转换。<code>tr</code>刚执行时，字符串 1 中的字符被映射到字符串 2 中的字符，然后转换操作开始。</p>\n<p><code>tr</code>命令的语法如下所示：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">tr [OPTION]... SET1 [SET2]</code></pre></div></figure>\n<p>常用命令示例：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 若要将大括号转换为小括号\ntr '{}' '()' &lt; textfile &gt; newfile\n\n# 若要将大括号转换成方括号\ntr '{}' '\\[]' &lt; textfile &gt; newfile\n\n# 若要将小写字符转换成大写，请输入：\ntr 'a-z' 'A-Z' &lt; textfile &gt; newfile\n\n# 若要创建一个文件中的单词列表\ntr -cs '[:lower:][:upper:]' '[\\n*]' &lt; textfile &gt; newfile\n\n# 若要从某个文件中删除所有空字符\ntr -d '\\0' &lt; textfile &gt; newfile\n\n# 若要用单独的换行替换每一序列的一个或多个换行，请输入：\ntr -s '\\n' &lt; textfile &gt; newfile\n\n# 要以单个“#”字符替换 &lt;space&gt; 字符类中的每个字符序列\ntr -s '[:space:]' '[#*]'</code></pre></div></figure>\n<h3 id=\"grep-查找字符串\">grep - 查找字符串</h3>\n<p><code>grep</code>命令用于搜索文本或指定的文件中与指定的字符串或模式相匹配的行。默认情况下，<code>grep</code>命令只显示匹配的行。</p>\n<p><code>grep</code>命令的语法如下所示：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">grep [OPTION]... PATTERN [FILE]...\ngrep [OPTION]... [-e PATTERN | -f FILE] [FILE]...</code></pre></div></figure>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># `grep`命令查找文件/etc/passwd 中帐号 blinkfox 的信息\ngrep blinkfox /etc/passwd\n\n# 使用 -i 选项，强制 grep 命令忽略搜索关键字的大小写\ngrep -i blinkfox /etc/passwd\n\n# 使用 -r 选项，可以递归搜索指定目录下的所有文件\ngrep -r blinkfox /etc/\n\n# 使用 -w 选项，只匹配包含指定单词的行\ngrep -w blinkfox /etc/\n\n# 使用 -c 选项，报告文件或文本中模式被匹配的次数\ngrep -c blinkfox /etc/passwd\n\n# 使用 -n 选项，显示每一个匹配的行的行号\ngrep -n blinkfox /etc/passwd\n\n# 使用 -v 选项，可以输出除匹配指定模式的行以外的其他所有行\ngrep -v blinkfox /etc/passwd\n\n# 使用 --color 选项，在输出中将匹配的字符串以彩色的形式标出\ngrep --color blinkfox /etc/passwd</code></pre></div></figure>\n<h3 id=\"diff-比较两个文件\">diff - 比较两个文件</h3>\n<p><code>diff</code>命令用于比较两个文件，并找出它们之间的不同。<code>diff</code>命令的语法如下所示：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">diff [OPTION]... from-file to-file</code></pre></div></figure>\n<p>常用使用方式如下：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 比较两个文件\ndiff nsswitch.conf nsswitch.conf.org\n\n# 使用 -w 选项，比较时忽略空格\ndiff -w nsswitch.conf nsswitch.conf.org\n\n# 使用 -y 选项，以并排的格式输出两个文件的比较结果\ndiff -y nsswitch.conf nsswitch.conf.org\n\n使用 -c 选项，以上下对比的格式输出两个文件的比较结果\ndiff -c nsswitch.conf nsswitch.conf.org</code></pre></div></figure>\n<h2 id=\"参考-感谢\">参考&amp;感谢</h2>\n<ul>\n<li><a href=\"https://blinkfox.github.io/2018/10/09/ruan-jian-gong-ju/linux/chang-yong-bash-ming-ling-zheng-li-zhi-cha-kan-wen-jian-he-mu-lu/\">常用Bash命令整理之查看文件和目录</a></li>\n<li><a href=\"https://blinkfox.github.io/2018/10/13/ruan-jian-gong-ju/linux/chang-yong-bash-ming-ling-zheng-li-zhi-qi-ta-chang-yong-ming-ling/\">常用Bash命令整理之其他常用命令</a></li>\n<li><a href=\"https://blinkfox.github.io/2018/10/11/ruan-jian-gong-ju/linux/chang-yong-bash-ming-ling-zheng-li-zhi-wen-ben-chu-li/\">常用Bash命令整理之文本处理</a></li>\n<li><a href=\"https://blinkfox.github.io/2018/10/09/ruan-jian-gong-ju/linux/chang-yong-bash-ming-ling-zheng-li-zhi-cha-kan-wen-jian-he-mu-lu/\">常用Bash命令整理之查看文件和目录</a></li>\n<li><a href=\"https://www.lixl.cn/2021/082248231.html\">Linux常用命令</a></li>\n</ul>\n",
            "tags": [
                "linux",
                "bash"
            ]
        },
        {
            "id": "https://blog.17lai.site/posts/495db4d3/",
            "url": "https://blog.17lai.site/posts/495db4d3/",
            "title": "CMake快速入门教程",
            "date_published": "2021-10-12T04:25:00.000Z",
            "content_html": "<h2 id=\"1-cmake简介\">1.cmake简介</h2>\n<p>cmake是跨平台的makefile文件生成工具,是为了解决各个平台下面make工具不同造成的makefile文件格式不同的问题.也就是cmake是用来解决跨平台编译问题的.常见的还有autotool工具集，该工具集用于GNU软件协议的makefile文件生成，方便GNU包的编译和安装。</p>\n<h2 id=\"2-cmake文件编辑规则\">2.cmake文件编辑规则</h2>\n<ul>\n<li>1)<strong>命令不区分大小写，但是变量区分大小写</strong>。</li>\n<li>2)<strong>注释</strong>使用#符号</li>\n<li>3)命令如果有多个参数，互相之间用空格隔开</li>\n</ul>\n<h2 id=\"3-cmake保留变量\">3.cmake保留变量</h2>\n<p>cmake里面有很多的预定义变量,是程序环境固有的,比如CUDA_NVCC_FLAGS,不同的变量有固定的作用,比如CUDA_NVCC_FLAGS是nvcc的参数list,变量可以使用set命令和list命令进行赋值和追加值,要注意的是变量可能可以有多个值,值与值之间用分号分开,可以使用set(var a b c)给var赋值a b c,还可以使用list命令给var追加删除插入值等,不同的变量有不同的值域,需要查阅<a href=\"https://cmake.org/documentation/\">手册</a></p>\n<h2 id=\"4-cmake变量引用\">4.cmake变量引用</h2>\n<p>cmake里面变量的取值引用要使用${var}的形式,但是在赋值的时候是不需要的,和shell命令有点相似.</p>\n<h2 id=\"5-cmake指定Debug和Release版本\">5.cmake指定Debug和Release版本</h2>\n<p>指定Debug和Release一共有三种方法：</p>\n<p>1.使用ADD_COMPILE_OPTIONS()加入-g指定Debug版本.</p>\n<p>2.使用SET( CMAKE_BUILD_TYPE Debug/Rrelease)指定Debug<br>\n在下面加入：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-cmake\" data-language=\"cmake\"><code class=\"language-cmake\">SET(CMAKE_CXX_FLAGS_DEBUG \"$ENV{CXXFLAGS} -O0 -Wall -g2 -ggdb\")\nSET(CMAKE_CXX_FLAGS_RELEASE \"$ENV{CXXFLAGS} -O3 -Wall\")</code></pre></div></figure>\n<p>上面的设置C++编译选项，对于C语言，设置CMAKE_C_FLAGS_DEBUG、CMAKE_._FLAGS_RELEASE变量，一般来说最好两个都设置原因是CMake 中有一个变量 CMAKE_BUILD_TYPE ,可以的取值是 Debug Release等.当这个变量值为 Debug 的时候,CMake 会使用变量 CMAKE_CXX_FLAGS_DEBUG 和 CMAKE_C_FLAGS_DEBUG 中的字符串作为编译选项生成 Makefile</p>\n<p>编译动态库or静态库时，最好通过修改CXXFLAGS和CFLAGS，以支持-fPIC，这个选项有时是默认开启，有时默认关闭，但为了以后的应用，库文件最好都使用-fPIC编译</p>\n<ol start=\"3\">\n<li>在使用cmake命令时加上-DCMAKE_BUILD_TYPE=Debug/Release</li>\n</ol>\n<h2 id=\"5-cmake指定生成文件\">5.cmake指定生成文件</h2>\n<p>CUDA_ADD_LIBRARY()指明目标文件是库文件,CUDA_ADD_EXECUTABLE()指明生成的文件为可执行文件</p>\n<h2 id=\"6-配置模板\">6.配置模板</h2>\n<p>通常我们要在工程目录下面创建include、src文件夹，include文件夹里面存放头文件，src文件夹里面存放源代码，注意这时候的源代码里面包含头文件的路径应该是“…/include/xx.h”，然后在工程根目录下面创建CMakeLists.txt文件，里面写入命令.在编译的时候为了不搞乱工程目录，在工程根目录下面创建build文件夹，在里面使用“cmake …”命令创建CMakefile,再make即可。</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-cmake\" data-language=\"cmake\"><code class=\"language-cmake\">#指定cmake最低版本号\ncmake_minimum_required(VERSION 3.2)\n\n#指定项目名称\nPROJECT(Liner_Struct)\n\n#指定头文件目录，不同目录用空格隔开,目录中有空格可用引号\n#如果是相对路径，相对于CMakeLists.txt文件\nINCLUDE_DIRECTORIES(include)\n\n#指定源文件目录，DIR_SRCS值自定义变量，下面的命令对其进行了赋值\nAUX_SOURCE_DIRECTORY(src DIR_SRCS)\n\n#设置变量用于存放所有的编译文件，\n#TEST_LINER_STRUCT是自定义变量，使用SET给其赋值\nSET(TEST_LINER_STRUCT ${DIR_SRCS})\n\n#增加编译选项\n#判断是否为gcc编译器，如果是，增加编译选项\n#c99是c语言的标准，常用的还有c++标准c++11\n#下面的命令判断是否编译器是gcc\n#message命令是输出信息,例如下面的输出“optional:-std=c99”\nif(CMAKE_COMPILER_IS_GNUCXX)\n    ADD_COMPILE_OPTIONS(-std=c99)\n    message(STATUS \"optional:-std=c99\")\nendif(CMAKE_COMPILER_IS_GNUCXX)\n\n#配置生成文件\n#${PROJECT_NAME}是cmake自带变量，其值和PROJECT()命令指定的一样\n#${TEST_LINER_STRUCT}是自定义变量，上文赋值的\nADD_EXECUTABLE(${PROJECT_NAME} ${TEST_LINER_STRUCT})</code></pre></div></figure>\n<h2 id=\"7-if-else语句\">7.<a href=\"https://cmake.org/cmake/help/v3.0/command/if.html\">if-else</a>语句</h2>\n<p>cmake中的if-else语句</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-cmake\" data-language=\"cmake\"><code class=\"language-cmake\">if(exp)\n     cmdA\n     cmdB\nelseif(exp)\n      cmdC\nendif(exp)</code></pre></div></figure>\n<p>最简单得到一个应用</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-cmake\" data-language=\"cmake\"><code class=\"language-cmake\">if(ARM)\n   #ARM平台\nelse()\n  #非ARM平台 \nendif()</code></pre></div></figure>\n<p>使用cmake -DARM=1 … 时编译ARM代码，使用cmake -DAMR=0 …编译非ARM代码</p>\n<h2 id=\"8-与平台编译器的结合\">8.与平台编译器的结合</h2>\n<h3 id=\"8-1windows\">8.1windows</h3>\n<p>在windows上运行cmake可以生成对应的VS的工程文件，然后使用相应的VS打开工程就可以进行编译。要注意的是如果使用VS2010及其以前的版本，C不支持C99，也就是变量的命名必须放在函数或者域的最前面，不能放在中间，特别麻烦。VS2015在安装后可能还需要打开VS，新建工程时选择VC<ins>可能相关组件还没有安装，如果这时候使用cmake会提示找不到C、C</ins>编译器（类似yuNo CMAKE_CXX_COMPILER could be found）的错误。安装了相关的组件后cmake即不会有错误。</p>\n<h3 id=\"8-2-为VS2015生成的项目\">8.2 为VS2015生成的项目</h3>\n<p>打开工程文件后可以看到有3个项目，其中只有一个和我们有直接关系，就是我们在CMakeLists.txt里面定义的PROJECT_NAME,剩下的两个是ALL_BUILD和ZERO_CHECK.</p>\n<p><strong>ZERO_CHECK</strong><br>\n该目标会检查生成工程的 CMake 配置文件（ CMakeLists.txt ）是否更新。如更新，将运行 CMake 重新生成工程文件。</p>\n<p>如果确信 CMakeLists.txt 不会被更新，或者希望手工运行 CMake 重新生成工程文件，可以在 CMakeLists.txt 配置文件中添加 set(CMAKE_SUPPRESS_REGENERATION FALSE) 命令， ZERO_CHECK 目标将不会生成。</p>\n<p><strong>ALL_BUILD</strong><br>\n该目标会导致工程中所有项目被构建，类似 Visual Studio 的 Build All 或者 make 的 make all命令。</p>\n<p>转载 <a href=\"https://lightzhan.xyz/index.php/2020/03/11/cmake-quick-tutorial/\">CMake快速入门教程</a></p>\n",
            "tags": [
                "linux",
                "cmake",
                "develop"
            ]
        },
        {
            "id": "https://blog.17lai.site/posts/b1fe1bb8/",
            "url": "https://blog.17lai.site/posts/b1fe1bb8/",
            "title": "Debian Lenny Laptop安装记录",
            "date_published": "2021-08-18T08:25:00.000Z",
            "content_html": "<h2 id=\"Debian-Lenny-Laptop安装记录\">Debian Lenny Laptop安装记录</h2>\n<p>这是一篇非常有历史的文章了，写了十多年了。只在个人google doc中公开共享过。时至今日，参考价值还是非常大的。</p>\n<p>目的是完全采用Linux系统来完成所有工作。</p>\n<p>这篇文章当年我写了一周，每个步骤都是实践后仔细记录的。</p>\n<h2 id=\"摘-要\">摘 要</h2>\n<p>​        在现在电子信息化社会中，网络越来越重要，各种电子商务，网上银行，网络交友，SNS社区等越来越红火，各国政府都在进行电子信息化建设，准备网上办公，无纸化作业。信息化就是现代化的思想已经深入人心，然而信息化建设的基础硬件和软件：</p>\n<p>硬件：CPU、主板、内存，硬盘等</p>\n<p>软件：操作系统（Operate System如Linux,Windows,Mac OS等），浏览器(如Firefox，Opera，Maxthon，IE等)，文档处理（OpenOffice,WPS,Word等），媒体播放（Mplayer,Realplayer等），以及其它软件工具。</p>\n<p>则是其中的重中之重，电子信息化社会信息安全最为关键。因为你不知道微软的Windows中给你预留了多少漏洞和后门，你不知道Intel或者AMD在它们生产的硬件中留下了什么缺陷，了解一点软硬件知识的人都知道，软件后门可以使微软进入你的电脑如同自己的电脑一样，微软可以看到所有你的文档，照片，工作生活的数据，你的电脑中的数据对微软而言没有任何秘密而言；硬件缺陷同样可以做后门用，甚至发送一段短码瞬间可以使你的电脑崩溃。可见安全多么重要，那么如何提高安全了？</p>\n<p>​        答案就是使用开源！开源早已经形成了一套完整的套件，上面介绍的软件中每样的地一种都是开源工具，完全免费！而且开放源代码，你可以知道每行代码的作用，后门、间谍将不复存在！你常用的Windows工具每样Linux都有替代品，很多工具甚至本来就是Linux中移植到Windows中来的，如暴风影音，比特精灵，Vim，Emacs等。</p>\n<p>​        本文简单的介绍了开源操作系统Debian的安装和配置，包括操作系统的安装、配置，常用工具的安装等详细过程，下文所叙全部经过测试，稳定运行。通过本文，您可以了解Linux操作系统大体组成结构，并且获得一部完全自己定制的操作系统！</p>\n<p>[TOC]</p>\n<h2 id=\"一：前言\">一：前言</h2>\n<h3 id=\"从今天开始做个Debianer\">从今天开始做个Debianer</h3>\n<p>刚从OpenSuSE 换过来的，感觉Debian非常强大。SuSE的yast2真的非常强大，刚离开yast感觉很痛苦，Novll的yast系统设置几乎在里面实现，它包括了系统硬件，软件设置，网络配置，服务器配置，各种系统设置等等。它把很多底层配置都接管了，使用SuSE的用户会发现SuSE比其他Linux发行版少很多配置文件。SuSE的yast2有命令行和图形界面两种操作方式，还有zypper这种完全命令行包管理工具。不过Debian的apt包管理更加强大，比zypper强大多了。</p>\n<p>Debian以定制性非常强，运行稳定而著称，是最符合GNU精神的发行版，对各种硬件构架都支持，是世界上唯一一种几乎可以在所有硬件平台运行的操作系统。Ubuntu就是在Debian的基础上发行的衍生版。但是本人使用感觉Ubuntu的感觉不好，Ubuntu就像一个在Debian testing基础上优化过得Debian一样，而且阉割的厉害。不过正由于阉割的厉害，把用户管理的东西Ubuntu都自己设置了，Ubuntu才成为最容易操作的Linux操作系统，而且也是最流行的Linux操作系统。不过Ubuntu限制用户操作非常严，感觉这样很大程度上失去了Linux的自由，可定制等特性。对Linux新人来说一开始使用Debian会非常困难的，强烈建议对Linux包管理，运行结构了解大概后再开始使用Debian。</p>\n<p>推荐的发行版有：</p>\n<p><strong>OpenSuSE</strong>：优点是从Windows转过来几乎马上就可以上手，用户不需要改变多少使用习惯，并且图形界面非常华丽，号称是最华丽的Linux操作系统。默认的就比Windows XP漂亮多了，开启Compiz Fusion后的3D特效比Vista,Win 7都要漂亮。对一般用户家庭使用和办公使用完全可以满足要求。缺点就是国内源很少，官方源在国外比较慢，速度也不保证，升级只能是半夜了，不过采用DVD安装的话就没多大问题。SuSE的中文社区不完善也是一大缺点。</p>\n<p><strong>Fedora</strong>：著名的Redhat公司出品，国内源非常多，中文化非常好，中文社区也非常活跃，很多问题可以直接中文搜出结果。缺点是对习惯Windows的用户来说，一开始就使用Fedora对大家的入门门坎比OpenSuSE高。</p>\n<p><strong>Ubuntu</strong>：最流行的Linux发行版，使用非常简单，中文社区建设的非常好，源很多，缺点就是阉割的太厉害了。感觉这样的版本对深入了解Linux不好，个人看法，不过对非技术型用户使用到是个不错的选择。</p>\n<p><strong>Debian</strong>是最自由，定制性最高的发行版，当然对用户的入门要求就更高了。但是，一经你上手了，那么就再别无他求。Debian的好是谁用谁知道！</p>\n<p>刚用上Debian，总结下，下面可能有错误之处，希望大家指出来。参考了很多人的文章下来的，对他们表示感谢！</p>\n<p>注意：本教程为</p>\n<h2 id=\"二：安装Debian之前的准备工作\">二：安装Debian之前的准备工作</h2>\n<p>●   强烈建议新人刚开始装不要按《 Debian etch 简要安装指南》那篇文章来，特别是笔记本用户，除非你对你的硬件非常熟悉。建议大家安装的时候选择图形界面安装。安装的时候选择图形界面，把Base system,Loptop,Desktop都安装上，这样会少很多麻烦的，它装了多余的东西和服务还是等进入桌面后再自己删除比较好。发现这样安装还是非常干净的，比之SuSE，Fedora之类的发行版默认安装东西要少多了。</p>\n<p>●   阵痛了好几天了，这几天重装了好多次Debian了，现在终于差不多了，3d打开了，系统很稳定。</p>\n<p>笔记本是Dell Inspiron6400。</p>\n<p>●   强烈建议大家装机之前看看debian的官方wiki</p>\n<p>例如我，就看下面这个：</p>\n<p><a href=\"http://wiki.debian.org/InstallingDebianOn/Dell/Inspiron6400/lenny\">http://wiki.debian.org/InstallingDebianOn/Dell/Inspiron6400/lenny</a></p>\n<p>●   大家的笔记本其他型号的话到下面网址找对应的型号</p>\n<p><a href=\"http://wiki.debian.org/InstallingDebianOn/\">http://wiki.debian.org/InstallingDebianOn/</a></p>\n<p>上面网址的参考下就可以了，有些问题很多种解决方法的。</p>\n<h2 id=\"三：开始安装Debian\">三：开始安装Debian</h2>\n<h3 id=\"3-1：安装前的准备和安装方法选择\">3.1：安装前的准备和安装方法选择</h3>\n<p>debian提供了很多安装方法，有网络安装，光盘安装，U盘安装，硬盘安装等多种方法。这里介绍下载光盘安装，这是对大多数人来说最为方便的安装发放，下载第一张光盘CD或者DVD镜像准备刻录安装。</p>\n<p>注意：先备份好重要的资料！比如copy到移动硬盘，或者其它主机上等以免错误的操作造成不必要的损失。</p>\n<p>进入Bios中设置光驱第一启动，放入光盘，等加载内核界面过去后，就进入安装界面了。</p>\n<h3 id=\"3-2：开始安装Debian\">3.2：开始安装Debian</h3>\n<ol>\n<li>\n<p>选择安装程序使用的语言，推荐选择English，选中文会装zhcon。</p>\n</li>\n<li>\n<p>选择国家，首先选择 other ，然后在选择 Asia ，最后选上 China 。</p>\n</li>\n<li>\n<p>选择键盘，直接默认就好了，也就是 American English ，如果你的不是美式键盘，就选择相应的键盘。</p>\n</li>\n<li>\n<p>设置网络，如果是 DHCP ，填上主机名和所在的域名就好了，如果是静态 IP ，根据相应的填上就 OK。这里有无线网卡的朋友就有些郁闷了，记得先去下载你的无线驱动的deb包，放到u盘根目录插上usb结构，系统会自动安装你的无线驱动。（但是这里安装好了还是无法dhcp连上无线，我采用有线装的，不知道谁这里无线配成功了。装完系统后再使用＃apt-get install firmware-iwlwifi 也可以。）</p>\n</li>\n<li>\n<p>磁盘分区，根据个人的情况进行。这里要小心了，如果你有重要的资料的话，推荐手动分区。</p>\n</li>\n<li>\n<p>对分区进行确认后就开始安装基本的系统，等待一段时间。</p>\n</li>\n<li>\n<p>然后就是设置 root 账户的密码，以及日常使用的一个账户名称和密码。</p>\n</li>\n<li>\n<p>账户设置好后对源进行设置，这里推荐手工输入。选择最上面一项。</p>\n</li>\n</ol>\n<p>○   输入：<a href=\"http://debian.cn99.com\">debian.cn99.com</a> 或者：<a href=\"http://mirrors.163.com\">mirrors.163.com</a></p>\n<p>○   目录就是/debian/   不需要改动。这两个其实都是一个源，我看到主机ip地址一样。这个应该是国内最快的源了。至少对大部分人来说。</p>\n<ol start=\"9\">\n<li>\n<p>根据个人的情况选择安装软件，推荐选择base system,laptop,desktop。</p>\n</li>\n<li>\n<p>安装中，看网络状况时间不同，等待…。</p>\n</li>\n<li>\n<p>安装 GRUB ，Yes安装到 MBR。</p>\n</li>\n<li>\n<p>安装完毕，最后 Continue 回车重启进入期待已久的 Debian Lenny GNU/Linux。</p>\n</li>\n</ol>\n<h2 id=\"四：配置Debia的基本中文操作环境\">四：配置Debia的基本中文操作环境</h2>\n<p>他哦难过上面二、三步，到现在你已经获得了一个基本的Debian Lenny操作系统了。但是到现在为止说能够顺手使用还太早，在正是使用之前还有几个事情需要做。</p>\n<p>（注意＃号提示的是root用户权限）</p>\n<h3 id=\"4-1：中文语言环境\">4.1：中文语言环境</h3>\n<h4 id=\"4-1-1-重新配置locale，添加中文locale\">4.1.1:重新配置locale，添加中文locale</h4>\n<p>​        选择以下locale，以下为推荐语言环境，用户可以根据自己语言习惯自由选择：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#dpkg-reconfigure locales\nen_US ISO-8859-1\nen_US.UTF-8 UTF-8\nzh_CN GB2312\nzh_CN.GB18030 GB18030\nzh_CN.GBK GBK\nzh_CN.UTF-8 UTF-8\nzh_HK BIG5-HKSCS\nzh_HK.UTF-8 UTF-8\nzh_TW BIG5\nzh_TW.EUC-TW EUC-TW\nzh_TW.UTF-8 UTF-8</code></pre></div></figure>\n<p>选择默认的locale为en_US.UTF-8或者 zh_CN.UTF-8。</p>\n<h4 id=\"4-1-2-安装localepurge\">4.1.2:安装localepurge</h4>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">＃apt-get install localepurge</code></pre></div></figure>\n<p>​       在对话框中选择你要保留使用的locale，默认情况下它已经选好了你现前设置的那些locale，不过还是请仔细确认后再回车。当然你也可以使用 dpkg-reconfigure localepurge 来进行详细的配置。</p>\n<p>●   清除你用不着的locale，让他们释放你的磁盘空间</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">＃localepurge</code></pre></div></figure>\n<p>​       以后你不管安装什么软件，它都将自动帮你清除那些没用的locale。清除完，它会提示你释放了多少磁盘空间。当然你可以配置它让它显示清除了哪些locale。</p>\n<p>​       Linux下面还有其他工具清理,如BleachBit，这是一款专为Linux 设计的系统清理工具。使用BleachBit，你可以清理系统中的缓存、不要的语言文件，历史、临时文件、cookies 等不需要的东西，这样可以释放你空间。推荐，不过Stable的源中没有该包，需要手动下载安装。</p>\n<h3 id=\"4-2-实现root用户登录自动Tab补全\">4.2:实现root用户登录自动Tab补全</h3>\n<p>修改 .bashrc ，打开bash_completion，让apt-get install 在ROOT 登录的情况下自动补全，其他用户自动设置好了的，不用修改。你可以先用VI打开 /etc/bash.bashrc ,在最下面用命令模式下的V 再按上下左右键老选择，按y键复制，（默认打开VI就处于命令模式。i a o s键插入，编辑模式，ESC返回，：q! 退出。） 然后 vi ~/.bashrc 按p 键粘贴。最后象这样</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">if [ -f /etc/bash_completion ]; then\n. /etc/bash_completion\nfi</code></pre></div></figure>\n<p>当然你也可以用nano ,更简单。要复制功能,那么apt-get install gpm 然后 /etc/init.d/gpm start ，现在动下鼠标。是不是在动了，gpm是一个控制台下的鼠标服务。用鼠标左击拖动选中，右键粘贴。</p>\n<h3 id=\"4-3：将用户加入到sudoers列表中\">4.3：将用户加入到sudoers列表中</h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#chmod +w /etc/sudoers\n#vim /etc/sudoers</code></pre></div></figure>\n<p>添加一行：username ALL=(ALL) ALL</p>\n<p>其中username是你的用户名，保存</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#chmod 0440 /etc/sudoers</code></pre></div></figure>\n<p>这样，您的普通用户可以使用\"sudo + [命令]\"来执行需要管理员权限的操作</p>\n<h3 id=\"4-4-配置更新源并更新系统\">4.4:配置更新源并更新系统</h3>\n<h4 id=\"4-4-1-备份旧的源\">4.4.1:备份旧的源</h4>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">＃cp /etc/apt/sources.list /etc/apt/sources.list.old</code></pre></div></figure>\n<h4 id=\"4-4-2-配置新源\">4.4.2:配置新源</h4>\n<p>把下面的加进去，应该可以满足绝大多数人的要求了。</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#gedit /etc/apt/sources.list\n＃＃＃====sources.list Begin===＃＃＃\n##cn99\ndeb http://debian.cn99.com/debian/ lenny main non-free contrib\ndeb-src http://debian.cn99.com/debian/ lenny main non-free contrib\ndeb http://debian.cn99.com/debian/ lenny-proposed-updates main non-free contrib\ndeb-src http://debian.cn99.com/debian/ lenny-proposed-updates main non-free contrib\n \ndeb http://debian.cn99.com/debian-security/ lenny/updates main contrib non-free\ndeb-src http://debian.cn99.com/debian-security/ lenny/updates main contrib non-free\ndeb http://debian.cn99.com/debian-backport/ lenny-backports main contrib non-free\ndeb-src http://debian.cn99.com/debian-backport/ lenny-backports main contrib non-free\ndeb http://security.debian.org/ lenny/updates main contrib non-free\ndeb-src http://security.debian.org/ lenny/updates main contrib non-free\n\ndeb http://volatile.debian.org/debian-volatile lenny/volatile main contrib non-free\ndeb-src http://volatile.debian.org/debian-volatile lenny/volatile main contrib non-free \n\ndeb http://http.us.debian.org/debian/ lenny main contrib non-free\ndeb-src http://http.us.debian.org/debian/ lenny main contrib non-free\ndeb http://www.debian-multimedia.org/ lenny main\ndeb-src http://www.debian-multimedia.org/ lenny main \n\ndeb http://download.virtualbox.org/virtualbox/debian lenny non-free\n＃＃＃===sources.list End===＃＃＃</code></pre></div></figure>\n<p>注意：debian-multimedia.org的源需要安装KEY，在http://debian-multimedia.org 下载安装debian-multimedia-keyring_2008.10.16_all.deb</p>\n<p>Debian采用严格的GPG认证来保证安装包不被恶意篡改，使您已经安装就是最新最稳定的系统！</p>\n<h4 id=\"4-4-3-更新源并升级系统\">4.4.3:更新源并升级系统</h4>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#apt－get update</code></pre></div></figure>\n<p>这里就会提醒你有那些源没有GPG密匙，把错误密匙代号放到 iceweasel的搜索框，回车，就会看到大量的相关问题，随便点开2个就可以看到怎么样取得密匙。这个是偷懒的办法，但是非常有效！建议。</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">＃apt-get update &amp;&amp; apt-get upgrade</code></pre></div></figure>\n<p>这次才是真的升级系统。如果通过网络安装，一般安装过程中就会自动选择最新的稳定的最新无漏洞包，一般来说没有更新包。</p>\n<h3 id=\"四：网卡，声卡及显卡驱动安装\">四：网卡，声卡及显卡驱动安装</h3>\n<h3 id=\"4-1-配置无线网卡和ADSL来上网\">4.1: 配置无线网卡和ADSL来上网</h3>\n<p>系统默认一般会识别有线的网卡驱动，Linux几乎可以识别现在所有的有线网卡，而无线网卡驱动由于是非</p>\n<h4 id=\"4-1-1-配置无线网卡\">4.1.1:配置无线网卡</h4>\n<p>●   驱动 这个看个文的硬件了</p>\n<p>​                   ＃apt-get install firmware-iwlwifi</p>\n<p>​                        ＃modprobe iwl3945   ＃加载内核模块</p>\n<p>​                   这个我的Dell Inspiron6400的无线网卡是Intel 3945，其他无线网卡型号的用户请自己查找相关驱动包。</p>\n<p>●   安装管理工具</p>\n<p>​                   apt-get install wifi-radar</p>\n<p>●   配置无线</p>\n<p>看大家的无线设置，选择Essid,加密方式，频段等。</p>\n<h4 id=\"4-1-2-使用PPPOE连接ADSL\">4.1.2:使用PPPOE连接ADSL</h4>\n<p>●   使用PPPOE连接Adsl</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#apt-get install pppoeconf\n#pppoeconf #设置用户名与密码\n#pon dsl-provider #连接\n#poff #断开</code></pre></div></figure>\n<h3 id=\"4-2-让alsa把你的声卡驱动起来\">4.2:让alsa把你的声卡驱动起来</h3>\n<p>#apt-get install alsa-base alsa-utils alsa-oss</p>\n<p>**配置声卡：**执行 alsaconf 一路回车。 再执行alsa-mixer 设置音量，M键取消静音，ESC 键退出。保存设置 alsactl store。</p>\n<p>**测试 声卡：**cat /dev/urandom &gt; /dev/dsp 你将会听到非常好听的声音，恭喜你，你的声卡工作了。</p>\n<p>ctrl+c 终止它，当然你喜欢它的话，可以不那么做<sup>_</sup></p>\n<p>到这里，你的X服务器和声卡就安装配置好了。</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#apt-get install gnome-audio esound</code></pre></div></figure>\n<p>esound是gnome下的软件混音器</p>\n<h3 id=\"4-3-显卡驱动的安装及配置\">4.3:显卡驱动的安装及配置</h3>\n<p><a href=\"http://wiki.cchtml.com/index.php/Ubuntu_Dapper_Installation_Guide\">http://wiki.cchtml.com/index.php/Ubuntu_Dapper_Installation_Guide</a></p>\n<p>安装编译驱动所需的环境</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo apt-get update\nsudo apt-get install module-assistant build-essential\nsudo apt-get install fakeroot dh-make debconf libstdc++5 linux-headers-$(uname -r)</code></pre></div></figure>\n<p>创建安装包</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo ./ati-driver-installer-8.x.x.run --buildpkg debian/testing</code></pre></div></figure>\n<p>安装这些创建的包b</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo dpkg -i xorg-driver-fglrx_8.x.x-1_i386.deb -f\nsudo dpkg -i fglrx-kernel-source_8.x.x-1_i386.deb -f\nsudo dpkg -i fglrx-control_8.x.x-1_i386.deb -f</code></pre></div></figure>\n<p>删除旧的源码包</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo rm /usr/src/fglrx-kernel*.deb</code></pre></div></figure>\n<p>编译并安装驱动模块</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo module-assistant build fglrx\nsudo module-assistant install fglrx\nsudo depmod -a</code></pre></div></figure>\n<p>编辑你的/etc/X11/xorg.conf</p>\n<p>在 Section “Module” 中加入</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Load \"fglrx\"\nLoad \"dri\"\nLoad \"glx\"</code></pre></div></figure>\n<p>在Section “Device” 中把驱动换成</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Driver \"fglrx\"</code></pre></div></figure>\n<h4 id=\"4-3-1-ATI显卡驱动安装\">4.3.1:ATI显卡驱动安装</h4>\n<p>To build your own .deb packages you will need to install at least the following packages from the apt repositories:</p>\n<p>●   fakeroot</p>\n<p>●   debhelper</p>\n<p>●   build-essential</p>\n<p>●   make</p>\n<p>●   module-assistant</p>\n<h5 id=\"Installing-from-Debian-non-free\">Installing from Debian non-free</h5>\n<p>Note: in lenny, they’ve renamed fglrx-kernel-src to fglrx-source (but the following worked for me with that substitution).</p>\n<h5 id=\"Install-the-driver\">Install the driver</h5>\n<p>sudo apt-get update</p>\n<p>sudo apt-get install module-assistant fglrx-driver fglrx-kernel-src</p>\n<h5 id=\"build-and-install-the-module\">build and install the module</h5>\n<p>#:sudo module-assistant auto-install fglrx-kernel-src</p>\n<p>After this, you need</p>\n<p>#:sudo aticonfig --initial</p>\n<p>This will update your xorg.conf to use the new driver. Restart for the changes to take effect.</p>\n<p>＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝</p>\n<p><strong>1</strong> <strong>构建相应的系统驱动包：</strong></p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./ati-driver-installer-8.41.7-x86.x86_64.run --buildpkg Debian/unstable</code></pre></div></figure>\n<p>我们可以用下面的命令来列出所有可以构建的程序包：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./ati-driver-installer-8.41.7-x86.x86_64.run --listpkg</code></pre></div></figure>\n<p>我们可以从这个输出中选择适合我们系统的参数来进行构建相应的程序包。</p>\n<p><strong>2</strong> <strong>安装所构建的程序包：</strong></p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># dpkg -i fglrx*.deb</code></pre></div></figure>\n<p><strong>3</strong> <strong>安装module-assistant工具：</strong></p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># apt-get install module-assistant</code></pre></div></figure>\n<p><strong>4</strong> <strong>使用m-a安装驱动模块</strong></p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># m-a prepare\n# m-a a-i fglrx</code></pre></div></figure>\n<p>驱动模块的安装需要相应的内核头文件，所以我们在进行这一步之前需要安装相应的头文件：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># apt-get install linux-headers-`uname -r`</code></pre></div></figure>\n<p>这样就可以自动来安装fglrx驱动模块了。</p>\n<p>此时我们可以通过下面的命令来测试fglrx驱动模块是否安装成功：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># modprobe fglrx </code></pre></div></figure>\n<p><strong>5</strong> <strong>配置Xorg.conf</strong></p>\n<p>在配置中我们要做的主要工作就要载入fglrx模块，在\"Deveice\"部分，将vesa驱动改为fglrx，重新启动X。如果一切正常，我们就可以享受到ATI驱动的带来的视觉效果了。</p>\n<p>我们可以用下面的命令来检测我们的ATI驱动是否安装成功：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ fglrxinfo</code></pre></div></figure>\n<p>我们应得到下面的输出：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">display: :0.0 screen: 0\nOpenGL vendor string: ATI Technologies Inc.\nOpenGL renderer string: ATI Mobility Radeon HD 2400 XT\nOpenGL version string: 2.1.7059 Release</code></pre></div></figure>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ glxinfo | grep direct</code></pre></div></figure>\n<p>我们希望的输出结果为：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">direct rendering: Yes</code></pre></div></figure>\n<p>而我们在源中也可以找到相应的fglrx程序包：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># apt-cache search fglrx</code></pre></div></figure>\n<p>个人觉得没有必要非得安装所谓的官方驱动包，因为由所谓的官方驱动包中所解出正是源中的几个程序包，而我在安装了官方的驱动程序包后进行了一下upgrade，居然更新其中的两个包，既然这样，我们还不如直接安装源中的驱动程序包方便：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># apt-get install fglrx* </code></pre></div></figure>\n<p>使用m-a安装驱动模块时，我们也可以使用分步的安装方式，先编译，再安装，而不必一步到位：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># m-a get fglrx\n# m-a build fglrx</code></pre></div></figure>\n<p>这 时就会在/usr/src/目录下生成一个fglrx的deb包。编译驱动程序模块时需要安装Linux内核头文件，我的内核是自己编译的2.6.23， 但是在源中却迟迟没有相应的头文件包，真是相当郁闷的说。但是即使是这样，我却依然得到了一个编译生成的fglrx的deb包。我们可以使用dpkg来进 行安装。</p>\n<p>最后需要进行Xorg的配置。最简单的就是将驱动改为fglrx。当然我们也可以使用ati所提供的相应工具来进行配置：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># aticonfig --initial --input=/etc/X11/xorg.conf</code></pre></div></figure>\n<p>这会进行相应的检测，并且修改xorg.conf文件。</p>\n<h4 id=\"4-3-2-NVIDIA显卡驱动的安装\">4.3.2:NVIDIA显卡驱动的安装</h4>\n<h2 id=\"五：常用软件安装及配置\">五：常用软件安装及配置</h2>\n<p>​            发现Debian 即使是选择了base system,laptop,desktop其实也没有装多少东西，很多还需要自己安装,例如alsa-oss,gnome-audio等默认没有安装（应该没有记错）。下面很多东西可能系统已经安装了，但是这么做没有错的，下面的都是几乎不可缺少的组件。</p>\n<h4 id=\"5-1-Gnome相关\">5.1:Gnome相关</h4>\n<h4 id=\"5-1-1-Gnome基本系统及基本管理工具\">5.1.1:Gnome基本系统及基本管理工具</h4>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#apt-get install xorg gnome-core gdm gdm-themes gnome-system-tools gconf-editor nautilus-open-terminal gnome-power-manager gnome-screensaver</code></pre></div></figure>\n<p>xorg X窗口系统</p>\n<blockquote>\n<p>gnome-core     gnome核型组件</p>\n<p>gdm  #gnome 默认的窗口管理器</p>\n<p>gnome-system-tools     服务、网络等系统工具</p>\n<p>gconf-editor     配置编辑器</p>\n<p>nautilus-open-terminal    在右键菜单中加入终端</p>\n<p>gnome-power-manager   #电源管理，休眠支持</p>\n<p>gnome-screensaver      #锁屏</p>\n<p>gconf-editor     #配置编辑器</p>\n<p>ntfs-3g  #支持NTFS文件格式的读写</p>\n<p>nautilus-gksu #以管理员权限打开目录</p>\n</blockquote>\n<h4 id=\"5-1-2-安装gnome主题、图标、背景\">5.1.2:安装gnome主题、图标、背景</h4>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#apt-get install  gnome-themes gnome-icon-theme-dlg-neu gnome-backgrounds</code></pre></div></figure>\n<h3 id=\"5-3-常用软件工具安装\">5.3:常用软件工具安装</h3>\n<h4 id=\"5-3-1-字体安装\">5.3.1:字体安装</h4>\n<h5 id=\"●-使用apt\">●   使用apt</h5>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">＃ apt-get install ttf-bitstream-vera ttf-arphic-uming  ttf-freefont #ttf-freefont 解决flash菜单可能的乱码，</code></pre></div></figure>\n<p>WQY点整字体: apt-get install xfonts-wqy</p>\n<p>ttf-wqy-zenhei #文泉驿正黑字体</p>\n<h5 id=\"●-手工安装字体\">●   手工安装字体</h5>\n<p>把字体\".ttf\"字体copy到\"/usr/share/fonts\"下面的某目录中</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo mkfontscale\nsudo mkfontdir\nsudo fc-cache</code></pre></div></figure>\n<h5 id=\"●-系统字体优化：\">●   系统字体优化：</h5>\n<p>1.右击桌面，打开外观管理器中的字体选项卡，将其中的字体全部改成雅黑字体，同时把窗口标题设置为加粗，并选择LCD模式。</p>\n<p>2.在终端里输入指令</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo gedit /etc/fonts/conf.d/49-sansserif.conf</code></pre></div></figure>\n<p>将其中的字体全部改成雅黑，该操作也可以同时解决flash中出现方框的问题。</p>\n<h4 id=\"\"></h4>\n<p>5.3.2:输入法</p>\n<p>●   安装scim中文输入法，可选其他的如fcitx</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#apt-get install scim scim-pinyin scim-tables-zh im-switch\n#im-switch -z en_US -s scim #英文系统下使用SCIM：\nscim-qtimm #scim兼容QT程序\n#im-switch -s scim -z default</code></pre></div></figure>\n<p>●   光标跟随</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#gedit /etc/X11/xinit/xinput.d/scim\n#GTK_IM_MODULE=xim\n#QT_IM_MODULE=xim\nGTK_IM_MODULE=scim\nQT_IM_MODULE=scim</code></pre></div></figure>\n<p>●   或者选择fctix</p>\n<p>不管你是kde还是gnome 安装fcitx就这样：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">apt-get install fcitx im-switch\nim-switch -s fcitx -z default</code></pre></div></figure>\n<h4 id=\"5-3-3-双击安装deb文件\">5.3.3:双击安装deb文件</h4>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#apt-get install gdeb</code></pre></div></figure>\n<h4 id=\"5-3-4-压缩与解压缩\">5.3.4:压缩与解压缩</h4>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#apt-get install file-roller p7zip-full cabextract rar unrar  p7zip-rar rar unrar cabextract#7z,rar，cab\n\n＃apt-get install gnochm</code></pre></div></figure>\n<h4 id=\"gnochm-CHM阅读，或者chmsee\">gnochm #CHM阅读，或者chmsee</h4>\n<p>5.3.5:安装OpenOffice.org</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#apt-get install openoffice.org-writer openoffice.org-calc openoffice.org-math openoffice.org-impress openoffice.org-gtk openoffice.org-help-en-us\n#apt-get install openoffice.org-l10n-zh-cn openoffice.org-help-zh-cn #中文界面和中文帮助</code></pre></div></figure>\n<h4 id=\"5-3-6-安装视频播放器\">5.3.6:安装视频播放器</h4>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#apt-get install mplayer w32codecs smplayer</code></pre></div></figure>\n<p>w32codecs #多媒体库</p>\n<h4 id=\"5-3-7-PDF阅读\">5.3.7:PDF阅读</h4>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#apt-get install evince xpdf xpdf-chinese-simplified xpdf-chinese-traditional poppler-data</code></pre></div></figure>\n<p>xpdf-chinese-simplified xpdf-chinese-traditional poppler-data完美中文支持</p>\n<h4 id=\"5-3-8-图像处理\">5.3.8:图像处理</h4>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#apt-get install gimp</code></pre></div></figure>\n<h4 id=\"5-3-9-网络通讯\">5.3.9:网络通讯</h4>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#apt-get install pidgin</code></pre></div></figure>\n<ol start=\"11\">\n<li>编程环境支持</li>\n</ol>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#apt-get install build-essential libgtk2.0-dev freeglut3-dev libtool autoconf automake subversion</code></pre></div></figure>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">deb http://apt.jenslody.de/ any main\ndeb-src http://apt.jenslody.de/ any main\ndeb http://apt.wxwidgets.org/ etch-wx main\n#KEY：\nwget -q http://apt.jenslody.de/jens.asc -O- | sudo apt-key add -\nwget -q http://apt.wxwidgets.org/key.asc -O- | sudo apt-key add -</code></pre></div></figure>\n<ol start=\"4\">\n<li>其他安装</li>\n</ol>\n<p>安装Multiget：<a href=\"https://multiget.sourceforge.net/download.html\">http://multiget.sourceforge.net/download.html</a></p>\n<p>安装Opera：<a href=\"https://www.opera.com/download/\">http://www.opera.com/download/</a></p>\n<p>安装RealPlayer：<a href=\"https://www.real.com/linux\">http://www.real.com/linux</a></p>\n<p>安装AdobeReader：<a href=\"https://www.adobe.com/products/acrobat/readstep2_allversions.html\">http://www.adobe.com/products/acrobat/readstep2_allversions.html</a></p>\n<p>安装FlashPlayer：<a href=\"https://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash&amp;P2_Platform=Linux\">http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash&amp;P2_Platform=Linux</a></p>\n<p>编译CodeBlocks的SVN版本：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">svn checkout svn://svn.berlios.de/codeblocks/trunk ~/Downloads/CodeBlocks</code></pre></div></figure>\n<p>安装CodeBlocks：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo apt-get install codeblocks</code></pre></div></figure>\n<p>alien    a package converter,将rpm,dpkg,stampede slp己slackware tgz档格式间的转换</p>\n<p>pdfedit 修改pdf文件</p>\n<p>linux开发工具： gcc,make,autoconf,diff,patch,rcs,emacs</p>\n<p>mysql-admin,mysql-navigator,mysql-query-browser</p>\n<p>安装版本控制软件</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo apt-get install subversion cvs</code></pre></div></figure>\n<p>安装中文输入法</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo apt-get install scim-pinyin</code></pre></div></figure>\n<p>安装词典 <a href=\"http://stardict.sourceforge.net\">http://stardict.sourceforge.net</a></p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo apt-get install stardict sox</code></pre></div></figure>\n<p>/usr/share/stardict/dic/stardict-langdao-ce-gb-2.4.2 (郎道汉英辞典)</p>\n<p>/usr/share/stardict/dic/stardict-langdao-ec-gb-2.4.2 (郎道英汉辞典)</p>\n<p>/usr/share/WyabdcRealPeopleTTS (英文语音词库)</p>\n<p>安装邮件客户端</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo apt-get install thunderbird</code></pre></div></figure>\n<p>安装 win-xchm查看器</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo apt-get install xchm</code></pre></div></figure>\n<p>安装 msn for linux</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo apt-get install emesene</code></pre></div></figure>\n<p>安装下载工具 ( bt 工具 transmission 默认已安装 ; amule 对应windows平台的 emule)</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo apt-get install gwget amule</code></pre></div></figure>\n<p>安装 rss 订阅工具</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo apt-get install liferea</code></pre></div></figure>\n<p>硬件监控工具</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo apt-get install sensors-applet</code></pre></div></figure>\n<p>远程桌面管理,RDP默认已安装</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo apt-get install xvnc4viewer</code></pre></div></figure>\n<p>安装视频/音频解码器</p>\n<p>gnome 平台推荐用 totem+gstreamer*, 直接点击多媒体文件,totem会自动搜索匹配解码器安装</p>\n<p>特殊的rm, rmvb格式文件, RealPlayer 11 for Linux 刚发布 (<a href=\"http://www.real.com/linux\">http://www.real.com/linux</a>) ,效果不错,可以不用 w32codecs 了.</p>\n<p>安装 flash for firefox, 新版多了一个选项”swfdec player”, 推荐, 其对CPU消耗改善了</p>\n<ol>\n<li>\n<p>swfdec player for adobe/macromedia flash</p>\n</li>\n<li>\n<p>adobe flash player</p>\n</li>\n<li>\n<p>gnash swf player</p>\n</li>\n</ol>\n<p>中文编码配置</p>\n<p>sudo vi /var/lib/locales/supported.d/zh</p>\n<p>加入以下编码支持</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">zh_CN.GB18030 GB18030\nzh_CN.GBK GBK\nzh_CN.GB2312 GB2312\nzh_HK.BIG5 BIG5\nzh_TW.BIG5 BIG5</code></pre></div></figure>\n<p>立即应用更新</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo locale-gen</code></pre></div></figure>\n<p>安装 vim</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo apt-get install vim</code></pre></div></figure>\n<p>配置 vim</p>\n<p>sudo vi /etc/vim.local</p>\n<p>加入以下设置(个人喜好)</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">syntax on\n\nset expandtab\n\nset tabstop=4\n\nset shiftwidth=4\n\nset sts=4\n\nset autoindent\n\nset smartindent\n\nset cindent\n\nset number\n\nlet &amp;termencoding=&amp;encoding\n\nset fileencodings=utf-8,gb18030,gbk,gb2312,big5</code></pre></div></figure>\n<p>配置 gedit</p>\n<p>执行 sudo gconf-editor</p>\n<p>选择 apps/gedit-2/preferences/encodings</p>\n<p>找到 auto_detected 编辑，在Values中分别加入 GB18030,GBK,GB2312,BIG5</p>\n<p>界面风格 <a href=\"http://art.gnome.org\">http://art.gnome.org</a></p>\n<p>Ubuntu 默认的橘黄风格让我”焦躁”,一直偏向用蓝,灰的风格</p>\n<p>窗体用 SimpleBox (2.6 kb, 下载安装)</p>\n<p>图标用 tango ( apt-get install tango-icon-theme )</p>\n<p>Others</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">apt-show-source apt-show-versions archmage chmsee aria2 debian-faq-zh-cn fontforge gedit-plugins gtkcookie gupnp-tools htmldoc powersaved tor ttf-bitstream-vera vim-addon-manager</code></pre></div></figure>\n<h2 id=\"六：笔记本配置专辑\">六：笔记本配置专辑</h2>\n<p><strong>Dell Inspiron 6400</strong></p>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cimg1.17lai.fun/data/2021/08/1820210818223005.jpg\" alt=\"\"></th>\n<th>- Video card: Intel Corporation- Mobile 945GM/GMS/940GML Express Integrated Graphics Controller- RAM: 2Go- Hard disk drive: 100Go- Processor: Pentium Dual-core 1.86GHz <em>(T2130)</em>- Ethernet card: Broadcom Corporation BCM4401-B0 100Base-TX- Wifi Card: Intel Corporation PRO/Wireless 3945ABG Network Connection- Optical device: DVD+RW- Screen WSXGA+: resolution=1200x800, size=15,4\" wide</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Overall-Status\">Overall Status</h2>\n<table>\n<thead>\n<tr>\n<th><strong>Core Components</strong></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Boot Standard Kernel:</td>\n<td><img src=\"https://cimg1.17lai.fun/data/2021/08/1820210818223057.gif\" alt=\"\"></td>\n<td></td>\n</tr>\n<tr>\n<td>LAN network card:</td>\n<td><img src=\"https://cimg1.17lai.fun/data/2021/08/1820210818223104.gif\" alt=\"\"></td>\n<td></td>\n</tr>\n<tr>\n<td>Detect CD/DVD:</td>\n<td><img src=\"https://cimg1.17lai.fun/data/2021/08/1820210818223104.gif\" alt=\"\"></td>\n<td></td>\n</tr>\n<tr>\n<td>Detect hard drives:</td>\n<td><img src=\"https://cimg1.17lai.fun/data/2021/08/1820210818223119.gif\" alt=\"\"></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Extra Features</strong></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://wiki.debian.org/InstallingDebianOn/Dell/Inspiron6400/lenny#cpu\">CPU Frequency Scaling</a></td>\n<td><img src=\"https://cimg1.17lai.fun/data/2021/08/1820210818223130.gif\" alt=\"\"></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://wiki.debian.org/InstallingDebianOn/Dell/Inspiron6400/lenny#power\">Hibernation</a></td>\n<td><img src=\"https://cimg1.17lai.fun/data/2021/08/1820210818223136.gif\" alt=\"\"></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://wiki.debian.org/InstallingDebianOn/Dell/Inspiron6400/lenny#power\">Sleep / Suspend</a></td>\n<td><img src=\"https://cimg1.17lai.fun/data/2021/08/1820210818223136.gif\" alt=\"\"></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://wiki.debian.org/InstallingDebianOn/Dell/Inspiron6400/lenny#display\">Xorg</a></td>\n<td><img src=\"https://cimg1.17lai.fun/data/2021/08/1820210818223148.gif\" alt=\"\"></td>\n<td></td>\n</tr>\n<tr>\n<td>- OpenGL</td>\n<td><img src=\"https://cimg1.17lai.fun/data/2021/08/1820210818223200.gif\" alt=\"\"></td>\n<td></td>\n</tr>\n<tr>\n<td>- Resize-and-Rotate(randr)</td>\n<td><img src=\"https://cimg1.17lai.fun/data/2021/08/1820210818223209.gif\" alt=\"\"></td>\n<td></td>\n</tr>\n<tr>\n<td>Switch to External Screen</td>\n<td><img src=\"https://cimg1.17lai.fun/data/2021/08/1820210818223223.gif\" alt=\"\"></td>\n<td></td>\n</tr>\n<tr>\n<td>Mouse</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>- Built-in (Trackpoint)</td>\n<td>[-]</td>\n<td></td>\n</tr>\n<tr>\n<td>- Built-in (Touchpad)</td>\n<td><img src=\"https://cimg1.17lai.fun/data/2021/08/1820210818223231.gif\" alt=\"\"></td>\n<td></td>\n</tr>\n<tr>\n<td>Modem</td>\n<td>[?]</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://wiki.debian.org/InstallingDebianOn/Dell/Inspiron6400/lenny#wifi\">Wireless/Wifi</a></td>\n<td><img src=\"https://cimg1.17lai.fun/data/2021/08/1820210818223237.gif\" alt=\"\"></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://wiki.debian.org/InstallingDebianOn/Dell/Inspiron6400/lenny#keys\">Keyboard’s Hotkeys</a></td>\n<td><img src=\"https://cimg1.17lai.fun/data/2021/08/1820210818223238.gif\" alt=\"\"></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Legend :</p>\n<ul>\n<li>\n<p><img src=\"https://cimg1.17lai.fun/data/2021/08/1820210818223249.gif\" alt=\"\"> = OK ;</p>\n</li>\n<li>\n<p><img src=\"https://cimg1.17lai.fun/data/2021/08/1820210818223256.gif\" alt=\"\"> Unsupported(No Driver) ;</p>\n</li>\n<li>\n<p><img src=\"https://cimg1.17lai.fun/data/2021/08/1820210818223302.gif\" alt=\"\"> = Error (Couldn’t get it working);</p>\n</li>\n<li>\n<p>[?] Unknown, Not Test ;</p>\n</li>\n<li>\n<p>[-] Not-applicable</p>\n</li>\n<li>\n<p><img src=\"https://cimg1.17lai.fun/data/2021/08/1820210818223346.gif\" alt=\"\"> = Configuration Required;</p>\n</li>\n<li>\n<p><img src=\"https://cimg1.17lai.fun/data/2021/08/1820210818223308.gif\" alt=\"\"> = Only works with a non-free driver/firmware</p>\n</li>\n</ul>\n<h2 id=\"Configuration\">Configuration</h2>\n<h2 id=\"Display\">Display</h2>\n<p>You will need to install the 915resolution package:</p>\n<p># apt-get install 915resolution xserver-xorg-video-intel</p>\n<p># 915resolution</p>\n<p>The 915resolution will try to get highest resolution, you can change this at /etc/default/915resolution.</p>\n<p>If you wish to enable DRI, GLX, etc. see <a href=\"https://wiki.debian.org/InstallingDebianOn/Dell/Inspiron6400/lenny?action=AttachFile&amp;do=view&amp;target=Xorg.conf_Lenny_DellInspiron6400.txt\">Xorg.conf_Lenny_DellInspiron6400.txt</a> . My configuration works fine with <a href=\"https://wiki.debian.org/Compiz\">Compiz</a>.</p>\n<p>If using newer “xserver-xorg” (version 7.3 +), do not install “915resolution” as it conflicts with “xserver-xorg-video-all” and “xserver-xorg-video-intel”. Also install “libgl1-mesa-dri” (and this also installs “libgl1-mesa-glx”) for OpenGL support. Use “glxinfo | grep direct” to check for direct rendering. The “glxinfo” util comes with the “mesa-utils” package. (Thanks to enouf and Nemoder on #debian@OFTC)</p>\n<h2 id=\"Hibernation-and-Sleep-Suspend\">Hibernation and Sleep/Suspend</h2>\n<p>Works fine. Install,</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-none\"><code class=\"language-none\"># apt-get install acpid hal pm-utils uswsusp powermgmt-base</code></pre></div></figure>\n<p>We will need to unload the “b44” module before hibernating, add the following to “/etc/pm/config.d/unload_modules”:</p>\n<p>SUSPEND_MODULES=“b44”</p>\n<p>The wireless drivers will be automatically handled by pm-utils. You should then be able to hibernate:</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-none\"><code class=\"language-none\"># pm-hibernate</code></pre></div></figure>\n<p>And suspend:</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-none\"><code class=\"language-none\"># pm-suspend</code></pre></div></figure>\n<p>Note that if you are trying to hibernate/suspend from within GNOME, you will need to be a member of the \" powerdev\" group.</p>\n<h2 id=\"CPU-Power-Scaling\">CPU Power Scaling</h2>\n<p>Add a few modules to be loaded,</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># echo \"acpi-cpufreq\" &gt;&gt; /etc/modules\n# echo \"speedstep_centrino\" &gt;&gt; /etc/modules</code></pre></div></figure>\n<p>Then, install the “powernowd” daemon:</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># apt-get install powernowd</code></pre></div></figure>\n<p>Powenowd’s default settings should be OK for most people.</p>\n<h2 id=\"Hotkeys\">Hotkeys</h2>\n<p>These are automatically configures by:</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># apt-get install hotkey-setup</code></pre></div></figure>\n<h2 id=\"WiFi\">WiFi</h2>\n<p>We need to install the firmware:</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># apt-get install firmware-iwlwifi</code></pre></div></figure>\n<p>And it should work. If you get an error like “Kill switch must be turned off in order for wireless networking to work.” during system boot, you need to press the magic Fn + F2 button.</p>\n<h2 id=\"七：其他问题\">七：其他问题</h2>\n<h3 id=\"0-多源混合使用\">0.多源混合使用</h3>\n<p>安装完稳定版系统，请先为整个系统所有软件包设置 hold on 状态，aptitude 可以很容易的完成此任务。 接着，添加多个版本的源，即由上而下依次为： stable stable-backports （当前是 lenny-backports，<a href=\"http://wiki.debian.org/Backports%EF%BC%89\">http://wiki.debian.org/Backports）</a> testing sid experimental， 然后，请针对特定软件包的特定版本升级，注意一次升级一个包彻底解决一个包，勿贪心。 升级完成，再次设置 hold on 状态，如此反复。</p>\n<p>有时需要人工介入满足特定软件包的依赖关系。 如，为了使用 DRI，给 lenny 安装新版 ati 开源驱动 radeon 软件包， 需要先手工升级 mesalib-7.4.<em>、xorg-server-1.6.</em> 等， 再手工安装 radeon 软件包，而不能直接安装 radeon 软件包的新版本， 混用多个版本的源时，aptitude 自动计算的依赖关系并不总是可靠的。</p>\n<p>如果仍不够新，那就要自己动手配置编译。 如果愿意可以使用 debian 方式编译打包。</p>\n<p>如果升级的软件包依赖一些基本的软件包如 glibc，最终得到的系统将不再是 debian 稳定版。</p>\n<ol>\n<li>\n<h3 id=\"自动挂载U盘中文文件名乱码问题\">自动挂载U盘中文文件名乱码问题</h3>\n</li>\n</ol>\n<p>解决方法：系统工具-&gt;配置编辑-&gt;/system/storage/default_options/vfat，双击mount_options，”添加”，在“新列表值”中填入“utf8”。</p>\n<ol start=\"2\">\n<li>\n<h3 id=\"apt-get与dpkg的基本用法\">apt-get与dpkg的基本用法</h3>\n</li>\n</ol>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#apt-get install packagename #安装一个新软件包\n#apt-get remove packagename #卸载一个已安装的软件包（保留配置文件）\n#apt-get --purge remove packagename #卸载一个已安装的软件包（删除配置文件）\n#dpkg --force-all --purge packagename #强制卸载，风险大！\n#apt-get upgrade #更新所有已安装的软件包\n#apt-get dist-upgrade #将系统升级到新版本\n$apt-cache search 正则表达式 #在软件包列表中搜索字符串\n$dpkg -l 正则表达式 #列出所有与模式相匹配的软件包\n#apt-get clean #清理所有软件缓存\n#apt-get autoclean #清理旧版本的软件缓存\n#apt-get autoremove #删除系统不再使用的孤立软件\n#apt-cdrom add #增加一个光盘源\n$dpkg -l |grep ^rc|awk '{print $2}' | #xargs dpkg -P #清除所有已删除包的残馀配置文件\n#auto-apt run ./configure #编译时缺少h文件的自动处理</code></pre></div></figure>\n<ol start=\"3\">\n<li>\n<h3 id=\"安装RealPlay\">安装RealPlay</h3>\n</li>\n</ol>\n<p>下载bin包，到realplayer主页上下载 <a href=\"https://www.real.com/linux\">http://www.real.com/linux</a></p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#chmod 755 ./*.bin #或chmod +x ./*.bin</code></pre></div></figure>\n<p>#./*.bin #一定要root安装，否则安装后无法启动。</p>\n<ol start=\"4\">\n<li>\n<h3 id=\"安装FlashPlayer\">安装FlashPlayer</h3>\n</li>\n</ol>\n<p>在iceweasel提示安装时选择安装，如果安装失败：</p>\n<p>下载install_flash_player_9_linux.tar.gz并解压，进入解压目录，执行</p>\n<p>安装：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo ./flashplayer-installer</code></pre></div></figure>\n<p>若flashplayer菜单有乱码问题的话，执行：sudo mv /etc/fonts/conf.d/49-sansserif.conf /etc/fonts/conf.d/49-sansserif.conf.bak</p>\n<p>安装ttf-freefont字体可解决swf文件中文乱码。</p>\n<ol start=\"5\">\n<li>编译Code::Blocks的SVN版本</li>\n</ol>\n<p>(a) 下载源码</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">svn checkout svn://svn.berlios.de/codeblocks/trunk ~/Sources/CodeBlocks</code></pre></div></figure>\n<p>(b) 编译</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">export ACLOCAL_FLAGS=\"-I `wx-config --prefix`/share/aclocal\"\n\n./bootstrap\n\n./configure 或 ./configure --with-contrib-plugins=all\n\nmake\n\nsudo make install</code></pre></div></figure>\n<p>© 缷载</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo make uninstall</code></pre></div></figure>\n<p>(d) 重新编译</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">make clean\nmake distclean\nmake clean-bin\nmake clean-zipfiles</code></pre></div></figure>\n<p>详情：<a href=\"https://wiki.codeblocks.org/index.php?title=Installing_Code::Blocks_from_source_on_Linux\">http://wiki.codeblocks.org/index.php…ource_on_Linux</a></p>\n<p>●   关于64位系统使用32位软件额外需求</p>\n<p>64位系统同样能使用32位的软件，只要在终端输入以下命令，安装相应的32位包：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo apt-get install ia32-libs ia32-libs-gtk linux32 lib32asound2</code></pre></div></figure>\n<h2 id=\"●-MLdonkey-sancho安装\">●   MLdonkey+sancho安装</h2>\n<p>MLdonkey被誉为<a href=\"https://forum.ubuntu.org.cn/viewtopic.php?t=42337&amp;highlight=mldonkey\">速度最快的电驴</a>，同时支持很多种P2P的下载协议，包括edonkey2000、gnutella、gnutella2、bt、FileTP</p>\n<p>等等。网上有很多安装和设置的文章，但是有点乱，有些也不够完整，今天有空将它整理如下</p>\n<p>下载最新版 <a href=\"https://sourceforge.net/project/showfiles.php?group_id=156414&amp;package_id=174487\">MLdonkey</a> &amp; <a href=\"https://sancho-gui.sourceforge.net/download.phtml\">sancho</a>（左键点击）</p>\n<h3 id=\"一-安装-mldonkey：\">一.安装 mldonkey：</h3>\n<p>解压缩mldonkey源代码并进入其目录，然后</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sudo apt-get install ocaml\n$ ./configure\n$ make\n$ make install</code></pre></div></figure>\n<p>（使用新版本的mldonkey源代码编译安装后已不会有下载后文件名不支持中文的问题）</p>\n<h3 id=\"二-安装-sancho：\">二.安装 sancho：</h3>\n<p>sancho是mldonkey最好用的一个前端，下载回来的sancho只有一个文件，是一个脚本，先右键单击它，找到属性-权限部分，钩上“可执行”，然后在终端中运行之：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ./sancho-*-linux-gtk.sh</code></pre></div></figure>\n<p>然后会显示</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Extract to directory [&lt;sancho-*-linux-gtk&gt;]:</code></pre></div></figure>\n<p>输入自定义安装目录，随便你，我安装在/usr/local/sancho</p>\n<p>稍等一会就装好了，在/usr/local/sancho/下有个sancho，双击它就能运行sancho</p>\n<p># 下载 sancho 后用 root权限安装</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">user@~$ sudo sh sancho-0.9.4-59-linux-gtk.sh</code></pre></div></figure>\n<p># 选择安装目录, 这里我安装在 /opt/sancho/</p>\n<p># 修改用户配置文件目录的权限</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">user@~$ sudo chown user:user -R ~/.sancho/</code></pre></div></figure>\n<p># 把 user 改成自己的用户名</p>\n<h3 id=\"三-sancho设置\">三.sancho设置</h3>\n<p>先运行mlnet，在/usr/local/bin或/usr/bin下，然后运行sancho，首次运行会有配置向导，需要设置mlnet位置。在sancho里面也可以设置mlnet的运行路径</p>\n<p>在<strong>工具</strong>-&gt;<strong>首选项</strong>-&gt;**sancho:**<strong>主要</strong>-&gt;<strong>可选的可执行core</strong> 那里填上你的mlnet路径。这样以后就可以直接启动sancho。</p>\n<p>设置中文: 在<strong>工具</strong>-&gt;<strong>首选项</strong>-&gt;**sancho:**<strong>主要</strong>-&gt;<strong>使用本地文件</strong> 选择zh-CN,重启sancho后即为中文。</p>\n<p>在<strong>工具</strong>-&gt;<strong>首选项</strong>-&gt;<strong>Main</strong> 设置 <strong>client_name</strong> 推荐设置成[CHN][VeryCD]<strong>yourname</strong>的形式，支持中文。</p>\n<p>在<strong>工具</strong>-&gt;<strong>首选项</strong>-&gt;<strong>Bandwidth</strong> 设置 <strong>max_hard_upload_rate</strong> 和 <strong>max_hard_download_rate</strong> 分别是上传和下载速度，单位是KB</p>\n<p>在<strong>工具</strong>-&gt;<strong>首选项</strong>-&gt;<strong>Networks</strong> 勾选 <strong>enable_overnet</strong> 和 <strong>enable_kademlia</strong></p>\n<p>在<strong>工具</strong>-&gt;<strong>首选项</strong>-&gt;<strong>Networks</strong>-&gt;<strong>Donkey</strong>有这两项：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ED2K-force_client_high_id\nED2K-force_high_id</code></pre></div></figure>\n<p>如果你是公网用户，或者你是内网，且设置了端口映射，则勾选它们，如果你打死都是内网低ID用户，就不要选了，否则会很难连上服务器。</p>\n<p>你可以选上试试看，不行再取消。</p>\n<p>在<strong>工具</strong>-&gt;<strong>首选项</strong>-&gt;<strong>Networks</strong>-&gt;<strong>Donkey</strong>-&gt;<strong>ED2K-port</strong> 设置端口，如果你有windows下的emule，最好把他们的端口(tcp的)设成一样，因为有些路由器有记忆功能，导致windows下的端口在重启后仍然保留。一般emule默认端口为4662,但有些宽带运营商会封掉该端口，建议改掉。</p>\n<p>在<strong>工具</strong>-&gt;<strong>首选项</strong>-&gt;<strong>Networks</strong>-&gt;<strong>Donkey</strong>-&gt;<strong>ED2K-max_connected_servers</strong> 设置服务器最大连接数，默认为3，不用太大，大了也没用，一般稳定下来也就三四个左右，我把它设为7</p>\n<p>打开sancho主界面，点击控制台，然后在最下方的命令输入框那里</p>\n<p>用如下命令导入服务器</p>\n<p>servers <a href=\"http://www.emule.org.cn/server.met\">http://www.emule.org.cn/server.met</a></p>\n<p>用ov_load命令导入overnet的node列表，推荐下载<a href=\"https://download.overnet.org/contact.dat\">http://download.overnet.org/contact.dat</a></p>\n<p>用kad_load命令导入kad的node列表，推荐下载<a href=\"https://www.emule-inside.net/nodes.dat\">http://www.emule-inside.net/nodes.dat</a></p>\n<p>或<a href=\"https://renololo1.free.fr/e/nodes.dat\">http://renololo1.free.fr/e/nodes.dat</a>，也可使用eMule的nodes.data</p>\n<p>对于ov_load和kad_load，需要先下载回本地，比如把contact.dat下载到桌面后，输入：</p>\n<p>ov_load /home/xxb/桌面/contact.dat</p>\n<p>路径请修改为适合你自己的。</p>\n<p>修改下载目录和temp目录: 默认目录分别为 ~/.mldonkey/incoming/files （BT则为~/.mldonkey/incoming/directories) 和 ~/.mldonkey/temp</p>\n<p>修改 ~/.mldonkey/downloads.ini，找到“SECTION : Paths”，然后修改第一段和倒数第二段的路径，注意这里是相对路径。下载目录和temp目录最好放在同一个硬盘分区，否则下载完成转移临时文件时，硬 盘灯会狂闪。或者通过建立软链接来更改下载目录也可以（推荐）。</p>\n<p>比如我把下载目录和临时目录都移到/home/xxb/Videos/下，则把~/.mldonkey/下的incoming和temp目录都剪切到/home/xxb/Videos/下，然后建立软链接：</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ln -s ~/Videos/incoming ~/.mldonkey/incoming\n\n$ ln -s ~/Videos/temp ~/.mldonkey/temp</code></pre></div></figure>\n<h3 id=\"四-设置浏览器关联\">四.设置浏览器关联</h3>\n<p>这里只说firefox的关联，如果需要设置其它浏览器，请参考<a href=\"https://forum.ubuntu.org.cn/viewtopic.php?t=47733&amp;highlight=mldonkey+%E5%85%B3%E8%81%94\">mldonkey 和浏览器关联的办法,适用 firefox, konqueror</a></p>\n<p>先建立脚本,这里我们把它取名为 submit, 放在 ~/.mldonkey 下面。内容如下:</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">#!/bin/bash\n\necho dllink $*|nc -q 1 127.0.0.1 4000</code></pre></div></figure>\n<p>如果系统是ArchLinux，则需安装netcat(gnu-netcat),并改为</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">#!/bin/bash\n\necho dllink $*|nc 127.0.0.1 4000</code></pre></div></figure>\n<p>然后右键单击它，找到属性-权限部分，钩上“可执行”</p>\n<p>接下来在firefox地址栏输入 about:config</p>\n<p>新建 字符串(string)</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">network.protocol-handler.app.ed2k</code></pre></div></figure>\n<p>值为submit 脚本的位置，比如我的是 /home/xxb/.mldonkey/submit</p>\n<p>也可以安装firefox扩展，以关联ed2k、bt等，解压后的mldoneky-distrib-xxx/ed2k_mozilla/文件夹下 有个 mldonkey_protocol_handler-xx.xpi，把它拖到fx窗口选择安装。重启后就可以双击MLdonkey Protocal Handler这个扩展设置关联了，这个扩展也可以关联到amule。不过扩展当然是能不装就不装，所以推荐使用submit脚本的方法。</p>\n<h3 id=\"五-WEB界面\">五.WEB界面</h3>\n<p>你也可以用浏览器控制和观察mldonkey，地址是 <a href=\"https://localhost:4080/\">http://localhost:4080/</a></p>\n<p>我比较推崇用这个，不占额外资源（不必一直开着sancho，毕竟java的东西会占不少内存和cpu），设置更强，不过是英文的。你还可以编辑~/.mldonkey下的各个文件进行设置，这里不再敖述。</p>\n<h3 id=\"六-端口映射\">六.端口映射</h3>\n<p>打开 <a href=\"https://localhost:4080/\">http://localhost:4080/</a>后，点击<strong>Help+</strong>-&gt;<strong>Sysinfo</strong> 这里可以查看mldonkey的端口使用情况，除了core那3个，建议其余的都在路由器里设置端口映射，如果有防火墙，还要打开相应端口。</p>\n<p><a href=\"https://www.emule.org.cn/topic/nat/\">点击查看各种主流路由器映射的设置方法</a></p>\n<h3 id=\"七-其它\">七.其它</h3>\n<p>本文基本只涉及电驴部分，如果还需要其它比如BT功能，请自行摸索，附一些主要的配置文件：</p>\n<ul>\n<li>\n<p>~/.mldonkey/downloads.ini 基本的设置( 这个是for edonkey和其他协议的)</p>\n</li>\n<li>\n<p>~/.mldonkey/servers.ini 服务器列表文件</p>\n</li>\n<li>\n<p>~/.mldonkey/files.ini 当前已经完成的和未完成的文件列表</p>\n</li>\n<li>\n<p>~/.mldonkey/friends.ini 好友列表</p>\n</li>\n<li>\n<p>~/.mldonkey_gui.ini 图形前端的配置文件</p>\n</li>\n</ul>\n<p>另外其他的网络协议都有其单独的配置文件，一般都放在~/.mldonkey目录下</p>\n<p>祝骑驴愉快 <sup>_</sup></p>\n",
            "tags": [
                "debian",
                "laptop",
                "ed2k",
                "ati",
                "driver"
            ]
        },
        {
            "id": "https://blog.17lai.site/posts/7b4e434c/",
            "url": "https://blog.17lai.site/posts/7b4e434c/",
            "title": "宝塔linux面板重启、重置等命令整合",
            "date_published": "2021-07-31T11:25:00.000Z",
            "content_html": "<h2 id=\"宝塔linux面板重启、重置等命令整合\">宝塔linux面板重启、重置等命令整合</h2>\n<p>宝塔对新手入门还是比较友好的，方便了入门小站搭建。入门可用，一些新东西也可以在里面看看。大型应用还是的自己搭建。</p>\n<p>来源于网络，原作已经不可考据，整理更新到目前最新版。</p>\n<p>现在有很多网友都在使用宝塔主机管理系统、对一些不懂linux操作的朋友来说，是一个很好的管理系统、<br>\n但是有些朋友重启服务器以后，有可能造成一些服务无法重启。今天我们搜集下关于宝塔面板的命令集锦</p>\n<h2 id=\"Linux面板7-6-0安装命令：\"><strong>Linux面板7.6.0安装命令：</strong></h2>\n<h3 id=\"Centos安装命令：\"><strong>Centos安装命令：</strong></h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</code></pre></div></figure>\n<p><a href=\"https://www.bt.cn/offline\">咨询离线安装版本</a></p>\n<p><strong>试验性Centos/Ubuntu/Debian安装命令</strong> <strong>独立运行环境（py3.7） 可能存在少量兼容性问题 不断优化中</strong></p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">curl -sSO http://download.bt.cn/install/install_panel.sh &amp;&amp; bash install_panel.sh</code></pre></div></figure>\n<h3 id=\"Ubuntu-Deepin安装命令：\"><strong>Ubuntu/Deepin安装命令：</strong></h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh</code></pre></div></figure>\n<h3 id=\"Debian安装命令：\"><strong>Debian安装命令：</strong></h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; bash install.sh</code></pre></div></figure>\n<h3 id=\"Fedora安装命令\"><strong>Fedora安装命令:</strong></h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh</code></pre></div></figure>\n<p><strong>Linux面板7.6.0升级命令：</strong><code>curl http://download.bt.cn/install/update6.sh|bash</code></p>\n<p>以上节点无法使用的情况下，请使用下面的备用节点：</p>\n<h3 id=\"备用节点【香港】：\"><strong>备用节点【香港】：</strong></h3>\n<p><strong>（宝塔推荐使用CN2 双程GIA高品质，免备案的</strong><a href=\"https://www.zun.com/server/buy.html?lineid=1671157323431053\"><strong>尊云zun.com</strong></a><strong>香港云服务器安装）</strong></p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum install -y wget &amp;&amp; wget -O install.sh http://103.224.251.67:5880/install/install_6.0.sh &amp;&amp; sh install.sh</code></pre></div></figure>\n<h2 id=\"管理宝塔\">管理宝塔</h2>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#停止\n/etc/init.d/bt stop\n#启动\n/etc/init.d/bt start\n#重启\n/etc/init.d/bt restart\n#卸载\n/etc/init.d/bt stop &amp;&amp; chkconfig --del bt &amp;&amp; rm -f /etc/init.d/bt &amp;&amp; rm -rf /www/server/panel\n#查看当前面板端口\ncat /www/server/panel/data/port.pl\n#修改面板端口，如要改成8881（centos 6  系统）\necho '8881'  &gt;  /www/server/panel/data/port.pl &amp;&amp;  /etc/init.d/bt restart\niptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 8881  -j ACCEPT\nservice iptables save\nservice iptables restart\n#修改面板端口，如要改成8881（centos 7  系统）\necho '8881'  &gt;  /www/server/panel/data/port.pl &amp;&amp;  /etc/init.d/bt restart\nfirewall-cmd --permanent --zone=public  --add-port=8881/tcp\nfirewall-cmd --reload\n#强制修改MySQL管理(root)密码，如要改成123456\ncd /www/server/panel &amp;&amp; python tools.pyc root 123456\n#修改面板密码，如要改成123456\ncd /www/server/panel &amp;&amp; python tools.pyc panel 123456\n#查看宝塔日志\ncat /tmp/panelBoot.pl\n#查看软件安装日志\ncat /tmp/panelExec.log\n#站点配置文件位置\n/www/server/panel/vhost\n#删除域名绑定面板\nrm -f /www/server/panel/data/domain.conf\n#清理登陆限制\nrm -f /www/server/panel/data/*.login\n#查看面板授权IP\ncat /www/server/panel/data/limitip.conf\n#关闭访问限制\nrm -f /www/server/panel/data/limitip.conf\n#查看许可域名\ncat /www/server/panel/data/domain.conf\n#关闭面板SSL\nrm -f /www/server/panel/data/ssl.pl &amp;&amp; /etc/init.d/bt restart\n#查看面板错误日志\ncat /tmp/panelBoot\n#查看数据库错误日志\ncat /www/server/data/*.err\n#站点配置文件目录(nginx)\n/www/server/panel/vhost/nginx\n#站点配置文件目录(apache)\n/www/server/panel/vhost/apache\n#站点默认目录\n/www/wwwroot\n#数据库备份目录\n/www/backup/database\n#站点备份目录\n/www/backup/site\n#站点日志\n/www/wwwlogs</code></pre></div></figure>\n<h2 id=\"Nginx服务管理\">Nginx服务管理</h2>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#nginx安装目录\n/www/server/nginx\n#启动\n/etc/init.d/nginx start\n#停止\n/etc/init.d/nginx stop\n#重启\n/etc/init.d/nginx restart\n#启载\n/etc/init.d/nginx reload\n#nginx配置文件\n/www/server/nginx/conf/nginx.conf</code></pre></div></figure>\n<h2 id=\"Apache服务管理\">Apache服务管理</h2>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#apache安装目录\n/www/server/httpd\n#启动\n/etc/init.d/httpd start\n#停止\n/etc/init.d/httpd stop\n#重启\n/etc/init.d/httpd restart\n#启载\n/etc/init.d/httpd reload\n#apache配置文件\n/www/server/apache/conf/httpd.conf</code></pre></div></figure>\n<h2 id=\"MySQL服务管理\">MySQL服务管理</h2>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#mysql安装目录\n/www/server/mysql\n#phpmyadmin安装目录\n/www/server/phpmyadmin\n#数据存储目录\n/www/server/data\n#启动\n/etc/init.d/mysqld start\n#停止\n/etc/init.d/mysqld stop\n#重启\n/etc/init.d/mysqld restart\n#启载\n/etc/init.d/mysqld reload\n#mysql配置文件\n/etc/my.cnf</code></pre></div></figure>\n<h2 id=\"FTP服务管理\">FTP服务管理</h2>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#ftp安装目录\n/www/server/pure-ftpd\n#启动\n/etc/init.d/pure-ftpd start\n#停止\n/etc/init.d/pure-ftpd stop\n#重启\n/etc/init.d/pure-ftpd restart\n#ftp配置文件\n/www/server/pure-ftpd/etc/pure-ftpd.conf</code></pre></div></figure>\n<h2 id=\"PHP服务管理\">PHP服务管理</h2>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#php安装目录\n/www/server/php\n#启动(请根据安装PHP版本号做更改，例如：/etc/init.d/php-fpm-54 start)\n/etc/init.d/php-fpm-{52|53|54|55|56|70|71} start\n#停止(请根据安装PHP版本号做更改，例如：/etc/init.d/php-fpm-54 stop)\n/etc/init.d/php-fpm-{52|53|54|55|56|70|71} stop\n#重启(请根据安装PHP版本号做更改，例如：/etc/init.d/php-fpm-54 restart)\n/etc/init.d/php-fpm-{52|53|54|55|56|70|71} restart\n#启载(请根据安装PHP版本号做更改，例如：/etc/init.d/php-fpm-54 reload)\n/etc/init.d/php-fpm-{52|53|54|55|56|70|71} reload\n#配置文件(请根据安装PHP版本号做更改，例如：/www/server/php/52/etc/php.ini)\n/www/server/php/{52|53|54|55|56|70|71}/etc/php.ini</code></pre></div></figure>\n<h2 id=\"Redis服务管理\">Redis服务管理</h2>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#redis安装目录\n/www/server/redis\n#启动\n/etc/init.d/redis start\n#停止\n/etc/init.d/redis stop\n#redis配置文件\n/www/server/redis/redis.conf</code></pre></div></figure>\n<h2 id=\"Memcached服务管理\">Memcached服务管理</h2>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#memcached安装目录\n/usr/local/memcached\n#启动\n/etc/init.d/memcached start\n#停止\n/etc/init.d/memcached stop\n#重启\n/etc/init.d/memcached restart\n#启载\n/etc/init.d/memcached reload</code></pre></div></figure>\n<h2 id=\"参考\">参考</h2>\n<ul>\n<li><a href=\"https://www.bt.cn/new/btcode.html\">bt doc</a></li>\n<li><a href=\"https://www.kancloud.cn/chudong/bt2017\">宝塔面板手册</a></li>\n</ul>\n",
            "tags": [
                "linux",
                "mysql",
                "宝塔",
                "vps",
                "建站",
                "nginx",
                "apache"
            ]
        },
        {
            "id": "https://blog.17lai.site/posts/bb600b4b/",
            "url": "https://blog.17lai.site/posts/bb600b4b/",
            "title": "PT 工具集，Linux硬链接助手",
            "date_published": "2021-07-09T09:25:00.000Z",
            "content_html": "<p>由于自我需求，写了两个脚本完成PT下载和保种两全其美的硬链接 Linux shell 脚本方案。</p>\n<h2 id=\"PTtool\">PTtool</h2>\n<blockquote>\n<p>Github: <a href=\"https://github.com/appotry/PTtool\">appotry/PTtool</a></p>\n<p>纯Bash Shell硬链接工具！支持所有Linux， BSD， Mac，<strong>群辉</strong>，<strong>威联通</strong>等支持标准Shell的操作系统！</p>\n</blockquote>\n<hr>\n<h2 id=\"PT工具集合\">PT工具集合</h2>\n<ul>\n<li><a href=\"https://github.com/appotry/PTtool/\">硬链接工具</a> 自动硬链接工具</li>\n<li><a href=\"https://github.com/appotry/flexget-nexusphp\">flexget-nexusphp</a>, 自动下载刷流工具。Flexget插件，增强对NexusPHP的过滤</li>\n<li><a href=\"https://github.com/jxxghp/nas-tools\">nas-tools</a> <strong>新秀</strong>，<strong>国人</strong>出的NAS媒体库资源自动搜刮整理工具，自动下载，刮削，支持PT刷流！中文支持较好。<strong>注意</strong>暂时功能不够完善，Bug较多，评价是试用，尝鲜，还不能胜任主力！</li>\n<li><a href=\"https://github.com/appotry/IYUUAutoReseed\">IYUUAutoReseed</a> 自动辅种助手。<strong>PT三剑客</strong></li>\n<li><a href=\"https://github.com/appotry/PT-Plugin-Plus\">PTPP</a> 浏览器辅种助手。<strong>PT三剑客</strong></li>\n<li><a href=\"https://hub.docker.com/r/crazyq/pt_helper\">pt_helper</a>, <strong>非开源软件</strong> 自动刷流与签到。<strong>PT三剑客</strong> <a href=\"https://github.com/jxxghp/nas-tools\">nas-tools</a>可以替代刷流</li>\n<li><a href=\"https://github.com/appotry/universal-torrent-gallery\">PT站生成海报墙</a></li>\n<li><a href=\"https://github.com/appotry/easy-upload\">一键转种脚本</a> PT一键转种脚本（树大版）</li>\n<li><a href=\"https://github.com/appotry/PT_signin\">PT自动签到 Github Action 版</a></li>\n<li><a href=\"https://github.com/appotry/flexget_qbittorrent_mod\">flexget qbittorrent删种、辅种 自动签到 插件</a></li>\n<li><a href=\"https://github.com/dongshuyan/Auto_Upload\">自动发种机</a> 全自动将本地资源发布到 PT 站并自动辅种</li>\n<li><a href=\"https://github.com/dongshuyan/Upload_Machine\">自动将本地资源发布到PT站</a> 看简介比 Auto_Upload 功能更强大</li>\n<li><a href=\"https://github.com/Nriver/qb-rss-manager\">qBittorrent rss订阅规则管理</a></li>\n<li><a href=\"https://github.com/MkvAutoSubset/MkvAutoSubset\">Mkv Auto Subset</a> ASS字幕字体子集化 MKV批量提取/生成</li>\n<li><a href=\"https://github.com/LuckyPuppy514/jproxy\">jproxy</a> 优化 Sonarr 对资源的识别率，主要是针对动漫</li>\n<li><a href=\"https://xarr-doc.52nyg.com/xarr-rss/#/\">xarr-rss</a> 剧情Rss订阅处理器 目前非开源？</li>\n<li><a href=\"https://github.com/inerfire/pter_scripts\">pter 猫站使用脚本集合</a></li>\n</ul>\n<h2 id=\"相关教程\">相关教程</h2>\n<ul>\n<li><a href=\"https://blog.17lai.site/posts/db7bf49b/\">视频图书和音乐完全自动化管理框架图解</a></li>\n<li><a href=\"https://blog.17lai.site/posts/e6d40157/\">如何使用tinyMediaManager刮削电影和电视剧，动画，并自动下载字幕</a></li>\n<li><a href=\"https://blog.17lai.site/posts/9912bd5d/\">使用jeckett,sonarr,iyuu,qt,emby打造全自动追剧流程</a></li>\n</ul>\n<blockquote>\n<p>nastools目前看来还只是个玩具，各种功能bug较多，完成度大概只有Sonarr, Radarr的三分之一。要搭建一个稳定，可用的自动多媒体管理工具，还是需要使用Radarr, Sonarr，Nastools等1年再看</p>\n</blockquote>\n<h3 id=\"框架自动化构架图解\">框架自动化构架图解</h3>\n<ul>\n<li>点击放大<br>\n<a href=\"https://cimg1.17lai.fun/data/2022/05/09/20220509113832.webp\"><img src=\"https://cimg1.17lai.fun/data/2022/05/09/20220509113832.webp\" alt=\"框架自动化构架图解\"></a></li>\n</ul>\n<pre><code class=\"mermaid\">graph LR\n    1[Sonarr] == request Jackett / Prowlarr Torznab api ==&gt; 2(JProxy) == proxy Sonarr request ==&gt; 3(Jackett / Prowlarr) \n    3(Jackett / Prowlarr) == return ==&gt; 2(JProxy) == return result after format ==&gt; 1(Sonarr)\n    2(JProxy) == replace search key ==&gt; 2(JProxy)\n    2(JProxy) == format result title ==&gt; 2(JProxy)</code></pre>\n<p>jproxy 使用图解</p>\n<h2 id=\"硬链接工具\">硬链接工具</h2>\n<hr>\n<h2 id=\"设计目的\">设计目的</h2>\n<p>方便PT用户硬链接文件，在最大可能情况下节约空间，并保持做种。<br>\n小于1M的文件直接复制，方便emby，tmm等工具刮削修改nfo等小文件。<br>\n大于1M的文件硬链接到目的目录，可以修改文件名，但是不能修改文件内容！</p>\n<p>例如：<br>\n/share/Download/src #保存下载的PT文件<br>\n/share/Download/dst #保存你自己处理过的视频文件，把emby，tmm的目录设置到dst下面<br>\n下载脚本后chmod +x mklink.sh给与执行权限<br>\n使用mklink脚本修改如下，<a href=\"http://xn--mklink-9h6j334h9rzb9lqp0cw3s.sh\">然后直接运行mklink.sh</a>。就可以把src下面的文件全部硬链接到dst目录。mklink适合一次性把源文件夹链接到目的文件夹</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">SRC=\"/share/Download/src\"\nDST=\"/share/Download/dst\"</code></pre></div></figure>\n<p>注意：</p>\n<blockquote>\n<p>源目录，目的目录需要在一个硬盘分区里面。硬链接不能跨分区。</p>\n<p>硬链接过的文件可以使用mv来修改存储目录，不影响硬链接效果。但是cp会增加一份存储空间。所以对于已经硬链接过的文件，使用mv，不要使用cp。</p>\n</blockquote>\n<h2 id=\"解决的问题\">解决的问题</h2>\n<p>tmm，emby刮削的时候，必定修改nfo文件，下载的封面等图片不同刮削站点都不同，所以小文件复制，不怕修改。大文件硬链接，占有一份空间<br>\n被硬链接过的文件，同时存在多个地方，但是都指向一个存储空间，只有所有的硬链接都删除了，这个文件才会被系统删除。<br>\n同时，所有的硬链接文件，修改其中一个，其它所有指向这个位置的硬链接文件都被修改了。</p>\n<h2 id=\"使用说明\">使用说明</h2>\n<p>下载资源目录/share/Download，qbittorrent资源分类下载到/share/Download/src/下面的各个子目录，例如tv, anime, tv, movie, 4k, soft等等<br>\n创建一个资源整理使用目录/share/Download/dst/目录，然后就可以把/share/Download/src和/share/Download/dst目录作为下面2个脚本的输入目录，来使用了</p>\n<p>小文件直接复制，方便tmm刮削修改nfo文件，大文件硬链接，只占有一份空间，但有2分文件，可以改名，移动目录，方便tmm整理刮削。 做种，emby使用两不误！</p>\n<h3 id=\"建议目录结构\">建议目录结构</h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">/share/Downlosd/src       # BT下载工具默认保存主目录\n/share/Download/dst       # 硬链接目的目录，Emby，tmm，使用的目录，保存各种刮削信息。以及个人文件名修改，目录结构修改。\n在src目录下面建立子目录movie,music,anime,tv,4k等等，在qbittorrent里面设置分类，\n指向这里的movie,music,anime，tv等子目录。下载完后使用下面的硬链接脚本，\n把文件硬链接到目的文件夹。tmm，emby使用目的文件夹刮削数据。</code></pre></div></figure>\n<h4 id=\"qbittorrent使用设置\">qbittorrent使用设置</h4>\n<ul>\n<li>移动种子保存位置<br>\n在qt的web界面种子上面右键，选择菜单保存位置</li>\n<li>设置分类目录<br>\n在qt的web界面种子上面右键，选择分类-&gt;新分类，先写分类名称和路径。对于多文件种子，种子添加时选择自动管理。对于单文件种子，请自行添加子文件夹，或强制创建子文件夹。</li>\n</ul>\n<h2 id=\"mklink-sh\"><a href=\"http://mklink.sh\">mklink.sh</a></h2>\n<p>修改脚本参数源目录，目的目录,替换为你自己的目录。<br>\n脚本将把源目录所有文件硬链接到目的目录，小于1M的文件直接复制到目的目录。方便nfo等小文件刮削修改，大于1M的文件<br>\n硬链接到目的目录，以节约空间，2份文件只占有一份空间。</p>\n<p>mklink 直接针对2个文件夹做硬链接，小于1m的复制，但是没有判断是否已经硬链接过。<strong>适合全新的没有硬链接过的目录</strong>。</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#mklink.sh sourcedir dstdir\nmklink.sh /share/Download/tmp/src /share/Download/tmp/dst</code></pre></div></figure>\n<h2 id=\"dirlink-sh\"><a href=\"http://dirlink.sh\">dirlink.sh</a></h2>\n<p>设计原理：<a href=\"http://xn--islinked-z09lqdy6js7k9qcszh77bm28c7pcpywozav39f0wam3gk9g934jdmwb798e6ijf38a.lk\">针对输入原路径下一级子目录判断是否有文件islinked.lk</a>，<br>\n有这个文件就跳过，没有就硬链接这个子目录到目的目录生成对应的子目录。<br>\n小于1M的文件复制，大于1M的文件硬链接。</p>\n<p>可以直接修改脚本源目录，目的目录参数，也可以从参数$!,$2输入源目录，目的目录。<br>\n此脚本和mklink.sh区别在于，将检查每个目录是否已经被硬链接过，已经连接过的将跳过去不再硬链接。<br>\n<a href=\"http://xn--islinked-t39ly9eba963iwhd9vr0qh8m0aj8xfa892a0t3ditcxx9bd8n.lk\">原理是在源文件夹目录下添加文件islinked.lk</a>，通过检测这个文件来判断是否硬链接过</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">SRC=\"/share/Download/tmp/src/movie\"\nDST=\"/share/Download/tmp/dst/movie\"</code></pre></div></figure>\n<p>注意：src目录下面的文件需要放到各个子目录下面去，例如src/anime/amine1,src/tv/tv2，这样才能保证islinked.lk工作正常<br>\n目录设置可以直接修改脚本，也可以命令行参数输入</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#dirlink.sh sourcedir dstdir\ndirlink.sh /share/Download/tmp/src /share/Download/tmp/dst</code></pre></div></figure>\n<h3 id=\"重新建立连接，一次性删除所有islinked-lk文件\">重新建立连接，一次性删除所有islinked.lk文件</h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">find /share/Download/tmp -name \"islinked.lk\" | xargs rm -f</code></pre></div></figure>\n<p>替换前面的路径/share/Download/tmp为你自己的路径，操作和rm相关的命令一定<strong>注意不要输入错误</strong>，删错文件代价极大！</p>\n<h3 id=\"一次性硬链接多个目录\">一次性硬链接多个目录</h3>\n<p><a href=\"http://xn--link-494f902dwno9ijr24b9pq.sh\">如下所示脚本link.sh</a></p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#!/bin/sh\n/share/Download/source/dirlink.sh /share/Download/source/anime /share/Download/dst/anime\n/share/Download/source/dirlink.sh /share/Download/source/movie /share/Download/dst/movie\n/share/Download/source/dirlink.sh /share/Download/source/tv /share/Download/dst/tv</code></pre></div></figure>\n<h2 id=\"修改限制2M大小以下的复制\">修改限制2M大小以下的复制</h2>\n<p>修改脚本参数FILEGIG，原脚本是1M大小，修改为下面这样就是2M大小</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">FILEGIG=2000000c</code></pre></div></figure>\n<h2 id=\"autolink-sh\"><a href=\"http://autolink.sh\">autolink.sh</a></h2>\n<p>qBittorrent 下载完成时自动硬链接下载完的种子，适用于新下载完成的种子文件。以前下载完成的文件建议使用<code>link.sh</code>脚本的方法。<br>\n注意：脚本会判断是否进行硬链接的分类，分类详情见脚本内容。</p>\n<ul>\n<li>修改脚本目标目录<br>\n将你的目录填在<code>your_path</code>的等号后。</li>\n<li>设置下载完成后自动运行<br>\n在qt的web界面g，点击工具-&gt;选项-&gt;下载，勾选“Torrent 完成时运行外部程序”，填入<code>/path/to/autolink.sh \"%N\" \"%D\" \"%L\"</code><br>\n注意：填入autolink.sh的绝对位置，同时autolink与dirlink须在同一目录</li>\n</ul>\n<p>这个脚本使用，需要手动修改脚本中的分类，下面这一行！</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">if [[ \"$torrent_category\" == *\"movies\"* || \"$torrent_category\" == *\"series\"* || \"$torrent_category\" == *\"documents\"* || \"$torrent_category\" == *\"operas\"* ]]</code></pre></div></figure>\n<p>$torrent_category 是qBittorrent分类名称，也是目录名称！</p>\n<h2 id=\"注意事项\">注意事项</h2>\n<ul>\n<li>注意Linux权限，如果运行出错，请检查所使用的的用户和用户组权限。目的目录是否可写！</li>\n</ul>\n<h2 id=\"使用声明\">使用声明</h2>\n<p>数据无价，小心操作。<br>\n本脚本（除autolink.sh外）没有rm删除，只有mkdir和cp， 最多搞乱文件系统。但要注意不要把目的地目录设置到系统目录去了。<br>\n一切后果自负</p>\n<h2 id=\"感觉对你有帮助，来个star吧\">感觉对你有帮助，来个star吧</h2>\n<h2 id=\"Contributing\">Contributing</h2>\n<ol>\n<li>Fork it ( <a href=\"https://github.com/appotry/PTtool/fork\">https://github.com/appotry/PTtool/fork</a> )</li>\n<li>Create your feature branch (<code>git checkout -b my-new-feature</code>)</li>\n<li>Commit your changes (<code>git commit -am 'Add some feature'</code>)</li>\n<li>Push to the branch (<code>git push origin my-new-feature</code>)</li>\n<li>Create a new Pull Request</li>\n</ol>\n",
            "tags": [
                "linux",
                "hardlink",
                "bt",
                "pt"
            ]
        }
    ]
}