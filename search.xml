<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Github Pages + jekyll 全面介绍极简搭建个人网站和博客</title>
    <url>/blog/2021-03-03-use-githubpages-jekyll-to-make-a-personal-blog/</url>
    <content><![CDATA[<p>利用github pages搭建个人博客。本文指导建立github工程，并配置github pages搭建博客的全过程。</p>
<p>注意：图床使用github，图片显示问题自己解决</p>
<h2 id="第一步，建立Github仓库"><a href="#第一步，建立Github仓库" class="headerlink" title="第一步，建立Github仓库"></a>第一步，建立Github仓库</h2><p>首先到这里Github，创建一个仓库。</p>
<p><img src="https://images.weserv.nl/?url=https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/03/05/20210305002728.png" alt="img"></p>
<p>仓库名称有固定的格式： username.github.io，其中username必须是Github账户的用户名（我的是scottcgi），github.io是固定的，这个地址将会成为个人站点的网站地址。另外，我们可以勾选Initialize this repository with a README，让仓库自动创建一个README.md文件，我们用它来做站点的首页（当然也可以不创建，后面自行创建，或是建立index.html也行）。</p>
<p>注意： username如果不是Github账户名，这个仓库就会成为username.github.io的子站点，比如访问地址会是：username.github.io/aaa.github.io。可见，username.github.io是github默认分配给你的域名，同名仓库即代表着默认网站内容。而username.github.io/仓库名称，是用来访问你的其它仓库的地址。</p>
<h2 id="第二步，设置仓库开启Github-Pages"><a href="#第二步，设置仓库开启Github-Pages" class="headerlink" title="第二步，设置仓库开启Github Pages"></a>第二步，设置仓库开启Github Pages</h2><p>进入仓库设置界面，如图。</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/03/05/20210305002731.png" alt="img"></p>
<p>这里能够重新修改仓库的名称，比如这个仓库内容是fork别人的，就可以在这里修改成自己的username.github.io名称。</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/03/05/20210305002731.png" alt="img"></p>
<p>在Setting页面下有Github Pages的设置选项。绿色表示部署成功，每次修改仓库内容，都会出发Github jekyll重新编译部署，需要1-2分钟的时间，更新才能体现。如果有编译错误，包括js，css，html，markdown语法问题，都会显示红色以及错误页面和行号，同时会发邮件通知。其中，Source有以下几个选项：</p>
<p>gh-pages branch 是项目新建一个分支命名为这个，使用这个分支来做站点内容。<br>master branch 是使用主分支也是默认的，来作为站点内容。<br>master branch/docs folder 是使用主分支的docs文件夹来作为站点内容。<br>None 就是禁用Github Pages。<br>如果是username.github.io只能使用主分支，其它仓库项目可以选择其它两个。接下来Choose a theme是Github提供的内置的网站主题，选择即可应用无需其它设置。Custom domain是自定义域名，本文暂不讨论。</p>
<h2 id="第三步，使用Github内置主题"><a href="#第三步，使用Github内置主题" class="headerlink" title="第三步，使用Github内置主题"></a>第三步，使用Github内置主题</h2><p>选择好主题，过一会刷新网站地址就已经能看到效果了，而在Code页面仅有两个文件。</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/03/05/20210305002737.png"></p>
<p>编辑README.md文件的内容，就会默认显示在网站首页，<code>_config.yml</code> 是jekyll的全局配置文件，现在里面只有一句话，<code>theme: jekyll-theme-modernist</code>。我们可以手动修改这个theme主题配置，网站就会应用不同的主题。</p>
<p>Github内置支持的几个主题，官方的仓库在这里：<a href="https://pages.github.com/themes%EF%BC%8C%E6%AF%8F%E4%B8%AAREADME.md%E9%87%8C%E9%83%BD%E6%9C%89%E4%BB%8B%E7%BB%8D%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E3%80%82">https://pages.github.com/themes，每个README.md里都有介绍如何设置。</a></p>
<p>那么我们现在就有两种方法来使用这些主题：</p>
<p>第一种，就是直接fork一个主题仓库，然后修改仓库名称为我们自己的，然后修改我们需要的部分。</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/03/05/20210305002743.png" alt="img"></p>
<p>第二种，只是简单的Choose (Change) theme（或在<code>_config.yml</code>设置theme），然后我们对照着官方仓库的主题目录，需要改什么文件就按照同样的路径拷贝单独一个文件到自己的仓库来修改（保持路径一致），这样就可以保持自己仓库的简洁。（如果使用了github内置的主题，github就会把你仓库的内容和内置主题内容合并到一起编译成静态网页。）</p>
<p>另外，更多主题可以参看这两个地址（不要挑花眼了）： jekyll themes 和 jekyll wiki site。</p>
<h2 id="第四步，jekyll的目录结构"><a href="#第四步，jekyll的目录结构" class="headerlink" title="第四步，jekyll的目录结构"></a>第四步，jekyll的目录结构</h2><p>我们只需要关注几个核心的目录结构如下（可以自己创建）：</p>
<pre class="line-numbers language-none"><code class="language-none">- _layouts （存放页面模板，md或html文件的内容会填充模板）
- _sass（存放样式表）
- _includes （可以复用在其它页面被include的html页面）
- _posts（博客文章页面）
- assets（原生的资源文件）
  - js
  - css
  - image
- _config.yml （全局配置文件）
- index.html, index.md, README.md （首页index.html优先级最高，如果没有index，默认启用README.md文件）
- 自定义文件和目录
  更多更详细的目录结构参看jekyll官网：https://jekyllrb.com/docs/structure<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="第五步，jekyll的模板编程语言Liquid的使用"><a href="#第五步，jekyll的模板编程语言Liquid的使用" class="headerlink" title="第五步，jekyll的模板编程语言Liquid的使用"></a>第五步，jekyll的模板编程语言Liquid的使用</h2><ul>
<li><p>变量  被嵌入在页面中，会在静态页面生成的时候被替换成具体的数值。常用的全局变量对象有：site 和 page。这两个对象有很多默认自带的属性，比如：，。更多的默认值参看：<a href="https://jekyllrb.com/docs/variables%E3%80%82">https://jekyllrb.com/docs/variables。</a></p>
</li>
<li><p>site对象对应的就是网站范围，自定义变量放在_config.yml中，比如title:标题使用访问。</p>
</li>
<li><p>page对象对应的是单个页面，自定义变量放在每个页面的最开头，比如：</p>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">myNum:100
 
myStr:我是字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>使用 和  访问。<br>条件判断语句，更多详见：<a href="https://shopify.github.io/liquid/tags/control-flow">https://shopify.github.io/liquid/tags/control-flow</a></p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/0920210709184021.png" alt="image-20210709184019543"></p>
<p>循环迭代，更多详见：<a href="https://shopify.github.io/liquid/tags/iteration">https://shopify.github.io/liquid/tags/iteration</a></p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/0920210709184048.png" alt="image-20210709184046392"></p>
<p>默认函数，可以对变量进行一些处理，比如大小写转化、数学运算、格式化、排序等等，在Liquid中叫做Filters。比如<code>{{ "Hello World!" | downcase }}</code>转换字符串为小写。更多内置函数详见：<a href="https://jekyllrb.com/docs/liquid/filters">https://jekyllrb.com/docs/liquid/filters</a></p>
<h2 id="第六步，使用-config-yml文件设置jekyll"><a href="#第六步，使用-config-yml文件设置jekyll" class="headerlink" title="第六步，使用_config.yml文件设置jekyll"></a>第六步，使用_config.yml文件设置jekyll</h2><p>如果不是fork别人的仓库，就需要自己创建一个这个文件。然后，我们就可以配置一些默认的属性来控制jekyll的编译过程。更多详细的内置属性详见：<a href="https://jekyllrb.com/docs/configuration/default">https://jekyllrb.com/docs/configuration/default</a></p>
<p>同时我们可以自定变量，会自动绑定到site对象上，比如我们可以把导航配置到_config.yml中：</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/0920210709184117.png" alt="image-20210709184115899"></p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/0920210709183323.png" alt="image-20210709183301313"></p>
<p>当然，我们也可以把一些数据单独放入一个yml文件，然后放在固定的数据文件夹_data下，比如<code>_data/navigation.yml</code>，这样访问这个文件的数据对象就是site.data.navigation。</p>
<h2 id="第七步，-layouts模板配置"><a href="#第七步，-layouts模板配置" class="headerlink" title="第七步，_layouts模板配置"></a>第七步，_layouts模板配置</h2><p>_layouts文件夹存放的是页面模板，默认需要一个default.html，什么意思？就是说，layout提供一个页面的布局框架，这是固定的模式，包括样式、结构、布局、脚本控制等等。然后，我们在用其它md或html文件去动态填充这个框架，这样就形成了一个完整的页面。比如我的default.html页面如下：</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/0920210709183622.png" alt="image-20210709183547136"></p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/0920210709183638.png" alt="image-20210709183611193"></p>
<ul>
<li><code>{% seo %}</code> 是jekyll的一个插件提供的seo优化，详情在这里：<a href="https://github.com/jekyll/jekyll-seo-tag">https://github.com/jekyll/jekyll-seo-tag</a></li>
<li>核心在于 content 这个变量是内置的，会用我们的md或html页面填充这部分内容。</li>
<li>其它的，我们看到会大量使用变量和流程控制代码，来填充模板的方方面面。</li>
<li>于是，填充模板的内容，一方面是来自读取配置文件的变量，一方面是来自_includes的页面，还有就是来自 content 对应的页面。<br>当然，我们也可以不使用 content 来填充模板，而是使用_includes的页面来代替content  ，但这样不够灵活，因为使用content ，我们可以在每个页面单独设置对应的layout模板。</li>
</ul>
<h2 id="第八步，md和html页面编写"><a href="#第八步，md和html页面编写" class="headerlink" title="第八步，md和html页面编写"></a>第八步，md和html页面编写</h2><p>站点内容页面，可以使用markdown或html来编写，但markdown编写的md文件，在浏览器地址访问的时候依然使用html文件后缀。推荐使用markdown来书写内容，语法参见：Github md 示例 和 Github md 教程。比如下面这个About.md页面：</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token font-matter yaml language-yaml">layout: default
title: About</span>
<span class="token punctuation">---</span></span>
<span class="token title important"><span class="token punctuation">#</span> About page</span>
 
This page tells you a little bit about me.
 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>layout: default 就是告诉jekyll这个页面使用哪个模板，即这个页面会放入哪个模板的content。当然，我们可以在_layouts文件夹下提供多个不同的模板，然后根据需要不同的页面使用不同的layout。</p>
<p>页面可以放在任意位置和目录，访问的时候从站点域名开始，带上目录名称，再次注意需要使用html结尾。如果想要自定义浏览器的访问路径，可以参看详细设置：permalinks。</p>
<p>md和html页面的区别：</p>
<p>md有自己的语法，可以使用少量的html标签，最终会编译成html，侧重于内容编写。<br>html可以随意使用html标签，可以使用liquid模板语言，侧重于页面模板和功能控制。<br>至此，我们就可以在github上，新建md文件然后编辑提交，等待几分钟编译生成之后，就可以在浏览器里看到页面内容了。</p>
<h2 id="第九步，博客文章编写和管理"><a href="#第九步，博客文章编写和管理" class="headerlink" title="第九步，博客文章编写和管理"></a>第九步，博客文章编写和管理</h2><p>我们自然可以新建目录，提交文章，然后添加一个文章列表页面。但我们也可以把这些交给jekyll的内置机制来完成，因为它提供了一些方便的内置文章管理功能。</p>
<ul>
<li>_posts文件夹是内置的放置文章的目录，我们可以将固定格式year-moth-day-name.md名称的md文件放到这里。比如新建一篇md的博客文章放到_posts目录下：</li>
</ul>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token font-matter yaml language-yaml">layout: post</span>
<span class="token punctuation">---</span></span>
这是一篇博客文章。
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>接下来我们需要添加一个post的模板页面到_layouts文件夹下面。</li>
</ul>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/0920210709184604.png" alt="image-20210709183454370"></p>
<p>可见，模板页面本身也可以使用模板，这里post使用了default模板，而这里 content 就会填充_posts下面编写的页面（如果页面使用了layout: post模板）。</p>
<p>最后，我们还需要编写一个博客文章列表的页面，用来展示所有的文章。比如在根目录新建blog.html页面：</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/0920210709183357.png" alt="image-20210709183356335"></p>
<ul>
<li>site.posts jekyll会自动生成_posts目录的对象。</li>
<li>_post.url jekyll会自动会设置在_posts目录下的页面url。</li>
<li>post.title 默认是md文件名称，但也可以在文章页面自定义title: 我的文章自定义名称。</li>
<li>post.excerpt 默认是文章第一段的摘要文字。</li>
</ul>
<h2 id="第十步，Github-Pages的限制"><a href="#第十步，Github-Pages的限制" class="headerlink" title="第十步，Github Pages的限制"></a>第十步，Github Pages的限制</h2><ul>
<li>Github Pages 并不是无限存储和无限流量的静态站点服务，一些限制如下：</li>
<li>内容存储不能超过1GB。</li>
<li>每个月100GB流量带宽。</li>
<li>每小时编译构建次数不超过10次。（在线修改重新编译并未发现这个限制）</li>
<li>更多参看官方说明：usage-limits。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在实际的使用过程中，我发现完全可以在Github网站上，编写md和html页面，修改js和css文件，来完成站点的设置和搭建。只不过每次修改都要触发Github jekyll的编译行为，有点慢（不知道是不是增量编译），没有在本地修改调试的速度快。</p>
<p>更多jekyll详细的设置和功能，参看官方网站的文档：<a href="https://jekyllrb.com/docs%E3%80%82">https://jekyllrb.com/docs。</a></p>
<p>原文链接：<a href="https://blog.csdn.net/tom_221x/article/details/84630283">https://blog.csdn.net/tom_221x/article/details/84630283</a></p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Jekyll</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux PT硬链接助手</title>
    <url>/linux/2021-07-09-linux-pt-hard-link-tools/</url>
    <content><![CDATA[<p>由于自我需求，写了两个脚本完成PT下载和保种两全其美的硬链接 Linux shell 脚本方案。</p>
<h1 id="PT（Private-Tracker）"><a href="#PT（Private-Tracker）" class="headerlink" title="PT（Private Tracker）"></a>PT（Private Tracker）</h1><p>PT（Private Tracker）是一种改良自 BitTorrent 协定的 P2P 下载方式，“Private Tracker”指私有种子服务器。与 BT 最大的不同点分别为可进行私密范围下载，及可统计每个用户的上载及下载量。</p>
<h2 id="PTtool"><a href="#PTtool" class="headerlink" title="PTtool"></a>PTtool</h2><p>github地址： <a href="https://github.com/appotry/PTtool"><strong>appotry/PTtool</strong></a></p>
<h1 id="硬链接工具"><a href="#硬链接工具" class="headerlink" title="硬链接工具"></a>硬链接工具</h1><h2 id="设计目的"><a href="#设计目的" class="headerlink" title="设计目的"></a>设计目的</h2><p>方便PT用户硬链接文件，不需要再最大可能情况下节约空间，并保持做种。<br>小于1M的文件直接复制，方便emby，tmm等工具刮削修改nfo等小文件。<br>大于1M的文件硬链接到目的目录，可以修改文件名，但是不能修改文件内容！</p>
<p>例如：<br>/share/Download/src #保存下载的PT文件<br>/share/Download/dst #保存你自己处理过的视频文件，吧emby，tmm的目录设置到dst下面<br>下载脚本后chmod +x mklink.sh给与执行权限<br>使用mklink脚本修改如下，然后直接运行mklink.sh。就可以把src下面的文件全部硬链接到dst目录。mklink适合一次性把源文件夹链接到目的文件夹</p>
<pre class="line-numbers language-none"><code class="language-none">SRC="/share/Download/src"
DST="/share/Download/dst"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>注意，源目录，目的目录需要在一个分区里面。硬链接不能跨分区。</p>
<h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>tmm，emby刮削的时候，必定修改nfo文件，下载的封面等图片不同刮削站点都不同，所以小文件复制，不怕修改。大文件硬链接，占有一份空间<br>被硬链接过的文件，同时存在地方，但是都指向一个存储空间，只有所有的硬链接都删除了，这个文件才会被系统删除。<br>同时，所有的硬链接文件，修改其中一个，其它所有指向这个位置的硬链接文件都被修改了。</p>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>下载资源目录/share/Download，qbittorrent资源分类下载到/share/Download/src/下面的各个子目录，例如tv, anime, tv, movie, 4k, soft等等<br>创建一个资源整理使用目录/share/Download/dst/目录，然后就可以把/share/Download/src和/share/Download/dst目录作为下面2个脚本的输入目录，来使用了</p>
<p>小文件直接复制，方便tmm刮削修改nfo文件，大文件硬链接，只占有一份空间，但有2分文件，可以改名，移动目录，方便tmm整理刮削。 做种，emby使用两不误！</p>
<h3 id="建议目录结构"><a href="#建议目录结构" class="headerlink" title="建议目录结构"></a>建议目录结构</h3><pre class="line-numbers language-none"><code class="language-none">/share/Downlosd/src
/share/Download/dst
在src目录下面建立子目录movie,music,anime,tv,4k等等，在qbittorrent里面设置分类，
指向这里的movie,music,anime，tv等子目录。下载完后使用下面的硬链接脚本，
把文件硬链接到目的文件夹。tmm，emby使用目的文件夹刮削数据。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="qbittorrent使用设置"><a href="#qbittorrent使用设置" class="headerlink" title="qbittorrent使用设置"></a>qbittorrent使用设置</h4><ul>
<li>移动种子保存位置<br>在qt的web界面种子上面右键，选择菜单保存位置</li>
<li>设置分类目录<br>在qt的web界面种子上面右键，选择分类-&gt;新分类，先写分类名称和路径。种子添加时选择自动管理<h2 id="mklink-sh"><a href="#mklink-sh" class="headerlink" title="mklink.sh"></a>mklink.sh</h2>修改脚本参数源目录，目的目录,替换为你自己的目录。<br>脚本将把源目录所有文件硬链接到目的目录，小于1M的文件直接复制到目的目录。方便nfo等小文件刮削修改，大于1M的文件<br>硬链接到目的目录，以节约空间，2份文件只占有一份空间。<pre class="line-numbers language-none"><code class="language-none">SRC="/share/Download/tmp/src"
DST="/share/Download/tmp/dst"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
mklink 直接针对2个文件夹做硬链接，小于1m的复制，但是没有判断是否已经硬链接过。适合全新的没有硬链接过的目录。</li>
</ul>
<h2 id="dirlink-sh"><a href="#dirlink-sh" class="headerlink" title="dirlink.sh"></a>dirlink.sh</h2><p>设计原理：针对输入原路径下一级子目录判断是否有文件islinked.lk，<br>有这个文件就跳过，没有就硬链接这个子目录到目的目录生成对应的子目录。<br>小于1M的文件复制，大于1M的文件硬链接。</p>
<p>可以直接修改脚本参数，可以从参数$!,$2输入源目录，目的目录。<br>此脚本和mklink.sh区别在于，将检查每个目录是否已经被硬链接过，已经连接过的将跳过去不再硬链接。<br>原理是在源文件夹目录下添加文件islinked.lk，通过检测这个文件来判断是否硬链接过</p>
<pre class="line-numbers language-none"><code class="language-none">SRC="/share/Download/tmp/src/movie"
DST="/share/Download/tmp/dst/movie"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>注意：src目录下面的文件需要放到各个子目录下面去，例如src/anime/amine1,src/tv/tv2，这样才能保证islinked.lk工作正常<br>目录设置可以直接修改脚本，也可以命令行输入</p>
<pre class="line-numbers language-none"><code class="language-none">#dirlink.sh sourcedir dstdir
dirlink.sh /share/Download/tmp/src /share/Download/tmp/dst<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="重新建立连接，一次性删除所有islinked-lk文件"><a href="#重新建立连接，一次性删除所有islinked-lk文件" class="headerlink" title="重新建立连接，一次性删除所有islinked.lk文件"></a>重新建立连接，一次性删除所有islinked.lk文件</h3><pre class="line-numbers language-none"><code class="language-none">find /share/Download/tmp -name "islinked.lk" | xargs rm -f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>替换前面的路径/share/Download/tmp为你自己的路径，操作和rm相关的命令一定注意不要输入错误，删错文件代价极大！</p>
<h3 id="一次性硬链接多个目录"><a href="#一次性硬链接多个目录" class="headerlink" title="一次性硬链接多个目录"></a>一次性硬链接多个目录</h3><p>如下所示脚本link.sh</p>
<pre class="line-numbers language-none"><code class="language-none">#!/bin/sh
/share/Download/source/dirlink.sh /share/Download/source/anime /share/Download/dst/anime
/share/Download/source/dirlink.sh /share/Download/source/movie /share/Download/dst/movie
/share/Download/source/dirlink.sh /share/Download/source/tv /share/Download/dst/tv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="修改限制2M大小以下的复制"><a href="#修改限制2M大小以下的复制" class="headerlink" title="修改限制2M大小以下的复制"></a>修改限制2M大小以下的复制</h2><p>修改脚本参数FILEGIG，原脚本是1M大小，修改为下面这样就是2M大小</p>
<pre class="line-numbers language-none"><code class="language-none">FILEGIG=2000000c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="使用声明"><a href="#使用声明" class="headerlink" title="使用声明"></a>使用声明</h2><p>数据无价，小心操作。<br>本脚本没有rm删除，只有mkdir和cp， 最多搞乱文件系统。但要注意不要把目的地目录设置到系统目录去了。<br>一切后果自负</p>
<h2 id="感觉对你有帮助，来个star吧"><a href="#感觉对你有帮助，来个star吧" class="headerlink" title="感觉对你有帮助，来个star吧"></a>感觉对你有帮助，来个star吧</h2><h2 id="Contributing"><a href="#Contributing" class="headerlink" title="Contributing"></a>Contributing</h2><ol>
<li>Fork it ( <a href="https://github.com/[my-github-username]/PTtool/fork">https://github.com/[my-github-username]/PTtool/fork</a> )</li>
<li>Create your feature branch (<code>git checkout -b my-new-feature</code>)</li>
<li>Commit your changes (<code>git commit -am 'Add some feature'</code>)</li>
<li>Push to the branch (<code>git push origin my-new-feature</code>)</li>
<li>Create a new Pull Request</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>hardlink</tag>
        <tag>bt</tag>
        <tag>pt</tag>
      </tags>
  </entry>
  <entry>
    <title>使用jeckett,sonarr,iyuu,qt,emby打造全自动追剧流程</title>
    <url>/docker/2021-07-09-use-jeckett-sonarr-iyuu-qt-emby-building-automatic-movie-anime-process/</url>
    <content><![CDATA[<blockquote>
<p>使用jeckett,sonarr,iyuu,qt,emby打造全自动追剧流程，打造一个完整的HTPC。</p>
<p>jackett 作为种子源，sonarr剧集管理，bt下载，qbittorrent主力下载，使用iyuu转移辅种，emby，jellyfin做海报墙，sunfinder自动下载字幕。基本算是完美打通全流程自动追剧。bt种子文件命名规则SxxExx的自动识别下载，国内的资源手动查找下载，自动推送到emby刮削好。</p>
<p>结合本地DNS管理，DNS去广告，Nginx 反向代理去端口访问，形成一个完整解决方案。</p>
<p>硬链接工具导入到新目录，使用TMM刮削</p>
</blockquote>
<p>注意：图床使用<code>github</code>，已经启动<code>CDN</code>加速，如果图片显示问题自己解决。</p>
<h2 id="indexer-种子索引源"><a href="#indexer-种子索引源" class="headerlink" title="indexer 种子索引源"></a><strong>indexer 种子索引源</strong></h2><p>种子索引来源。</p>
<h2 id="jackett"><a href="#jackett" class="headerlink" title="jackett"></a><strong>jackett</strong></h2><ul>
<li>docker: linuxserver/jackett:latest</li>
<li>老牌选手，种子源非常丰富。</li>
</ul>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819002543.png" alt="image-20210819002541295"></p>
<h2 id="prowlarr"><a href="#prowlarr" class="headerlink" title="prowlarr"></a><strong>prowlarr</strong></h2><ul>
<li>indexer manager/proxy</li>
<li>Docker:  <a href="https://hub.docker.com/r/linuxserver/prowlarr">linuxserver/prowlarr:develop</a></li>
<li>新开发的，和sonarr, lidarr等结合比jackett 配置更简单</li>
</ul>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819002628.png" alt="image-20210819002626939"></p>
<h2 id="sonarr动画剧集管理"><a href="#sonarr动画剧集管理" class="headerlink" title="sonarr动画剧集管理"></a><strong>sonarr动画剧集管理</strong></h2><p>管理剧集名，查找剧集种子推送到下载工具</p>
<p>剧集管理示例图片</p>
<p>管理剧集目录，剧集日历，提醒你那一天哪些节目播放</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001244.png" alt="img"></p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819211051.png" alt="sonarr 日历提醒"></p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001328.png" alt="img"></p>
<p>自动识别下载对英文剧集支持较好，对于中文资源，结合手动识别下载更佳。</p>
<h3 id="手动识别下载"><a href="#手动识别下载" class="headerlink" title="手动识别下载"></a><strong>手动识别下载</strong></h3><p>示例图片</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001055.png" alt="img"></p>
<p>电影使用radarr, 音乐使用lidarr，同样可以自动化过程</p>
<h2 id="emby海报墙，流媒体中心"><a href="#emby海报墙，流媒体中心" class="headerlink" title="emby海报墙，流媒体中心"></a><strong>emby海报墙，流媒体中心</strong></h2><p>emby作为海报墙，元数据查看器，结合tampermonkey js脚本调用外部potplayer播放减少nas服务器压力，并且得到更好解码性能。手机端也有emby客户端。jellyfin，plex也可以</p>
<p>js脚本: <a href="https://greasyfork.org/scripts/406811-embylaunchpotplayer/code/embyLaunchPotplayer.user.js">embyLaunchPotplayer</a></p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001419.png" alt="img"></p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819000847.png" alt="img"></p>
<h2 id="jellyfin-开源版本的emby"><a href="#jellyfin-开源版本的emby" class="headerlink" title="jellyfin 开源版本的emby"></a><strong>jellyfin 开源版本的emby</strong></h2><ul>
<li>jellyfin硬件解码</li>
<li>jellyfin中文字体显示方块问题</li>
</ul>
<p>上面两个问题见下面compose 配置解决方法</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">jellyfin</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> jellyfin/jellyfin
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> jellyfin
    <span class="token key atrule">user</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>PUID<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>PGID<span class="token punctuation">}</span>
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> jellyfin
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">devices</span><span class="token punctuation">:</span>
     <span class="token punctuation">-</span> /dev/dri<span class="token punctuation">:</span>/dev/dri     <span class="token comment">#使jellfin支持硬件解码</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> PUID=$<span class="token punctuation">{</span>PUID<span class="token punctuation">}</span>
      <span class="token punctuation">-</span> PGID=$<span class="token punctuation">{</span>PGID<span class="token punctuation">}</span>
      <span class="token punctuation">-</span> TZ=$<span class="token punctuation">{</span>TZ<span class="token punctuation">}</span>
      <span class="token comment"># 给一些插件做代理</span>
      <span class="token punctuation">-</span> http_proxy=http<span class="token punctuation">:</span>//xxx.17lai.fun<span class="token punctuation">:</span>1089/
      <span class="token punctuation">-</span> https_proxy=http<span class="token punctuation">:</span>//xxx.17lai.fun<span class="token punctuation">:</span>1089/
    <span class="token comment"># ports:    # 使用nginx 反向代理，所以这里就不用开端口了</span>
      <span class="token comment"># - 8098:8096</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> $<span class="token punctuation">{</span>USERDIR<span class="token punctuation">}</span>/jellyfin/config<span class="token punctuation">:</span>/config
      <span class="token punctuation">-</span> $<span class="token punctuation">{</span>USERDIR<span class="token punctuation">}</span>/jellyfin/cache<span class="token punctuation">:</span>/cache
      <span class="token comment"># 把windowsfonts目录下面的字体都复制到`jellyfin/fonts`目录中</span>
      <span class="token punctuation">-</span> $<span class="token punctuation">{</span>USERDIR<span class="token punctuation">}</span>/jellyfin/fonts<span class="token punctuation">:</span>/usr/share/fonts    <span class="token comment"># 给jellyfin装载更多字体，使中文显示正确，不再是方块</span>
      <span class="token punctuation">-</span> $<span class="token punctuation">{</span>USERDIR<span class="token punctuation">}</span>/nginx/resolv.conf<span class="token punctuation">:</span>/etc/resolv.conf    <span class="token comment"># 定制dns</span>
 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>赋予emby，jellyfin访问硬件加速驱动权限</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">755</span> /dev/dri
<span class="token function">chmod</span> <span class="token number">666</span> /dev/dri/renderD128<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="tmm刮削，改名"><a href="#tmm刮削，改名" class="headerlink" title="tmm刮削，改名"></a><strong>tmm刮削，改名</strong></h2><p>一些命名不规范，不能被emby识别的剧集使用tmm刮削改名，配合硬链接工具，可以不影响做种的前提下改名，该目录。大文件硬链接，小文件直接复制方便刮削，推荐一个自己写的硬链接bash shell脚本，PTtool在nas，linux环境使用更方便</p>
<p>Github: <a href="https://github.com/appotry/PTtool">appotry/PTtool</a></p>
<p>Gitee: 镜像 <a href="https://gitee.com/bloodwolf/PTtool">bloodwolf/PTtool</a></p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001155.png" alt="img"></p>
<p>注意：使用v3版本，不要升级到v4，v4版本收费。</p>
<h2 id="硬链接工具"><a href="#硬链接工具" class="headerlink" title="硬链接工具"></a><strong>硬链接工具</strong></h2><p><strong>Github</strong>: <a href="https://github.com/appotry/PTtool"><strong>PTools</strong></a></p>
<p><strong>使用教程</strong>： <a href="https://blog.17lai.fun/blogging/pt/2021-07-09-linux-pt-hard-link-tools/"><strong>Linux PT硬链接助手使用教程</strong></a></p>
<blockquote>
<p>博主编写的脚本，自推一下，在Nas，linux环境使用的Shell 脚本。</p>
</blockquote>
<p>PT hard link tools。方便PT用户硬链接文件，在最大可能情况下节约空间，并保持做种。 小于1M的文件直接复制，方便emby，tmm等工具刮削修改nfo等小文件。 大于1M的文件硬链接到目的目录，可以随意修改文件名，但是不能修改文件内容！</p>
<p>从此，做种，刮削改名两不误！</p>
<h2 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a><strong>下载工具</strong></h2><h2 id="Transmissoin"><a href="#Transmissoin" class="headerlink" title="Transmissoin"></a><strong>Transmissoin</strong></h2><ul>
<li> <a href="https://blog.17lai.fun/bt/2021-08-18-transmission-parameter-reference-configuration/"><strong>transmission 使用及其配置</strong></a></li>
</ul>
<h2 id="qBittorrent"><a href="#qBittorrent" class="headerlink" title="qBittorrent"></a>qBittorrent</h2><ul>
<li> <a href="https://blog.17lai.fun/bt/2021-08-18-qbittorrent-parameter-reference-configuration/"><strong>qBittorrent 参数详细设置教程</strong></a></li>
</ul>
<p>都分别有docker版本和套件版本。</p>
<p>虽然下载工具很多，但IYUU只支持这两个辅种工具，开发者的话是这两个工具的RPC调用接口稳定。</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819005826.png" alt="image-20210819005824763"></p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819005858.png" alt="image-20210819005856669"></p>
<h2 id="辅种工具IYUU"><a href="#辅种工具IYUU" class="headerlink" title="辅种工具IYUU"></a><strong>辅种工具IYUU</strong></h2><p><strong>Doker版本</strong></p>
<ul>
<li><p><a href="https://hub.docker.com/r/iyuucn/iyuuautoreseed">iyuucn/iyuuautoreseed</a></p>
<blockquote>
<p>命令行版本</p>
</blockquote>
</li>
<li><p><a href="https://hub.docker.com/r/iyuucn/iyuuplus">iyuucn/iyuuplus</a></p>
<blockquote>
<p>图形界面版本，更轻松上手。</p>
</blockquote>
</li>
</ul>
<p>自动辅种，解放双手，更多魔力，更容易养多站。</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819010407.png" alt="image-20210819010337086"></p>
<h2 id="字幕下载"><a href="#字幕下载" class="headerlink" title="字幕下载"></a><strong>字幕下载</strong></h2><p>想要较好的自动下载字幕，最好用前面介绍的tmm刮削改名之后再使用下面工具。</p>
<h2 id="subfinder-自动下载字幕"><a href="#subfinder-自动下载字幕" class="headerlink" title="subfinder 自动下载字幕"></a>subfinder 自动下载字幕</h2><ul>
<li>Docker： <a href="https://hub.docker.com/r/superng6/subfinder">superng6/subfinder</a></li>
</ul>
<p>下载完成，刮削后的目录，挂载到subfinder的media目录，就会自动下载字幕。</p>
<p>字幕下载对电影，英文剧集支持较好。对于一些tv，动画手动下载字幕会更好一些。</p>
<p>注意：官方的配置文件有问题，时效问题。修改URL到最新即可。</p>
<h2 id="chinesesubfinder"><a href="#chinesesubfinder" class="headerlink" title="chinesesubfinder"></a>chinesesubfinder</h2><ul>
<li><p>Docker： <a href="https://hub.docker.com/r/allanpk716/chinesesubfinder">allanpk716/chinesesubfinder</a></p>
</li>
<li><p>新开发的中文字幕查找工具，上面那个很久没更新了，这个刚出来。使用nfo里面刮削出来的文件名来匹配字幕。所以就原理来说，这个字幕匹配更准确。</p>
</li>
</ul>
<h2 id="bazarr"><a href="#bazarr" class="headerlink" title="bazarr"></a>bazarr</h2><ul>
<li>Docker：<a href="https://hub.docker.com/r/linuxserver/bazarr">linuxserver/bazarr</a></li>
<li>字幕下载管理，配合sonarr, radarr 使用效果更好。对于英文剧集命名规范的支持较好，比如<code>[name]S01E01</code></li>
</ul>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819002816.png" alt="image-20210819002815154"></p>
<hr>
<h2 id="使用radarr管理电影"><a href="#使用radarr管理电影" class="headerlink" title="使用radarr管理电影"></a><strong>使用radarr管理电影</strong></h2><p>radarr示例图片<img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001114.png" alt="img"></p>
<h2 id="使用lidarr管理音乐"><a href="#使用lidarr管理音乐" class="headerlink" title="使用lidarr管理音乐"></a><strong>使用lidarr管理音乐</strong></h2><p>lidarr示例图片<br><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001200.png" alt="img"></p>
<h2 id="使用docker-compose-管理docker配置文件，一键安装，升级"><a href="#使用docker-compose-管理docker配置文件，一键安装，升级" class="headerlink" title="使用docker compose 管理docker配置文件，一键安装，升级"></a>使用docker compose 管理docker配置文件，一键安装，升级</h2><h2 id="使用portainer管理docker"><a href="#使用portainer管理docker" class="headerlink" title="使用portainer管理docker"></a><strong>使用portainer管理docker</strong></h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001116.png" alt="img"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">version: <span class="token string">'3'</span>
services:
  portainer-ce:
    container_name:  portainer-ce
    image: portainer/portainer-ce
    command: -H unix:///var/run/docker.sock
    restart: always
    ports:
      - <span class="token number">9300</span>:9000
      - <span class="token number">9301</span>:8000
    environment:
      - <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai
      - <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /share/Container/portainer_data:/data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="使用watchtower自动升级docker"><a href="#使用watchtower自动升级docker" class="headerlink" title="使用watchtower自动升级docker"></a><strong>使用watchtower自动升级docker</strong></h2><p>使所有软件保持最新最佳状态</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001124.png" alt="img"></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">watchtower</span><span class="token punctuation">:</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> watchtower
    <span class="token key atrule">image</span><span class="token punctuation">:</span> containrrr/watchtower<span class="token punctuation">:</span>latest
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> TZ=Asia/Shanghai
      <span class="token punctuation">-</span> WATCHTOWER_CLEANUP=true
      <span class="token punctuation">-</span> WATCHTOWER_SCHEDULE=0 0 1 * * *
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">command</span><span class="token punctuation">:</span> nginx redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述配置文件中<code>volumes</code>使用了绝对路径,使这个容器能访问系统<code>docker.sock</code>目录,用于方便监控容器镜像的版本以便更新.其他的一些环境变量,例如时区,清理旧镜像,定时任务都转换为<code>environment</code>,而特殊的<code>command</code>命令则定义了指定监控<code>nginx</code>和<code>redis</code>两个容器。没有command这一行，默认监控升级所有运行中的docker</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 运行一次，更新所有的容器，并清除旧的容器 </span>
docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup --run-once<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#只更新nginx和redis</span>
docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup --run-once nginx redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="使用muximux来管理多个docker入口"><a href="#使用muximux来管理多个docker入口" class="headerlink" title="使用muximux来管理多个docker入口"></a><strong>使用muximux来管理多个docker入口</strong></h2><p>主页面</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001210.png"></p>
<p>配置页面</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001131.png" alt="img"></p>
<h2 id="更进阶定制本地域名访问"><a href="#更进阶定制本地域名访问" class="headerlink" title="更进阶定制本地域名访问"></a><strong>更进阶定制本地域名访问</strong></h2><h2 id="nginx-管理域名访问"><a href="#nginx-管理域名访问" class="headerlink" title="nginx 管理域名访问"></a><strong>nginx 管理域名访问</strong></h2><ul>
<li>Docker: <a href="https://hub.docker.com/r/bloodstar/nginx-purge">bloodstar/nginx-purge</a></li>
<li>Github： <a href="https://github.com/appotry/nginx-purge-docker">nginx</a></li>
<li>去掉烦人的端口后缀，实现80,443 端口复用。这个docker 是博主定制功能版。</li>
<li>配置SSL证书访问，密码等敏感数据从此加密传输。并可以使用http2高级特性。</li>
<li><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819010407.png" alt="image-20210819010337086"></li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">version: <span class="token string">'3'</span>
services:
  nginxweb:
    image: bloodstar/nginx-purge
    container_name: <span class="token string">"nginxweb"</span>
    hostname: nginxweb
    ports:
      - <span class="token string">"80:80"</span>
      - <span class="token string">"443:443"</span>
    restart: always
    volumes:
      <span class="token comment"># 映射主机目录</span>
      - <span class="token variable">${USERDIR}</span>/nginx/conf.d:/etc/nginx/conf.d:ro
      - <span class="token variable">${USERDIR}</span>/nginxproxy/certs:/etc/nginx/certs:ro
      - <span class="token variable">${USERDIR}</span>/nginx/nginx.conf:/etc/nginx/nginx.conf:ro<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> 这里推荐博主制作的nginx docker镜像： <a href="https://hub.docker.com/r/bloodstar/nginx-purge">bloodstar/nginx-purge</a></p>
<blockquote>
<p>支持ARM64, ARMV7, AMD64 ，增加 CA 证书，防火墙，brotli, Proxy-cache-purge, htpasswd 支持</p>
</blockquote>
<h2 id="DNS-域名管理"><a href="#DNS-域名管理" class="headerlink" title="DNS 域名管理"></a><strong>DNS 域名管理</strong></h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819003924.png" alt="image-20210819003922283"></p>
<ul>
<li><p>和nginx 配合使用。 简单的可以直接修改<code>/etc/hosts</code>。</p>
</li>
<li><p>DNSCrypt Proxy： 作为DNS前端访问DOH的DNS</p>
</li>
<li><p>DNSMasq： 作为DNS后端，连接到DNSCrypt Proxy，并配置本地域名。还可以添加DNS去广告功能，浏览器插件去广告非常消耗CPU和内存，但是在DNS前端去广告，资源消耗低，并一次性解决所有的访问终端（pc，手机，平板）广告问题。</p>
<blockquote>
<p>配置一个去广告，本地域名管理工具。</p>
</blockquote>
</li>
</ul>
<h2 id="Xteve-看IPTV"><a href="#Xteve-看IPTV" class="headerlink" title="Xteve 看IPTV"></a><strong>Xteve 看IPTV</strong></h2><p>Docker: <a href="https://hub.docker.com/r/dnsforge/xteve">dnsforge/xteve</a></p>
<p>结合Emby， jellyfin直接看iptv。</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819010804.png" alt="image-20210819010802918"></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li><p>tmm，jackett，sonarr最好配置代理。否则，刮削，图片墙可能工作不正常。</p>
</li>
<li><p>docker最好配置镜像加速，提高安装docker速度</p>
</li>
<li><p>一些docker初始化安装，运行、更新时需要访问github，最好配置代理。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>Emby</tag>
        <tag>Sonarr</tag>
        <tag>Jeckett</tag>
        <tag>Portainer</tag>
        <tag>Watchtower</tag>
        <tag>DNSMasq</tag>
        <tag>DNSCrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>破解Gitlab EE</title>
    <url>/gitlab/2021-07-09-carck-gitlabee/</url>
    <content><![CDATA[<p>由于需要一些镜像等 gitlab 高级功能，所有破解gitlab ee版本。</p>
<h2 id="安装ruby"><a href="#安装ruby" class="headerlink" title="安装ruby"></a>安装ruby</h2><p>安装完gitlab ee之后</p>
<p>安装ruby：yum install ruby</p>
<p>ruby版本需要2.3或以上。</p>
<h2 id="生成许可证"><a href="#生成许可证" class="headerlink" title="生成许可证"></a><strong>生成许可证</strong></h2><p>gem install gitlab-license</p>
<h2 id="创建一个rb文件"><a href="#创建一个rb文件" class="headerlink" title="创建一个rb文件"></a>创建一个rb文件</h2><p>license.rb</p>
<hr>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">require</span> <span class="token string">"openssl"</span>
<span class="token keyword">require</span> <span class="token string">"gitlab/license"</span>
 
key_pair <span class="token operator">=</span> <span class="token constant">OpenSSL</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PKey</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">RSA</span><span class="token punctuation">.</span>generate<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span>
<span class="token builtin">File</span><span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"license_key"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">|</span>f<span class="token operator">|</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>key_pair<span class="token punctuation">.</span>to_pem<span class="token punctuation">)</span> <span class="token punctuation">}</span>
 
public_key <span class="token operator">=</span> key_pair<span class="token punctuation">.</span>public_key
<span class="token builtin">File</span><span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"license_key.pub"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">|</span>f<span class="token operator">|</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>public_key<span class="token punctuation">.</span>to_pem<span class="token punctuation">)</span> <span class="token punctuation">}</span>
 
private_key <span class="token operator">=</span> <span class="token constant">OpenSSL</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PKey</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">RSA</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token builtin">File</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">"license_key"</span><span class="token punctuation">)</span>
<span class="token constant">Gitlab</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">License</span><span class="token punctuation">.</span>encryption_key <span class="token operator">=</span> private_key
 
license <span class="token operator">=</span> <span class="token constant">Gitlab</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">License</span><span class="token punctuation">.</span><span class="token keyword">new</span>
license<span class="token punctuation">.</span>licensee <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">"Name"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">"none"</span><span class="token punctuation">,</span>
  <span class="token string">"Company"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">"none"</span><span class="token punctuation">,</span>
  <span class="token string">"Email"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">"example@test.com"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
license<span class="token punctuation">.</span>starts_at <span class="token operator">=</span> <span class="token constant">Date</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 开始时间</span>
license<span class="token punctuation">.</span>expires_at <span class="token operator">=</span> <span class="token constant">Date</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">2050</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 结束时间</span>
license<span class="token punctuation">.</span>notify_admins_at <span class="token operator">=</span> <span class="token constant">Date</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">2049</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
license<span class="token punctuation">.</span>notify_users_at <span class="token operator">=</span> <span class="token constant">Date</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">2049</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
license<span class="token punctuation">.</span>block_changes_at <span class="token operator">=</span> <span class="token constant">Date</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">2050</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
license<span class="token punctuation">.</span>restrictions <span class="token operator">=</span> <span class="token punctuation">{</span>
  active_user_count<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
 
puts <span class="token string">"License:"</span>
puts license
 
data <span class="token operator">=</span> license<span class="token punctuation">.</span>export
puts <span class="token string">"Exported license:"</span>
puts data
<span class="token builtin">File</span><span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"GitLabBV.gitlab-license"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">|</span>f<span class="token operator">|</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">}</span>
 
public_key <span class="token operator">=</span> <span class="token constant">OpenSSL</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PKey</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">RSA</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token builtin">File</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">"license_key.pub"</span><span class="token punctuation">)</span>
<span class="token constant">Gitlab</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">License</span><span class="token punctuation">.</span>encryption_key <span class="token operator">=</span> public_key
 
data <span class="token operator">=</span> <span class="token builtin">File</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">"GitLabBV.gitlab-license"</span><span class="token punctuation">)</span>
<span class="token variable">$license</span> <span class="token operator">=</span> <span class="token constant">Gitlab</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">License</span><span class="token punctuation">.</span>import<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
 
puts <span class="token string">"Imported license:"</span>
puts <span class="token variable">$license</span>
 
<span class="token keyword">unless</span> <span class="token variable">$license</span>
  <span class="token keyword">raise</span> <span class="token string">"The license is invalid."</span>
<span class="token keyword">end</span>
 
<span class="token keyword">if</span> <span class="token variable">$license</span><span class="token punctuation">.</span>restricted<span class="token operator">?</span><span class="token punctuation">(</span><span class="token symbol">:active_user_count</span><span class="token punctuation">)</span>
  active_user_count <span class="token operator">=</span> <span class="token number">10000</span>
  <span class="token keyword">if</span> active_user_count <span class="token operator">&gt;</span> <span class="token variable">$license</span><span class="token punctuation">.</span>restrictions<span class="token punctuation">[</span><span class="token symbol">:active_user_count</span><span class="token punctuation">]</span>
    <span class="token keyword">raise</span> <span class="token string">"The active user count exceeds the allowed amount!"</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
 
<span class="token keyword">if</span> <span class="token variable">$license</span><span class="token punctuation">.</span>notify_admins<span class="token operator">?</span>
  puts <span class="token string">"The license is due to expire on <span class="token interpolation"><span class="token delimiter tag">#{</span><span class="token variable">$license</span><span class="token punctuation">.</span>expires_at<span class="token delimiter tag">}</span></span>."</span>
<span class="token keyword">end</span>
 
<span class="token keyword">if</span> <span class="token variable">$license</span><span class="token punctuation">.</span>notify_users<span class="token operator">?</span>
  puts <span class="token string">"The license is due to expire on <span class="token interpolation"><span class="token delimiter tag">#{</span><span class="token variable">$license</span><span class="token punctuation">.</span>expires_at<span class="token delimiter tag">}</span></span>."</span>
<span class="token keyword">end</span>
 
<span class="token keyword">module</span> <span class="token constant">Gitlab</span>
  <span class="token keyword">class</span> <span class="token class-name">GitAccess</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">check</span></span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> changes <span class="token operator">=</span> <span class="token keyword">nil</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token variable">$license</span><span class="token punctuation">.</span>block_changes<span class="token operator">?</span>
        <span class="token keyword">return</span> build_status_object<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"License expired"</span><span class="token punctuation">)</span>
      <span class="token keyword">end</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
 
puts <span class="token string">"This instance of GitLab Enterprise Edition is licensed to:"</span>
<span class="token variable">$license</span><span class="token punctuation">.</span>licensee<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>key<span class="token punctuation">,</span> value<span class="token operator">|</span>
  puts <span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#{</span>key<span class="token delimiter tag">}</span></span>: <span class="token interpolation"><span class="token delimiter tag">#{</span>value<span class="token delimiter tag">}</span></span>"</span>
<span class="token keyword">end</span>
 
<span class="token keyword">if</span> <span class="token variable">$license</span><span class="token punctuation">.</span>expired<span class="token operator">?</span>
  puts <span class="token string">"The license expired on <span class="token interpolation"><span class="token delimiter tag">#{</span><span class="token variable">$license</span><span class="token punctuation">.</span>expires_at<span class="token delimiter tag">}</span></span>"</span>
<span class="token keyword">elsif</span> <span class="token variable">$license</span><span class="token punctuation">.</span>will_expire<span class="token operator">?</span>
  puts <span class="token string">"The license will expire on <span class="token interpolation"><span class="token delimiter tag">#{</span><span class="token variable">$license</span><span class="token punctuation">.</span>expires_at<span class="token delimiter tag">}</span></span>"</span>
<span class="token keyword">else</span>
  puts <span class="token string">"The license will never expire."</span>
<span class="token keyword">end</span>
 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ruby license.rb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>生成 <code>GitLabBV.gitlab-license</code> <code>license_key</code> <code>license_key.pub</code> 这三个文件。</p>
<h2 id="使用许可证"><a href="#使用许可证" class="headerlink" title="使用许可证"></a><strong>使用许可证</strong></h2><p>用 <code>license_key.pub</code> 文件替换 <code>/opt/gitlab/embedded/service/gitlab-rails/.license_encryption_key.pub</code>。</p>
<p><code>GitLabBV.gitlab-license</code> 即是许可证，填入 <code>${address}/admin/license</code> 地址并重启 <code>gitlab-ctl restart</code> 。</p>
<h2 id="修改等级"><a href="#修改等级" class="headerlink" title="修改等级"></a><strong>修改等级</strong></h2><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">--</span><span class="token operator">-</span> <span class="token operator">/</span>opt<span class="token operator">/</span>gitlab<span class="token operator">/</span>embedded<span class="token operator">/</span>service<span class="token operator">/</span>gitlab<span class="token operator">-</span>rails<span class="token operator">/</span>ee<span class="token operator">/</span>app<span class="token operator">/</span>models<span class="token operator">/</span>license<span class="token punctuation">.</span>rb
<span class="token operator">++</span><span class="token operator">+</span> <span class="token operator">/</span>opt<span class="token operator">/</span>gitlab<span class="token operator">/</span>embedded<span class="token operator">/</span>service<span class="token operator">/</span>gitlab<span class="token operator">-</span>rails<span class="token operator">/</span>ee<span class="token operator">/</span>app<span class="token operator">/</span>models<span class="token operator">/</span>license<span class="token punctuation">.</span>rb
@@ <span class="token operator">-</span><span class="token number">458</span><span class="token punctuation">,</span><span class="token number">7</span> <span class="token operator">+</span><span class="token number">458</span><span class="token punctuation">,</span><span class="token number">7</span> @@
  <span class="token keyword">end</span>
 
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">plan</span></span>
<span class="token operator">-</span>    restricted_attr<span class="token punctuation">(</span><span class="token symbol">:plan</span><span class="token punctuation">)</span><span class="token punctuation">.</span>presence <span class="token operator">||</span> <span class="token constant">STARTER_PLAN</span>
<span class="token operator">+</span>    restricted_attr<span class="token punctuation">(</span><span class="token symbol">:plan</span><span class="token punctuation">)</span><span class="token punctuation">.</span>presence <span class="token operator">||</span> <span class="token constant">ULTIMATE_PLAN</span>
  <span class="token keyword">end</span>
 
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">edition</span></span>
 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>修改完成后使用 <code>gitlab-ctl restart</code> 重新加载配置。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h2><ul>
<li>  <a href="https://www.rubydoc.info/gems/gitlab-license/1.0.0/file/README.md">https://www.rubydoc.info/gems/gitlab-license/1.0.0/file/README.md</a></li>
</ul>
]]></content>
      <categories>
        <category>gitlab</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
        <tag>Git</tag>
        <tag>Crack</tag>
      </tags>
  </entry>
  <entry>
    <title>完美笔记进化论</title>
    <url>/note/2021-07-25-how-to-make-perfect-note/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>​    受够了一些网络服务随意被关闭，如google reader等。经过google doc, 有道笔记，为知笔记，手机备忘录，记事本，git，等等方式记录笔记，使用过TXT，work，gitbook，markdown等格式，找到一种接近完美的解决记录笔记的方式。主要采用selfhost，自主搭建服务器，每个组件都可以被取代，大多数都是开源可定制的。<br>​<br>​        经历了很长时间，使用了各种各样的方案，最终选择了一种相对完美的方式。docker运行的为知笔记，使用markdown，github作为图床，picgo作为图像上传后端，pypora作为MD编辑器，Snipaste作为截图工具。后备gitlab ee selfhost后，图床也是自我搭建。</p>
<h2 id="笔记进化历史"><a href="#笔记进化历史" class="headerlink" title="笔记进化历史"></a>笔记进化历史</h2><h2 id="浏览器书签"><a href="#浏览器书签" class="headerlink" title="浏览器书签"></a>浏览器书签</h2><p>优点：使用方便，一些实时更新的内容可以直达。</p>
<p>缺点：需要联网，没办法搜索编辑，经常有链接失效。很多有实效的资源，或者可能只能存在一定时间的资源。</p>
<p>由于时效更新的缘故，一直和其它笔记记录方式一起使用。</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/2720210727143415.png" alt="image-20210727143412041"></p>
<h2 id="word笔记"><a href="#word笔记" class="headerlink" title="word笔记"></a>word笔记</h2><p>优点：富文本支持</p>
<p>缺点：word相对笨重，很多低端平台没有word可用</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/2520210725222121.png" alt="image-20210725222119873"></p>
<h2 id="txt笔记"><a href="#txt笔记" class="headerlink" title="txt笔记"></a>txt笔记</h2><p>优点：多平台，随时随地，格式简单</p>
<p>缺点：富文本支持不好，同步机制只能自己想办法，没有富文本</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/2520210725222325.png" alt="image-20210725222321410"></p>
<h2 id="gitbook"><a href="#gitbook" class="headerlink" title="gitbook"></a>gitbook</h2><p>优点：同步机制，修改版本机制</p>
<p>缺点：富文本相对缺乏</p>
<p>单独来说只解决了修改日志问题</p>
<h2 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h2><p>优点：富文本</p>
<p>缺点：无修改日志，显示上传不友好</p>
<p>单独来说解决了富文本问题</p>
<h2 id="google-doc"><a href="#google-doc" class="headerlink" title="google doc"></a>google doc</h2><p>优点：在线编辑，富文本支持，修改历史支持，搜索支持。</p>
<p>缺点：文件是google专有格式，数据保存在网上，国内访问需要代/理支持，google还有关闭热度不高网络服务先例。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/2520210725221711.png" alt="image-20210725221705731"></h2><h2 id="有道笔记"><a href="#有道笔记" class="headerlink" title="有道笔记"></a>有道笔记</h2><p>优点：对markdown支持非常好</p>
<p>缺点：收费，多平台不够友好，同步问题</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/2520210725222556.png" alt="image-20210725222553789"></p>
<h2 id="手机’’备忘录”app"><a href="#手机’’备忘录”app" class="headerlink" title="手机’’备忘录”app"></a>手机’’备忘录”app</h2><p>优点： 方便，随时随地</p>
<p>缺点：一般只能同型号手机之间同步， 对于多平台同步没有支持，也没有富文本，没有修改历史。</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/2520210725220932.jpg"></p>
<h2 id="最终选择方案"><a href="#最终选择方案" class="headerlink" title="最终选择方案"></a>最终选择方案</h2><h2 id="为知笔记docker版-Typora-Picgo-github-snipaste"><a href="#为知笔记docker版-Typora-Picgo-github-snipaste" class="headerlink" title="为知笔记docker版+Typora+Picgo+github+snipaste"></a>为知笔记docker版+Typora+Picgo+github+snipaste</h2><blockquote>
<p>最近替换wiznote为Joplin，完全开源免费。Joplin插件异常强大，支持各种Markdown语法。</p>
</blockquote>
<p>wiznote docker版作为笔记管理搜索工具，typora作为markdown编辑器，只使用markdown格式笔记，Picgo作为图上上传工具，github作为图像图床，Snippaste作为截屏工具。一起组成笔记工具链。</p>
<p>怎么样？ 够复杂吧，作者也觉得很复杂，但整体免费，满足selfhost， 富文本，多平台，版本管理，目录管理，可搜索，对图像友好的苛刻要求，超越市面所有产品，wiznote 还可以对外网提供服务。</p>
<p>优点：selfhost， 富文本，多平台，版本管理，目录管理，可搜索，对图像友好。只使用其中部分功能，每个功能都是有其它可替代方案</p>
<p>缺点：配置异常复杂，配置完整难度较高，一些组件还不够成熟，稳定性不够好，存在bug</p>
<h2 id="完整解决方案图示"><a href="#完整解决方案图示" class="headerlink" title="完整解决方案图示"></a>完整解决方案图示</h2><h2 id="wiznote-docker版"><a href="#wiznote-docker版" class="headerlink" title="wiznote docker版"></a>wiznote docker版</h2><p>数据完整保存在自己搭建的服务器上面，备份转移方便。其实主要是使用wiznote docker版的目录管理，多文档搜索，修改记录功能。可以使用gitlab docker版来代替。</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/2720210727145645.png" alt="image-20210727145642431"></p>
<h3 id="教程：-为知笔记私有化Docker部署"><a href="#教程：-为知笔记私有化Docker部署" class="headerlink" title="教程： 为知笔记私有化Docker部署"></a>教程： <a href="https://blog.17lai.fun/note/2021-09-09-deploy-wiznote-docker-on-nas/">为知笔记私有化Docker部署</a></h3><h2 id="最近更新-Joplin-docker-Typora-VIM-Picgo-github-snipaste"><a href="#最近更新-Joplin-docker-Typora-VIM-Picgo-github-snipaste" class="headerlink" title="最近更新 Joplin docker +Typora+VIM + Picgo+github+snipaste"></a>最近更新 Joplin docker +Typora+VIM + Picgo+github+snipaste</h2><blockquote>
<p>选用理由： <strong>从服务器到客户端，到APP完全开源</strong>，支持dropbox，webdav，本地文件系统，docker镜像等同步方式。</p>
</blockquote>
<p>Jopin配合Typora才是最佳搭档, 配置如下</p>
<h2 id="Joplin"><a href="#Joplin" class="headerlink" title="Joplin"></a>Joplin</h2><h2 id="Joplin教程："><a href="#Joplin教程：" class="headerlink" title="Joplin教程："></a>Joplin教程：</h2><blockquote>
<ul>
<li><a href="https://blog.17lai.fun/note/2021-09-09-play-with-joplin/">替代Evernote免费开源笔记Joplin-网盘同步笔记历史版本Markdown可视化</a></li>
<li><a href="https://blog.17lai.fun/note/2021-09-09-start-to-use-joplin/">Joplin 入门指南&amp;实践方案</a></li>
<li><a href="https://blog.17lai.fun/note/2021-09-10-the-joplin-plugin-recommend/">Joplin 插件使用推荐</a></li>
<li><a href="https://github.com/joplin/plugins/blob/master/README.md#plugins">官方插件下载地址</a></li>
</ul>
</blockquote>
<h3 id="中文界面"><a href="#中文界面" class="headerlink" title="中文界面"></a>中文界面</h3><p>工具–&gt;选项</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907180949.png" alt="image-20210907180947844"></p>
<p>点击下方图的按钮来触发Joplin设置的外部编辑器</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907181345.png" alt="image-20210907181343730"></p>
<h2 id="把-Joplin-用在日常工作中"><a href="#把-Joplin-用在日常工作中" class="headerlink" title="把 Joplin 用在日常工作中"></a>把 Joplin 用在日常工作中</h2><p>此处主要介绍 Joplin 在<strong>终端中的使用</strong>，主要参考了<a href="https://github.com/laurent22/joplin/blob/master/readme/terminal.md">官方文档</a>。</p>
<h3 id="和-Vim-协作编辑文档"><a href="#和-Vim-协作编辑文档" class="headerlink" title="和 Vim 协作编辑文档"></a>和 Vim 协作编辑文档</h3><p>我喜欢 Joplin 终端的设计，它很符合 tmux 和 Vim 的逻辑。</p>
<p>终端 Joplin 由三个横向的 Panel 组成，切换的时候用 <em>tab</em> 和 <em>Shift-Tab</em>。为了使得它更符合 Vim 的风格（Control + 方向键），可以在 <em>~/.config/joplin/keymap.json</em> 中加入以下的设置（完整版见此 gist <a href="https://link.zhihu.com/?target=https://gist.github.com/BaksiLi/3e64647ab590c9ca44d78af3021a4419">keymap.json</a> ）：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">...
        <span class="token punctuation">{</span> <span class="token property">"keys"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"TAB"</span><span class="token punctuation">,</span><span class="token string">"l"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"function"</span><span class="token punctuation">,</span> <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"focus_next"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token property">"keys"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"SHIFT_TAB"</span><span class="token punctuation">,</span><span class="token string">"h"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"function"</span><span class="token punctuation">,</span> <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"focus_previous"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token property">"keys"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"UP"</span><span class="token punctuation">,</span><span class="token string">"k"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"function"</span><span class="token punctuation">,</span> <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"move_up"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token property">"keys"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"DOWN"</span><span class="token punctuation">,</span><span class="token string">"j"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"function"</span><span class="token punctuation">,</span> <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"move_down"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token property">"keys"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"PAGE_UP"</span><span class="token punctuation">,</span><span class="token string">"K"</span><span class="token punctuation">,</span><span class="token string">"{"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"function"</span><span class="token punctuation">,</span> <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"page_up"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token property">"keys"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"PAGE_DOWN"</span><span class="token punctuation">,</span><span class="token string">"J"</span><span class="token punctuation">,</span><span class="token string">"}"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"function"</span><span class="token punctuation">,</span> <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"page_down"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样就变成了 HJKL 风格了。</p>
<p>选择好要编辑的笔记之后，回车就会用默认的终端编辑器打开了。对我来说，必然是 Vim。要注意的是编辑中的语法高亮需要加入 <a href="https://github.com/plasticboy/vim-markdown">vim-markdown.vim</a>，预览则要 <a href="https://github.com/iamcco/markdown-preview.nvim">markdown-preview.nvim</a>。</p>
<h3 id="利用-CLI-快速记录"><a href="#利用-CLI-快速记录" class="headerlink" title="利用 CLI 快速记录"></a>利用 CLI 快速记录</h3><p>假设你正在工作环境中（例如 Shell 下、tmux 下或着 Vim 下），不想离开终端，更不想离开现在的窗口，这种情况下 Joplin 的命令行介面就很有帮助了。你可以快速记录、查询一些笔记内容。</p>
<p>我在这里写了一些例子供你参考。</p>
<ul>
<li>创建一个笔记本 = 为项目建立日志存储：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ joplin mkbook <span class="token string">"My-Project"</span>
$ joplin use <span class="token string">"My-Project"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>创建新笔记并以当前时间命名 = 记录当前进度：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ joplin mknote <span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y/%m/%d<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>查看已有的笔记：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ joplin <span class="token function">ls</span> -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>完成当前进度：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ joplin todo toggle <span class="token string">"Feature1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>更多的命令行，你可以通过 <code>joplin help all</code> 查看。</p>
<h2 id="Joplin-插件以及Markdown语法"><a href="#Joplin-插件以及Markdown语法" class="headerlink" title="Joplin 插件以及Markdown语法"></a>Joplin 插件以及Markdown语法</h2><blockquote>
<p>教程： <a href="https://blog.17lai.fun/note/2021-09-09-the-joplin-plugin-and-its-markdown-syntax./">Joplin 插件以及其Markdown语法</a></p>
</blockquote>
<h2 id="Gitlab-docker"><a href="#Gitlab-docker" class="headerlink" title="Gitlab docker"></a>Gitlab docker</h2><p>和上面的wiznote docker基本一样的使用功能。</p>
<p>除了记录笔记，还可以保存自己的各种代码。</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/2720210727144447.png" alt="image-20210727144445938"></p>
<h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p><a href="https://www.typora.io/">Typora官方介绍及下载地址</a></p>
<p>编辑器演示</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/2520210725223243.png" alt="image-20210725223207235"></p>
<h3 id="上传图片图示"><a href="#上传图片图示" class="headerlink" title="上传图片图示"></a>上传图片图示</h3><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/2520210725223249.png" alt="image-20210725223238360"></p>
<h3 id="后端图像上传工具picgo"><a href="#后端图像上传工具picgo" class="headerlink" title="后端图像上传工具picgo"></a>后端图像上传工具picgo</h3><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/2520210725223403.png" alt="image-20210725223359066"></p>
<h3 id="一次性上传本MD文件中所有图片"><a href="#一次性上传本MD文件中所有图片" class="headerlink" title="一次性上传本MD文件中所有图片"></a>一次性上传本MD文件中所有图片</h3><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/2520210725224343.png" alt="image-20210725224338797"></p>
<h2 id="picgo"><a href="#picgo" class="headerlink" title="picgo"></a>picgo</h2><p><a href="https://github.com/Molunerfinn/PicGo/releases">Picgo官方下载地址</a></p>
<p><a href="https://github.com/PicGo/Awesome-PicGo">官方插件下载地址及其介绍</a></p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/2520210725223544.png" alt="image-20210725223542226"></p>
<h3 id="picgo插件配置"><a href="#picgo插件配置" class="headerlink" title="picgo插件配置"></a>picgo插件配置</h3><p>要想picgo用的过得去，一般来说需要插件</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/2520210725223646.png" alt="image-20210725223621145"></p>
<p>picgo使用github作为图床需要github配置，也可以使用sm.ms， gitee。选择github相对来说被随意关闭可能性更低。</p>
<h2 id="Snipaste截图工具"><a href="#Snipaste截图工具" class="headerlink" title="Snipaste截图工具"></a>Snipaste截图工具</h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/2520210725224605.png" alt="image-20210725224603196"></p>
<p><a href="https://www.snipaste.com/download.html">Snipaste官方下载地址</a></p>
]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>markdown</tag>
        <tag>picgo</tag>
        <tag>wiz</tag>
        <tag>Joplin</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>qnap硬盘移动位置</title>
    <url>/qnap/2021-07-25-qnap-move-hard-disk-position/</url>
    <content><![CDATA[<p>qnap硬盘移动位置，改变硬盘位</p>
<h2 id="需求：硬盘位4的硬盘移动到硬盘位3"><a href="#需求：硬盘位4的硬盘移动到硬盘位3" class="headerlink" title="需求：硬盘位4的硬盘移动到硬盘位3"></a>需求：硬盘位4的硬盘移动到硬盘位3</h2><h2 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h2><p>造作步骤： 存储和快照总管app-&gt;存储/快照-&gt;管理-&gt;操作-&gt;安全卸载磁盘区</p>
<p>如此，硬盘4卸载下来了，如下图</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/2520210725213003.png" alt="image-20210725213000780"></p>
<h2 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h2><p>再把硬盘4拔下来，插入硬盘位3。等待硬盘被识别到，一般1分钟之内。</p>
<h2 id="步骤3"><a href="#步骤3" class="headerlink" title="步骤3"></a>步骤3</h2><p>造作步骤： 存储和快照总管app-&gt;磁盘/VJBOD-&gt;点击磁盘3-&gt;还原-&gt;链接并回复存储池</p>
<p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/07/2520210725213820.png" alt="image-20210725213818567"></p>
]]></content>
      <categories>
        <category>qnap</category>
      </categories>
      <tags>
        <tag>QNAP</tag>
        <tag>硬盘</tag>
        <tag>nas</tag>
      </tags>
  </entry>
  <entry>
    <title>宝塔linux面板重启、重置等命令整合</title>
    <url>/vps/2021-07-31-how-to-use-baota-with-vps/</url>
    <content><![CDATA[<h2 id="宝塔linux面板重启、重置等命令整合"><a href="#宝塔linux面板重启、重置等命令整合" class="headerlink" title="宝塔linux面板重启、重置等命令整合"></a>宝塔linux面板重启、重置等命令整合</h2><p>宝塔对新手入门还是比较友好的，方便了入门小站搭建。入门可用，一些新东西也可以在里面看看。大型应用还是的自己搭建。</p>
<p>来源于网络，原作已经不可考据，整理更新到目前最新版。</p>
<p>现在有很多网友都在使用宝塔主机管理系统、对一些不懂linux操作的朋友来说，是一个很好的管理系统、<br>但是有些朋友重启服务器以后，有可能造成一些服务无法重启。今天我们搜集下关于宝塔面板的命令集锦</p>
<h2 id="Linux面板7-6-0安装命令："><a href="#Linux面板7-6-0安装命令：" class="headerlink" title="Linux面板7.6.0安装命令："></a><strong>Linux面板7.6.0安装命令：</strong></h2><h3 id="Centos安装命令："><a href="#Centos安装命令：" class="headerlink" title="Centos安装命令："></a><strong>Centos安装命令：</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y <span class="token function">wget</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> -O install.sh http://download.bt.cn/install/install_6.0.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sh</span> install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><em>复制代码</em></p>
<p><a href="https://www.bt.cn/offline">咨询离线安装版本</a></p>
<p><strong>试验性Centos/Ubuntu/Debian安装命令</strong> <strong>独立运行环境（py3.7） 可能存在少量兼容性问题 不断优化中</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -sSO http://download.bt.cn/install/install_panel.sh <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span> install_panel.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><em>复制代码</em></p>
<h3 id="Ubuntu-Deepin安装命令："><a href="#Ubuntu-Deepin安装命令：" class="headerlink" title="Ubuntu/Deepin安装命令："></a><strong>Ubuntu/Deepin安装命令：</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">bash</span> install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><em>复制代码</em></p>
<h3 id="Debian安装命令："><a href="#Debian安装命令：" class="headerlink" title="Debian安装命令："></a><strong>Debian安装命令：</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span> install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><em>复制代码</em></p>
<h3 id="Fedora安装命令"><a href="#Fedora安装命令" class="headerlink" title="Fedora安装命令:"></a><strong>Fedora安装命令:</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -O install.sh http://download.bt.cn/install/install_6.0.sh <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span> install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><em>复制代码</em></p>
<p>**<br><strong>Linux面板7.6.0升级命令：</strong>curl <a href="http://download.bt.cn/install/update6.sh|bash*%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81">http://download.bt.cn/install/update6.sh|bash*复制代码</a>*</p>
<p>以上节点无法使用的情况下，请使用下面的备用节点：<br>**</p>
<h3 id="备用节点【香港】："><a href="#备用节点【香港】：" class="headerlink" title="备用节点【香港】："></a><strong>备用节点【香港】：</strong></h3><p><strong>（宝塔推荐使用CN2 双程GIA高品质，免备案的</strong><a href="https://www.zun.com/server/buy.html?lineid=1671157323431053"><strong>尊云zun.com</strong></a><strong>香港云服务器安装）</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y <span class="token function">wget</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> -O install.sh http://103.224.251.67:5880/install/install_6.0.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sh</span> install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="管理宝塔"><a href="#管理宝塔" class="headerlink" title="管理宝塔"></a>管理宝塔</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#停止</span>
/etc/init.d/bt stop
<span class="token comment">#启动</span>
/etc/init.d/bt start
<span class="token comment">#重启</span>
/etc/init.d/bt restart
<span class="token comment">#卸载</span>
/etc/init.d/bt stop <span class="token operator">&amp;&amp;</span> <span class="token function">chkconfig</span> --del bt <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -f /etc/init.d/bt <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -rf /www/server/panel
<span class="token comment">#查看当前面板端口</span>
<span class="token function">cat</span> /www/server/panel/data/port.pl
<span class="token comment">#修改面板端口，如要改成8881（centos 6  系统）</span>
<span class="token builtin class-name">echo</span> <span class="token string">'8881'</span>  <span class="token operator">&gt;</span>  /www/server/panel/data/port.pl <span class="token operator">&amp;&amp;</span>  /etc/init.d/bt restart
iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport <span class="token number">8881</span>  -j ACCEPT
<span class="token function">service</span> iptables save
<span class="token function">service</span> iptables restart
<span class="token comment">#修改面板端口，如要改成8881（centos 7  系统）</span>
<span class="token builtin class-name">echo</span> <span class="token string">'8881'</span>  <span class="token operator">&gt;</span>  /www/server/panel/data/port.pl <span class="token operator">&amp;&amp;</span>  /etc/init.d/bt restart
firewall-cmd --permanent --zone<span class="token operator">=</span>public  --add-port<span class="token operator">=</span><span class="token number">8881</span>/tcp
firewall-cmd --reload
<span class="token comment">#强制修改MySQL管理(root)密码，如要改成123456</span>
<span class="token builtin class-name">cd</span> /www/server/panel <span class="token operator">&amp;&amp;</span> python tools.pyc root <span class="token number">123456</span>
<span class="token comment">#修改面板密码，如要改成123456</span>
<span class="token builtin class-name">cd</span> /www/server/panel <span class="token operator">&amp;&amp;</span> python tools.pyc panel <span class="token number">123456</span>
<span class="token comment">#查看宝塔日志</span>
<span class="token function">cat</span> /tmp/panelBoot.pl
<span class="token comment">#查看软件安装日志</span>
<span class="token function">cat</span> /tmp/panelExec.log
<span class="token comment">#站点配置文件位置</span>
/www/server/panel/vhost
<span class="token comment">#删除域名绑定面板</span>
<span class="token function">rm</span> -f /www/server/panel/data/domain.conf
<span class="token comment">#清理登陆限制</span>
<span class="token function">rm</span> -f /www/server/panel/data/*.login
<span class="token comment">#查看面板授权IP</span>
<span class="token function">cat</span> /www/server/panel/data/limitip.conf
<span class="token comment">#关闭访问限制</span>
<span class="token function">rm</span> -f /www/server/panel/data/limitip.conf
<span class="token comment">#查看许可域名</span>
<span class="token function">cat</span> /www/server/panel/data/domain.conf
<span class="token comment">#关闭面板SSL</span>
<span class="token function">rm</span> -f /www/server/panel/data/ssl.pl <span class="token operator">&amp;&amp;</span> /etc/init.d/bt restart
<span class="token comment">#查看面板错误日志</span>
<span class="token function">cat</span> /tmp/panelBoot
<span class="token comment">#查看数据库错误日志</span>
<span class="token function">cat</span> /www/server/data/*.err
<span class="token comment">#站点配置文件目录(nginx)</span>
/www/server/panel/vhost/nginx
<span class="token comment">#站点配置文件目录(apache)</span>
/www/server/panel/vhost/apache
<span class="token comment">#站点默认目录</span>
/www/wwwroot
<span class="token comment">#数据库备份目录</span>
/www/backup/database
<span class="token comment">#站点备份目录</span>
/www/backup/site
<span class="token comment">#站点日志</span>
/www/wwwlogs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Nginx服务管理"><a href="#Nginx服务管理" class="headerlink" title="Nginx服务管理"></a>Nginx服务管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#nginx安装目录</span>
/www/server/nginx
<span class="token comment">#启动</span>
/etc/init.d/nginx start
<span class="token comment">#停止</span>
/etc/init.d/nginx stop
<span class="token comment">#重启</span>
/etc/init.d/nginx restart
<span class="token comment">#启载</span>
/etc/init.d/nginx reload
<span class="token comment">#nginx配置文件</span>
/www/server/nginx/conf/nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Apache服务管理"><a href="#Apache服务管理" class="headerlink" title="Apache服务管理"></a>Apache服务管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#apache安装目录</span>
/www/server/httpd
<span class="token comment">#启动</span>
/etc/init.d/httpd start
<span class="token comment">#停止</span>
/etc/init.d/httpd stop
<span class="token comment">#重启</span>
/etc/init.d/httpd restart
<span class="token comment">#启载</span>
/etc/init.d/httpd reload
<span class="token comment">#apache配置文件</span>
/www/server/apache/conf/httpd.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="MySQL服务管理"><a href="#MySQL服务管理" class="headerlink" title="MySQL服务管理"></a>MySQL服务管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#mysql安装目录</span>
/www/server/mysql
<span class="token comment">#phpmyadmin安装目录</span>
/www/server/phpmyadmin
<span class="token comment">#数据存储目录</span>
/www/server/data
<span class="token comment">#启动</span>
/etc/init.d/mysqld start
<span class="token comment">#停止</span>
/etc/init.d/mysqld stop
<span class="token comment">#重启</span>
/etc/init.d/mysqld restart
<span class="token comment">#启载</span>
/etc/init.d/mysqld reload
<span class="token comment">#mysql配置文件</span>
/etc/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="FTP服务管理"><a href="#FTP服务管理" class="headerlink" title="FTP服务管理"></a>FTP服务管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#ftp安装目录</span>
/www/server/pure-ftpd
<span class="token comment">#启动</span>
/etc/init.d/pure-ftpd start
<span class="token comment">#停止</span>
/etc/init.d/pure-ftpd stop
<span class="token comment">#重启</span>
/etc/init.d/pure-ftpd restart
<span class="token comment">#ftp配置文件</span>
/www/server/pure-ftpd/etc/pure-ftpd.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="PHP服务管理"><a href="#PHP服务管理" class="headerlink" title="PHP服务管理"></a>PHP服务管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#php安装目录</span>
/www/server/php
<span class="token comment">#启动(请根据安装PHP版本号做更改，例如：/etc/init.d/php-fpm-54 start)</span>
/etc/init.d/php-fpm-<span class="token punctuation">{</span><span class="token number">52</span><span class="token operator">|</span><span class="token number">53</span><span class="token operator">|</span><span class="token number">54</span><span class="token operator">|</span><span class="token number">55</span><span class="token operator">|</span><span class="token number">56</span><span class="token operator">|</span><span class="token number">70</span><span class="token operator">|</span><span class="token number">71</span><span class="token punctuation">}</span> start
<span class="token comment">#停止(请根据安装PHP版本号做更改，例如：/etc/init.d/php-fpm-54 stop)</span>
/etc/init.d/php-fpm-<span class="token punctuation">{</span><span class="token number">52</span><span class="token operator">|</span><span class="token number">53</span><span class="token operator">|</span><span class="token number">54</span><span class="token operator">|</span><span class="token number">55</span><span class="token operator">|</span><span class="token number">56</span><span class="token operator">|</span><span class="token number">70</span><span class="token operator">|</span><span class="token number">71</span><span class="token punctuation">}</span> stop
<span class="token comment">#重启(请根据安装PHP版本号做更改，例如：/etc/init.d/php-fpm-54 restart)</span>
/etc/init.d/php-fpm-<span class="token punctuation">{</span><span class="token number">52</span><span class="token operator">|</span><span class="token number">53</span><span class="token operator">|</span><span class="token number">54</span><span class="token operator">|</span><span class="token number">55</span><span class="token operator">|</span><span class="token number">56</span><span class="token operator">|</span><span class="token number">70</span><span class="token operator">|</span><span class="token number">71</span><span class="token punctuation">}</span> restart
<span class="token comment">#启载(请根据安装PHP版本号做更改，例如：/etc/init.d/php-fpm-54 reload)</span>
/etc/init.d/php-fpm-<span class="token punctuation">{</span><span class="token number">52</span><span class="token operator">|</span><span class="token number">53</span><span class="token operator">|</span><span class="token number">54</span><span class="token operator">|</span><span class="token number">55</span><span class="token operator">|</span><span class="token number">56</span><span class="token operator">|</span><span class="token number">70</span><span class="token operator">|</span><span class="token number">71</span><span class="token punctuation">}</span> reload
<span class="token comment">#配置文件(请根据安装PHP版本号做更改，例如：/www/server/php/52/etc/php.ini)</span>
/www/server/php/<span class="token punctuation">{</span><span class="token number">52</span><span class="token operator">|</span><span class="token number">53</span><span class="token operator">|</span><span class="token number">54</span><span class="token operator">|</span><span class="token number">55</span><span class="token operator">|</span><span class="token number">56</span><span class="token operator">|</span><span class="token number">70</span><span class="token operator">|</span><span class="token number">71</span><span class="token punctuation">}</span>/etc/php.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Redis服务管理"><a href="#Redis服务管理" class="headerlink" title="Redis服务管理"></a>Redis服务管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#redis安装目录</span>
/www/server/redis
<span class="token comment">#启动</span>
/etc/init.d/redis start
<span class="token comment">#停止</span>
/etc/init.d/redis stop
<span class="token comment">#redis配置文件</span>
/www/server/redis/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Memcached服务管理"><a href="#Memcached服务管理" class="headerlink" title="Memcached服务管理"></a>Memcached服务管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#memcached安装目录</span>
/usr/local/memcached
<span class="token comment">#启动</span>
/etc/init.d/memcached start
<span class="token comment">#停止</span>
/etc/init.d/memcached stop
<span class="token comment">#重启</span>
/etc/init.d/memcached restart
<span class="token comment">#启载</span>
/etc/init.d/memcached r