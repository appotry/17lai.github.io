{
    "version": "https://jsonfeed.org/version/1",
    "title": "夜法之书 • All posts by \"devops\" category",
    "description": "~软件驱动世界~",
    "home_page_url": "https://blog.17lai.site",
    "items": [
        {
            "id": "https://blog.17lai.site/posts/ab63eb8f/",
            "url": "https://blog.17lai.site/posts/ab63eb8f/",
            "title": "自建全套开源Devops开发系统",
            "date_published": "2022-05-09T05:00:25.000Z",
            "content_html": "<blockquote>\n<p>国内的Devops云平台动辄封号，删库，屏蔽，还多次发生数据泄密，项目被云平台克隆事件，国内云平台devops已死！数据安全没法保证，自建私有Devops平台才靠谱。这里采用开源项目建立一个完善的低成本Devops系统，基本运行良好！</p>\n</blockquote>\n<blockquote>\n<p>目标：单节点，以最低成本，最低消耗，使用开源软件实现一个可用的DevOps！满足中小企业的研发、测试、运维需求。并对后续如何扩展本套DevOps系统做了项目，成本，路线升级规划，可以一直扩展到业界最前沿最大系统。</p>\n<p>整套系统已经跑起来很长时间了！单节点Nas服务器，32G内存，共运行了约80个Docker，优化到平均负载10以下。</p>\n</blockquote>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/14/20220514113906.webp\" alt=\"devops\"></p>\n<span id=\"more\"></span>\n<h2 id=\"Devops框架图解\">Devops框架图解</h2>\n<blockquote>\n<p>下面系统大多可以做负载平衡，多节点备份，可以扩展为一个高可用，大中央平台。</p>\n<p>珍爱生命，使用<code>Docker</code>！</p>\n</blockquote>\n<p><img src=\"https://cimg1.17lai.site/data/2022/05/09/20220509132230.webp\" alt=\"自建Devops.drawio\"></p>\n<h2 id=\"开源云平台生死连问\">开源云平台生死连问</h2>\n<blockquote>\n<p>珍爱生命，不建议使用国内云平台。</p>\n</blockquote>\n<p>什么是大教堂？</p>\n<p>什么是集市？</p>\n<p>什么是信任链？</p>\n<p>什么是开源生态？</p>\n<p>为什么要做开源生态？</p>\n<p>怎么做开源生态？</p>\n<p>开源生态的土壤肥力维护如何做？</p>\n<p>这些问题没想明白，没想到如何做的是没法做开源的。</p>\n<p>国内平台连种子嫩芽都要收割，到处收费，动辄删库，屏蔽，封号，注定做不了开源生态。</p>\n<h2 id=\"Consul自动负载均衡\"><code>Consul</code>自动负载均衡</h2>\n<blockquote>\n<p>基于服务自动发现和注册的负载均衡，负载均衡的方式没有变，只是多了一些<strong>外围组件</strong>，当然这些组件对 <code>Client</code> 是不可见的，<code>client</code> 依然只能看到 <code>Nginx</code> 入口，访问方式也没变化。</p>\n</blockquote>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/29/20220429190914-1.webp\" alt=\"Consul\"></p>\n<h2 id=\"Github仓库备份\"><code>Github</code>仓库备份</h2>\n<blockquote>\n<p>最优秀的资源，大多只在短时间内出现！</p>\n<p>平时多备份你重要的仓库，以及你使用的仓库的重要上下游仓库！</p>\n</blockquote>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/appotry/docker-github-backup\">github-backup Githb</a></li>\n<li><a href=\"https://hub.docker.com/r/lnxd/github-backup\">github-backup Dockerhub</a></li>\n</ul>\n</blockquote>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">githubback</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> lnxd/github<span class=\"token punctuation\">-</span>backup\n  <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"githubback\"</span>\n  <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> githubback\n  <span class=\"token comment\"># ports:</span>\n    <span class=\"token comment\"># - \"80:80\"</span>\n  <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token string\">\"${USERDIR}/githubback/data:/home/docker/backups:rw\"</span>\n  <span class=\"token key atrule\">env_file</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> .env\n  <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> HTTP_PROXY=http<span class=\"token punctuation\">:</span>//<span class=\"token punctuation\">[</span>ip<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>port<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">-</span> HTTPS_PROXY=http<span class=\"token punctuation\">:</span>//<span class=\"token punctuation\">[</span>ip<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>port<span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"配置要求\">配置要求</h2>\n<p>个人Nas配置</p>\n<blockquote>\n<ul>\n<li>cpu j4125 4 核 14nm 2.00 GHz ~2.70 GHz</li>\n<li>SSD sata 接口的 读写 500MB/S</li>\n<li>32G DDR4. 2x16G 双通道</li>\n</ul>\n</blockquote>\n<p>上图中介绍的系统都是上面配置的单服务器中可以运行的。</p>\n<p>如何以最低的配置，最少的内存运行起来最多的功能才是本文的追求，花费更多金钱去满足极少数情况的高压力是钱多的没处花。</p>\n<ul>\n<li><code>8G</code>内存的nas 就可以运行 <code>gitea + drone</code> ，<code>zentao</code> 想用就用</li>\n<li><code>gitlab</code> 要跑起来至少要2核 <code>8G</code> 内存，<code>jenkins</code> 也是内存 <code>cpu</code> 占用大户。大于 <code>16G</code> 内存时考虑上这个</li>\n<li>4核 <code>32G</code> 内存的nas，图片中介绍的可以全都跑起来！</li>\n</ul>\n<h2 id=\"可靠性\">可靠性</h2>\n<p><code>ELK</code>集群监控对于单服务器来说完全多余，<code>netdata</code>监控也不错，<code>portainer</code>就够用了，以后为了节约资源，<code>portainer</code>说不定也会被干掉，大多数时候命令行监控就够了。少于200节点<code>K8S</code>就是多余的。</p>\n<h3 id=\"数据安全\">数据安全</h3>\n<blockquote>\n<p>云平台把数据交给别人，赌别人的道德不会私自偷拿你的数据？真是想多了。</p>\n<p>某垄断社交平台内部有专门的团队分析客户的数据，看有什么有价值的没有，是很多年前就爆出来的消息。</p>\n<p>自建<code>DevOps</code>成本其实相当的低！</p>\n</blockquote>\n<p>整套系统可以从少到多，从小到大，慢慢优化，扩展的。硬件成本也是随着需求变化而变化的，随着业务扩展而增加成本，一开始单节点单服务器就可以满足要求了，后面业务增加慢慢扩展为集群，k8s 等。</p>\n<p>数据，代码是公司核心资产与竞争力的公司，上云赌别人的人品就是找死。你注册账户的时候，就同意了，无论别人随意删除你的数据，或者窃取你的数据都是不用付任何责任的，再说，整个系统数据都在别人手上，你要维权也没有证据。</p>\n<h3 id=\"备份\">备份</h3>\n<ul>\n<li><code>UPS</code>电源，防止意外断电</li>\n<li><code>rsync</code> 备份，对于大多数人，已经够用了</li>\n<li>文件系统快照</li>\n<li>离线每日，或者每周冷备份</li>\n<li>大系统，多台服务器的时候可以用多节点集群备灾。<code>nginx</code>,<code>harbor</code>，<code>gitlab</code>，<code>elasticsearch</code>等都可以使用集群</li>\n</ul>\n<h2 id=\"扩展性\">扩展性</h2>\n<blockquote>\n<p>上面说的都可以单服务器搞定。多台服务器的时候可以用多节点集群备灾。<code>nginx</code>,<code>harbor</code>，<code>gitlab</code>，<code>elasticsearch</code>等都可以使用集群。</p>\n<p>多于200节点，大于3台服务器以后考虑上<code>K8S</code>。ELK监控之类的这时候可以上了。<a href=\"https://github.com/Tencent/bk-sops\">蓝鲸智云标准运维</a>这时候也可以考虑了。</p>\n<p>再次扩大的时候可以考虑<code>Proxmox VE（PVE）</code> + <code>ceph</code></p>\n<p>更大的系统，或者对外提供云平台服务的时候可以考虑上<code>OpenStack</code></p>\n</blockquote>\n<h2 id=\"项目介绍\">项目介绍</h2>\n<h3 id=\"ELK\">ELK</h3>\n<blockquote>\n<p>消耗资源很多，至少上百节点以上再考虑上这个</p>\n<p><code>portainer</code> -&gt; <code>netdata </code>-&gt; <code>ELK</code>，<code>zabbix </code></p>\n</blockquote>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0520210805165405.png\" alt=\"\"></p>\n<h3 id=\"cacti\"><a href=\"https://www.cacti.net/\">cacti</a></h3>\n<div style=\"text-align: center\">\n  <div class=\"github-card\" data-user=\"Cacti\" data-repo=\"\" data-height=\"200\" data-width=\"400\" data-theme=\"default\" data-target=\"\" data-client-id=\"\" data-client-secret=\"\"></div>\n</div>\n<script src=\"/github-card-lib/githubcard.js\"></script>\n\n<div style=\"text-align: center\">\n  <div class=\"github-card\" data-user=\"Cacti\" data-repo=\"cacti\" data-height=\"200\" data-width=\"400\" data-theme=\"default\" data-target=\"\" data-client-id=\"\" data-client-secret=\"\"></div>\n</div>\n<script src=\"/github-card-lib/githubcard.js\"></script>\n\n<h3 id=\"zabbix\">zabbix</h3>\n<div style=\"text-align: center\">\n  <div class=\"github-card\" data-user=\"zabbix\" data-repo=\"\" data-height=\"200\" data-width=\"400\" data-theme=\"default\" data-target=\"\" data-client-id=\"\" data-client-secret=\"\"></div>\n</div>\n<script src=\"/github-card-lib/githubcard.js\"></script>\n\n<div style=\"text-align: center\">\n  <div class=\"github-card\" data-user=\"zabbix\" data-repo=\"zabbix\" data-height=\"200\" data-width=\"400\" data-theme=\"default\" data-target=\"\" data-client-id=\"\" data-client-secret=\"\"></div>\n</div>\n<script src=\"/github-card-lib/githubcard.js\"></script>\n\n<h3 id=\"ansible\">ansible</h3>\n<div style=\"text-align: center\">\n  <div class=\"github-card\" data-user=\"ansible\" data-repo=\"\" data-height=\"200\" data-width=\"400\" data-theme=\"default\" data-target=\"\" data-client-id=\"\" data-client-secret=\"\"></div>\n</div>\n<script src=\"/github-card-lib/githubcard.js\"></script>\n\n<div style=\"text-align: center\">\n  <div class=\"github-card\" data-user=\"ansible\" data-repo=\"ansible\" data-height=\"200\" data-width=\"400\" data-theme=\"default\" data-target=\"\" data-client-id=\"\" data-client-secret=\"\"></div>\n</div>\n<script src=\"/github-card-lib/githubcard.js\"></script>\n\n<h3 id=\"CMDB\">CMDB</h3>\n<div style=\"text-align: center\">\n  <div class=\"github-card\" data-user=\"netbox-community\" data-repo=\"netbox\" data-height=\"200\" data-width=\"400\" data-theme=\"default\" data-target=\"\" data-client-id=\"\" data-client-secret=\"\"></div>\n</div>\n<script src=\"/github-card-lib/githubcard.js\"></script>\n\n<div style=\"text-align: center\">\n  <div class=\"github-card\" data-user=\"open-cmdb\" data-repo=\"cmdb\" data-height=\"200\" data-width=\"400\" data-theme=\"default\" data-target=\"\" data-client-id=\"\" data-client-secret=\"\"></div>\n</div>\n<script src=\"/github-card-lib/githubcard.js\"></script>\n\n<h3 id=\"PVE\">PVE</h3>\n<blockquote>\n<p>Proxmox VE（PVE）</p>\n</blockquote>\n<div style=\"text-align: center\">\n  <div class=\"github-card\" data-user=\"proxmox\" data-repo=\"\" data-height=\"200\" data-width=\"400\" data-theme=\"default\" data-target=\"\" data-client-id=\"\" data-client-secret=\"\"></div>\n</div>\n<script src=\"/github-card-lib/githubcard.js\"></script>\n\n<h3 id=\"CEPH\"><a href=\"https://ceph.io/\">CEPH</a></h3>\n<div style=\"text-align: center\">\n  <div class=\"github-card\" data-user=\"ceph\" data-repo=\"\" data-height=\"200\" data-width=\"400\" data-theme=\"default\" data-target=\"\" data-client-id=\"\" data-client-secret=\"\"></div>\n</div>\n<script src=\"/github-card-lib/githubcard.js\"></script>\n\n<div style=\"text-align: center\">\n  <div class=\"github-card\" data-user=\"ceph\" data-repo=\"ceph\" data-height=\"200\" data-width=\"400\" data-theme=\"default\" data-target=\"\" data-client-id=\"\" data-client-secret=\"\"></div>\n</div>\n<script src=\"/github-card-lib/githubcard.js\"></script>\n\n<h3 id=\"OpenStack\">OpenStack</h3>\n<div style=\"text-align: center\">\n  <div class=\"github-card\" data-user=\"openstack\" data-repo=\"\" data-height=\"200\" data-width=\"400\" data-theme=\"default\" data-target=\"\" data-client-id=\"\" data-client-secret=\"\"></div>\n</div>\n<script src=\"/github-card-lib/githubcard.js\"></script>\n\n<div style=\"text-align: center\">\n  <div class=\"github-card\" data-user=\"openstack\" data-repo=\"openstack\" data-height=\"200\" data-width=\"400\" data-theme=\"default\" data-target=\"\" data-client-id=\"\" data-client-secret=\"\"></div>\n</div>\n<script src=\"/github-card-lib/githubcard.js\"></script>\n\n<h2 id=\"其它项目\">其它项目</h2>\n<blockquote>\n<p>大家还有啥好项目建议？</p>\n</blockquote>\n<h3 id=\"onedev\">onedev</h3>\n<p><a href=\"https://github.com/theonedev/onedev\">onedev</a> 是替代<code>Gitlab</code>的极佳候补，看文档介绍，潜力无限！</p>\n<div style=\"text-align: center\">\n  <div class=\"github-card\" data-user=\"theonedev\" data-repo=\"onedev\" data-height=\"200\" data-width=\"400\" data-theme=\"default\" data-target=\"\" data-client-id=\"\" data-client-secret=\"\"></div>\n</div>\n<script src=\"/github-card-lib/githubcard.js\"></script>\n\n<h3 id=\"smartdns\">smartdns</h3>\n<blockquote>\n<p>一个本地DNS服务器，获取最快的网站IP，获得最佳上网体验。</p>\n</blockquote>\n<div style=\"text-align: center\">\n  <div class=\"github-card\" data-user=\"pymumu\" data-repo=\"smartdns\" data-height=\"200\" data-width=\"400\" data-theme=\"default\" data-target=\"\" data-client-id=\"\" data-client-secret=\"\"></div>\n</div>\n<script src=\"/github-card-lib/githubcard.js\"></script>\n\n<h3 id=\"awesome-selfhosted\"><a href=\"https://github.com/awesome-selfhosted/awesome-selfhosted\">awesome-selfhosted</a></h3>\n<blockquote>\n<p>这里你能找到各种各样的自建 Docker 服务</p>\n</blockquote>\n<div style=\"text-align: center\">\n  <div class=\"github-card\" data-user=\"awesome-selfhosted\" data-repo=\"awesome-selfhosted\" data-height=\"200\" data-width=\"400\" data-theme=\"default\" data-target=\"\" data-client-id=\"\" data-client-secret=\"\"></div>\n</div>\n<script src=\"/github-card-lib/githubcard.js\"></script>\n\n<h2 id=\"i-class-fa-solid-fa-school-i-系列教程-15\"><i class=\"fa-solid fa-school\"></i><strong>系列教程</strong></h2>\n<p><a href=\"/atom.xml\"><i class=\"fa-solid fa-square-rss\"></i>全部文章RSS订阅</a></p>\n<h3 id=\"i-class-fa-brands-fa-dev-i-Devops系列-5\"><i class=\"fa-brands fa-dev\"></i><strong>Devops系列</strong></h3>\n<p><a href=\"/categories/devops/atom.xml\"><i class=\"fa-solid fa-square-rss\"></i><strong>Devops 分类 RSS 订阅</strong></a></p>\n<ul>\n<li><a href=\"/posts/ab63eb8f/\">自建全套开源Devops开发系统</a></li>\n<li><a href=\"/posts/d32a07a7/\">Git介绍以及分支模型图解</a></li>\n<li><a href=\"/posts/39563241/\">三万字无坑搭建基于Docker+K8S+GitLab/SVN+Jenkins+Harbor持续集成交付环境</a></li>\n<li><a href=\"/posts/3437994a/\">DevOps系列---【Jenkinsfile+Dockerfile+nginx+vue】</a></li>\n<li><a href=\"/posts/f4c3ad41/\">项目开发管理工具推荐</a></li>\n<li><a href=\"/posts/acc13b70/\">Gitlab的安装及使用教程完全版</a></li>\n<li><a href=\"/posts/d08eb7b/\">Gitlab的安装及使用</a></li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/bilicard.css\" type=\"text/css\">",
            "tags": [
                "docker",
                "devops",
                "框架",
                "图解"
            ]
        },
        {
            "id": "https://blog.17lai.site/posts/d32a07a7/",
            "url": "https://blog.17lai.site/posts/d32a07a7/",
            "title": "Git介绍以及分支模型图解",
            "date_published": "2022-04-19T12:07:16.000Z",
            "content_html": "<blockquote>\n<p>不废话，直接上图。</p>\n<p>由 Drawio 绘制</p>\n</blockquote>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1920220419221343.svg\" alt=\"git使用\"></p>\n<h2 id=\"GIT架构\"><strong>GIT架构</strong></h2>\n<p>GIT的架构，可以分为几个部分：</p>\n<ul>\n<li>本地工作区(working directory)</li>\n<li>暂存区(stage area, 又称为索引区, index)、</li>\n<li>本地仓库(local repository)、</li>\n<li>远程仓库副本</li>\n<li>远程仓库(remote repository)。</li>\n</ul>\n<p><strong>工作区(working directory)</strong> 简言之就是你工作的区域。对于git而言，就是的本地工作目录。工作区的内容会包含提交到暂存区和版本库(当前提交点)的内容，同时也包含自己的修改内容。</p>\n<p><strong>暂存区(stage area, 又称为索引区index)</strong> 是git中一个非常重要的概念。是我们把修改提交版本库前的一个过渡阶段。查看GIT自带帮助手册的时候，通常以index来表示暂存区。在工作目录下有一个.git的目录，里面有个index文件，存储着关于暂存区的内容。git add命令将工作区内容添加到暂存区。</p>\n<p><strong>本地仓库(local repository)</strong> 版本控制系统的仓库，存在于本地。当执行git commit命令后，会将暂存区内容提交到仓库之中。在工作区下面有.git的目录，这个目录下的内容不属于工作区，里面便是仓库的数据信息，暂存区相关内容也在其中。</p>\n<p><strong>远程版本库(remote repository)</strong> 与本地仓库概念基本一致，不同之处在于一个存在远程，可用于远程协作，一个却是存在于本地。通过push/pull可实现本地与远程的交互；</p>\n<p><strong>远程仓库副本</strong> 可以理解为存在于本地的远程仓库缓存。如需更新，可通过git fetch/pull命令获取远程仓库内容。使用fech获取时，并未合并到本地仓库，此时可使用git merge实现远程仓库副本与本地仓库的合并。</p>\n<h2 id=\"git介绍\"><code>.git</code>介绍</h2>\n<p><code>.git</code>目录下各个文件中所存放的内容信息：</p>\n<ul>\n<li>\n<p><strong>HEAD</strong> 当前所在位置，其实就是工作区的在版本库中的那个提交点，最终会指向一个40位的HASH值；</p>\n</li>\n<li>\n<p><strong>config</strong> 当前版本库的专有配置文件，如使用命令git config <a href=\"http://user.name\">user.name</a> poloxue便会记录在此文件；</p>\n</li>\n<li>\n<p><strong>description</strong> 被gitweb (Github的原型)用来显示对repo的描述。</p>\n</li>\n<li>\n<p><strong>hooks</strong> git有可自动运行在 git 任有意义阶段的脚本hooks, 如commit/release/pull/push等状态之前或者之后。个人思考的一个用处，如pre-push可以用来强制进行代码检查。</p>\n</li>\n<li>\n<p><strong>index</strong> 存放暂存区(stage area)的相关信息；</p>\n</li>\n<li>\n<p><strong>info/exclue</strong> 可以做到和.gitignore相同的事情，用于排除不要包含进版本库的文件。区别就是，此文件不会被共享。</p>\n</li>\n<li>\n<p><strong>refs/heads</strong> 目录下有关于本地仓库的所有分支；</p>\n</li>\n<li>\n<p><strong>refs/remote</strong> 目录下有关于远程仓库的所有分支；</p>\n</li>\n<li>\n<p><strong>object</strong> 目录下存放的就是实际的数据文件</p>\n</li>\n</ul>\n<h2 id=\"参考-8\"><strong>参考</strong></h2>\n<p><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">Git 教程</a></p>\n<p><a href=\"https://git-scm.com/book/zh/v2\">Git book</a></p>\n<h2 id=\"i-class-fa-solid-fa-school-i-系列教程-14\"><i class=\"fa-solid fa-school\"></i><strong>系列教程</strong></h2>\n<p><a href=\"/atom.xml\"><i class=\"fa-solid fa-square-rss\"></i>全部文章RSS订阅</a></p>\n<h3 id=\"i-class-fa-brands-fa-dev-i-Devops系列-4\"><i class=\"fa-brands fa-dev\"></i><strong>Devops系列</strong></h3>\n<p><a href=\"/categories/devops/atom.xml\"><i class=\"fa-solid fa-square-rss\"></i><strong>Devops 分类 RSS 订阅</strong></a></p>\n<ul>\n<li><a href=\"/posts/ab63eb8f/\">自建全套开源Devops开发系统</a></li>\n<li><a href=\"/posts/d32a07a7/\">Git介绍以及分支模型图解</a></li>\n<li><a href=\"/posts/39563241/\">三万字无坑搭建基于Docker+K8S+GitLab/SVN+Jenkins+Harbor持续集成交付环境</a></li>\n<li><a href=\"/posts/3437994a/\">DevOps系列---【Jenkinsfile+Dockerfile+nginx+vue】</a></li>\n<li><a href=\"/posts/f4c3ad41/\">项目开发管理工具推荐</a></li>\n<li><a href=\"/posts/acc13b70/\">Gitlab的安装及使用教程完全版</a></li>\n<li><a href=\"/posts/d08eb7b/\">Gitlab的安装及使用</a></li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/bilicard.css\" type=\"text/css\">",
            "tags": [
                "git",
                "devops",
                "drowio"
            ]
        },
        {
            "id": "https://blog.17lai.site/posts/39563241/",
            "url": "https://blog.17lai.site/posts/39563241/",
            "title": "三万字无坑搭建基于Docker+K8S+GitLab/SVN+Jenkins+Harbor持续集成交付环境",
            "date_published": "2022-04-16T10:49:57.000Z",
            "content_html": "<blockquote>\n<p>最近在 K8S 1.18.2 版本的集群上搭建DevOps环境，期间遇到了各种坑。目前，搭建环境的过程中出现的各种坑均已被填平，特此记录，并分享给大家！</p>\n<p>文章和搭建环境所需要的yml文件已收录到：<a href=\"https://github.com/sunshinelyz/technology-binghe\">https://github.com/sunshinelyz/technology-binghe</a> 和 <a href=\"https://gitee.com/binghe001/technology-binghe\">https://gitee.com/binghe001/technology-binghe</a> 。如果文件对你有点帮助，别忘记给个Star哦！</p>\n</blockquote>\n<h2 id=\"服务器规划\">服务器规划</h2>\n<table>\n<thead>\n<tr>\n<th>IP</th>\n<th>主机名</th>\n<th>节点</th>\n<th>操作系统</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>192.168.175.101</td>\n<td>binghe101</td>\n<td>K8S Master</td>\n<td>CentOS 8.0.1905</td>\n</tr>\n<tr>\n<td>192.168.175.102</td>\n<td>binghe102</td>\n<td>K8S Worker</td>\n<td>CentOS 8.0.1905</td>\n</tr>\n<tr>\n<td>192.168.175.103</td>\n<td>binghe103</td>\n<td>K8S Worker</td>\n<td>CentOS 8.0.1905</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"安装环境版本\">安装环境版本</h2>\n<table>\n<thead>\n<tr>\n<th>软件名称</th>\n<th>软件版本</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Docker</td>\n<td>19.03.8</td>\n<td>提供容器环境</td>\n</tr>\n<tr>\n<td>docker-compose</td>\n<td>1.25.5</td>\n<td>定义和运行由多个容器组成的应用</td>\n</tr>\n<tr>\n<td>K8S</td>\n<td>1.8.12</td>\n<td>是一个开源的，用于管理云平台中多个主机上的容器化的应用，Kubernetes的目标是让部署容器化的应用简单并且高效（powerful）,Kubernetes提供了应用部署，规划，更新，维护的一种机制。</td>\n</tr>\n<tr>\n<td>GitLab</td>\n<td>12.1.6</td>\n<td>代码仓库（与SVN安装一个即可）</td>\n</tr>\n<tr>\n<td>Harbor</td>\n<td>1.10.2</td>\n<td>私有镜像仓库</td>\n</tr>\n<tr>\n<td>Jenkins</td>\n<td>2.89.3</td>\n<td>持续集成交付</td>\n</tr>\n<tr>\n<td>SVN</td>\n<td>1.10.2</td>\n<td>代码仓库（与GitLab安装一个即可）</td>\n</tr>\n<tr>\n<td>JDK</td>\n<td>1.8.0_202</td>\n<td>Java运行基础环境</td>\n</tr>\n<tr>\n<td>maven</td>\n<td>3.6.3</td>\n<td>构建项目的基础插件</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"服务器免密码登录\">服务器免密码登录</h2>\n<p>在各服务器执行如下命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh-keygen -t rsa\n<span class=\"token function\">cat</span> ~/.ssh/id_rsa.pub <span class=\"token operator\">&gt;&gt;</span> ~/.ssh/authorized_keys \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>将binghe102和binghe103服务器上的id_rsa.pub文件复制到binghe101服务器。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@binghe102 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp .ssh/id_rsa.pub binghe101:/root/.ssh/102</span>\n<span class=\"token punctuation\">[</span>root@binghe103 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp .ssh/id_rsa.pub binghe101:/root/.ssh/103</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>在binghe101服务器上执行如下命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> ~/.ssh/102 <span class=\"token operator\">&gt;&gt;</span> ~/.ssh/authorized_keys\n<span class=\"token function\">cat</span> ~/.ssh/103 <span class=\"token operator\">&gt;&gt;</span> ~/.ssh/authorized_keys\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>然后将authorized_keys文件分别复制到binghe102、binghe103服务器。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@binghe101 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp .ssh/authorized_keys binghe102:/root/.ssh/authorized_keys</span>\n<span class=\"token punctuation\">[</span>root@binghe101 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp .ssh/authorized_keys binghe103:/root/.ssh/authorized_keys</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>删除binghe101节点上~/.ssh下的102和103文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> ~/.ssh/102\n<span class=\"token function\">rm</span> ~/.ssh/103\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"安装JDK\">安装JDK</h2>\n<p>需要在每台服务器上安装JDK环境。到Oracle官方下载JDK，我这里下的JDK版本为1.8.0_202，下载后解压并配置系统环境变量。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> -zxvf jdk1.8.0_212.tar.gz\n<span class=\"token function\">mv</span> jdk1.8.0_212 /usr/local\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>接下来，配置系统环境变量。</p>\n<p>配置项内容如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">JAVA_HOME</span><span class=\"token operator\">=</span>/usr/local/jdk1.8.0_212\n<span class=\"token assign-left variable\">CLASS_PATH</span><span class=\"token operator\">=</span>.:<span class=\"token variable\">$JAVA_HOME</span>/lib\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token variable\">$JAVA_HOME</span>/bin:<span class=\"token environment constant\">$PATH</span>\n<span class=\"token builtin class-name\">export</span> JAVA_HOME CLASS_PATH <span class=\"token environment constant\">PATH</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接下来执行如下命令使系统环境变量生效。</p>\n<h2 id=\"安装Maven\">安装Maven</h2>\n<p>到Apache官方下载Maven，我这里下载的Maven版本为3.6.3。下载后直接解压并配置系统环境变量。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> -zxvf apache-maven-3.6.3-bin.tar.gz\n<span class=\"token function\">mv</span> apache-maven-3.6.3-bin /usr/local\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>接下来，就是配置系统环境变量。</p>\n<p>配置项内容如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">JAVA_HOME</span><span class=\"token operator\">=</span>/usr/local/jdk1.8.0_212\n<span class=\"token assign-left variable\">MAVEN_HOME</span><span class=\"token operator\">=</span>/usr/local/apache-maven-3.6.3-bin\n<span class=\"token assign-left variable\">CLASS_PATH</span><span class=\"token operator\">=</span>.:<span class=\"token variable\">$JAVA_HOME</span>/lib\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token variable\">$MAVEN_HOME</span>/bin:<span class=\"token variable\">$JAVA_HOME</span>/bin:<span class=\"token environment constant\">$PATH</span>\n<span class=\"token builtin class-name\">export</span> JAVA_HOME CLASS_PATH MAVEN_HOME <span class=\"token environment constant\">PATH</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接下来执行如下命令使系统环境变量生效。</p>\n<p>接下来，修改Maven的配置文件，如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>localRepository<span class=\"token operator\">&gt;</span>/home/repository<span class=\"token operator\">&lt;</span>/localRepository<span class=\"token operator\">&gt;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>将Maven下载的Jar包存储到/home/repository目录下。</p>\n<h2 id=\"安装Docker环境\">安装Docker环境</h2>\n<p><strong>本文档基于Docker 19.03.8 版本搭建Docker环境。</strong></p>\n<p>在所有服务器上创建install_docker.sh脚本，脚本内容如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">REGISTRY_MIRROR</span><span class=\"token operator\">=</span>https://registry.cn-hangzhou.aliyuncs.com\ndnf <span class=\"token function\">install</span> yum*\nyum <span class=\"token function\">install</span> -y yum-utils device-mapper-persistent-data lvm2\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\ndnf <span class=\"token function\">install</span> https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.13-3.1.el7.x86_64.rpm\nyum <span class=\"token function\">install</span> -y docker-ce-19.03.8 docker-ce-cli-19.03.8\nsystemctl <span class=\"token builtin class-name\">enable</span> docker.service\nsystemctl start docker.service\n<span class=\"token function\">docker</span> version\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在每台服务器上为install_docker.sh脚本赋予可执行权限，并执行脚本即可。</p>\n<h2 id=\"安装docker-compose\">安装docker-compose</h2>\n<p><strong>注意：在每台服务器上安装docker-compose</strong></p>\n<p><strong>1.下载docker-compose文件</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">uname</span> -s<span class=\"token variable\">`</span></span>-<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">uname</span> -m<span class=\"token variable\">`</span></span> -o /usr/local/bin/docker-compose \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2-为docker-compose文件赋予可执行权限\">2.为docker-compose文件赋予可执行权限</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> a+x /usr/local/bin/docker-compose\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"3-查看docker-compose版本\">3.查看docker-compose版本</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@binghe ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker-compose version</span>\n<span class=\"token function\">docker-compose</span> version <span class=\"token number\">1.25</span>.5, build 8a1c60f6\ndocker-py version: <span class=\"token number\">4.1</span>.0\nCPython version: <span class=\"token number\">3.7</span>.5\nOpenSSL version: OpenSSL <span class=\"token number\">1.1</span>.0l  <span class=\"token number\">10</span> Sep <span class=\"token number\">2019</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"安装K8S集群环境\">安装K8S集群环境</h2>\n<p><strong>本文档基于K8S 1.8.12版本来搭建K8S集群</strong></p>\n<h3 id=\"安装K8S基础环境\">安装K8S基础环境</h3>\n<p>在所有服务器上创建install_k8s.sh脚本文件，脚本文件的内容如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#配置阿里云镜像加速器</span>\n<span class=\"token function\">mkdir</span> -p /etc/docker\n<span class=\"token function\">tee</span> /etc/docker/daemon.json <span class=\"token operator\">&lt;&lt;-</span><span class=\"token string\">'EOF'\n{\n  \"registry-mirrors\": [\"https://zz3sblpi.mirror.aliyuncs.com\"]\n}\nEOF</span>\nsystemctl daemon-reload\nsystemctl restart <span class=\"token function\">docker</span>\n\n<span class=\"token comment\">#安装nfs-utils</span>\nyum <span class=\"token function\">install</span> -y nfs-utils\nyum <span class=\"token function\">install</span> -y <span class=\"token function\">wget</span>\n\n<span class=\"token comment\">#启动nfs-server</span>\nsystemctl start nfs-server\nsystemctl <span class=\"token builtin class-name\">enable</span> nfs-server\n\n<span class=\"token comment\">#关闭防火墙</span>\nsystemctl stop firewalld\nsystemctl disable firewalld\n\n<span class=\"token comment\">#关闭SeLinux</span>\nsetenforce <span class=\"token number\">0</span>\n<span class=\"token function\">sed</span> -i <span class=\"token string\">\"s/SELINUX=enforcing/SELINUX=disabled/g\"</span> /etc/selinux/config\n\n<span class=\"token comment\"># 关闭 swap</span>\nswapoff -a\n<span class=\"token function\">yes</span> <span class=\"token operator\">|</span> <span class=\"token function\">cp</span> /etc/fstab /etc/fstab_bak\n<span class=\"token function\">cat</span> /etc/fstab_bak <span class=\"token operator\">|</span><span class=\"token function\">grep</span> -v swap <span class=\"token operator\">&gt;</span> /etc/fstab\n\n<span class=\"token comment\">#修改 /etc/sysctl.conf</span>\n<span class=\"token comment\"># 如果有配置，则修改</span>\n<span class=\"token function\">sed</span> -i <span class=\"token string\">\"s#^net.ipv4.ip_forward.*#net.ipv4.ip_forward=1#g\"</span>  /etc/sysctl.conf\n<span class=\"token function\">sed</span> -i <span class=\"token string\">\"s#^net.bridge.bridge-nf-call-ip6tables.*#net.bridge.bridge-nf-call-ip6tables=1#g\"</span>  /etc/sysctl.conf\n<span class=\"token function\">sed</span> -i <span class=\"token string\">\"s#^net.bridge.bridge-nf-call-iptables.*#net.bridge.bridge-nf-call-iptables=1#g\"</span>  /etc/sysctl.conf\n<span class=\"token function\">sed</span> -i <span class=\"token string\">\"s#^net.ipv6.conf.all.disable_ipv6.*#net.ipv6.conf.all.disable_ipv6=1#g\"</span>  /etc/sysctl.conf\n<span class=\"token function\">sed</span> -i <span class=\"token string\">\"s#^net.ipv6.conf.default.disable_ipv6.*#net.ipv6.conf.default.disable_ipv6=1#g\"</span>  /etc/sysctl.conf\n<span class=\"token function\">sed</span> -i <span class=\"token string\">\"s#^net.ipv6.conf.lo.disable_ipv6.*#net.ipv6.conf.lo.disable_ipv6=1#g\"</span>  /etc/sysctl.conf\n<span class=\"token function\">sed</span> -i <span class=\"token string\">\"s#^net.ipv6.conf.all.forwarding.*#net.ipv6.conf.all.forwarding=1#g\"</span>  /etc/sysctl.conf\n<span class=\"token comment\"># 可能没有，追加</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"net.ipv4.ip_forward = 1\"</span> <span class=\"token operator\">&gt;&gt;</span> /etc/sysctl.conf\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"net.bridge.bridge-nf-call-ip6tables = 1\"</span> <span class=\"token operator\">&gt;&gt;</span> /etc/sysctl.conf\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"net.bridge.bridge-nf-call-iptables = 1\"</span> <span class=\"token operator\">&gt;&gt;</span> /etc/sysctl.conf\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"net.ipv6.conf.all.disable_ipv6 = 1\"</span> <span class=\"token operator\">&gt;&gt;</span> /etc/sysctl.conf\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"net.ipv6.conf.default.disable_ipv6 = 1\"</span> <span class=\"token operator\">&gt;&gt;</span> /etc/sysctl.conf\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"net.ipv6.conf.lo.disable_ipv6 = 1\"</span> <span class=\"token operator\">&gt;&gt;</span> /etc/sysctl.conf\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"net.ipv6.conf.all.forwarding = 1\"</span>  <span class=\"token operator\">&gt;&gt;</span> /etc/sysctl.conf\n<span class=\"token comment\"># 执行命令以应用</span>\nsysctl -p\n\n<span class=\"token comment\"># 配置K8S的yum源</span>\n<span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF<span class=\"token bash punctuation\"> <span class=\"token operator\">&gt;</span> /etc/yum.repos.d/kubernetes.repo</span>\n[kubernetes]\nname=Kubernetes\nbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg\n       http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF</span>\n\n<span class=\"token comment\"># 卸载旧版本K8S</span>\nyum remove -y kubelet kubeadm kubectl\n\n<span class=\"token comment\"># 安装kubelet、kubeadm、kubectl，这里我安装的是1.18.2版本，你也可以安装1.17.2版本</span>\nyum <span class=\"token function\">install</span> -y kubelet-1.18.2 kubeadm-1.18.2 kubectl-1.18.2\n\n<span class=\"token comment\"># 修改docker Cgroup Driver为systemd</span>\n<span class=\"token comment\"># # 将/usr/lib/systemd/system/docker.service文件中的这一行 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span>\n<span class=\"token comment\"># # 修改为 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd</span>\n<span class=\"token comment\"># 如果不修改，在添加 worker 节点时可能会碰到如下错误</span>\n<span class=\"token comment\"># [WARNING IsDockerSystemdCheck]: detected \"cgroupfs\" as the Docker cgroup driver. The recommended driver is \"systemd\". </span>\n<span class=\"token comment\"># Please follow the guide at https://kubernetes.io/docs/setup/cri/</span>\n<span class=\"token function\">sed</span> -i <span class=\"token string\">\"s#^ExecStart=/usr/bin/dockerd.*#ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd#g\"</span> /usr/lib/systemd/system/docker.service\n\n<span class=\"token comment\"># 设置 docker 镜像，提高 docker 镜像下载速度和稳定性</span>\n<span class=\"token comment\"># 如果访问 https://hub.docker.io 速度非常稳定，亦可以跳过这个步骤</span>\n<span class=\"token comment\"># curl -sSL https://kuboard.cn/install-script/set_mirror.sh | sh -s ${REGISTRY_MIRROR}</span>\n\n<span class=\"token comment\"># 重启 docker，并启动 kubelet</span>\nsystemctl daemon-reload\nsystemctl restart <span class=\"token function\">docker</span>\nsystemctl <span class=\"token builtin class-name\">enable</span> kubelet <span class=\"token operator\">&amp;&amp;</span> systemctl start kubelet\n\n<span class=\"token function\">docker</span> version\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在每台服务器上为install_k8s.sh脚本赋予可执行权限，并执行脚本即可。</p>\n<h3 id=\"初始化Master节点\">初始化Master节点</h3>\n<p><strong>只在binghe101服务器上执行的操作。</strong></p>\n<p><strong>1.初始化Master节点的网络环境</strong></p>\n<p>注意：下面的命令需要在命令行手动执行。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 只在 master 节点执行</span>\n<span class=\"token comment\"># export 命令只在当前 shell 会话中有效，开启新的 shell 窗口后，如果要继续安装过程，请重新执行此处的 export 命令</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">MASTER_IP</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.175.101\n<span class=\"token comment\"># 替换 k8s.master 为 您想要的 dnsName</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">APISERVER_NAME</span><span class=\"token operator\">=</span>k8s.master\n<span class=\"token comment\"># Kubernetes 容器组所在的网段，该网段安装完成后，由 kubernetes 创建，事先并不存在于物理网络中</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">POD_SUBNET</span><span class=\"token operator\">=</span><span class=\"token number\">172.18</span>.0.1/16\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">${MASTER_IP}</span>    <span class=\"token variable\">${APISERVER_NAME}</span>\"</span> <span class=\"token operator\">&gt;&gt;</span> /etc/hosts\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>2.初始化Master节点</strong></p>\n<p>在binghe101服务器上创建init_master.sh脚本文件，文件内容如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token comment\"># 脚本出错时终止执行</span>\n<span class=\"token builtin class-name\">set</span> -e\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">${<span class=\"token operator\">#</span>POD_SUBNET}</span> -eq <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">${<span class=\"token operator\">#</span>APISERVER_NAME}</span> -eq <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"<span class=\"token entity\" title=\"\\033\">\\033</span>[31;1m请确保您已经设置了环境变量 POD_SUBNET 和 APISERVER_NAME <span class=\"token entity\" title=\"\\033\">\\033</span>[0m\"</span>\n  <span class=\"token builtin class-name\">echo</span> 当前POD_SUBNET<span class=\"token operator\">=</span><span class=\"token variable\">$POD_SUBNET</span>\n  <span class=\"token builtin class-name\">echo</span> 当前APISERVER_NAME<span class=\"token operator\">=</span><span class=\"token variable\">$APISERVER_NAME</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n\n\n<span class=\"token comment\"># 查看完整配置选项 https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2</span>\n<span class=\"token function\">rm</span> -f ./kubeadm-config.yaml\n<span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF<span class=\"token bash punctuation\"> <span class=\"token operator\">&gt;</span> ./kubeadm-config.yaml</span>\napiVersion: kubeadm.k8s.io/v1beta2\nkind: ClusterConfiguration\nkubernetesVersion: v1.18.2\nimageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers\ncontrolPlaneEndpoint: \"<span class=\"token variable\">${APISERVER_NAME}</span>:6443\"\nnetworking:\n  serviceSubnet: \"10.96.0.0/16\"\n  podSubnet: \"<span class=\"token variable\">${POD_SUBNET}</span>\"\n  dnsDomain: \"cluster.local\"\nEOF</span>\n\n<span class=\"token comment\"># kubeadm init</span>\n<span class=\"token comment\"># 根据服务器网速的情况，您需要等候 3 - 10 分钟</span>\nkubeadm init --config<span class=\"token operator\">=</span>kubeadm-config.yaml --upload-certs\n\n<span class=\"token comment\"># 配置 kubectl</span>\n<span class=\"token function\">rm</span> -rf /root/.kube/\n<span class=\"token function\">mkdir</span> /root/.kube/\n<span class=\"token function\">cp</span> -i /etc/kubernetes/admin.conf /root/.kube/config\n\n<span class=\"token comment\"># 安装 calico 网络插件</span>\n<span class=\"token comment\"># 参考文档 https://docs.projectcalico.org/v3.13/getting-started/kubernetes/self-managed-onprem/onpremises</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"安装calico-3.13.1\"</span>\n<span class=\"token function\">rm</span> -f calico-3.13.1.yaml\n<span class=\"token function\">wget</span> https://kuboard.cn/install-script/calico/calico-3.13.1.yaml\nkubectl apply -f calico-3.13.1.yaml\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>赋予init_master.sh脚本文件可执行权限并执行脚本。</p>\n<p><strong>3.查看Master节点的初始化结果</strong></p>\n<p><strong>（1）确保所有容器组处于Running状态</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 执行如下命令，等待 3-10 分钟，直到所有的容器组处于 Running 状态</span>\n<span class=\"token function\">watch</span> kubectl get pod -n kube-system -o wide\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>具体执行如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@binghe101 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># watch kubectl get pod -n kube-system -o wide</span>\nEvery <span class=\"token number\">2</span>.0s: kubectl get pod -n kube-system -o wide                                                                                                                          binghe101: Sun May <span class=\"token number\">10</span> <span class=\"token number\">11</span>:01:32 <span class=\"token number\">2020</span>\n\nNAME                                       READY   STATUS    RESTARTS   AGE    IP                NODE        NOMINATED NODE   READINESS GATES          \ncalico-kube-controllers-5b8b769fcd-5dtlp   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          118s   <span class=\"token number\">172.18</span>.203.66     binghe101   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>          \ncalico-node-fnv8g                          <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          118s   <span class=\"token number\">192.168</span>.175.101   binghe101   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>          \ncoredns-546565776c-27t7h                   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          2m1s   <span class=\"token number\">172.18</span>.203.67     binghe101   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>          \ncoredns-546565776c-hjb8z                   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          2m1s   <span class=\"token number\">172.18</span>.203.65     binghe101   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>          \netcd-binghe101                             <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          2m7s   <span class=\"token number\">192.168</span>.175.101   binghe101   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>          \nkube-apiserver-binghe101                   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          2m7s   <span class=\"token number\">192.168</span>.175.101   binghe101   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>          \nkube-controller-manager-binghe101          <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          2m7s   <span class=\"token number\">192.168</span>.175.101   binghe101   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>          \nkube-proxy-dvgsr                           <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          2m1s   <span class=\"token number\">192.168</span>.175.101   binghe101   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>          \nkube-scheduler-binghe101                   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          2m7s   <span class=\"token number\">192.168</span>.175.101   binghe101   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>（2） 查看 Master 节点初始化结果</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl get nodes -o wide\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>具体执行如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@binghe101 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get nodes -o wide</span>\nNAME        STATUS   ROLES    AGE     VERSION   INTERNAL-IP       EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION         CONTAINER-RUNTIME\nbinghe101   Ready    master   3m28s   v1.18.2   <span class=\"token number\">192.168</span>.175.101   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>        CentOS Linux <span class=\"token number\">8</span> <span class=\"token punctuation\">(</span>Core<span class=\"token punctuation\">)</span>   <span class=\"token number\">4.18</span>.0-80.el8.x86_64   docker://19.3.8\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"初始化Worker节点\">初始化Worker节点</h3>\n<p><strong>1.获取join命令参数</strong></p>\n<p>在Master节点（binghe101服务器）上执行如下命令获取join命令参数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm token create --print-join-command\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>具体执行如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@binghe101 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubeadm token create --print-join-command</span>\nW0510 <span class=\"token number\">11</span>:04:34.828126   <span class=\"token number\">56132</span> configset.go:202<span class=\"token punctuation\">]</span> WARNING: kubeadm cannot validate component configs <span class=\"token keyword\">for</span> API <span class=\"token function\">groups</span> <span class=\"token punctuation\">[</span>kubelet.config.k8s.io kubeproxy.config.k8s.io<span class=\"token punctuation\">]</span>\nkubeadm <span class=\"token function\">join</span> k8s.master:6443 --token 8nblts.62xytoqufwsqzko2     --discovery-token-ca-cert-hash sha256:1717cc3e34f6a56b642b5751796530e367aa73f4113d09994ac3455e33047c0d \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>其中，有如下一行输出。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm <span class=\"token function\">join</span> k8s.master:6443 --token 8nblts.62xytoqufwsqzko2     --discovery-token-ca-cert-hash sha256:1717cc3e34f6a56b642b5751796530e367aa73f4113d09994ac3455e33047c0d \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这行代码就是获取到的join命令。</p>\n<blockquote>\n<p>注意：join命令中的token的有效时间为 2 个小时，2小时内，可以使用此 token 初始化任意数量的 worker 节点。</p>\n</blockquote>\n<p><strong>2.初始化Worker节点</strong></p>\n<p>针对所有的 worker 节点执行，在这里，就是在binghe102服务器和binghe103服务器上执行。</p>\n<p>在命令分别手动执行如下命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 只在 worker 节点执行</span>\n<span class=\"token comment\"># 192.168.175.101 为 master 节点的内网 IP</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">MASTER_IP</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.175.101\n<span class=\"token comment\"># 替换 k8s.master 为初始化 master 节点时所使用的 APISERVER_NAME</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">APISERVER_NAME</span><span class=\"token operator\">=</span>k8s.master\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">${MASTER_IP}</span>    <span class=\"token variable\">${APISERVER_NAME}</span>\"</span> <span class=\"token operator\">&gt;&gt;</span> /etc/hosts\n\n<span class=\"token comment\"># 替换为 master 节点上 kubeadm token create 命令输出的join</span>\nkubeadm <span class=\"token function\">join</span> k8s.master:6443 --token 8nblts.62xytoqufwsqzko2     --discovery-token-ca-cert-hash sha256:1717cc3e34f6a56b642b5751796530e367aa73f4113d09994ac3455e33047c0d \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>具体执行如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@binghe102 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># export MASTER_IP=192.168.175.101</span>\n<span class=\"token punctuation\">[</span>root@binghe102 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># export APISERVER_NAME=k8s.master</span>\n<span class=\"token punctuation\">[</span>root@binghe102 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo \"${MASTER_IP}    ${APISERVER_NAME}\" &gt;&gt; /etc/hosts</span>\n<span class=\"token punctuation\">[</span>root@binghe102 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubeadm join k8s.master:6443 --token 8nblts.62xytoqufwsqzko2     --discovery-token-ca-cert-hash sha256:1717cc3e34f6a56b642b5751796530e367aa73f4113d09994ac3455e33047c0d </span>\nW0510 <span class=\"token number\">11</span>:08:27.709263   <span class=\"token number\">42795</span> join.go:346<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>preflight<span class=\"token punctuation\">]</span> WARNING: JoinControlPane.controlPlane settings will be ignored when control-plane flag is not set.\n<span class=\"token punctuation\">[</span>preflight<span class=\"token punctuation\">]</span> Running pre-flight checks\n        <span class=\"token punctuation\">[</span>WARNING FileExisting-tc<span class=\"token punctuation\">]</span>: tc not found <span class=\"token keyword\">in</span> system path\n<span class=\"token punctuation\">[</span>preflight<span class=\"token punctuation\">]</span> Reading configuration from the cluster<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>preflight<span class=\"token punctuation\">]</span> FYI: You can <span class=\"token function\">look</span> at this config <span class=\"token function\">file</span> with <span class=\"token string\">'kubectl -n kube-system get cm kubeadm-config -oyaml'</span>\n<span class=\"token punctuation\">[</span>kubelet-start<span class=\"token punctuation\">]</span> Downloading configuration <span class=\"token keyword\">for</span> the kubelet from the <span class=\"token string\">\"kubelet-config-1.18\"</span> ConfigMap <span class=\"token keyword\">in</span> the kube-system namespace\n<span class=\"token punctuation\">[</span>kubelet-start<span class=\"token punctuation\">]</span> Writing kubelet configuration to <span class=\"token function\">file</span> <span class=\"token string\">\"/var/lib/kubelet/config.yaml\"</span>\n<span class=\"token punctuation\">[</span>kubelet-start<span class=\"token punctuation\">]</span> Writing kubelet environment <span class=\"token function\">file</span> with flags to <span class=\"token function\">file</span> <span class=\"token string\">\"/var/lib/kubelet/kubeadm-flags.env\"</span>\n<span class=\"token punctuation\">[</span>kubelet-start<span class=\"token punctuation\">]</span> Starting the kubelet\n<span class=\"token punctuation\">[</span>kubelet-start<span class=\"token punctuation\">]</span> Waiting <span class=\"token keyword\">for</span> the kubelet to perform the TLS Bootstrap<span class=\"token punctuation\">..</span>.\n\nThis <span class=\"token function\">node</span> has joined the cluster:\n* Certificate signing request was sent to apiserver and a response was received.\n* The Kubelet was informed of the new secure connection details.\n\nRun <span class=\"token string\">'kubectl get nodes'</span> on the control-plane to see this <span class=\"token function\">node</span> <span class=\"token function\">join</span> the cluster.\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>根据输出结果可以看出，Worker节点加入了K8S集群。</p>\n<blockquote>\n<p>注意：kubeadm join…就是master 节点上 kubeadm token create 命令输出的join。</p>\n</blockquote>\n<p><strong>3.查看初始化结果</strong></p>\n<p>在Master节点（binghe101服务器）执行如下命令查看初始化结果。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl get nodes -o wide\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>具体执行如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@binghe101 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get nodes</span>\nNAME        STATUS   ROLES    AGE     VERSION\nbinghe101   Ready    master   20m     v1.18.2\nbinghe102   Ready    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>   2m46s   v1.18.2\nbinghe103   Ready    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>   2m46s   v1.18.2\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>注意：kubectl get nodes命令后面加上-o wide参数可以输出更多的信息。</p>\n</blockquote>\n<h2 id=\"重启K8S集群引起的问题\">重启K8S集群引起的问题</h2>\n<h3 id=\"1-Worker节点故障不能启动\">1.Worker节点故障不能启动</h3>\n<p>Master 节点的 IP 地址发生变化，导致 worker 节点不能启动。需要重新安装K8S集群，并确保所有节点都有固定的内网 IP 地址。</p>\n<h3 id=\"2-Pod崩溃或不能正常访问\">2.Pod崩溃或不能正常访问</h3>\n<p>重启服务器后使用如下命令查看Pod的运行状态。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl get pods --all-namespaces\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>发现很多 Pod 不在 Running 状态，此时，需要使用如下命令删除运行不正常的Pod。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl delete pod <span class=\"token operator\">&lt;</span>pod-name<span class=\"token operator\">&gt;</span> -n <span class=\"token operator\">&lt;</span>pod-namespece<span class=\"token operator\">&gt;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>注意：如果Pod 是使用 Deployment、StatefulSet 等控制器创建的，K8S 将创建新的 Pod 作为替代，重新启动的 Pod 通常能够正常工作。</p>\n</blockquote>\n<h2 id=\"K8S安装ingress-nginx\">K8S安装ingress-nginx</h2>\n<p><strong>注意：在Master节点（binghe101服务器上执行）</strong></p>\n<h3 id=\"1-创建ingress-nginx命名空间\">1.创建ingress-nginx命名空间</h3>\n<p>创建ingress-nginx-namespace.yaml文件，文件内容如下所示。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Namespace\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行如下命令创建ingress-nginx命名空间。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply -f ingress-nginx-namespace.yaml\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2-安装ingress-controller\">2.安装ingress controller</h3>\n<p>创建ingress-nginx-mandatory.yaml文件，文件内容如下所示。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Namespace\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n\n<span class=\"token punctuation\">---</span>\n\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>http<span class=\"token punctuation\">-</span>backend\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app.kubernetes.io/name</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>http<span class=\"token punctuation\">-</span>backend\n    <span class=\"token key atrule\">app.kubernetes.io/part-of</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app.kubernetes.io/name</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>http<span class=\"token punctuation\">-</span>backend\n      <span class=\"token key atrule\">app.kubernetes.io/part-of</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app.kubernetes.io/name</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>http<span class=\"token punctuation\">-</span>backend\n        <span class=\"token key atrule\">app.kubernetes.io/part-of</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">terminationGracePeriodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>http<span class=\"token punctuation\">-</span>backend\n          \n          \n          \n          <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> registry.cn<span class=\"token punctuation\">-</span>qingdao.aliyuncs.com/kubernetes_xingej/defaultbackend<span class=\"token punctuation\">-</span>amd64<span class=\"token punctuation\">:</span><span class=\"token number\">1.5</span>\n          <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /healthz\n              <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n              <span class=\"token key atrule\">scheme</span><span class=\"token punctuation\">:</span> HTTP\n            <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span>\n            <span class=\"token key atrule\">timeoutSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n          <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n          <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">limits</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">cpu</span><span class=\"token punctuation\">:</span> 10m\n              <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> 20Mi\n            <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">cpu</span><span class=\"token punctuation\">:</span> 10m\n              <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> 20Mi\n\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>http<span class=\"token punctuation\">-</span>backend\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app.kubernetes.io/name</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>http<span class=\"token punctuation\">-</span>backend\n    <span class=\"token key atrule\">app.kubernetes.io/part-of</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n      <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app.kubernetes.io/name</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>http<span class=\"token punctuation\">-</span>backend\n    <span class=\"token key atrule\">app.kubernetes.io/part-of</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n\n<span class=\"token punctuation\">---</span>\n\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ConfigMap\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>configuration\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app.kubernetes.io/name</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n    <span class=\"token key atrule\">app.kubernetes.io/part-of</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n\n<span class=\"token punctuation\">---</span>\n\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ConfigMap\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> tcp<span class=\"token punctuation\">-</span>services\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app.kubernetes.io/name</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n    <span class=\"token key atrule\">app.kubernetes.io/part-of</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n\n<span class=\"token punctuation\">---</span>\n\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ConfigMap\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> udp<span class=\"token punctuation\">-</span>services\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app.kubernetes.io/name</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n    <span class=\"token key atrule\">app.kubernetes.io/part-of</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n\n<span class=\"token punctuation\">---</span>\n\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ServiceAccount\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>ingress<span class=\"token punctuation\">-</span>serviceaccount\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app.kubernetes.io/name</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n    <span class=\"token key atrule\">app.kubernetes.io/part-of</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io/v1beta1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ClusterRole\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>ingress<span class=\"token punctuation\">-</span>clusterrole\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app.kubernetes.io/name</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n    <span class=\"token key atrule\">app.kubernetes.io/part-of</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n<span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> configmaps\n      <span class=\"token punctuation\">-</span> endpoints\n      <span class=\"token punctuation\">-</span> nodes\n      <span class=\"token punctuation\">-</span> pods\n      <span class=\"token punctuation\">-</span> secrets\n    <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> list\n      <span class=\"token punctuation\">-</span> watch\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> nodes\n    <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> get\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> services\n    <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> get\n      <span class=\"token punctuation\">-</span> list\n      <span class=\"token punctuation\">-</span> watch\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"extensions\"</span>\n    <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ingresses\n    <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> get\n      <span class=\"token punctuation\">-</span> list\n      <span class=\"token punctuation\">-</span> watch\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> events\n    <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> create\n      <span class=\"token punctuation\">-</span> patch\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"extensions\"</span>\n    <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ingresses/status\n    <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> update\n\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io/v1beta1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Role\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>ingress<span class=\"token punctuation\">-</span>role\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app.kubernetes.io/name</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n    <span class=\"token key atrule\">app.kubernetes.io/part-of</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n<span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> configmaps\n      <span class=\"token punctuation\">-</span> pods\n      <span class=\"token punctuation\">-</span> secrets\n      <span class=\"token punctuation\">-</span> namespaces\n    <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> get\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> configmaps\n    <span class=\"token key atrule\">resourceNames</span><span class=\"token punctuation\">:</span>\n      \n      \n      \n      \n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"ingress-controller-leader-nginx\"</span>\n    <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> get\n      <span class=\"token punctuation\">-</span> update\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> configmaps\n    <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> create\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> endpoints\n    <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> get\n\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io/v1beta1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> RoleBinding\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>ingress<span class=\"token punctuation\">-</span>role<span class=\"token punctuation\">-</span>nisa<span class=\"token punctuation\">-</span>binding\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app.kubernetes.io/name</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n    <span class=\"token key atrule\">app.kubernetes.io/part-of</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n<span class=\"token key atrule\">roleRef</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">apiGroup</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io\n  <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Role\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>ingress<span class=\"token punctuation\">-</span>role\n<span class=\"token key atrule\">subjects</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ServiceAccount\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>ingress<span class=\"token punctuation\">-</span>serviceaccount\n    <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io/v1beta1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ClusterRoleBinding\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>ingress<span class=\"token punctuation\">-</span>clusterrole<span class=\"token punctuation\">-</span>nisa<span class=\"token punctuation\">-</span>binding\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app.kubernetes.io/name</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n    <span class=\"token key atrule\">app.kubernetes.io/part-of</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n<span class=\"token key atrule\">roleRef</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">apiGroup</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io\n  <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ClusterRole\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>ingress<span class=\"token punctuation\">-</span>clusterrole\n<span class=\"token key atrule\">subjects</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ServiceAccount\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>ingress<span class=\"token punctuation\">-</span>serviceaccount\n    <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n\n<span class=\"token punctuation\">---</span>\n\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>ingress<span class=\"token punctuation\">-</span>controller\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app.kubernetes.io/name</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n    <span class=\"token key atrule\">app.kubernetes.io/part-of</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app.kubernetes.io/name</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n      <span class=\"token key atrule\">app.kubernetes.io/part-of</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app.kubernetes.io/name</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n        <span class=\"token key atrule\">app.kubernetes.io/part-of</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n      <span class=\"token key atrule\">annotations</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">prometheus.io/port</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"10254\"</span>\n        <span class=\"token key atrule\">prometheus.io/scrape</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"true\"</span>\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">serviceAccountName</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>ingress<span class=\"token punctuation\">-</span>serviceaccount\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>ingress<span class=\"token punctuation\">-</span>controller\n          <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> registry.cn<span class=\"token punctuation\">-</span>qingdao.aliyuncs.com/kubernetes_xingej/nginx<span class=\"token punctuation\">-</span>ingress<span class=\"token punctuation\">-</span>controller<span class=\"token punctuation\">:</span>0.20.0\n          <span class=\"token key atrule\">args</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> /nginx<span class=\"token punctuation\">-</span>ingress<span class=\"token punctuation\">-</span>controller\n            <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>default<span class=\"token punctuation\">-</span>backend<span class=\"token punctuation\">-</span>service=$(POD_NAMESPACE)/default<span class=\"token punctuation\">-</span>http<span class=\"token punctuation\">-</span>backend\n            <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>configmap=$(POD_NAMESPACE)/nginx<span class=\"token punctuation\">-</span>configuration\n            <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>tcp<span class=\"token punctuation\">-</span>services<span class=\"token punctuation\">-</span>configmap=$(POD_NAMESPACE)/tcp<span class=\"token punctuation\">-</span>services\n            <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>udp<span class=\"token punctuation\">-</span>services<span class=\"token punctuation\">-</span>configmap=$(POD_NAMESPACE)/udp<span class=\"token punctuation\">-</span>services\n            <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>publish<span class=\"token punctuation\">-</span>service=$(POD_NAMESPACE)/ingress<span class=\"token punctuation\">-</span>nginx\n            <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>annotations<span class=\"token punctuation\">-</span>prefix=nginx.ingress.kubernetes.io\n          <span class=\"token key atrule\">securityContext</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">capabilities</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">drop</span><span class=\"token punctuation\">:</span>\n                <span class=\"token punctuation\">-</span> ALL\n              <span class=\"token key atrule\">add</span><span class=\"token punctuation\">:</span>\n                <span class=\"token punctuation\">-</span> NET_BIND_SERVICE\n            \n            <span class=\"token key atrule\">runAsUser</span><span class=\"token punctuation\">:</span> <span class=\"token number\">33</span>\n          <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> POD_NAME\n              <span class=\"token key atrule\">valueFrom</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">fieldRef</span><span class=\"token punctuation\">:</span>\n                  <span class=\"token key atrule\">fieldPath</span><span class=\"token punctuation\">:</span> metadata.name\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> POD_NAMESPACE\n              <span class=\"token key atrule\">valueFrom</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">fieldRef</span><span class=\"token punctuation\">:</span>\n                  <span class=\"token key atrule\">fieldPath</span><span class=\"token punctuation\">:</span> metadata.namespace\n          <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http\n              <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> https\n              <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">443</span>\n          <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">failureThreshold</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n            <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /healthz\n              <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10254</span>\n              <span class=\"token key atrule\">scheme</span><span class=\"token punctuation\">:</span> HTTP\n            <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n            <span class=\"token key atrule\">periodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n            <span class=\"token key atrule\">successThreshold</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n            <span class=\"token key atrule\">timeoutSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n          <span class=\"token key atrule\">readinessProbe</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">failureThreshold</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n            <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /healthz\n              <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10254</span>\n              <span class=\"token key atrule\">scheme</span><span class=\"token punctuation\">:</span> HTTP\n            <span class=\"token key atrule\">periodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n            <span class=\"token key atrule\">successThreshold</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n            <span class=\"token key atrule\">timeoutSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n\n<span class=\"token punctuation\">---</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行如下命令安装ingress controller。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply -f ingress-nginx-mandatory.yaml\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"3-安装K8S-SVC：ingress-nginx\">3.安装K8S SVC：ingress-nginx</h3>\n<p>主要是用来用于暴露pod：nginx-ingress-controller。</p>\n<p>创建service-nodeport.yaml文件，文件内容如下所示。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app.kubernetes.io/name</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n    <span class=\"token key atrule\">app.kubernetes.io/part-of</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> NodePort\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http\n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n      <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n      <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n      <span class=\"token key atrule\">nodePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30080</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> https\n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">443</span>\n      <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">443</span>\n      <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n      <span class=\"token key atrule\">nodePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30443</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app.kubernetes.io/name</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n    <span class=\"token key atrule\">app.kubernetes.io/part-of</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行如下命令安装。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply -f service-nodeport.yaml\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"4-访问K8S-SVC：ingress-nginx\">4.访问K8S SVC：ingress-nginx</h3>\n<p>查看ingress-nginx命名空间的部署情况，如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@binghe101 k8s<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get pod -n ingress-nginx</span>\nNAME                                        READY   STATUS    RESTARTS   AGE\ndefault-http-backend-796ddcd9b-vfmgn        <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">1</span>          10h\nnginx-ingress-controller-58985cc996-87754   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">2</span>          10h\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在命令行服务器命令行输入如下命令查看ingress-nginx的端口映射情况。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl get svc -n ingress-nginx \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>具体如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@binghe101 k8s<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get svc -n ingress-nginx </span>\nNAME                   TYPE        CLUSTER-IP    EXTERNAL-IP   PORT<span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span>                      AGE\ndefault-http-backend   ClusterIP   <span class=\"token number\">10.96</span>.247.2   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>        <span class=\"token number\">80</span>/TCP                       7m3s\ningress-nginx          NodePort    <span class=\"token number\">10.96</span>.40.6    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>        <span class=\"token number\">80</span>:30080/TCP,443:30443/TCP   4m35s\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>所以，可以通过Master节点（binghe101服务器）的IP地址和30080端口号来访问ingress-nginx，如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@binghe101 k8s<span class=\"token punctuation\">]</span><span class=\"token comment\"># curl 192.168.175.101:30080       </span>\ndefault backend - <span class=\"token number\">404</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>也可以在浏览器打开http://192.168.175.101:30080 来访问ingress-nginx，如下所示。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231.jpg\" alt=\"\"></p>\n<h2 id=\"K8S安装gitlab代码仓库\">K8S安装gitlab代码仓库</h2>\n<p><strong>注意：在Master节点（binghe101服务器上执行）</strong></p>\n<h3 id=\"1-创建k8s-ops命名空间\">1.创建k8s-ops命名空间</h3>\n<p>创建k8s-ops-namespace.yaml文件，文件内容如下所示。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Namespace\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> k8s<span class=\"token punctuation\">-</span>ops\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> k8s<span class=\"token punctuation\">-</span>ops\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行如下命令创建命名空间。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply -f k8s-ops-namespace.yaml \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2-安装gitlab-redis\">2.安装gitlab-redis</h3>\n<p>创建gitlab-redis.yaml文件，文件的内容如下所示。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> redis\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> k8s<span class=\"token punctuation\">-</span>ops\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> redis\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> redis\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> redis\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> redis\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> redis\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> sameersbn/redis\n        <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> IfNotPresent\n        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> redis\n          <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6379</span>\n        <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /var/lib/redis\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> data\n        <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">exec</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> redis<span class=\"token punctuation\">-</span>cli\n            <span class=\"token punctuation\">-</span> ping\n          <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span>\n          <span class=\"token key atrule\">timeoutSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n        <span class=\"token key atrule\">readinessProbe</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">exec</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> redis<span class=\"token punctuation\">-</span>cli\n            <span class=\"token punctuation\">-</span> ping\n          <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n          <span class=\"token key atrule\">timeoutSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n      <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> data\n        <span class=\"token key atrule\">hostPath</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /data1/docker/xinsrv/redis\n\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> redis\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> k8s<span class=\"token punctuation\">-</span>ops\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> redis\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> redis\n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6379</span>\n      <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> redis\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> redis\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>首先，在命令行执行如下命令创建/data1/docker/xinsrv/redis目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> -p /data1/docker/xinsrv/redis\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行如下命令安装gitlab-redis。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply -f gitlab-redis.yaml \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"3-安装gitlab-postgresql\">3.安装gitlab-postgresql</h3>\n<p>创建gitlab-postgresql.yaml，文件内容如下所示。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> postgresql\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> k8s<span class=\"token punctuation\">-</span>ops\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> postgresql\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> postgresql\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> postgresql\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> postgresql\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> postgresql\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> sameersbn/postgresql\n        <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> IfNotPresent\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> DB_USER\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> gitlab\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> DB_PASS\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> passw0rd\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> DB_NAME\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> gitlab_production\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> DB_EXTENSION\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> pg_trgm\n        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> postgres\n          <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5432</span>\n        <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /var/lib/postgresql\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> data\n        <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">exec</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> pg_isready\n            <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span>h\n            <span class=\"token punctuation\">-</span> localhost\n            <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span>U\n            <span class=\"token punctuation\">-</span> postgres\n          <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span>\n          <span class=\"token key atrule\">timeoutSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n        <span class=\"token key atrule\">readinessProbe</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">exec</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> pg_isready\n            <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span>h\n            <span class=\"token punctuation\">-</span> localhost\n            <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span>U\n            <span class=\"token punctuation\">-</span> postgres\n          <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n          <span class=\"token key atrule\">timeoutSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n      <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> data\n        <span class=\"token key atrule\">hostPath</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /data1/docker/xinsrv/postgresql\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> postgresql\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> k8s<span class=\"token punctuation\">-</span>ops\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> postgresql\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> postgres\n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5432</span>\n      <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> postgres\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> postgresql\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>首先，执行如下命令创建/data1/docker/xinsrv/postgresql目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> -p /data1/docker/xinsrv/postgresql\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接下来，安装gitlab-postgresql，如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply -f gitlab-postgresql.yaml\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"4-安装gitlab\">4.安装gitlab</h3>\n<p><strong>（1）配置用户名和密码</strong></p>\n<p>首先，在命令行使用base64编码为用户名和密码进行转码，本示例中，使用的用户名为admin，密码为admin.1231</p>\n<p>转码情况如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@binghe101 k8s<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo -n 'admin' | base64 </span>\n<span class=\"token assign-left variable\">YWRtaW4</span><span class=\"token operator\">=</span>\n<span class=\"token punctuation\">[</span>root@binghe101 k8s<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo -n 'admin.1231' | base64 </span>\n<span class=\"token assign-left variable\">YWRtaW4uMTIzMQ</span><span class=\"token operator\">==</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>转码后的用户名为：YWRtaW4= 密码为：YWRtaW4uMTIzMQ==</p>\n<p>也可以对base64编码后的字符串解码，例如，对密码字符串解码，如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@binghe101 k8s<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo 'YWRtaW4uMTIzMQ==' | base64 --decode </span>\nadmin.1231\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>接下来，创建secret-gitlab.yaml文件，主要是用户来配置GitLab的用户名和密码，文件内容如下所示。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Secret\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> k8s<span class=\"token punctuation\">-</span>ops\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> git<span class=\"token punctuation\">-</span>user<span class=\"token punctuation\">-</span>pass\n<span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> Opaque\n<span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> YWRtaW4=\n  <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> YWRtaW4uMTIzMQ==\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行配置文件的内容，如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl create -f ./secret-gitlab.yaml\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>（2）安装GitLab</strong></p>\n<p>创建gitlab.yaml文件，文件的内容如下所示。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> gitlab\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> k8s<span class=\"token punctuation\">-</span>ops\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> gitlab\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> gitlab\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> gitlab\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> gitlab\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> gitlab\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> sameersbn/gitlab<span class=\"token punctuation\">:</span>12.1.6\n        <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> IfNotPresent\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> TZ\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> Asia/Shanghai\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> GITLAB_TIMEZONE\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> Beijing\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> GITLAB_SECRETS_DB_KEY_BASE\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> long<span class=\"token punctuation\">-</span>and<span class=\"token punctuation\">-</span>random<span class=\"token punctuation\">-</span>alpha<span class=\"token punctuation\">-</span>numeric<span class=\"token punctuation\">-</span>string\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> GITLAB_SECRETS_SECRET_KEY_BASE\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> long<span class=\"token punctuation\">-</span>and<span class=\"token punctuation\">-</span>random<span class=\"token punctuation\">-</span>alpha<span class=\"token punctuation\">-</span>numeric<span class=\"token punctuation\">-</span>string\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> GITLAB_SECRETS_OTP_KEY_BASE\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> long<span class=\"token punctuation\">-</span>and<span class=\"token punctuation\">-</span>random<span class=\"token punctuation\">-</span>alpha<span class=\"token punctuation\">-</span>numeric<span class=\"token punctuation\">-</span>string\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> GITLAB_ROOT_PASSWORD\n          <span class=\"token key atrule\">valueFrom</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">secretKeyRef</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> git<span class=\"token punctuation\">-</span>user<span class=\"token punctuation\">-</span>pass\n              <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> password\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> GITLAB_ROOT_EMAIL\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> 12345678@qq.com\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> GITLAB_HOST\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> gitlab.binghe.com\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> GITLAB_PORT\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"80\"</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> GITLAB_SSH_PORT\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"30022\"</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> GITLAB_NOTIFY_ON_BROKEN_BUILDS\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"true\"</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> GITLAB_NOTIFY_PUSHER\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"false\"</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> GITLAB_BACKUP_SCHEDULE\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> daily\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> GITLAB_BACKUP_TIME\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">01:00</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> DB_TYPE\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> postgres\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> DB_HOST\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> postgresql\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> DB_PORT\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"5432\"</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> DB_USER\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> gitlab\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> DB_PASS\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> passw0rd\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> DB_NAME\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> gitlab_production\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> REDIS_HOST\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> redis\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> REDIS_PORT\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"6379\"</span>\n        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http\n          <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ssh\n          <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">22</span>\n        <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /home/git/data\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> data\n        <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /\n            <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n          <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">180</span>\n          <span class=\"token key atrule\">timeoutSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n        <span class=\"token key atrule\">readinessProbe</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /\n            <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n          <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n          <span class=\"token key atrule\">timeoutSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n      <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> data\n        <span class=\"token key atrule\">hostPath</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /data1/docker/xinsrv/gitlab\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> gitlab\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> k8s<span class=\"token punctuation\">-</span>ops\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> gitlab\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http\n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n      <span class=\"token key atrule\">nodePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30088</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ssh\n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">22</span>\n      <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> ssh\n      <span class=\"token key atrule\">nodePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30022</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> NodePort\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> gitlab\n\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> extensions/v1beta1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Ingress\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> gitlab\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> k8s<span class=\"token punctuation\">-</span>ops\n  <span class=\"token key atrule\">annotations</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">kubernetes.io/ingress.class</span><span class=\"token punctuation\">:</span> traefik\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> gitlab.binghe.com\n    <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">backend</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">serviceName</span><span class=\"token punctuation\">:</span> gitlab\n          <span class=\"token key atrule\">servicePort</span><span class=\"token punctuation\">:</span> http\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意：在配置GitLab时，监听主机时，不能使用IP地址，需要使用主机名或者域名，上述配置中，我使用的是gitlab.binghe.com主机名。</strong></p>\n<p>在命令行执行如下命令创建/data1/docker/xinsrv/gitlab目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> -p /data1/docker/xinsrv/gitlab\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装GitLab，如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply -f gitlab.yaml\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"5-安装完成\">5.安装完成</h3>\n<p>查看k8s-ops命名空间部署情况，如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@binghe101 k8s<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get pod -n k8s-ops</span>\nNAME                          READY   STATUS    RESTARTS   AGE\ngitlab-7b459db47c-5vk6t       <span class=\"token number\">0</span>/1     Running   <span class=\"token number\">0</span>          11s\npostgresql-79567459d7-x52vx   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          30m\nredis-67f4cdc96c-h5ckz        <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">1</span>          10h\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>也可以使用如下命令查看。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@binghe101 k8s<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get pod --namespace=k8s-ops</span>\nNAME                          READY   STATUS    RESTARTS   AGE\ngitlab-7b459db47c-5vk6t       <span class=\"token number\">0</span>/1     Running   <span class=\"token number\">0</span>          36s\npostgresql-79567459d7-x52vx   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          30m\nredis-67f4cdc96c-h5ckz        <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">1</span>          10h\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>二者效果一样。</p>\n<p>接下来，查看GitLab的端口映射，如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@binghe101 k8s<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get svc -n k8s-ops</span>\nNAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT<span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span>                     AGE\ngitlab       NodePort    <span class=\"token number\">10.96</span>.153.100   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>        <span class=\"token number\">80</span>:30088/TCP,22:30022/TCP   2m42s\npostgresql   ClusterIP   <span class=\"token number\">10.96</span>.203.119   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>        <span class=\"token number\">5432</span>/TCP                    32m\nredis        ClusterIP   <span class=\"token number\">10.96</span>.107.150   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>        <span class=\"token number\">6379</span>/TCP                    10h\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时，可以看到，可以通过Master节点（binghe101）的主机名gitlab.binghe.com和端口30088就能够访问GitLab。由于我这里使用的是虚拟机来搭建相关的环境，在本机访问虚拟机映射的gitlab.binghe.com时，需要配置本机的hosts文件，在本机的hosts文件中加入如下配置项。</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">192.168.175.101 gitlab.binghe.com\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>注意：在Windows操作系统中，hosts文件所在的目录如下。</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">C:\\Windows\\System32\\drivers\\etc\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接下来，就可以在浏览器中通过链接：<a href=\"https://gitlab.binghe.com/30088\">http://gitlab.binghe.com:30088</a> 来访问GitLab了，如下所示。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231-1.jpg\" alt=\"\"></p>\n<p>此时，可以通过用户名root和密码admin.1231来登录GitLab了。</p>\n<p><strong>注意：这里的用户名是root而不是admin，因为root是GitLab默认的超级用户。</strong></p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231-2.jpg\" alt=\"\"></p>\n<p>登录后的界面如下所示。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231-3.jpg\" alt=\"\"></p>\n<p>到此，K8S安装gitlab完成。</p>\n<h2 id=\"安装Harbor私有仓库\">安装Harbor私有仓库</h2>\n<p><strong>注意：这里将Harbor私有仓库安装在Master节点（binghe101服务器）上，实际生产环境中建议安装在其他服务器。</strong></p>\n<h3 id=\"1-下载Harbor的离线安装版本\">1.下载Harbor的离线安装版本</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://github.com/goharbor/harbor/releases/download/v1.10.2/harbor-offline-installer-v1.10.2.tgz\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2-解压Harbor的安装包\">2.解压Harbor的安装包</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> -zxvf harbor-offline-installer-v1.10.2.tgz\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>解压成功后，会在服务器当前目录生成一个harbor目录。</p>\n<h3 id=\"3-配置Harbor\">3.配置Harbor</h3>\n<p><strong>注意：这里，我将Harbor的端口修改成了1180，如果不修改Harbor的端口，默认的端口是80。</strong></p>\n<p><strong>（1）修改harbor.yml文件</strong></p>\n<p>修改的配置项如下所示。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> 192.168.175.101\n<span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1180</span>\n<span class=\"token key atrule\">harbor_admin_password</span><span class=\"token punctuation\">:</span> binghe123\n<span class=\"token comment\">###并把https注释掉，不然在安装的时候会报错：ERROR:root:Error: The protocol is https but attribute ssl_cert is not set</span>\n<span class=\"token comment\">#https:</span>\n  <span class=\"token comment\">#port: 443</span>\n  <span class=\"token comment\">#certificate: /your/certificate/path</span>\n  <span class=\"token comment\">#private_key: /your/private/key/path</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>（2）修改daemon.json文件</strong></p>\n<p>修改/etc/docker/daemon.json文件，没有的话就创建，在/etc/docker/daemon.json文件中添加如下内容。</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>root@binghe~<span class=\"token punctuation\">]</span># cat /etc/docker/daemon.json\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"registry-mirrors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"https://zz3sblpi.mirror.aliyuncs.com\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"insecure-registries\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"192.168.175.101:1180\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>也可以在服务器上使用 <strong>ip addr</strong> 命令查看本机所有的IP地址段，将其配置到/etc/docker/daemon.json文件中。这里，我配置后的文件内容如下所示。</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"registry-mirrors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"https://zz3sblpi.mirror.aliyuncs.com\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"insecure-registries\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"192.168.175.0/16\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"172.17.0.0/16\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"172.18.0.0/16\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"172.16.29.0/16\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"192.168.175.101:1180\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"4-安装并启动harbor\">4.安装并启动harbor</h3>\n<p>配置完成后，输入如下命令即可安装并启动Harbor</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@binghe harbor<span class=\"token punctuation\">]</span><span class=\"token comment\"># ./install.sh </span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"5-登录Harbor并添加账户\">5.登录Harbor并添加账户</h3>\n<p>安装成功后，在浏览器地址栏输入http://192.168.175.101:1180打开链接，如下图所示。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231-4.jpg\" alt=\"\"></p>\n<p>输入用户名admin和密码binghe123，登录系统，如下图所示</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231-5.jpg\" alt=\"\"></p>\n<p>接下来，我们选择用户管理，添加一个管理员账户，为后续打包Docker镜像和上传Docker镜像做准备。添加账户的步骤如下所示。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231-6.jpg\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231-7.jpg\" alt=\"\"></p>\n<p>此处填写的密码为Binghe123。</p>\n<p>点击确定后，如下所示。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231-8.jpg\" alt=\"\"></p>\n<p>此时，账户binghe还不是管理员，此时选中binghe账户，点击“设置为管理员”。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231-9.jpg\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231-10.jpg\" alt=\"\"></p>\n<p>此时，binghe账户就被设置为管理员了。到此，Harbor的安装就完成了。</p>\n<h3 id=\"6-修改Harbor端口\">6.修改Harbor端口</h3>\n<p><strong>如果安装Harbor后，大家需要修改Harbor的端口，可以按照如下步骤修改Harbor的端口，这里，我以将80端口修改为1180端口为例</strong></p>\n<p><strong>（1）修改harbor.yml文件</strong></p>\n<p>修改的配置项如下所示。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> 192.168.175.101\n<span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1180</span>\n<span class=\"token key atrule\">harbor_admin_password</span><span class=\"token punctuation\">:</span> binghe123\n<span class=\"token comment\">###并把https注释掉，不然在安装的时候会报错：ERROR:root:Error: The protocol is https but attribute ssl_cert is not set</span>\n<span class=\"token comment\">#https:</span>\n  <span class=\"token comment\">#port: 443</span>\n  <span class=\"token comment\">#certificate: /your/certificate/path</span>\n  <span class=\"token comment\">#private_key: /your/private/key/path</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>（2）修改docker-compose.yml文件</strong></p>\n<p>修改的配置项如下所示。</p>\n<p><strong>（3）修改config.yml文件</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> common/config/registry\n<span class=\"token function\">vim</span> config.yml\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>修改的配置项如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">realm: http://192.168.175.101:1180/service/token\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>（4）重启Docker</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl daemon-reload\nsystemctl restart docker.service\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>（5）重启Harbor</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@binghe harbor<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker-compose down</span>\nStopping harbor-log <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving nginx             <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving harbor-portal     <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving harbor-jobservice <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving harbor-core       <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving redis             <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving registry          <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving registryctl       <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving harbor-db         <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving harbor-log        <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving network harbor_harbor\n \n<span class=\"token punctuation\">[</span>root@binghe harbor<span class=\"token punctuation\">]</span><span class=\"token comment\"># ./prepare</span>\nprepare base <span class=\"token function\">dir</span> is <span class=\"token builtin class-name\">set</span> to /mnt/harbor\nClearing the configuration file: /config/log/logrotate.conf\nClearing the configuration file: /config/nginx/nginx.conf\nClearing the configuration file: /config/core/env\nClearing the configuration file: /config/core/app.conf\nClearing the configuration file: /config/registry/root.crt\nClearing the configuration file: /config/registry/config.yml\nClearing the configuration file: /config/registryctl/env\nClearing the configuration file: /config/registryctl/config.yml\nClearing the configuration file: /config/db/env\nClearing the configuration file: /config/jobservice/env\nClearing the configuration file: /config/jobservice/config.yml\nGenerated configuration file: /config/log/logrotate.conf\nGenerated configuration file: /config/nginx/nginx.conf\nGenerated configuration file: /config/core/env\nGenerated configuration file: /config/core/app.conf\nGenerated configuration file: /config/registry/config.yml\nGenerated configuration file: /config/registryctl/env\nGenerated configuration file: /config/db/env\nGenerated configuration file: /config/jobservice/env\nGenerated configuration file: /config/jobservice/config.yml\nloaded secret from file: /secret/keys/secretkey\nGenerated configuration file: /compose_location/docker-compose.yml\nClean up the input <span class=\"token function\">dir</span>\n \n<span class=\"token punctuation\">[</span>root@binghe harbor<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker-compose up -d</span>\nCreating network <span class=\"token string\">\"harbor_harbor\"</span> with the default driver\nCreating harbor-log <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nCreating harbor-db   <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nCreating redis       <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nCreating registry    <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nCreating registryctl <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nCreating harbor-core <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nCreating harbor-jobservice <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nCreating harbor-portal     <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nCreating nginx             <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\n \n<span class=\"token punctuation\">[</span>root@binghe harbor<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker ps -a</span>\nCONTAINER ID        IMAGE                                               COMMAND                  CREATED             STATUS                             PORTS\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"安装Jenkins（一般的做法）\">安装Jenkins（一般的做法）</h2>\n<h3 id=\"1-安装nfs（之前安装过的话，可以省略此步）\">1.安装nfs（之前安装过的话，可以省略此步）</h3>\n<p>使用 nfs 最大的问题就是写权限，可以使用 kubernetes 的 securityContext/runAsUser 指定 jenkins 容器中运行 jenkins 的用户 uid，以此来指定 nfs 目录的权限，让 jenkins 容器可写；也可以不限制，让所有用户都可以写。这里为了简单，就让所有用户可写了。</p>\n<p>如果之前已经安装过nfs，则这一步可以省略。找一台主机，安装 nfs，这里，我以在Master节点（binghe101服务器）上安装nfs为例。</p>\n<p>在命令行输入如下命令安装并启动nfs。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> nfs-utils -y\nsystemctl start nfs-server\nsystemctl <span class=\"token builtin class-name\">enable</span> nfs-server\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-创建nfs共享目录\">2.创建nfs共享目录</h3>\n<p>在Master节点（binghe101服务器）上创建 <code>/opt/nfs/jenkins-data</code>目录作为nfs的共享目录，如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> -p /opt/nfs/jenkins-data\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接下来，编辑/etc/exports文件，如下所示。</p>\n<p>在/etc/exports文件文件中添加如下一行配置。</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">/opt/nfs/jenkins-data 192.168.175.0/24(rw,all_squash)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这里的 ip 使用 kubernetes node 节点的 ip 范围，后面的 <code>all_squash</code> 选项会将所有访问的用户都映射成 nfsnobody 用户，不管你是什么用户访问，最终都会压缩成 nfsnobody，所以只要将 <code>/opt/nfs/jenkins-data</code> 的属主改为 nfsnobody，那么无论什么用户来访问都具有写权限。</p>\n<p>这个选项在很多机器上由于用户 uid 不规范导致启动进程的用户不同，但是同时要对一个共享目录具有写权限时很有效。</p>\n<p>接下来，为 <code>/opt/nfs/jenkins-data</code>目录授权，并重新加载nfs，如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chown</span> -R <span class=\"token number\">1000</span> /opt/nfs/jenkins-data/\nsystemctl reload nfs-server\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>在K8S集群中任意一个节点上使用如下命令进行验证：</p>\n<p>如果能够看到 /opt/nfs/jenkins-data 就表示 ok 了。</p>\n<p>具体如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@binghe101 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># showmount -e 192.168.175.101</span>\nExport list <span class=\"token keyword\">for</span> <span class=\"token number\">192.168</span>.175.101:\n/opt/nfs/jenkins-data <span class=\"token number\">192.168</span>.175.0/24\n\n<span class=\"token punctuation\">[</span>root@binghe102 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># showmount -e 192.168.175.101</span>\nExport list <span class=\"token keyword\">for</span> <span class=\"token number\">192.168</span>.175.101:\n/opt/nfs/jenkins-data <span class=\"token number\">192.168</span>.175.0/24\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3-创建PV\">3.创建PV</h3>\n<p>Jenkins 其实只要加载对应的目录就可以读取之前的数据，但是由于 deployment 无法定义存储卷，因此我们只能使用 StatefulSet。</p>\n<p>首先创建 pv，pv 是给 StatefulSet 使用的，每次 StatefulSet 启动都会通过 volumeClaimTemplates 这个模板去创建 pvc，因此必须得有 pv，才能供 pvc 绑定。</p>\n<p>创建jenkins-pv.yaml文件，文件内容如下所示。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolume\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jenkins\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">nfs</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /opt/nfs/jenkins<span class=\"token punctuation\">-</span>data\n    <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span> 192.168.175.101\n  <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ReadWriteOnce\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">capacity</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 1Ti\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我这里给了 1T存储空间，可以根据实际配置。</p>\n<p>执行如下命令创建pv。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply -f jenkins-pv.yaml \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"4-创建serviceAccount\">4.创建serviceAccount</h3>\n<p>创建service account，因为 jenkins 后面需要能够动态创建 slave，因此它必须具备一些权限。</p>\n<p>创建jenkins-service-account.yaml文件，文件内容如下所示。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ServiceAccount\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jenkins\n\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Role\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io/v1beta1\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jenkins\n<span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"pods\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"create\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"delete\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"list\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"patch\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"update\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"watch\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"pods/exec\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"create\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"delete\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"list\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"patch\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"update\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"watch\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"pods/log\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"list\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"watch\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"secrets\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io/v1beta1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> RoleBinding\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jenkins\n<span class=\"token key atrule\">roleRef</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">apiGroup</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io\n  <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Role\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jenkins\n<span class=\"token key atrule\">subjects</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ServiceAccount\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jenkins\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上述配置中，创建了一个 RoleBinding 和一个 ServiceAccount，并且将 RoleBinding 的权限绑定到这个用户上。所以，jenkins 容器必须使用这个 ServiceAccount 运行才行，不然 RoleBinding 的权限它将不具备。</p>\n<p>RoleBinding 的权限很容易就看懂了，因为 jenkins 需要创建和删除 slave，所以才需要上面这些权限。至于 secrets 权限，则是 https 证书。</p>\n<p>执行如下命令创建serviceAccount。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply -f jenkins-service-account.yaml \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"5-安装Jenkins\">5.安装Jenkins</h3>\n<p>创建jenkins-statefulset.yaml文件，文件内容如下所示。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> StatefulSet\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jenkins\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jenkins\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jenkins\n  <span class=\"token key atrule\">serviceName</span><span class=\"token punctuation\">:</span> jenkins\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token key atrule\">updateStrategy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> RollingUpdate\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jenkins\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jenkins\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">terminationGracePeriodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n      <span class=\"token key atrule\">serviceAccountName</span><span class=\"token punctuation\">:</span> jenkins\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jenkins\n          <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> docker.io/jenkins/jenkins<span class=\"token punctuation\">:</span>lts\n          <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> IfNotPresent\n          <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">32100</span>\n          <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">limits</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">cpu</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span>\n              <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> 4Gi\n            <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">cpu</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span>\n              <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> 4Gi\n          <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> LIMITS_MEMORY\n              <span class=\"token key atrule\">valueFrom</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">resourceFieldRef</span><span class=\"token punctuation\">:</span>\n                  <span class=\"token key atrule\">resource</span><span class=\"token punctuation\">:</span> limits.memory\n                  <span class=\"token key atrule\">divisor</span><span class=\"token punctuation\">:</span> 1Mi\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> JAVA_OPTS\n              \n              <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">-</span>Xmx$(LIMITS_MEMORY)m <span class=\"token punctuation\">-</span>XshowSettings<span class=\"token punctuation\">:</span>vm <span class=\"token punctuation\">-</span>Dhudson.slaves.NodeProvisioner.initialDelay=0 <span class=\"token punctuation\">-</span>Dhudson.slaves.NodeProvisioner.MARGIN=50 <span class=\"token punctuation\">-</span>Dhudson.slaves.NodeProvisioner.MARGIN0=0.85\n          <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jenkins<span class=\"token punctuation\">-</span>home\n              <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /var/jenkins_home\n          <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /login\n              <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n            <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span>\n            <span class=\"token key atrule\">timeoutSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n            <span class=\"token key atrule\">failureThreshold</span><span class=\"token punctuation\">:</span> <span class=\"token number\">12</span> \n          <span class=\"token key atrule\">readinessProbe</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /login\n              <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n            <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span>\n            <span class=\"token key atrule\">timeoutSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n            <span class=\"token key atrule\">failureThreshold</span><span class=\"token punctuation\">:</span> <span class=\"token number\">12</span> \n  \n  <span class=\"token key atrule\">volumeClaimTemplates</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jenkins<span class=\"token punctuation\">-</span>home\n      <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ReadWriteOnce\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 1Ti\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>jenkins 部署时需要注意它的副本数，你的副本数有多少就要有多少个 pv，同样，存储会有多倍消耗。这里我只使用了一个副本，因此前面也只创建了一个 pv。</p>\n<p>使用如下命令安装Jenkins。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply -f jenkins-statefulset.yaml \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"6-创建Service\">6.创建Service</h3>\n<p>创建jenkins-service.yaml文件，文件内容如下所示。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jenkins\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  \n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jenkins\n  \n  \n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http\n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n      <span class=\"token key atrule\">nodePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">31888</span>\n      <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n      <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jenkins<span class=\"token punctuation\">-</span>agent\n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">32100</span>\n      <span class=\"token key atrule\">nodePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">32100</span>\n      <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">32100</span>\n      <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> NodePort\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>使用如下命令安装Service。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply -f jenkins-service.yaml \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"7-安装-ingress\">7.安装 ingress</h3>\n<p>jenkins 的 web 界面需要从集群外访问，这里我们选择的是使用 ingress。创建jenkins-ingress.yaml文件，文件内容如下所示。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> extensions/v1beta1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Ingress\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jenkins\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /\n            <span class=\"token key atrule\">backend</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">serviceName</span><span class=\"token punctuation\">:</span> jenkins\n              <span class=\"token key atrule\">servicePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">31888</span>\n      <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> jekins.binghe.com\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>这里，需要注意的是host必须配置为域名或者主机名，否则会报错，如下所示。</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">The Ingress <span class=\"token string\">\"jenkins\"</span> is invalid: spec.rules<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.host: Invalid value: <span class=\"token string\">\"192.168.175.101\"</span><span class=\"token builtin class-name\">:</span> must be a DNS name, not an IP address\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>使用如下命令安装ingress。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply -f jenkins-ingress.yaml \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>最后，由于我这里使用的是虚拟机来搭建相关的环境，在本机访问虚拟机映射的jekins.binghe.com时，需要配置本机的hosts文件，在本机的hosts文件中加入如下配置项。</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">192.168.175.101 jekins.binghe.com\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>注意：在Windows操作系统中，hosts文件所在的目录如下。</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">C:\\Windows\\System32\\drivers\\etc\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接下来，就可以在浏览器中通过链接：<a href=\"https://jekins.binghe.com/31888\">http://jekins.binghe.com:31888</a> 来访问Jekins了。</p>\n<h2 id=\"物理机安装SVN\">物理机安装SVN</h2>\n<p>这里，以在Master节点（binghe101服务器）上安装SVN为例。</p>\n<h3 id=\"1-使用yum安装SVN\">1.使用yum安装SVN</h3>\n<p>在命令行执行如下命令安装SVN。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum -y <span class=\"token function\">install</span> subversion \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2-创建SVN库\">2.创建SVN库</h3>\n<p>依次执行如下命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#创建/data/svn</span>\n<span class=\"token function\">mkdir</span> -p /data/svn \n<span class=\"token comment\">#初始化svn</span>\nsvnserve -d -r /data/svn\n<span class=\"token comment\">#创建代码仓库</span>\nsvnadmin create /data/svn/test\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3-配置SVN\">3.配置SVN</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> /data/svn/conf\n<span class=\"token function\">cp</span> /data/svn/test/conf/* /data/svn/conf/\n<span class=\"token builtin class-name\">cd</span> /data/svn/conf/\n<span class=\"token punctuation\">[</span>root@binghe101 conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># ll</span>\n总用量 <span class=\"token number\">20</span>\n-rw-r--r-- <span class=\"token number\">1</span> root root <span class=\"token number\">1080</span> <span class=\"token number\">5</span>月  <span class=\"token number\">12</span> 02:17 authz\n-rw-r--r-- <span class=\"token number\">1</span> root root  <span class=\"token number\">885</span> <span class=\"token number\">5</span>月  <span class=\"token number\">12</span> 02:17 hooks-env.tmpl\n-rw-r--r-- <span class=\"token number\">1</span> root root  <span class=\"token number\">309</span> <span class=\"token number\">5</span>月  <span class=\"token number\">12</span> 02:17 <span class=\"token function\">passwd</span>\n-rw-r--r-- <span class=\"token number\">1</span> root root <span class=\"token number\">4375</span> <span class=\"token number\">5</span>月  <span class=\"token number\">12</span> 02:17 svnserve.conf\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>配置authz文件，</li>\n</ul>\n<p>配置后的内容如下所示。</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">aliases</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token comment\"># joe = /C=XZ/ST=Dessert/L=Snake City/O=Snake Oil, Ltd./OU=Research Institute/CN=Joe Average</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">groups</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token comment\"># harry_and_sally = harry,sally</span>\n<span class=\"token comment\"># harry_sally_and_joe = harry,sally,&amp;joe</span>\n<span class=\"token key attr-name\">SuperAdmin</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">admin</span>\n<span class=\"token key attr-name\">binghe</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">admin,binghe</span>\n\n<span class=\"token comment\"># [/foo/bar]</span>\n<span class=\"token comment\"># harry = rw</span>\n<span class=\"token comment\"># &amp;joe = r</span>\n<span class=\"token comment\"># * =</span>\n\n<span class=\"token comment\"># [repository:/baz/fuz]</span>\n<span class=\"token comment\"># @harry_and_sally = rw</span>\n<span class=\"token comment\"># * = r</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">test:/</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">@SuperAdmin</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">rw</span>\n<span class=\"token key attr-name\">@binghe</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">rw</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>配置passwd文件</li>\n</ul>\n<p>配置后的内容如下所示。</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">users</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token comment\"># harry = harryssecret</span>\n<span class=\"token comment\"># sally = sallyssecret</span>\n<span class=\"token key attr-name\">admin</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">admin123</span>\n<span class=\"token key attr-name\">binghe</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">binghe123</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>配置 svnserve.conf</li>\n</ul>\n<p>配置后的文件如下所示。</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token comment\">### This file controls the configuration of the svnserve daemon, if you</span>\n<span class=\"token comment\">### use it to allow access to this repository.  (If you only allow</span>\n<span class=\"token comment\">### access through http: and/or file: URLs, then this file is</span>\n<span class=\"token comment\">### irrelevant.)</span>\n\n<span class=\"token comment\">### Visit http://subversion.apache.org/ for more information.</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">general</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token comment\">### The anon-access and auth-access options control access to the</span>\n<span class=\"token comment\">### repository for unauthenticated (a.k.a. anonymous) users and</span>\n<span class=\"token comment\">### authenticated users, respectively.</span>\n<span class=\"token comment\">### Valid values are \"write\", \"read\", and \"none\".</span>\n<span class=\"token comment\">### Setting the value to \"none\" prohibits both reading and writing;</span>\n<span class=\"token comment\">### \"read\" allows read-only access, and \"write\" allows complete </span>\n<span class=\"token comment\">### read/write access to the repository.</span>\n<span class=\"token comment\">### The sample settings below are the defaults and specify that anonymous</span>\n<span class=\"token comment\">### users have read-only access to the repository, while authenticated</span>\n<span class=\"token comment\">### users have read and write access to the repository.</span>\n<span class=\"token key attr-name\">anon-access</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">none</span>\n<span class=\"token key attr-name\">auth-access</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">write</span>\n<span class=\"token comment\">### The password-db option controls the location of the password</span>\n<span class=\"token comment\">### database file.  Unless you specify a path starting with a /,</span>\n<span class=\"token comment\">### the file's location is relative to the directory containing</span>\n<span class=\"token comment\">### this configuration file.</span>\n<span class=\"token comment\">### If SASL is enabled (see below), this file will NOT be used.</span>\n<span class=\"token comment\">### Uncomment the line below to use the default password file.</span>\n<span class=\"token key attr-name\">password-db</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">/data/svn/conf/passwd</span>\n<span class=\"token comment\">### The authz-db option controls the location of the authorization</span>\n<span class=\"token comment\">### rules for path-based access control.  Unless you specify a path</span>\n<span class=\"token comment\">### starting with a /, the file's location is relative to the</span>\n<span class=\"token comment\">### directory containing this file.  The specified path may be a</span>\n<span class=\"token comment\">### repository relative URL (^/) or an absolute file:// URL to a text</span>\n<span class=\"token comment\">### file in a Subversion repository.  If you don't specify an authz-db,</span>\n<span class=\"token comment\">### no path-based access control is done.</span>\n<span class=\"token comment\">### Uncomment the line below to use the default authorization file.</span>\n<span class=\"token key attr-name\">authz-db</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">/data/svn/conf/authz</span>\n<span class=\"token comment\">### The groups-db option controls the location of the file with the</span>\n<span class=\"token comment\">### group definitions and allows maintaining groups separately from the</span>\n<span class=\"token comment\">### authorization rules.  The groups-db file is of the same format as the</span>\n<span class=\"token comment\">### authz-db file and should contain a single [groups] section with the</span>\n<span class=\"token comment\">### group definitions.  If the option is enabled, the authz-db file cannot</span>\n<span class=\"token comment\">### contain a [groups] section.  Unless you specify a path starting with</span>\n<span class=\"token comment\">### a /, the file's location is relative to the directory containing this</span>\n<span class=\"token comment\">### file.  The specified path may be a repository relative URL (^/) or an</span>\n<span class=\"token comment\">### absolute file:// URL to a text file in a Subversion repository.</span>\n<span class=\"token comment\">### This option is not being used by default.</span>\n<span class=\"token comment\"># groups-db = groups</span>\n<span class=\"token comment\">### This option specifies the authentication realm of the repository.</span>\n<span class=\"token comment\">### If two repositories have the same authentication realm, they should</span>\n<span class=\"token comment\">### have the same password database, and vice versa.  The default realm</span>\n<span class=\"token comment\">### is repository's uuid.</span>\n<span class=\"token key attr-name\">realm</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">svn</span>\n<span class=\"token comment\">### The force-username-case option causes svnserve to case-normalize</span>\n<span class=\"token comment\">### usernames before comparing them against the authorization rules in the</span>\n<span class=\"token comment\">### authz-db file configured above.  Valid values are \"upper\" (to upper-</span>\n<span class=\"token comment\">### case the usernames), \"lower\" (to lowercase the usernames), and</span>\n<span class=\"token comment\">### \"none\" (to compare usernames as-is without case conversion, which</span>\n<span class=\"token comment\">### is the default behavior).</span>\n<span class=\"token comment\"># force-username-case = none</span>\n<span class=\"token comment\">### The hooks-env options specifies a path to the hook script environment </span>\n<span class=\"token comment\">### configuration file. This option overrides the per-repository default</span>\n<span class=\"token comment\">### and can be used to configure the hook script environment for multiple </span>\n<span class=\"token comment\">### repositories in a single file, if an absolute path is specified.</span>\n<span class=\"token comment\">### Unless you specify an absolute path, the file's location is relative</span>\n<span class=\"token comment\">### to the directory containing this file.</span>\n<span class=\"token comment\"># hooks-env = hooks-env</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">sasl</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token comment\">### This option specifies whether you want to use the Cyrus SASL</span>\n<span class=\"token comment\">### library for authentication. Default is false.</span>\n<span class=\"token comment\">### Enabling this option requires svnserve to have been built with Cyrus</span>\n<span class=\"token comment\">### SASL support; to check, run 'svnserve --version' and look for a line</span>\n<span class=\"token comment\">### reading 'Cyrus SASL authentication is available.'</span>\n<span class=\"token comment\"># use-sasl = true</span>\n<span class=\"token comment\">### These options specify the desired strength of the security layer</span>\n<span class=\"token comment\">### that you want SASL to provide. 0 means no encryption, 1 means</span>\n<span class=\"token comment\">### integrity-checking only, values larger than 1 are correlated</span>\n<span class=\"token comment\">### to the effective key length for encryption (e.g. 128 means 128-bit</span>\n<span class=\"token comment\">### encryption). The values below are the defaults.</span>\n<span class=\"token comment\"># min-encryption = 0</span>\n<span class=\"token comment\"># max-encryption = 256</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接下来，将/data/svn/conf目录下的svnserve.conf文件复制到/data/svn/test/conf/目录下。如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@binghe101 conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp /data/svn/conf/svnserve.conf /data/svn/test/conf/</span>\ncp：是否覆盖<span class=\"token string\">'/data/svn/test/conf/svnserve.conf'</span>？ y\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"4-启动SVN服务\">4.启动SVN服务</h3>\n<p><strong>（1）创建svnserve.service服务</strong></p>\n<p>创建svnserve.service文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> /usr/lib/systemd/system/svnserve.service\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>文件的内容如下所示。</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">Unit</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">Description</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">Subversion protocol daemon</span>\n<span class=\"token key attr-name\">After</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">syslog.target network.target</span>\n<span class=\"token key attr-name\">Documentation</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">man:svnserve(8)</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">Service</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">Type</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">forking</span>\n<span class=\"token key attr-name\">EnvironmentFile</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/etc/sysconfig/svnserve</span>\n<span class=\"token comment\">#ExecStart=/usr/bin/svnserve --daemon --pid-file=/run/svnserve/svnserve.pid $OPTIONS</span>\n<span class=\"token key attr-name\">ExecStart</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/usr/bin/svnserve --daemon $OPTIONS</span>\n<span class=\"token key attr-name\">PrivateTmp</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">yes</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">Install</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">WantedBy</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">multi-user.target</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接下来执行如下命令使配置生效。</p>\n<p>命令执行成功后，修改 /etc/sysconfig/svnserve 文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> /etc/sysconfig/svnserve \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>修改后的文件内容如下所示。</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token comment\"># OPTIONS is used to pass command-line arguments to svnserve.</span>\n<span class=\"token comment\"># </span>\n<span class=\"token comment\"># Specify the repository location in -r parameter:</span>\n<span class=\"token key attr-name\">OPTIONS</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"<span class=\"token inner-value\">-r /data/svn</span>\"</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>（2）启动SVN</strong></p>\n<p>首先查看SVN状态，如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@itence10 conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl status svnserve.service</span>\n● svnserve.service - Subversion protocol daemon\n   Loaded: loaded <span class=\"token punctuation\">(</span>/usr/lib/systemd/system/svnserve.service<span class=\"token punctuation\">;</span> disabled<span class=\"token punctuation\">;</span> vendor preset: disabled<span class=\"token punctuation\">)</span>\n   Active: inactive <span class=\"token punctuation\">(</span>dead<span class=\"token punctuation\">)</span>\n     Docs: man:svnserve<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到，此时SVN并没有启动，接下来，需要启动SVN。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl start svnserve.service\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>设置SVN服务开机自启动。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl <span class=\"token builtin class-name\">enable</span> svnserve.service\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接下来，就可以下载安装TortoiseSVN，输入链接<a href=\"svn://192.168.0.10/test\">svn://192.168.0.10/test</a> 并输入用户名binghe，密码binghe123来连接SVN了。</p>\n<h2 id=\"物理机安装Jenkins\">物理机安装Jenkins</h2>\n<p><strong>注意：安装Jenkins之前需要安装JDK和Maven，我这里同样将Jenkins安装在Master节点（binghe101服务器）。</strong></p>\n<h3 id=\"1-启用Jenkins库\">1.启用Jenkins库</h3>\n<p>运行以下命令以下载repo文件并导入GPG密钥：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo\n<span class=\"token function\">rpm</span> --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"2-安装Jenkins\">2.安装Jenkins</h3>\n<p>执行如下命令安装Jenkis。</p>\n<p>接下来，修改Jenkins默认端口，如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> /etc/sysconfig/jenkins\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>修改后的两项配置如下所示。</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">JENKINS_JAVA_CMD</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"<span class=\"token inner-value\">/usr/local/jdk1.8.0_212/bin/java</span>\"</span>\n<span class=\"token key attr-name\">JENKINS_PORT</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"<span class=\"token inner-value\">18080</span>\"</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>此时，已经将Jenkins的端口由8080修改为18080</p>\n<h3 id=\"3-启动Jenkins\">3.启动Jenkins</h3>\n<p>在命令行输入如下命令启动Jenkins。</p>\n<p>配置Jenkins开机自启动。</p>\n<p>查看Jenkins的运行状态。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@itence10 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl status jenkins</span>\n● jenkins.service - LSB: Jenkins Automation Server\n   Loaded: loaded <span class=\"token punctuation\">(</span>/etc/rc.d/init.d/jenkins<span class=\"token punctuation\">;</span> generated<span class=\"token punctuation\">)</span>\n   Active: active <span class=\"token punctuation\">(</span>running<span class=\"token punctuation\">)</span> since Tue <span class=\"token number\">2020</span>-05-12 04:33:40 EDT<span class=\"token punctuation\">;</span> 28s ago\n     Docs: man:systemd-sysv-generator<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n    Tasks: <span class=\"token number\">71</span> <span class=\"token punctuation\">(</span>limit: <span class=\"token number\">26213</span><span class=\"token punctuation\">)</span>\n   Memory: <span class=\"token number\">550</span>.8M\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>说明，Jenkins启动成功。</p>\n<h2 id=\"配置Jenkins运行环境\">配置Jenkins运行环境</h2>\n<h3 id=\"1-登录Jenkins\">1.登录Jenkins</h3>\n<p>首次安装后，需要配置Jenkins的运行环境。首先，在浏览器地址栏访问链接http://192.168.0.10:18080，打开Jenkins界面。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231-11.jpg\" alt=\"\"></p>\n<p>根据提示使用如下命令到服务器上找密码值，如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@binghe101 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat /var/lib/jenkins/secrets/initialAdminPassword</span>\n71af861c2ab948a1b6efc9f7dde90776\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>将密码71af861c2ab948a1b6efc9f7dde90776复制到文本框，点击继续。会跳转到自定义Jenkins页面，如下所示。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231-12.jpg\" alt=\"\"></p>\n<p>这里，可以直接选择“安装推荐的插件”。之后会跳转到一个安装插件的页面，如下所示。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231-13.jpg\" alt=\"\"></p>\n<p>此步骤可能有下载失败的情况，可直接忽略。</p>\n<h3 id=\"2-安装插件\">2.安装插件</h3>\n<p>需要安装的插件</p>\n<ul>\n<li>\n<p>Kubernetes Cli Plugin：该插件可直接在Jenkins中使用kubernetes命令行进行操作。</p>\n</li>\n<li>\n<p>Kubernetes plugin： 使用kubernetes则需要安装该插件</p>\n</li>\n<li>\n<p>Kubernetes Continuous Deploy Plugin：kubernetes部署插件，可根据需要使用</p>\n</li>\n</ul>\n<p>还有更多的插件可供选择，可点击 系统管理-&gt;管理插件进行管理和添加，安装相应的Docker插件、SSH插件、Maven插件。其他的插件可以根据需要进行安装。如下图所示。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231-14.jpg\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231-15.jpg\" alt=\"\"></p>\n<h3 id=\"3-配置Jenkins\">3.配置Jenkins</h3>\n<p><strong>（1）配置JDK和Maven</strong></p>\n<p>在Global Tool Configuration中配置JDK和Maven，如下所示，打开Global Tool Configuration界面。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231-16.jpg\" alt=\"\"></p>\n<p>接下来就开始配置JDK和Maven了。</p>\n<p>由于我在服务器上将Maven安装在/usr/local/maven-3.6.3目录下，所以，需要在“Maven 配置”中进行配置，如下图所示。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231-17.jpg\" alt=\"\"></p>\n<p>接下来，配置JDK，如下所示。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231-18.jpg\" alt=\"\"></p>\n<p><strong>注意：不要勾选“Install automatically”</strong></p>\n<p>接下来，配置Maven，如下所示。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231-19.jpg\" alt=\"\"></p>\n<p><strong>注意：不要勾选“Install automatically”</strong></p>\n<p><strong>（2）配置SSH</strong></p>\n<p>进入Jenkins的Configure System界面配置SSH，如下所示。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231-20.jpg\" alt=\"\"></p>\n<p>找到 SSH remote hosts 进行配置。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231-21.jpg\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231-22.jpg\" alt=\"\"></p>\n<p>配置完成后，点击Check connection按钮，会显示 Successfull connection。如下所示。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1620220416011231-23.jpg\" alt=\"\"></p>\n<p>至此，Jenkins的基本配置就完成了。</p>\n<h2 id=\"Jenkins发布Docker项目到K8s集群\">Jenkins发布Docker项目到K8s集群</h2>\n<h3 id=\"1-调整SpringBoot项目的配置\">1.调整SpringBoot项目的配置</h3>\n<p>实现，SpringBoot项目中启动类所在的模块的pom.xml需要引入打包成Docker镜像的配置，如下所示。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>docker.repostory</span><span class=\"token punctuation\">&gt;</span></span>192.168.0.10:1180<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>docker.repostory</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>docker.registry.name</span><span class=\"token punctuation\">&gt;</span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>docker.registry.name</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>docker.image.tag</span><span class=\"token punctuation\">&gt;</span></span>1.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>docker.image.tag</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>docker.maven.plugin.version</span><span class=\"token punctuation\">&gt;</span></span>1.4.10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>docker.maven.plugin.version</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>finalName</span><span class=\"token punctuation\">&gt;</span></span>test-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>finalName</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">&gt;</span></span>\n            \n            \n            \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.spotify<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>dockerfile-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>${docker.maven.plugin.version}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>executions</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>execution</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">&gt;</span></span>default<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goals</span><span class=\"token punctuation\">&gt;</span></span>\n                        \n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goal</span><span class=\"token punctuation\">&gt;</span></span>build<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goal</span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goal</span><span class=\"token punctuation\">&gt;</span></span>push<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goal</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goals</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>execution</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>executions</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>contextDirectory</span><span class=\"token punctuation\">&gt;</span></span>${project.basedir}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>contextDirectory</span><span class=\"token punctuation\">&gt;</span></span>\n                    \n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>useMavenSettingsForAuth</span><span class=\"token punctuation\">&gt;</span></span>useMavenSettingsForAuth&gt;true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>useMavenSettingsForAuth</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>repository</span><span class=\"token punctuation\">&gt;</span></span>${docker.repostory}/${docker.registry.name}/${project.artifactId}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>repository</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tag</span><span class=\"token punctuation\">&gt;</span></span>${docker.image.tag}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tag</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>buildArgs</span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>JAR_FILE</span><span class=\"token punctuation\">&gt;</span></span>target/${project.build.finalName}.jar<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>JAR_FILE</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>buildArgs</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">&gt;</span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">&gt;</span></span>\n        \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resources</span><span class=\"token punctuation\">&gt;</span></span>\n            \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resource</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>directory</span><span class=\"token punctuation\">&gt;</span></span>src/main/resources<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>directory</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>targetPath</span><span class=\"token punctuation\">&gt;</span></span>${project.build.directory}/classes<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>targetPath</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>includes</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>include</span><span class=\"token punctuation\">&gt;</span></span>**/*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>include</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>includes</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filtering</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filtering</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resource</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resources</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">&gt;</span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接下来，在SpringBoot启动类所在模块的根目录创建Dockerfile，内容示例如下所示。</p>\n<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\"><span class=\"token comment\">#添加依赖环境，前提是将Java8的Docker镜像从官方镜像仓库pull下来，然后上传到自己的Harbor私有仓库中</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> 192.168.0.10:1180/library/java:8</span>\n<span class=\"token comment\">#指定镜像制作作者</span>\n<span class=\"token instruction\"><span class=\"token keyword\">MAINTAINER</span> binghe</span>\n<span class=\"token comment\">#运行目录</span>\n<span class=\"token instruction\"><span class=\"token keyword\">VOLUME</span> /tmp</span>\n<span class=\"token comment\">#将本地的文件拷贝到容器</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ADD</span> target/*jar app.jar</span>\n<span class=\"token comment\">#启动容器后自动执行的命令</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENTRYPOINT</span> [ <span class=\"token string\">\"java\"</span>, <span class=\"token string\">\"-Djava.security.egd=file:/dev/./urandom\"</span>, <span class=\"token string\">\"-jar\"</span>, <span class=\"token string\">\"/app.jar\"</span> ]</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>根据实际情况，自行修改。</p>\n<p><strong>注意：FROM 192.168.0.10:1180/library/java:8的前提是执行如下命令。</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> pull java:8\n<span class=\"token function\">docker</span> tag java:8 <span class=\"token number\">192.168</span>.0.10:1180/library/java:8\n<span class=\"token function\">docker</span> login <span class=\"token number\">192.168</span>.0.10:1180\n<span class=\"token function\">docker</span> push <span class=\"token number\">192.168</span>.0.10:1180/library/java:8\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在SpringBoot启动类所在模块的根目录创建yaml文件，录入叫做test.yaml文件，内容如下所示。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> test<span class=\"token punctuation\">-</span>starter\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> test<span class=\"token punctuation\">-</span>starter\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> test<span class=\"token punctuation\">-</span>starter\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> test<span class=\"token punctuation\">-</span>starter\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> test<span class=\"token punctuation\">-</span>starter\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> 192.168.0.10<span class=\"token punctuation\">:</span>1180/test/test<span class=\"token punctuation\">-</span>starter<span class=\"token punctuation\">:</span>1.0.0\n        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8088</span>\n      <span class=\"token key atrule\">nodeSelector</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">clustertype</span><span class=\"token punctuation\">:</span> node12\n\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> test<span class=\"token punctuation\">-</span>starter\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> test<span class=\"token punctuation\">-</span>starter\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http\n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8088</span>\n      <span class=\"token key atrule\">nodePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30001</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> NodePort\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> test<span class=\"token punctuation\">-</span>starter\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-Jenkins配置发布项目\">2.Jenkins配置发布项目</h3>\n<p>将项目上传到SVN代码库，例如地址为<a href=\"svn://192.168.0.1/test\">svn://192.168.0.10/test</a></p>\n<p>接下来，在Jenkins中配置自动发布。步骤如下所示。</p>\n<p>点击新建Item。</p>\n<p>在描述文本框中输入描述信息，如下所示。</p>\n<p>接下来，配置SVN信息。</p>\n<p><strong>注意：配置GitLab的步骤与SVN相同，不再赘述。</strong></p>\n<p>定位到Jenkins的“构建模块”，使用Execute Shell来构建发布项目到K8S集群。</p>\n<p>执行的命令依次如下所示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#删除本地原有的镜像,不会影响Harbor仓库中的镜像</span>\n<span class=\"token function\">docker</span> rmi <span class=\"token number\">192.168</span>.0.10:1180/test/test-starter:1.0.0\n<span class=\"token comment\">#使用Maven编译、构建Docker镜像，执行完成后本地Docker容器中会重新构建镜像文件</span>\n/usr/local/maven-3.6.3/bin/mvn -f ./pom.xml clean <span class=\"token function\">install</span> -Dmaven.test.skip<span class=\"token operator\">=</span>true\n<span class=\"token comment\">#登录 Harbor仓库</span>\n<span class=\"token function\">docker</span> login <span class=\"token number\">192.168</span>.0.10:1180 -u binghe -p Binghe123\n<span class=\"token comment\">#上传镜像到Harbor仓库</span>\n<span class=\"token function\">docker</span> push <span class=\"token number\">192.168</span>.0.10:1180/test/test-starter:1.0.0\n<span class=\"token comment\">#停止并删除K8S集群中运行的</span>\n/usr/bin/kubectl delete -f test.yaml\n<span class=\"token comment\">#将Docker镜像重新发布到K8S集群</span>\n/usr/bin/kubectl apply -f test.yaml\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>编辑整理 <a href=\"https://www.jianshu.com/u/b1e8818c1241\">冰河团队</a> <a href=\"https://www.jianshu.com/p/86d288ea64c4\">From</a></p>\n<h2 id=\"i-class-fa-solid-fa-school-i-系列教程-19\"><i class=\"fa-solid fa-school\"></i><strong>系列教程</strong></h2>\n<p><a href=\"/atom.xml\"><i class=\"fa-solid fa-square-rss\"></i>全部文章RSS订阅</a></p>\n<h3 id=\"i-class-fa-brands-fa-dev-i-Devops系列-6\"><i class=\"fa-brands fa-dev\"></i><strong>Devops系列</strong></h3>\n<p><a href=\"/categories/devops/atom.xml\"><i class=\"fa-solid fa-square-rss\"></i><strong>Devops 分类 RSS 订阅</strong></a></p>\n<ul>\n<li><a href=\"/posts/ab63eb8f/\">自建全套开源Devops开发系统</a></li>\n<li><a href=\"/posts/d32a07a7/\">Git介绍以及分支模型图解</a></li>\n<li><a href=\"/posts/39563241/\">三万字无坑搭建基于Docker+K8S+GitLab/SVN+Jenkins+Harbor持续集成交付环境</a></li>\n<li><a href=\"/posts/3437994a/\">DevOps系列---【Jenkinsfile+Dockerfile+nginx+vue】</a></li>\n<li><a href=\"/posts/f4c3ad41/\">项目开发管理工具推荐</a></li>\n<li><a href=\"/posts/acc13b70/\">Gitlab的安装及使用教程完全版</a></li>\n<li><a href=\"/posts/d08eb7b/\">Gitlab的安装及使用</a></li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/bilicard.css\" type=\"text/css\">",
            "tags": [
                "gitlab",
                "docker",
                "k8s",
                "harbor"
            ]
        },
        {
            "id": "https://blog.17lai.site/posts/3437994a/",
            "url": "https://blog.17lai.site/posts/3437994a/",
            "title": "DevOps系列---【Jenkinsfile+Dockerfile+nginx+vue】",
            "date_published": "2022-04-15T10:49:37.000Z",
            "content_html": "<h2 id=\"1-前提：一台装好的jenkins\">1.前提：一台装好的jenkins</h2>\n<p>参考:<a href=\"https://www.cnblogs.com/hujunwei/p/13176994.html\">https://www.cnblogs.com/hujunwei/p/13176994.html</a></p>\n<h2 id=\"2-编写Dockerfile，放在项目根目录下\">2.编写Dockerfile，放在项目根目录下</h2>\n<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> nginx</span>\n<span class=\"token comment\">#修改名字、版本、作者</span>\n<span class=\"token instruction\"><span class=\"token keyword\">LABEL</span> name=<span class=\"token string\">\"home-finance-web-dev\"</span> version=<span class=\"token string\">\"1.0.0\"</span> author=<span class=\"token string\">\"hjw\"</span></span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> dist/ /usr/share/nginx/html/</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> nginx/nginx-dev.conf /etc/nginx/nginx.conf</span>\n<span class=\"token instruction\"><span class=\"token keyword\">EXPOSE</span> 80</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-编写Jenkinsfile，放在项目根目录下\">3.编写Jenkinsfile，放在项目根目录下</h2>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">//流水线脚本\npipeline <span class=\"token punctuation\">{</span>\n    agent any\n    environment <span class=\"token punctuation\">{</span>\n        WS = \"$<span class=\"token punctuation\">{</span>WORKSPACE<span class=\"token punctuation\">}</span>\"\n        TOPIC = \"测试\"\n        TITLE = \"标题\"\n        CONTENT = \"具体内容\"\n    <span class=\"token punctuation\">}</span>\n\n    //定义流水线的加工流程\n    stages <span class=\"token punctuation\">{</span>\n        stage('环境检查') <span class=\"token punctuation\">{</span>\n            steps<span class=\"token punctuation\">{</span>\n                sh 'printenv'\n                echo \"正在检测基本信息\"\n                sh 'git <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>version'\n                sh 'docker version'\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        stage('编译') <span class=\"token punctuation\">{</span>\n            //jenkins不配置任何环境的情况下可以兼容任何场景\n            agent <span class=\"token punctuation\">{</span>\n                docker <span class=\"token punctuation\">{</span> image 'node<span class=\"token punctuation\">:</span>14.17.6<span class=\"token punctuation\">-</span>alpine3.13' <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            steps<span class=\"token punctuation\">{</span>\n                sh 'node <span class=\"token punctuation\">-</span>v'\n                sh 'npm <span class=\"token punctuation\">-</span>v'\n                sh 'pwd <span class=\"token important\">&amp;&amp;</span> ls <span class=\"token punctuation\">-</span>alh'\n                sh 'echo \"默认的项目目录<span class=\"token punctuation\">:</span>$<span class=\"token punctuation\">{</span>WS<span class=\"token punctuation\">}</span>\"'\n                //注意<span class=\"token punctuation\">:</span>cd $<span class=\"token punctuation\">{</span>WS<span class=\"token punctuation\">}</span> <span class=\"token important\">&amp;&amp;</span> npm不能分开写，也不能直接用$<span class=\"token punctuation\">{</span>WORKSPACE<span class=\"token punctuation\">}</span>\n                sh 'cd $<span class=\"token punctuation\">{</span>WS<span class=\"token punctuation\">}</span>/fast<span class=\"token punctuation\">-</span>ui <span class=\"token important\">&amp;&amp;</span> npm config set registry=https<span class=\"token punctuation\">:</span>//registry.npm.taobao.org <span class=\"token important\">&amp;&amp;</span> npm install <span class=\"token punctuation\">-</span>g cnpm <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>registry=https<span class=\"token punctuation\">:</span>//registry.npm.taobao.org <span class=\"token important\">&amp;&amp;</span> cnpm install <span class=\"token important\">&amp;&amp;</span> cnpm run build'\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        stage('生成镜像') <span class=\"token punctuation\">{</span>\n            steps<span class=\"token punctuation\">{</span>\n                sh 'pwd <span class=\"token important\">&amp;&amp;</span> ls <span class=\"token punctuation\">-</span>alh'\n                echo '生成镜像'\n                sh 'docker version'\n                sh \"echo 默认的项目目录<span class=\"token punctuation\">:</span>$<span class=\"token punctuation\">{</span>WS<span class=\"token punctuation\">}</span>\"\n                sh 'cd $<span class=\"token punctuation\">{</span>WS<span class=\"token punctuation\">}</span>/fast<span class=\"token punctuation\">-</span>ui <span class=\"token important\">&amp;&amp;</span> docker build <span class=\"token punctuation\">-</span>t home<span class=\"token punctuation\">-</span>finance<span class=\"token punctuation\">-</span>web .'\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        stage('部署') <span class=\"token punctuation\">{</span>\n            steps<span class=\"token punctuation\">{</span>\n                echo '部署<span class=\"token punctuation\">...</span>.'\n                sh 'pwd <span class=\"token important\">&amp;&amp;</span> ls <span class=\"token punctuation\">-</span>alh'\n                sh 'pwd <span class=\"token important\">&amp;&amp;</span> ls <span class=\"token punctuation\">-</span>alh'\n                sh 'docker rm <span class=\"token punctuation\">-</span>f home<span class=\"token punctuation\">-</span>finance<span class=\"token punctuation\">-</span>web'\n                sh 'docker run <span class=\"token punctuation\">-</span>d <span class=\"token punctuation\">-</span>p 8081<span class=\"token punctuation\">:</span>80 <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>restart=always <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>name home<span class=\"token punctuation\">-</span>finance<span class=\"token punctuation\">-</span>web home<span class=\"token punctuation\">-</span>finance<span class=\"token punctuation\">-</span>web'\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-编写nginx-dev-conf-放在项目根目录下的nginx目录下\">4.编写nginx-dev.conf,放在项目根目录下的nginx目录下</h2>\n<pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token directive\"><span class=\"token keyword\">user</span>  nginx</span><span class=\"token punctuation\">;</span>\n<span class=\"token directive\"><span class=\"token keyword\">worker_processes</span>  <span class=\"token number\">1</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token directive\"><span class=\"token keyword\">error_log</span>  /var/log/nginx/error.log warn</span><span class=\"token punctuation\">;</span>\n<span class=\"token directive\"><span class=\"token keyword\">pid</span>        /var/run/nginx.pid</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token directive\"><span class=\"token keyword\">events</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token directive\"><span class=\"token keyword\">worker_connections</span>  <span class=\"token number\">1024</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token directive\"><span class=\"token keyword\">http</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token directive\"><span class=\"token keyword\">include</span>       /etc/nginx/mime.types</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">default_type</span>  application/octet-stream</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token directive\"><span class=\"token keyword\">log_format</span>  main  <span class=\"token string\">'<span class=\"token variable\">$remote_addr</span> - <span class=\"token variable\">$remote_user</span> [<span class=\"token variable\">$time_local]</span> \"<span class=\"token variable\">$request</span>\" '</span>\n                      <span class=\"token string\">'<span class=\"token variable\">$status</span> <span class=\"token variable\">$body_bytes_sent</span> \"<span class=\"token variable\">$http_referer</span>\" '</span>\n                      <span class=\"token string\">'\"<span class=\"token variable\">$http_user_agent</span>\" \"<span class=\"token variable\">$http_x_forwarded_for</span>\"'</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token directive\"><span class=\"token keyword\">access_log</span>  /var/log/nginx/access.log  main</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token directive\"><span class=\"token keyword\">sendfile</span>        <span class=\"token boolean\">on</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">#tcp_nopush     on;</span>\n\n    <span class=\"token directive\"><span class=\"token keyword\">keepalive_timeout</span>  <span class=\"token number\">65</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">#gzip  on;</span>\n\n    <span class=\"token comment\"># include /etc/nginx/conf.d/*.conf;</span>\n\n    <span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token directive\"><span class=\"token keyword\">listen</span>       <span class=\"token number\">80</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">server_name</span>  101.43.159.8</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 服务器地址或绑定域名</span>\n\n        <span class=\"token comment\">#charset koi8-r;</span>\n        <span class=\"token comment\">#access_log  /var/log/nginx/host.access.log  main;</span>\n\n        <span class=\"token comment\"># =========================================================</span>\n        <span class=\"token comment\"># ================== ↓↓↓↓↓↓ start ↓↓↓↓↓↓ ==================</span>\n        <span class=\"token comment\"># =========================================================</span>\n\n        <span class=\"token directive\"><span class=\"token keyword\">location</span> /</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token directive\"><span class=\"token keyword\">root</span>   /usr/share/nginx/html</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">#try_files $uri $uri/ @router;</span>\n            <span class=\"token directive\"><span class=\"token keyword\">index</span>  index.html index.htm</span><span class=\"token punctuation\">;</span>\n            <span class=\"token directive\"><span class=\"token keyword\">try_files</span> <span class=\"token variable\">$uri</span> <span class=\"token variable\">$uri</span>/ /index.html</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 解决页面刷新 404 问题</span>\n            <span class=\"token comment\">#proxy_pass http://zhengqingya.gitee.io; # 代理的ip地址和端口号</span>\n            <span class=\"token comment\">#proxy_connect_timeout 600; #代理的连接超时时间（单位：毫秒）</span>\n            <span class=\"token comment\">#proxy_read_timeout 600; #代理的读取资源超时时间（单位：毫秒）</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\"># =========================================================</span>\n        <span class=\"token comment\"># ================== ↑↑↑↑↑↑ end ↑↑↑↑↑↑ ==================</span>\n        <span class=\"token comment\"># =========================================================</span>\n\n        <span class=\"token comment\">#error_page  404              /404.html;</span>\n\n        <span class=\"token comment\"># redirect server error pages to the static page /50x.html</span>\n        <span class=\"token comment\">#</span>\n        <span class=\"token directive\"><span class=\"token keyword\">error_page</span>   <span class=\"token number\">500</span> <span class=\"token number\">502</span> <span class=\"token number\">503</span> <span class=\"token number\">504</span>  /50x.html</span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">location</span> = /50x.html</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token directive\"><span class=\"token keyword\">root</span>   /usr/share/nginx/html</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>编辑整理 <a href=\"https://www.cnblogs.com/hujunwei/p/15957956.html\">hujunwei</a></p>\n<h2 id=\"i-class-fa-solid-fa-school-i-系列教程-11\"><i class=\"fa-solid fa-school\"></i><strong>系列教程</strong></h2>\n<p><a href=\"/atom.xml\"><i class=\"fa-solid fa-square-rss\"></i>全部文章RSS订阅</a></p>\n<h3 id=\"i-class-fa-brands-fa-dev-i-Devops系列-2\"><i class=\"fa-brands fa-dev\"></i><strong>Devops系列</strong></h3>\n<p><a href=\"/categories/devops/atom.xml\"><i class=\"fa-solid fa-square-rss\"></i><strong>Devops 分类 RSS 订阅</strong></a></p>\n<ul>\n<li><a href=\"/posts/ab63eb8f/\">自建全套开源Devops开发系统</a></li>\n<li><a href=\"/posts/d32a07a7/\">Git介绍以及分支模型图解</a></li>\n<li><a href=\"/posts/39563241/\">三万字无坑搭建基于Docker+K8S+GitLab/SVN+Jenkins+Harbor持续集成交付环境</a></li>\n<li><a href=\"/posts/3437994a/\">DevOps系列---【Jenkinsfile+Dockerfile+nginx+vue】</a></li>\n<li><a href=\"/posts/f4c3ad41/\">项目开发管理工具推荐</a></li>\n<li><a href=\"/posts/acc13b70/\">Gitlab的安装及使用教程完全版</a></li>\n<li><a href=\"/posts/d08eb7b/\">Gitlab的安装及使用</a></li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/bilicard.css\" type=\"text/css\">",
            "tags": [
                "nginx",
                "jenkins",
                "devops"
            ]
        },
        {
            "id": "https://blog.17lai.site/posts/f4c3ad41/",
            "url": "https://blog.17lai.site/posts/f4c3ad41/",
            "title": "项目开发管理工具推荐",
            "date_published": "2022-04-15T10:48:59.000Z",
            "content_html": "<blockquote>\n<p>软件开发是复杂的创造性的劳动，需要依赖大量工具才能完成，因此想要提高软件开发的效率和质量，离不开强大、高效、易用、维护成本低的工具，下面我根据自己的经验，推荐一些好用的工具。</p>\n</blockquote>\n<h2 id=\"即时通讯\">即时通讯</h2>\n<blockquote>\n<p>更推荐自建开源替代。</p>\n</blockquote>\n<p>即时通讯和会议系统是项目开发过程中必不可少的，尤其是远程办公时，会议系统更是不可或缺。企业微信拥有和微信一致的沟通体验，简单易用。企业微信可随时随地发起和参与音视频会议，支持300人同时参会，并为主持人提供了管理功能。发言时还可演示文档或电脑屏幕，支持实时标注演示内容。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1520220415205156.png\" alt=\"gitea\"></p>\n<p>官方网站：<a href=\"https://work.weixin.qq.com/\">https://work.weixin.qq.com/</a></p>\n<h2 id=\"项目管理\">项目管理</h2>\n<p>目前主流的项目管理通常采用敏捷开发的模式，因此项目管理工具也要选择支持敏捷开发模式的工具，不建议使用禅道这样的重流程的工具，不适合敏捷团队，这里我推荐Taiga，它设计简洁，操作简单，充分体现了敏捷开发的理念。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1520220415211820.png\" alt=\"gitea\"></p>\n<p>官方网站：<a href=\"https://taiga.io/\">https://taiga.io</a></p>\n<p>在线体验：<a href=\"https://tree.taiga.io/\">https://tree.taiga.io</a></p>\n<p>体验版服务器在国外，访问可能会有点慢。</p>\n<h2 id=\"代码托管\">代码托管</h2>\n<p>前几年使用的比较多是SVN，近几年基本都使用GIT了，开源项目大都使用Github，虽然免费，但国内访问不稳定，速度慢，因此国内的公司基本都会自己搭建，我先后为公司搭建过两个托管平台，一个是Gitlab，一个是Gitea，Gitlab功能比较全面，但对硬件资源要求比较高，而且性能一般。所以推荐使用另一个开源的git托管平台——Gitea。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1520220415212537.png\" alt=\"gitea\"></p>\n<p>官方网站：<a href=\"https://gitea.io/\">https://gitea.io</a></p>\n<p>在线体验：<a href=\"https://gitea.com/\">https://gitea.com</a></p>\n<h2 id=\"持续交付\">持续交付</h2>\n<p>最知名、使用最广泛的开源的持续集成、交付平台当属Jenkins，主要的优势在于有大量免费的插件可以使用，但实际使用发现，很多插件质量很差，配置项很多，真正想要落地，其实需要自己编写shell脚本。这里我推荐基于docker技术的一款现代化的持续交付平台DroneCI，它使用简单，可以和主流的Git代码托管平台无缝对接，并且不需要编写代码就可以满足大多数持续构建、交付的需求。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1520220415212440.png\" alt=\"gitea\"></p>\n<p>官方网站：<a href=\"https://drone.io/\">https://drone.io</a></p>\n<p>在线体验：<a href=\"https://cloud.drone.io/\">https://cloud.drone.io</a></p>\n<p>体验版服务器在国外，访问可能会有点慢。</p>\n<h2 id=\"制品库-本地仓库\">制品库(本地仓库)</h2>\n<p>Maven 仓库是项目中依赖的第三方库，这个库所在的位置叫做仓库。Maven 仓库能帮助我们管理构件（主要是JAR），它就是放置所有JAR文件（WAR，ZIP，POM等等）的地方。</p>\n<p>后来，除了Maven仓库，还有npm、nuget、pypi、docker等仓库也需要本地仓库。</p>\n<p>市面上可选的通用的本地仓库有：nexus、ARTIFACTORY，ARTIFACTORY是收费的，nexus是免费的，同时nexus以其易用性和可靠性，成为目前市场上最主流的本地仓库。</p>\n<p>官方网站：<a href=\"https://www.sonatype.com/product-nexus-repository\">https://www.sonatype.com/product-nexus-repository</a></p>\n<h2 id=\"文件存储\">文件存储</h2>\n<p>在公司中，文件分享是一个很常用的功能，不同于云盘，他对性能和安全性没有那么高的要求，简单易用才是大家最关心的，这里推荐chfs，chfs是一个免费的、HTTP协议的文件共享服务器，使用浏览器可以快速访问。与其他常用文件共享方式（如FTP，飞秋，网盘，自己建站）相比，具有使用简单，适用场景更多的优点，在个人使用以及共享给他人的场景中非常方便快捷。</p>\n<p>官方网站：<a href=\"http://iscute.cn/chfs\">http://iscute.cn/chfs</a></p>\n<h2 id=\"绘图-流程图、UML、思维导图\">绘图(流程图、UML、思维导图)</h2>\n<p><a href=\"http://draw.io\">draw.io</a> 是一个强大简洁的在线的绘图网站，支持流程图，UML图，架构图，原型图等。支持Github，Google Drive, One drive等网盘同步，并且永久免费。如果觉得使用Web版不方便，<a href=\"http://draw.io\">draw.io</a> 也提供了多平台的离线桌面版可供下载。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1520220415205300.png\" alt=\"img\"></p>\n<p>在线版：<a href=\"https://www.draw.io/\">https://www.draw.io</a></p>\n<p>本地部署版：<a href=\"https://github.com/jgraph/drawio/releases/latest\">https://github.com/jgraph/drawio/releases/latest</a></p>\n<p>PC 安装版：<a href=\"https://github.com/jgraph/drawio-desktop/releases/latest\">https://github.com/jgraph/drawio-desktop/releases/latest</a></p>\n<h2 id=\"接口管理\">接口管理</h2>\n<p>维护不同工具之间数据一致性非常困难、低效。并且这里不仅仅是工作量的问题，更大的问题是多个系统之间数据不一致，导致协作低效、频繁出问题，开发测试人员痛苦不堪。</p>\n<p>Apifox 是接口管理、开发、测试全流程集成工具，定位 Postman + Swagger + Mock + JMeter。通过一套系统、一份数据，解决多个系统之间的数据同步问题。只要定义好接口文档，接口调试、数据 Mock、接口测试就可以直接使用，无需再次定义；接口文档和接口开发调试使用同一个工具，接口调试完成后即可保证和接口文档定义完全一致。高效、及时、准确！</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1520220415205213.svg+xml\" alt=\"gitea\"></p>\n<p>官方网站：<a href=\"https://www.apifox.cn/\">https://www.apifox.cn</a></p>\n<h2 id=\"安全测试\">安全测试</h2>\n<p>在今天，网站的安全是容易被忽视的，黑客具备广泛的攻击手段，例如SQL注入，XSS，文件包含，目录遍历，参数篡改，认证攻击等，虽然你配置了正确的防火墙和WAF，但是这些安全防御软件仍然存在策略性的绕过。因此，需要您定期的扫描你的web应用，但是手动检测你所有的web应用是否存在安全漏洞比较复杂和费时，所以您需要一款自动化的web漏洞扫描工具来检测您的web应用是否存在安全漏洞。</p>\n<p>Acunetix Web Vulnerability Scanner（简称AWVS）是一款知名的Web网络漏洞扫描工具，它通过网络爬虫测试你的网站安全，检测流行安全漏洞。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1520220415205220.svg+xml\" alt=\"awvs\"></p>\n<p>官方网站：<a href=\"https://www.acunetix.com/\">https://www.acunetix.com</a></p>\n<h2 id=\"性能测试\">性能测试</h2>\n<p>Locust是一个用于可扩展的，分布式的，性能测试的，开源的，用Python编写框架/工具，它非常容易使用，也非常好学。</p>\n<p>它的主要思想就是模拟一群用户将访问你的网站。每个用户的行为由你编写的python代码定义，同时可以从Web界面中实时观察到用户的行为。</p>\n<p>Locust完全是事件驱动的，因此在单台机器上能够支持几千并发用户访问。</p>\n<p>与其它许多基于事件的应用相比，Locust并不使用回调，而是使用gevent，而gevent是基于协程的，可以用同步的方式来编写异步执行的代码。</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1520220415205227.png\" alt=\"awvs\"></p>\n<p>官方网站：<a href=\"https://www.locust.io/\">https://www.locust.io</a></p>\n<h2 id=\"代码静态分析平台\">代码静态分析平台</h2>\n<p>SonarQube 是一款用于代码质量管理的开源工具，它主要用于管理源代码的质量。 通过插件形式，可以支持众多计算机语言，比如 java, C#, go，C/C++, PL/SQL, Cobol, JavaScrip, Groovy 等。sonar可以通过PMD,CheckStyle,Findbugs等等代码规则检测工具来检测你的代码，帮助你发现代码的漏洞，Bug，异味等信息。</p>\n<p>Sonar 不仅提供了对 IDE 的支持，可以在 Eclipse和 IntelliJ IDEA 这些工具里联机查看结果；同时 Sonar 还对大量的持续集成工具提供了接口支持，可以很方便地在持续集成中使用 Sonar</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/1520220415205228.svg\" alt=\"awvs\"></p>\n<p>官方网站：<a href=\"https://www.sonarqube.org/\">https://www.sonarqube.org</a></p>\n<h2 id=\"i-class-fa-solid-fa-school-i-系列教程-12\"><i class=\"fa-solid fa-school\"></i><strong>系列教程</strong></h2>\n<p><a href=\"/atom.xml\"><i class=\"fa-solid fa-square-rss\"></i>全部文章RSS订阅</a></p>\n<h3 id=\"i-class-fa-brands-fa-dev-i-Devops系列-3\"><i class=\"fa-brands fa-dev\"></i><strong>Devops系列</strong></h3>\n<p><a href=\"/categories/devops/atom.xml\"><i class=\"fa-solid fa-square-rss\"></i><strong>Devops 分类 RSS 订阅</strong></a></p>\n<ul>\n<li><a href=\"/posts/ab63eb8f/\">自建全套开源Devops开发系统</a></li>\n<li><a href=\"/posts/d32a07a7/\">Git介绍以及分支模型图解</a></li>\n<li><a href=\"/posts/39563241/\">三万字无坑搭建基于Docker+K8S+GitLab/SVN+Jenkins+Harbor持续集成交付环境</a></li>\n<li><a href=\"/posts/3437994a/\">DevOps系列---【Jenkinsfile+Dockerfile+nginx+vue】</a></li>\n<li><a href=\"/posts/f4c3ad41/\">项目开发管理工具推荐</a></li>\n<li><a href=\"/posts/acc13b70/\">Gitlab的安装及使用教程完全版</a></li>\n<li><a href=\"/posts/d08eb7b/\">Gitlab的安装及使用</a></li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/bilicard.css\" type=\"text/css\">",
            "tags": [
                "ci/cd",
                "devops"
            ]
        },
        {
            "id": "https://blog.17lai.site/posts/acc13b70/",
            "url": "https://blog.17lai.site/posts/acc13b70/",
            "title": "Gitlab的安装及使用教程完全版",
            "date_published": "2021-08-02T08:25:00.000Z",
            "content_html": "<h2 id=\"1-Gitlab概述\">1. Gitlab概述</h2>\n<hr>\n<h3 id=\"1-1-GitLab介绍\">1.1 GitLab介绍</h3>\n<p>GitLab是利用Ruby on Rails一个开源的版本管理系统，实现一个自托管的Git项目仓库，可通过Web界面进行访问公开的或者私人项目。</p>\n<p>GitLab能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序(Wall)进行交流。</p>\n<p>它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找</p>\n<h3 id=\"1-2-Gitlab服务构成\">1.2 Gitlab服务构成</h3>\n<p>Nginx：静态web服务器。</p>\n<p>gitlab-shell：用于处理Git命令和修改authorized keys列表。</p>\n<p>gitlab-workhorse: 轻量级的反向代理服务器。</p>\n<p>logrotate：日志文件管理工具。</p>\n<p>postgresql：数据库。</p>\n<p>redis：缓存数据库。</p>\n<p>sidekiq：用于在后台执行队列任务（异步执行）。</p>\n<p>unicorn：An HTTP server for Rack applications，GitLab Rails应用是托管在这个服务器上面的。</p>\n<h3 id=\"1-3-Gitlab工作流程\">1.3 Gitlab工作流程</h3>\n<p><img src=\"https://cimg1.17lai.site/data/2021/05/2820210528222044.png\" alt=\"\"></p>\n<h3 id=\"1-4-GitLab-Shell\">1.4 GitLab Shell</h3>\n<p>GitLab Shell有两个作用：为GitLab处理Git命令、修改authorized keys列表</p>\n<p>当通过SSH访问GitLab Server时，GitLab Shell会：</p>\n<ul>\n<li>限制执行预定义好的Git命令（git push，git pull，git annex）</li>\n<li>调用GitLab Rails API检查权限</li>\n<li>执行pre-receive钩子（在企业版中叫做Git钩子）</li>\n<li>执行用户请求的动作，处理GitLab的post-receive动作</li>\n<li>处理自定义的post-receive动作</li>\n</ul>\n<p>当通过http(s)访问GitLab Server时，工作流程取决于你是从Git仓库拉取(pull)代码还是向git仓库推送(push)代码：</p>\n<p>如果是从Git仓库拉取(pull)代码，GitLab Rails应用会全权负责处理用户鉴权和执行Git命令的工作</p>\n<p>如果是向Git仓库推送(push)代码，GitLab Rails应用既不会进行用户鉴权也不会执行Git命令，它会把以下工作交由GitLab Shell进行处理：</p>\n<ul>\n<li>调用GitLab Rails API 检查权限</li>\n<li>执行pre-receive钩子（在GitLab企业版中叫做Git钩子）</li>\n<li>执行你请求的动作</li>\n<li>处理GitLab的post-receive动作</li>\n<li>处理自定义的post-receive动作</li>\n</ul>\n<h3 id=\"1-5-GitLab-Workhorse\">1.5 GitLab Workhorse</h3>\n<p>GitLab Workhorse是一个敏捷的反向代理。它会处理一些大的HTTP请求，比如文件上传、文件下载、Git push/pull和Git包下载。其它请求会反向代理到GitLab Rails应用，即反向代理给后端的unicorn。</p>\n<h2 id=\"2-Gitlab的安装部署\">2. Gitlab的安装部署</h2>\n<ul>\n<li>Gitlab要求服务器内存2G以上</li>\n</ul>\n<h3 id=\"2-1-方式一-下载gitlab-ce的rpm包\">2.1 方式一:下载gitlab-ce的rpm包</h3>\n<ul>\n<li><a href=\"https://packages.gitlab.com/gitlab/gitlab-ce\">gitlab官方rpm包下载</a></li>\n<li><a href=\"https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/\">清华的源</a></li>\n</ul>\n<p>将对应版本的gitlab-ce下载到本地后，直接yum安装即可</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 要先将这个rpm包下载到本地</span>\nyum <span class=\"token function\">install</span> -y gitlab-ce-13.6.1-ce.0.el7.x86_64.rpm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"2-2-方式二-配置yum源\">2.2 方式二:配置yum源</h3>\n<p>在 /etc/yum.repos.d/ 下新建 gitlab-ce.repo，写入如下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>gitlab-ce<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>gitlab-ce\n<span class=\"token assign-left variable\">baseurl</span><span class=\"token operator\">=</span>https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/\n<span class=\"token assign-left variable\">Repo_gpgcheck</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token assign-left variable\">Enabled</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token assign-left variable\">Gpgkey</span><span class=\"token operator\">=</span>https://packages.gitlab.com/gpg.key<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后创建cache，再直接安装gitlab-ce</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum makecache  <span class=\"token comment\"># 这一步会创建大量的数据</span>\n \n<span class=\"token comment\"># 直接安装最新版</span>\nyum <span class=\"token function\">install</span> -y gitlab-ce\n \n<span class=\"token comment\"># 如果要安装指定的版本，在后面填上版本号即可</span>\nyum <span class=\"token function\">install</span> -y  gitlab-ce-13.6.1\n \n<span class=\"token comment\"># 如果安装时出现gpgkey验证错误，只需在安装时明确指明不进行gpgkey验证</span>\nyum <span class=\"token function\">install</span> gitlab-ce -y --nogpgcheck<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-2-1-单服务启动模式\"><strong>2.2.1. 单服务启动模式</strong></h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run -d --name gitlab --hostname gitlab.example.com <span class=\"token punctuation\">\\</span>\n-e <span class=\"token assign-left variable\">GITLAB_OMNIBUS_CONFIG</span><span class=\"token operator\">=</span><span class=\"token string\">\"\n    external_url 'https://gitlab.example.com'\n    gitlab_rails['gitlab_shell_ssh_port'] = 22\n    nginx['redirect_http_to_https'] = true\n    nginx['ssl_dhparam'] = '/etc/gitlab/ssl/dhparam.pem'\n    nginx['ssl_certificate'] = '/etc/gitlab/ssl/domain.crt'\n    nginx['ssl_certificate_key'] = '/etc/gitlab/ssl/domain.key'\n    nginx['custom_gitlab_server_config'] = 'location ^~ /.well-known {<span class=\"token entity\" title=\"\\n\">\\n</span> alias /var/opt/gitlab/letsencrypt/.well-known;<span class=\"token entity\" title=\"\\n\">\\n</span>}<span class=\"token entity\" title=\"\\n\">\\n</span>'\n    high_availability['mountpoint'] = ['/etc/gitlab', '/var/log/gitlab' '/var/opt/gitlab'  # 严格限定gitlab服务启动前，指定文件系统挂完毕\n\"</span> <span class=\"token punctuation\">\\</span>\n-p <span class=\"token number\">22</span>:22 -p <span class=\"token number\">80</span>:80 -p <span class=\"token number\">443</span>:443 <span class=\"token punctuation\">\\</span>\n-v /srv/gitlab/config:/etc/gitlab <span class=\"token punctuation\">\\</span>\n-v /srv/gitlab/logs:/var/log/gitlab <span class=\"token punctuation\">\\</span>\n-v /srv/gitlab/data:/var/opt/gitlab <span class=\"token punctuation\">\\</span>\n-v /etc/certs:/etc/gitlab/ssl <span class=\"token punctuation\">\\</span>\n--restart<span class=\"token operator\">=</span>always gitlab/gitlab-ce:latest\n <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-2-1-Compose服务编排模式-推荐方式\"><strong>2.2.1. Compose服务编排模式(推荐方式)</strong></h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> pull gitlab/gitlab-ce:latest\n \n<span class=\"token comment\">############################ 多行命令开始 ##########################</span>\n<span class=\"token function\">cat</span> <span class=\"token operator\">&gt;</span> docker-compose.yaml <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF\nversion: '2'\n \nservices:\n \n  Gitlab:\n    image: 'gitlab/gitlab-ce:latest'\n    container_name: 'gitlab'\n    hostname: 'gitlab.example.com'\n    restart: always\n    ports:\n      - '22:22'\n      - '80:80'\n      - '443:443'\n    environment:\n      GITLAB_OMNIBUS_CONFIG: |\n        # Add any other gitlab.rb configuration here, each on its own line\n        external_url 'https://gitlab.example.com'\n        gitlab_rails['gitlab_shell_ssh_port'] = 22\n        nginx['redirect_http_to_https'] = true\n        nginx['ssl_dhparam'] = \"/etc/gitlab/ssl/dhparam.pem\"\n        nginx['ssl_certificate'] = \"/etc/gitlab/ssl/domain.crt\"\n        nginx['ssl_certificate_key'] = \"/etc/gitlab/ssl/domain.key\"\n        nginx['custom_gitlab_server_config'] = \"location ^~ /.well-known {<span class=\"token entity\" title=\"\\n\">\\n</span> alias /var/opt/gitlab/letsencrypt/.well-known;<span class=\"token entity\" title=\"\\n\">\\n</span>}<span class=\"token entity\" title=\"\\n\">\\n</span>\"\n        high_availability['mountpoint'] = [\"/etc/gitlab\", \"/var/log/gitlab\", \"/var/opt/gitlab\"]  # 严格限定gitlab服务启动前，指定文件系统挂完毕\n    volumes:\n      - /srv/gitlab/config:/etc/gitlab\n      - /srv/gitlab/logs:/var/log/gitlab\n      - /srv/gitlab/data:/var/opt/gitlab\n      - /etc/certs:/etc/gitlab/ssl\nEOF</span>\n<span class=\"token comment\">############################ 多行命令结束 ##########################</span>\n \n<span class=\"token comment\"># 启动服务</span>\n<span class=\"token function\">docker-compose</span> -f docker-compose.yaml up -d\n <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-3-gitlab的配置\">2.3 gitlab的配置</h3>\n<p>配置文件位置  /etc/gitlab/gitlab.rb</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@centos7 test<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim /etc/gitlab/gitlab.rb</span>\n \n<span class=\"token punctuation\">[</span>root@centos7 test<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep \"^[a-Z]\" /etc/gitlab/gitlab.rb</span>\n \nexternal_url <span class=\"token string\">'http://10.0.0.51'</span>  <span class=\"token comment\"># 这里一定要加上http://</span>\n \n<span class=\"token comment\"># 配置邮件服务</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_enable'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_address'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"smtp.qq.com\"</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_port'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">25</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_user_name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hgzerowzh@qq.com\"</span>  <span class=\"token comment\"># 自己的qq邮箱账号</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_password'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"xxx\"</span>  <span class=\"token comment\"># 开通smtp时返回的授权码</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_domain'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"qq.com\"</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_authentication'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"login\"</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_enable_starttls_auto'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_tls'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'gitlab_email_from'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hgzerowzh@qq.com\"</span>  <span class=\"token comment\"># 指定发送邮件的邮箱地址</span>\nuser<span class=\"token punctuation\">[</span><span class=\"token string\">\"git_user_email\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"shit@qq.com\"</span>   <span class=\"token comment\"># 指定接收邮件的邮箱地址</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>修改好配置文件后，要使用 gitlab-ctl reconfigure 命令重载一下配置文件，否则不生效。</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gitlab-ctl reconfigure <span class=\"token comment\"># 重载配置文件</span>\ngitlab-ctl restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"测试邮件服务器\">测试邮件服务器</h4>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gitlab-rails console\nNotify.test_email<span class=\"token punctuation\">(</span><span class=\"token string\">'rollinghell@foxmail.com'</span>,<span class=\"token string\">'testbiaoti'</span>,<span class=\"token string\">'testzhegnwen1'</span><span class=\"token punctuation\">)</span>.deliver_now<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@test102 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># gitlab-rails console</span>\n--------------------------------------------------------------------------------\n GitLab:       <span class=\"token number\">12.5</span>.0 <span class=\"token punctuation\">(</span>1f0ab8978ef<span class=\"token punctuation\">)</span>\nGitLab Shell: <span class=\"token number\">10.2</span>.0\n PostgreSQL:   <span class=\"token number\">10.9</span>\n--------------------------------------------------------------------------------\nLoading production environment <span class=\"token punctuation\">(</span>Rails <span class=\"token number\">5.2</span>.3<span class=\"token punctuation\">)</span>\nirb<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>:001:<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>&gt;</span> Notify.test_email<span class=\"token punctuation\">(</span><span class=\"token string\">'andycrusoe@gmail.com'</span>,<span class=\"token string\">'test'</span>,<span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span>.deliver_now\nNotify<span class=\"token comment\">#test_email: processed outbound mail in 1.4ms</span>\nSent mail to anliven@126.com <span class=\"token punctuation\">(</span><span class=\"token number\">73</span>.0ms<span class=\"token punctuation\">)</span>\nDate: Wed, <span class=\"token number\">27</span> Nov <span class=\"token number\">2019</span> <span class=\"token number\">15</span>:12:58 +0800\nFrom: GitLab <span class=\"token operator\">&lt;</span>gitlab@192.168.16.10<span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span>\nReply-To: GitLab <span class=\"token operator\">&lt;</span>noreply@192.168.16.10<span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span>\nTo: anliven@126.com\nMessage-ID: <span class=\"token operator\">&lt;</span>5dde21fa612d4_3a1b3fcb38fcf9c0651b@test102.mail<span class=\"token operator\">&gt;</span>\nSubject: <span class=\"token builtin class-name\">test</span>\nMime-Version: <span class=\"token number\">1.0</span>\nContent-Type: text/html<span class=\"token punctuation\">;</span>\n<span class=\"token assign-left variable\">charset</span><span class=\"token operator\">=</span>UTF-8\nContent-Transfer-Encoding: 7bit\nAuto-Submitted: auto-generated\nX-Auto-Response-Suppress: All\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>DOCTYPE html PUBLIC <span class=\"token string\">\"-//W3C//DTD HTML 4.0 Transitional//EN\"</span> <span class=\"token string\">\"http://www.w3.org/TR/REC-html40/loose.dtd\"</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>test<span class=\"token operator\">&lt;</span>/p<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>/body<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>/html<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token comment\">#&lt;Mail::Message:70141649239780, Multipart: false, Headers: &lt;Date: Wed, 27 Nov 2019 15:12:58 +0800&gt;, &lt;From: GitLab &lt;gitlab@192.168.16.102&gt;&gt;, &lt;Reply-To: GitLab &lt;noreply@192.168.16.102&gt;&gt;, &lt;To: anliven@126.com&gt;, &lt;Message-ID: &lt;5dde21fa612d4_3a1b3fcb38fcf9c0651b@test102.mail&gt;&gt;, &lt;Subject: test&gt;, &lt;Mime-Version: 1.0&gt;, &lt;Content-Type: text/html; charset=UTF-8&gt;, &lt;Content-Transfer-Encoding: 7bit&gt;, &lt;Auto-Submitted: auto-generated&gt;, &lt;X-Auto-Response-Suppress: All&gt;&gt;</span>\nirb<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>:002:<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>&gt;</span>\nirb<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>:003:<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>&gt;</span> <span class=\"token builtin class-name\">exit</span>\n<span class=\"token punctuation\">[</span>root@test102 ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#</span>\n <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"配置gitlab代理\">配置gitlab代理</h4>\n<p><a href=\"https://docs.gitlab.com/omnibus/settings/environment-variables.html\">https://docs.gitlab.com/omnibus/settings/environment-variables.html</a></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gitaly<span class=\"token punctuation\">[</span><span class=\"token string\">'env'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"http_proxy\"</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\"http://USERNAME:PASSWORD@example.com:8080\"</span>,\n    <span class=\"token string\">\"https_proxy\"</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\"http://USERNAME:PASSWORD@example.com:8080\"</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-4-Gitlab常用命令\">2.4 Gitlab常用命令</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gitlab-ctl start         <span class=\"token comment\"># 启动所有 gitlab 组件</span>\ngitlab-ctl stop          <span class=\"token comment\"># 停止所有 gitlab 组件</span>\ngitlab-ctl restart       <span class=\"token comment\"># 重启所有 gitlab 组件</span>\ngitlab-ctl status        <span class=\"token comment\"># 查看服务状态</span>\n \ngitlab-ctl reconfigure   <span class=\"token comment\"># 启动服务</span>\ngitlab-ctl show-config   <span class=\"token comment\"># 验证配置文件</span>\n \ngitlab-ctl <span class=\"token function\">tail</span>          <span class=\"token comment\"># 查看日志</span>\n \ngitlab-rake gitlab:check <span class=\"token assign-left variable\">SANITIZE</span><span class=\"token operator\">=</span>true --trace    <span class=\"token comment\"># 检查gitlab</span>\n \n<span class=\"token function\">vim</span> /etc/gitlab/gitlab.rb <span class=\"token comment\"># 修改默认的配置文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-5-gitlab-ctl常用命令介绍\">2.5 gitlab-ctl常用命令介绍</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">check-config</td>\n<td>检查在gitlab中是否有任何配置。在指定版本中删除的rb</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">deploy-page</td>\n<td>安装部署页面</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">diff-config</td>\n<td>将用户配置与包可用配置进行比较</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">remove-accounts</td>\n<td>删除所有用户和组</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">upgrade</td>\n<td>升级</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">service-list</td>\n<td>查看所有服务</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">once</td>\n<td>如果GitLab服务停止了就启动服务，如果已启动就不做任何操作</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">restart</td>\n<td>重启GitLab服务</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">start</td>\n<td>如果GitLab服务停止了就启动服务，如果已启动就重启服务</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">stop</td>\n<td>停止GitLab服务</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">status</td>\n<td>查看GitLab服务状态</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">reconfigure</td>\n<td>重新配置GitLab并启动</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"3-Gitlab的使用\">3. Gitlab的使用</h2>\n<ul>\n<li>Gitlab安装好后，设置密码，管理账户为root</li>\n</ul>\n<h3 id=\"3-1-创建Group\"><strong>3.1 创建Group</strong></h3>\n<ul>\n<li>填上组名即可，这里组名为java</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/05/2820210528222105.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802164637.png\" alt=\"\"></p>\n<h3 id=\"3-2-创建User\"><strong>3.2 创建User</strong></h3>\n<ul>\n<li>创建四个User：pm、dev1、dev2、dev3</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/05/2820210528222131.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/05/2820210528222120.png\" alt=\"\"></p>\n<h3 id=\"3-3-添加User到Group中并授权\"><strong>3.3 添加User到Group中并授权</strong></h3>\n<p><img src=\"https://cimg1.17lai.site/data/2021/05/2820210528222140.png\" alt=\"\"></p>\n<h3 id=\"3-4-创建Project并配置SSH\"><strong>3.4 创建Project并配置SSH</strong></h3>\n<p><img src=\"https://cimg1.17lai.site/data/2021/05/2820210528222147.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/05/2820210528222154.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/05/2820210528222201.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/05/2820210528222233.png\" alt=\"\"></p>\n<h3 id=\"3-5-在项目中添加成员\"><strong>3.5 在项目中添加成员</strong></h3>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802164730.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802164804.png\" alt=\"\"></p>\n<h3 id=\"3-6-将本地文件推送到Gitlab\">3.6 将本地文件推送到Gitlab</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 将app01项目克隆下来</span>\n<span class=\"token function\">git</span> clone git@10.0.0.51:java/app01.git\n \n<span class=\"token comment\"># 初始化配置</span>\n<span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"hgzero\"</span>\n<span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"hgzero@qq.com\"</span>\n \n<span class=\"token comment\"># 在app01目录下新建一些文件</span>\n \n<span class=\"token comment\"># 推送到gitlab</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"first edition\"</span>\n<span class=\"token function\">git</span> push origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802164823.png\" alt=\"\"></p>\n<h2 id=\"4-制定开发计划\">4. 制定开发计划</h2>\n<h3 id=\"4-1-创建开发计划\"><strong>4.1 创建开发计划</strong></h3>\n<ul>\n<li>项目：app01</li>\n<li>版本：v1.0</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802173643.png\" alt=\"\"></p>\n<h3 id=\"4-2-创建里程碑Milestones\"><strong>4.2 创建里程碑Milestones</strong></h3>\n<ul>\n<li>用pm账号登录gitlab后操作（先要在admin中设置pm账号的密码）</li>\n<li>要根据开发计划来创建Milestones</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802164839.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802164935.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802164956.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802165053.png\" alt=\"\"></p>\n<h3 id=\"4-3-根据开发计划创建issue\">4.3 根据开发计划创建issue</h3>\n<ul>\n<li>创建4个issue，分派给dev1和dev2这两个开发人员</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802165109.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802165138.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802165158.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802165215.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802165238.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802165257.png\" alt=\"\"></p>\n<h3 id=\"4-4-开发者登录账号查看分派的任务\">**4.4 开发者登录账号查看分派的任务 **</h3>\n<ul>\n<li>然后开发dev1登录gitlab，就能看到任务已经分配过来了</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802165316.png\" alt=\"\"></p>\n<h3 id=\"4-5-开发流程\"><strong>4.5 开发流程</strong></h3>\n<ul>\n<li>公司里的开发开始任务</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 1. 先从仓库把项目拉下来</span>\n<span class=\"token function\">git</span> clone git@10.0.0.51:java/app01.git\n<span class=\"token builtin class-name\">cd</span> app01/\n \n<span class=\"token comment\"># 2.先创建一个自己的分支，然后进行开发</span>\n<span class=\"token function\">git</span> checkout -b index   <span class=\"token comment\"># 创建一个叫index的分支，并切换到这个分支</span>\n<span class=\"token function\">git</span> status\n \n<span class=\"token comment\"># 3. 开始开发首页</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"&lt;h1&gt;welcome to this app&lt;/h1&gt;\"</span> <span class=\"token operator\">&gt;</span> index.html  <span class=\"token comment\"># 假设就开发了一个index页面</span>\n \n<span class=\"token comment\"># 4. 开发完成后，把项目传到仓库</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"index\"</span>\n<span class=\"token comment\"># 如果写成 git commit -m \"close #2\" ，则表示merge请求允许且merge成功之后，自动删除编号为#2的issue</span>\n \n<span class=\"token comment\"># 传到index分支</span>\n<span class=\"token function\">git</span> push origin index<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"4-6-合并分支\"><strong>4.6 合并分支</strong></h3>\n<p><strong>1）开发dev1发送合并分支请求给pm</strong></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802165333.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802165341.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802165350.png\" alt=\"\"></p>\n<p><strong>2）pm收到开发的Merge请求后进行处理</strong></p>\n<ul>\n<li>使用pm登录，就可以看到pm已经收到了合并请求merge request</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802165452.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802165505.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802165423.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802164313.png\" alt=\"\"></p>\n<p><strong>3）开发dev1确认任务完成</strong></p>\n<ul>\n<li>退出pm账户，登入dev1账户：</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802164301.png\" alt=\"\"></p>\n<ul>\n<li>或者点进去后，在侧边栏进行标识Done，然后已经完成的issue，可以将其Close</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802164248.png\" alt=\"\"></p>\n<ul>\n<li>这个时候Milestones的进度已经往前进了一些了：</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802164237.png\" alt=\"\"></p>\n<h3 id=\"4-7-开发其他功能\">4.7 开发其他功能</h3>\n<ul>\n<li>然后其他开发者或者自己再次进行开发时，先要把刚刚更新后的内容（master主干）拉回来，然后再进行开发</li>\n</ul>\n<p>git checkout master  # 切换到master<br>\ngit pull             # 从远端仓库拉取数据<br>\n# 然后再进行其他操作</p>\n<h2 id=\"5-Gitlab备份恢复\">5. Gitlab备份恢复</h2>\n<h3 id=\"5-1-备份gitlab\">5.1 备份gitlab</h3>\n<p><strong>1）修改配置文件</strong></p>\n<ul>\n<li><strong>/etc/gitlab/gitlab.rb</strong></li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 备份保存的位置，这里是默认位置，可修改成指定的位置</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'backup_path'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/var/opt/gitlab/backups\"</span>\n \n<span class=\"token comment\"># 设置备份保存的时间，超过此时间的日志将会被新覆盖</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'backup_keep_time'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">604800</span>  <span class=\"token comment\"># 这里是默认设置，保存7天</span>\n \n<span class=\"token comment\"># 特别注意：</span>\n<span class=\"token comment\">#     如果自定义了备份保存位置，则要修改备份目录的权限，比如：</span>\n<span class=\"token comment\">#     chown -R git.git /data/backup/gitlab</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>配置完成后要重启以使配置生效</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 重读配置文件</span>\ngitlab-ctl reconfigure\n \n<span class=\"token comment\"># 重启gitlab</span>\ngitlab-ctl restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>2）设置定时任务</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 每天凌晨2点定时创建备份</span>\n<span class=\"token comment\"># 将一下内容写入到定时任务中 crontab -e</span>\n<span class=\"token number\">0</span> <span class=\"token number\">2</span> * * * /usr/bin/gitlab-rake gitlab:backup:create\n \n<span class=\"token comment\"># 备份策略建议：</span>\n<span class=\"token comment\">#     本地保留3到7天，在异地备份永久保存</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>3）备份时间的识别</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 备份后的文件类似这样的形式：1494170842_gitlab_backup.tar，可以根据前面的时间戳确认备份生成的时间</span>\n \ndata  -d  @1494170842<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"5-2-恢复gitlab\">5.2 恢复gitlab</h3>\n<h4 id=\"1）停止停止相关数据连接-数据写入服务\"><strong>1）停止停止相关数据连接,数据写入服务</strong></h4>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 停止数据写入服务</span>\ngitlab-ctl stop puma\ngitlab-ctl stop sidekiq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"2）进行数据恢复并重启\"><strong>2）进行数据恢复并重启</strong></h4>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 进行恢复</span>\ngitlab-rake gitlab:backup:restore <span class=\"token assign-left variable\">BACKUP</span><span class=\"token operator\">=</span>1627839447_2021_08_01_14.1.1-ee  <span class=\"token comment\"># 这个时间戳就是刚刚备份的文件前面的时间戳</span>\n \n<span class=\"token comment\"># 重启</span>\ngitlab-ctl restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"6-gitlab邮件通知配置\">6. gitlab邮件通知配置</h2>\n<ul>\n<li>vim  /etc/gitlab/gitlab.rb</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'time_zone'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Asia/Shanghai'</span>\n \ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'gitlab_email_enabled'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'gitlab_email_from'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'example@163.com'</span> <span class=\"token comment\"># 填写发件人的邮箱地址</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'gitlab_email_display_name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'gitlab'</span>\n \ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_enable'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_address'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"smtp.163.com\"</span>  <span class=\"token comment\"># smtp服务器的地址,如网易的地址</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_port'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">25</span>                 <span class=\"token comment\"># 要注意如果使用了SSL/TLS的话,端口可能不是25</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_user_name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"smtp用户名\"</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_password'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"smtp用户密码\"</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_domain'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"163.com\"</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_authentication'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"login\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>启用邮件功能</strong><br>\nGitlab 的 Compose 配置 <code>GITLAB_OMNIBUS_CONFIG</code> 节点下增加如下几行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">########## 邮件服务配置 ##########</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_enable'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_address'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"smtp.exmail.qq.com\"</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_port'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">465</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_tls'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_user_name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"账号\"</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_password'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"密码\"</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_authentication'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"login\"</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'smtp_enable_starttls_auto'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> \ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'gitlab_email_from'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"发件人邮箱\"</span>\n <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"7-使用SourceTree进行项目开发\">7. 使用SourceTree进行项目开发</h2>\n<hr>\n<h3 id=\"7-1-项目拉取\">7.1 项目拉取</h3>\n<ul>\n<li>先把项目克隆下来</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802164210.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802164157.png\" alt=\"\"></p>\n<ul>\n<li>如果ssh的方式克隆失败，可能是因为SSH Key没找到，可以在这里添加</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802164146.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802164132.png\" alt=\"\"></p>\n<h3 id=\"7-2-创建分支进行功能开发\">7.2 创建分支进行功能开发</h3>\n<p><strong>1）新建立一个叫“pay”的分支</strong></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802164122.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802164113.png\" alt=\"\"></p>\n<p><strong>2）进行功能开发</strong></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802164103.png\" alt=\"\"></p>\n<h3 id=\"7-3-提交项目\">7.3 提交项目</h3>\n<p><strong>1）开发pay功能完成后进行提交</strong></p>\n<ul>\n<li>可以看到SourceTree中已经有“未提交的更改”</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802164054.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802164042.png\" alt=\"\"></p>\n<p><strong>2）添加“用户信息”</strong></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802164029.png\" alt=\"\"></p>\n<p>** 3）进行提交**</p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802164014.png\" alt=\"\"></p>\n<ul>\n<li>注释也可以写成  close #3    ，作用是提交完成后关闭3号issue</li>\n</ul>\n<h3 id=\"7-4-推送到仓库\"><strong>7.4 推送到仓库</strong></h3>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802164002.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802163947.png\" alt=\"\"></p>\n<ul>\n<li>然后就可以在gitlab上进行发送merge请求了，后面就可以进行其他操作了</li>\n</ul>\n<h3 id=\"7-5-项目上线\">7.5 项目上线</h3>\n<p><strong>1）当所有工作完成之后，就可以进行上线了</strong></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802163932.png\" alt=\"\"></p>\n<p><strong>2）打标签</strong></p>\n<ul>\n<li>上线先打个标签</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802163916.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802163907.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/05/2820210528225256.png\" alt=\"\"></p>\n<p>** 3）删除无用分支**</p>\n<ul>\n<li>然后删除已经合并到主干中的不必要的分支，如index、pay等</li>\n<li>最后一定要注意时间一定要同步，不然会错乱</li>\n</ul>\n<h2 id=\"8-Gitlab调优\"><strong>8. Gitlab调优</strong></h2>\n<p>gitlab对内存资源的消耗比较厉害<br>\n其中尤以 sidekiq队列 及 unicorn服务 两个组件对内存消耗最多<br>\n可以再容器启动时对相关参数进行微调：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">unicorn<span class=\"token punctuation\">[</span><span class=\"token string\">'worker_processes'</span><span class=\"token punctuation\">]</span> = 1\nunicorn<span class=\"token punctuation\">[</span><span class=\"token string\">'worker_memory_limit_min'</span><span class=\"token punctuation\">]</span> = \"300 * 1 &lt;&lt; 20\"\nunicorn<span class=\"token punctuation\">[</span><span class=\"token string\">'worker_memory_limit_max'</span><span class=\"token punctuation\">]</span> = \"400 * 1 &lt;&lt; 20\"\nunicorn<span class=\"token punctuation\">[</span><span class=\"token string\">'worker_timeout'</span><span class=\"token punctuation\">]</span> = 15\nsidekiq<span class=\"token punctuation\">[</span><span class=\"token string\">'concurrency'</span><span class=\"token punctuation\">]</span> = 10\nsidekiq_cluster<span class=\"token punctuation\">[</span><span class=\"token string\">'enable'</span><span class=\"token punctuation\">]</span> = false\nsidekiq_cluster<span class=\"token punctuation\">[</span><span class=\"token string\">'ha'</span><span class=\"token punctuation\">]</span> = false\nredis<span class=\"token punctuation\">[</span><span class=\"token string\">'maxclients'</span><span class=\"token punctuation\">]</span> = \"100\"\nnginx<span class=\"token punctuation\">[</span><span class=\"token string\">'worker_processes'</span><span class=\"token punctuation\">]</span> = 2\nnginx<span class=\"token punctuation\">[</span><span class=\"token string\">'worker_connections'</span><span class=\"token punctuation\">]</span> = 512\nnginx<span class=\"token punctuation\">[</span><span class=\"token string\">'keepalive_timeout'</span><span class=\"token punctuation\">]</span> = 300\nnginx<span class=\"token punctuation\">[</span><span class=\"token string\">'cache_max_size'</span><span class=\"token punctuation\">]</span> = '200m'\nmattermost<span class=\"token punctuation\">[</span><span class=\"token string\">'enable'</span><span class=\"token punctuation\">]</span> = false\nmattermost_nginx<span class=\"token punctuation\">[</span><span class=\"token string\">'enable'</span><span class=\"token punctuation\">]</span> = false\ngitlab_pages<span class=\"token punctuation\">[</span><span class=\"token string\">'enable'</span><span class=\"token punctuation\">]</span> = false\npages_nginx<span class=\"token punctuation\">[</span><span class=\"token string\">'enable'</span><span class=\"token punctuation\">]</span> = false\npostgresql<span class=\"token punctuation\">[</span><span class=\"token string\">'shared_buffers'</span><span class=\"token punctuation\">]</span> = \"256MB\"\npostgresql<span class=\"token punctuation\">[</span><span class=\"token string\">'max_connections'</span><span class=\"token punctuation\">]</span> = 30\npostgresql<span class=\"token punctuation\">[</span><span class=\"token string\">'work_mem'</span><span class=\"token punctuation\">]</span> = \"8MB\"\npostgresql<span class=\"token punctuation\">[</span><span class=\"token string\">'maintenance_work_mem'</span><span class=\"token punctuation\">]</span> = \"16MB\"\npostgresql<span class=\"token punctuation\">[</span><span class=\"token string\">'effective_cache_size'</span><span class=\"token punctuation\">]</span> = \"1MB\"\npostgresql<span class=\"token punctuation\">[</span><span class=\"token string\">'checkpoint_timeout'</span><span class=\"token punctuation\">]</span> = \"5min\"\npostgresql<span class=\"token punctuation\">[</span><span class=\"token string\">'checkpoint_warning'</span><span class=\"token punctuation\">]</span> = \"30s\"\n <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>配置调整后需要重载一下</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> gitlab gitlab-ctl reconfigure\n<span class=\"token function\">docker-compose</span> down\n<span class=\"token function\">docker-compose</span> up -d\n <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h2 id=\"9-Gitlab-启用-ContainerRegistry\">9. Gitlab 启用 ContainerRegistry</h2>\n<ul>\n<li><code>ContainerRegistry</code>是<code>Gitlab</code>内置的<code>Docker Registry</code>集成组件</li>\n<li>集成后每个项目可获得私有的 <code>Docker</code> 镜像存储空间</li>\n<li><code>ContainerRegistry</code> 可以复用 <code>Gitlab</code> 域名 或者 独立域名</li>\n<li>这里配置为复用域名（此时<code>ContainerRegistry</code> 将复用 <code>Gitlab</code> 的 <code>TLS</code> 证书）</li>\n</ul>\n<ol>\n<li><code>docker-compose.yaml</code>中Gitlab服务的 <code>GITLAB_OMNIBUS_CONFIG</code> 节点下增加如下配置：</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">registry_external_url <span class=\"token string\">\"https://gitlab.example.com:4567\"</span>  <span class=\"token comment\"># ContainerRegistry的外部访问地址</span>\nregistry_nginx<span class=\"token punctuation\">[</span><span class=\"token string\">'ssl_certificate'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/etc/gitlab/ssl/domain.crt\"</span>\nregistry_nginx<span class=\"token punctuation\">[</span><span class=\"token string\">'ssl_certificate_key'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/etc/gitlab/ssl/domain.key\"</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'registry_host'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"gitlab.example.com\"</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'registry_port'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"4567\"</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'registry_api_url'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:5000\"</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'gitlab_default_projects_features_builds'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'gitlab_default_projects_features_container_registry'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>端口开放增加 <code>- 4567:4567</code></li>\n<li>服务重启 <code>docker-compose restart Gitlab</code></li>\n</ol>\n<p><code>ContainerRegistry</code> 集成后可以通过 <code>Gitlab</code> 账户登录： <code>docker login gitlab.example.com:4567</code></p>\n<hr>\n<h2 id=\"日常维护命令\">日常维护命令</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># Gitlab维护</span>\n<span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> gitlab gitlab-ctl status  <span class=\"token comment\"># gitlab各组件服务状态</span>\n<span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> gitlab gitlab-ctl start/restart/stop <span class=\"token punctuation\">[</span>组件名<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># gitlab所有组件的统一控制（其中Unicorn组件重启完成前GitLab会报502）</span>\n<span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> gitlab gitlab-ctl <span class=\"token function\">tail</span> <span class=\"token punctuation\">[</span>/var/log/gitlab下的某子目录<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 实时查看日志</span>\n \n<span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> gitlab update-permissions  <span class=\"token comment\"># 修复gitlab版本升级后出现的权限问题</span>\n<span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> gitlab gitlab-ctl reconfigure  <span class=\"token comment\"># 重载配置</span>\n<span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> -t gitlab gitlab-rake gitlab:backup:create  <span class=\"token comment\"># 创建备份</span>\n \n<span class=\"token comment\"># ContainerRegistry维护</span>\n<span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> gitlab gitlab-ctl registry-garbage-collect  <span class=\"token comment\"># 垃圾回收，清理废弃layer（registry停机）</span>\n <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"Import-Repository-Repo-By-Url\">Import Repository(Repo By Url)</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 账号密码若存在特殊字符则需要url编码</span>\nhttps://username:password@host:port/group/project.git\n <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"10-GitLab重置用户名密码\"><strong>10. GitLab重置用户名密码</strong></h2>\n<p>打开终端，访问：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gitlab-rails console<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>输入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">user <span class=\"token operator\">=</span> User.where<span class=\"token punctuation\">(</span>id: <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>.first\nuser.password<span class=\"token operator\">=</span><span class=\"token string\">'123456'</span>\nuser.password_confirmation <span class=\"token operator\">=</span> <span class=\"token string\">'123456'</span>\nuser.save<span class=\"token operator\">!</span> <span class=\"token comment\">#注意加上 “！”</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后退出命令行即可。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">quit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"> gitlab-rails console production 命令 开始初始化密码\n<span class=\"token comment\"># 在irb(main):001:0&gt; 后面通过 u=User.where(id:1).first 来查找与切换账号（User.all 可以查看所有用户）</span>\n<span class=\"token comment\"># 通过u.password='12345678'设置密码为12345678(这里的密码看自己喜欢)：</span>\n<span class=\"token comment\"># 通过u.password_confirmation='12345678' 再次确认密码</span>\n<span class=\"token comment\"># 通过 u.save!进行保存</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"11-HTTPS-SSL-支持\"><strong>11. HTTPS SSL 支持</strong></h2>\n<ul>\n<li>\n<p>nginx反向代理方式</p>\n<ul>\n<li>注意docker 内部没有ca支持， 需要手动添加</li>\n</ul>\n</li>\n<li>\n<p>域名提供商提供的免费证书</p>\n<ul>\n<li>这种证书直接用，如果是自签名证书，需要添加自己的ca root证书到服务器</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"12-Gitlab恢复数据出现must-be-owner-of解决方法\">12. Gitlab恢复数据出现must be owner of解决方法</h2>\n<p>按正常Gitlab备份数据gitlab-rake gitlab:backup:create</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">ERROR: must be owner <span class=\"token keyword\">of</span> extension plpgsql\nERROR: must be owner <span class=\"token keyword\">of</span> <span class=\"token keyword\">schema</span> <span class=\"token keyword\">public</span>\nERROR: <span class=\"token keyword\">schema</span> “<span class=\"token keyword\">public</span>” already <span class=\"token keyword\">exists</span>\nERROR: must be owner <span class=\"token keyword\">of</span> <span class=\"token keyword\">schema</span> <span class=\"token keyword\">public</span>\nERROR: must be owner <span class=\"token keyword\">of</span> extension plpgsql\nWARNING: <span class=\"token keyword\">no</span> <span class=\"token keyword\">privileges</span> could be revoked <span class=\"token keyword\">for</span> “<span class=\"token keyword\">public</span>”\nWARNING: <span class=\"token keyword\">no</span> <span class=\"token keyword\">privileges</span> could be revoked <span class=\"token keyword\">for</span> “<span class=\"token keyword\">public</span>”\nWARNING: <span class=\"token keyword\">no</span> <span class=\"token keyword\">privileges</span> were granted <span class=\"token keyword\">for</span> “<span class=\"token keyword\">public</span>”\nWARNING: <span class=\"token keyword\">no</span> <span class=\"token keyword\">privileges</span> were granted <span class=\"token keyword\">for</span> “<span class=\"token keyword\">public</span>”<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>解决方法：</p>\n<h4 id=\"1-修改postgresql配置\">**1. 修改postgresql配置 **</h4>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /var/opt/gitlab/postgresql/data\n$ <span class=\"token function\">vi</span> /var/opt/gitlab/postgresql/data/postgresql.conf\nlisten_addresses <span class=\"token operator\">=</span> <span class=\"token string\">'*'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>找到listen_addresses = ” 改为listen_addresses = ‘*’</p>\n<p>修改 /var/opt/gitlab/postgresql/data/pg_hba.conf<br>\n在这个文件最后面加入</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">vi</span> /var/opt/gitlab/postgresql/data/pg_hba.conf\n<span class=\"token builtin class-name\">local</span>   all         all                               trust\n<span class=\"token function\">host</span>    all         all                               <span class=\"token number\">127.0</span>.0.1/32 trust\n<span class=\"token function\">host</span>    all         all                               ::1/128 trust    <span class=\"token comment\">#ipv6 可以不配置</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"2-重启gitlab生效\"><strong>2. 重启gitlab生效</strong></h4>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gitlab-ctl restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"3-修改gitlab账号为超级用户\"><strong>3. 修改gitlab账号为超级用户</strong></h4>\n<p>进入postgresql命令行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /opt/gitlab/embedded/bin\n<span class=\"token function\">su</span> gitlab-psql\n./psql -h <span class=\"token number\">127.0</span>.0.1 gitlabhq_production<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>查看账户权限</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">\\</span>du<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行修改gitlab用户为超级权限</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ALTER <span class=\"token environment constant\">USER</span> gitlab WITH SUPERUSER<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>退出</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">\\</span>q<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/0220210802135016.png\" alt=\"\"></p>\n<h5 id=\"4-从1462989681编号备份中恢复\">4. 从1462989681编号备份中恢复</h5>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gitlab-rake gitlab:backup:restore <span class=\"token assign-left variable\">BACKUP</span><span class=\"token operator\">=</span><span class=\"token number\">1462989681</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样Gitlab恢复数据就不会再报must be owner of extension plpgsql错误。</p>\n<h4 id=\"4-重启gitlab\"><strong>4. 重启gitlab</strong></h4>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gitlab-ctl restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"13-Gitlab-Pages\">13. Gitlab Pages</h2>\n<blockquote>\n<p>官方文档：<a href=\"https://docs.gitlab.com/ee/user/project/pages/\">https://docs.gitlab.com/ee/user/project/pages/</a> 。</p>\n</blockquote>\n<p>Gitlab Pages 使用 <a href=\"https://gitlab.com/gitlab-org/gitlab-pages\">GitLab Pages daemon</a> 服务，它是用 GO 语言实现的简单 HTTP 服务，并且可以监听外部 IP 地址以及为自定义域名和自定义证书提供支持。它通过 SNI 支持动态证书并且默认通过 HTTP2 协议发送页面。最后推荐你去看官方文档 <a href=\"https://gitlab.com/gitlab-org/gitlab-pages/blob/master/README.md\">README</a> 以便全面了解它的工作原理。</p>\n<h3 id=\"启用-Pages\">启用 Pages</h3>\n<p>打开 <code>gitlab.rb</code>：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo vim /etc/gitlab/gitlab.rb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>修改 <code>Pages</code> 配置：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># Pages 服务地址</span>\npages_external_url <span class=\"token string\">\"http://git.17lai.io\"</span>\n<span class=\"token comment\"># 启用 pages</span>\ngitlab_pages<span class=\"token punctuation\">[</span><span class=\"token string\">'enable'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token comment\"># fails to start in Docker</span>\ngitlab_pages<span class=\"token punctuation\">[</span><span class=\"token string\">'inplace_chroot'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>让 <code>Gitlab</code> 使用当前配置：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> gitlab-ctl reconfigure\n\n<span class=\"token comment\"># stdout</span>\n<span class=\"token operator\">&gt;</span> gitlab Reconfigured<span class=\"token operator\">!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果没有域名怎么办呢？可以参考 <a href=\"https://www.imooc.com/learn/634\">Linux智能DNS服务搭建之Bind服务</a>。</p>\n<h3 id=\"使用-Pages\">使用 Pages</h3>\n<blockquote>\n<p>官方的案例库：<a href=\"https://gitlab.com/pages\">https://gitlab.com/pages</a></p>\n</blockquote>\n<p><strong>用户文档</strong></p>\n<p>一般有两种类型的Pages可以创建</p>\n<ul>\n<li>对于用户（<a href=\"http://username.example.io\">username.example.io</a>）或组（<a href=\"http://groupname.example.io\">groupname.example.io</a>）</li>\n<li>对于Project（<a href=\"http://username.example.io/projectname\">username.example.io/projectname</a> 或 <a href=\"http://groupname.example.io/projectname\">groupname.example.io/projectname</a> ）</li>\n</ul>\n<p>在GitLab中，usernames或groupnames是唯一的，我们经常把他们称为namespaces。在一个GitLab实例中只能有一个namespace。</p>\n<p>下面是Gitlab Pages类型、Project Name和 website URL对照表：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/0820220408205156.png\" alt=\"img\"></p>\n<p>GitLab Pages前提条件：</p>\n<p>简而言之，这是上传web站点到GitLab Pages需要的：</p>\n<ol>\n<li>Gitlab Pages使用的域名（向管理员询问）。</li>\n<li>创建一个Project。</li>\n<li>仓库的根目录放一个.gitlab-ci.yml，其中有个叫做pages的job。</li>\n<li>设置一个GitLab Runner构建web站点。</li>\n</ol>\n<h4 id=\"部署简单的-html-项目\">部署简单的 html 项目</h4>\n<ol>\n<li>我们在自己的 <code>gitlab</code> 上面创建一个测试项目：<code>plain-html</code></li>\n<li>把项目拉取到本地：</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 换成你自己的仓库地址\ngit clone git@git.17lai.io:pages/plain-html.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol>\n<li>在项目中新建 <code>public</code> 目录，然后添加 <code>index.html</code> 、 <code>style.css</code> 文件:</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>generator<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>GitLab Pages<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Plain HTML site using GitLab Pages<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>style.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>navbar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://pages.gitlab.io/plain-html/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Plain HTML Example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://gitlab.com/pages/plain-html/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Repository<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://gitlab.com/pages/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Other Examples<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Hello World!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n      This is a simple plain-HTML website on GitLab Pages, without any fancy static site generator.\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> sans-serif<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 1280px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.navbar</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #313236<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 2px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 800px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.navbar a</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #aaa<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.navbar a:hover</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #ffffff<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>在项目根目录添加 <code>.gitlab-ci.yml</code> 文件：</li>\n</ol>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># This file is a template, and might need editing before it works on your project.</span>\n<span class=\"token comment\"># Full project: https://gitlab.com/pages/plain-html</span>\n<span class=\"token key atrule\">pages</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> html\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> deploy\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> mkdir .public\n    <span class=\"token punctuation\">-</span> cp <span class=\"token punctuation\">-</span>r * .public\n    <span class=\"token punctuation\">-</span> mv .public public\n  <span class=\"token key atrule\">artifacts</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> public\n  <span class=\"token key atrule\">only</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>提交代码：</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git add .\ngit commit -m\"feat(pages):  开启 pages 服务\"\ngit push<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>最后我们回到 gitlab 服务，在 <code>plain-html</code> 仓库中的 <code>Settings / pages</code> 页面可以看到已经有对应的服务地址了：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/0820220408203643.png\" alt=\"img\"></p>\n<blockquote>\n<p>gitlab 服务的域名跟 pages 的不要使用同一个，防止 XSS 攻击。</p>\n</blockquote>\n<ul>\n<li>\n<p>管理员文档：<a href=\"https://docs.gitlab.com/ce/administration/pages/\">https://docs.gitlab.com/ce/administration/pages/</a></p>\n</li>\n<li>\n<p>用户文档：<a href=\"https://docs.gitlab.com/ce/user/project/pages/index.html\">https://docs.gitlab.com/ce/user/project/pages/index.html</a></p>\n</li>\n<li>\n<p>gitlab pages：<a href=\"https://pages.gitlab.io/\">https://pages.gitlab.io/</a></p>\n</li>\n</ul>\n<h2 id=\"Container-Registry\">Container Registry</h2>\n<blockquote>\n<p>官方文档：<a href=\"https%25://docs.gitlab.com/ee/user/packages/container_registry/\">https://docs.gitlab.com/ee/user/packages/container_registry/</a></p>\n<p>本节修改中</p>\n</blockquote>\n<h3 id=\"开启-Container-Registry\">开启 Container Registry</h3>\n<p>修改gitlab配置文件： vim /etc/gitlab/gitlab.rb</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">//外部访问地址，此处被nginx代理，暴露给外部访问\nregistry_external_url <span class=\"token string\">'http://xxx.com'</span>\n//启用\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'registry_enabled'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n//registry 服务ip\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'registry_host'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"172.29.1.70\"</span>\n//registry 服务真正端口\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string\">'registry_port'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"5000\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里需要注意的是，registry_external_url是外部访问的url，如docker需要pull和push，都是访问该路径。然后，刷新配置，重启：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gitlab-ctl reconfigure\ngitlab-ctl restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"访问Docker\">访问Docker</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># docker login https://xxx.com -u root -p xxx</span>\nLogin Succeeded<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>默认<mark>需要SSL</mark>，请使用反向代理</p>\n<p>官方文档有说明，如果启用了双重验证（Two-Factor Authentication）则不应该输入密码，而是token：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> login xxx.com -u <span class=\"token operator\">&lt;</span>username<span class=\"token operator\">&gt;</span> -p <span class=\"token operator\">&lt;</span>token<span class=\"token operator\">&gt;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"CI\">CI</h2>\n<p>GitLab Continuous Integration (GitLab CI/CD)</p>\n<blockquote>\n<ul>\n<li>CI: Continuous Integration：持续集成。</li>\n<li>CD: Coninuous delivery and deployment：持续交付和部署。</li>\n</ul>\n<p>Gitlab CI/CD 是以可持续方法论进行软件开发的内建工具（<a href=\"https://about.gitlab.com/gitlab-ci/\">continuous integration service</a> ）。</p>\n</blockquote>\n<p>在使用 Gitlab CI 之前，我们需要先了解几个概念：</p>\n<h3 id=\"Stage\">Stage</h3>\n<p>阶段：通俗的讲就是步骤（把一件事分解成多个步骤来完成）。 从最上面的图中可以看到在 <code>CI</code> 中可能会有：<code>Build</code>、<code>Unit Test</code> 、<code>Integration Tests</code> 等多个阶段。</p>\n<h3 id=\"Job\">Job</h3>\n<p>任务：就是我们在每个阶段具体要做的事情，而一个阶段可能会有多个任务。</p>\n<h3 id=\"Pipelines\">Pipelines</h3>\n<p>一条流水线 （ <code>pipeline</code>）就是 <strong>一组</strong> 在各个阶段执行的任务。在同一阶段的多个任务是可以并行的（如果 <code>Runner</code> 足够多的话），当全部的任务都执行成功之后流水线将会进入下一个阶段。反之，如果其中有一个任务失败，流水线的下一个阶段将不再执行。</p>\n<h3 id=\"Runners\">Runners</h3>\n<p>在 Gitlab CI 中，<code>Runner</code> 负责运行定义在 <code>.gitlab-ci.yml</code> 中的代码。<code>Runner</code> 为三种：<code>Shared Runners</code>、<code>Group Runners</code>、<code>Specific Runners</code>，分别表示全局共用 Runner、组共用 Runner、单个项目指定的 Runner。</p>\n<h3 id=\"gitlab-ci-yml\">.gitlab-ci.yml</h3>\n<p>Gitlab CI 的配置文件，该文件声明了流水线的结构和顺序，以任务为最小单元。</p>\n<p>文件中允许定义的元素：</p>\n<ol>\n<li><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#image\"><code>image</code></a>：docker 镜像，当 Gitlab-Runner 的类型为 docker 时，会根据该属性指定的镜像为脚本执行容器。</li>\n<li><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#services\"><code>services</code></a>: 指定另一个 docker 镜像，主要用于提供服务层的能力，比如 <code>mysql</code> 。</li>\n<li><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#before_script-and-after_script\"><code>before_script</code></a>：任务执行前的钩子事件，比如一个 node 项目，我们可以在这里安装依赖。</li>\n<li><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#before_script-and-after_script\"><code>after_script</code></a>：任务执行后的钩子事件，当所有的任务都执行完毕之后被调用，不管任务是否执行成功。</li>\n<li><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#stages\"><code>stages</code></a>：定义流水线中的阶段，默认的为 <code>build</code> 、<code>test</code>、<code>deploy</code>。如果我们要在任务中指定其他的 <code>stage</code>，则需要使用该属性先申明。</li>\n<li><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#cache\"><code>cache</code></a>：需要缓存的文件，比如 node 项目可以把 node_modules 缓存起来。提示：可以定义在 <code>.gitlab-ci.yml</code> 顶级表示项目级别的，也可以申明在单个任务中。</li>\n<li><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#variables\"><code>variables</code></a>：变量，同样可以在顶级或者单个任务中申明。</li>\n<li><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#pages\"><code>pages</code></a>：内置的一个任务，用于上传任务执行的结果到 <a href=\"https://docs.gitlab.com/ce/user/project/pages/index.html\">Gitlab Pages</a>。</li>\n<li><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#include\"><code>include</code></a>：合并其他的 <code>.gitlab-ci.yml</code> 文件配置。</li>\n<li>在单个任务中申明的元素：\n<ol>\n<li><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#script\"><code>script</code></a>：需要执行的脚本。</li>\n<li><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#stage\"><code>stage</code></a>：标识该任务所属的阶段。</li>\n<li><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#tags\"><code>tags</code></a>：为任务打上标签，用于选择特定的 <code>Runner</code>。</li>\n<li><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#onlyexcept-basic\"><code>only</code></a>：用于表明何时<strong>创建</strong>该任务。</li>\n<li><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#onlyexcept-basic\"><code>except</code></a>：用于表明何时<strong>不创建</strong>该任务。</li>\n<li><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#when\"><code>when</code></a>：用于表明何时<strong>运行</strong>该任务。</li>\n<li><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#allow_failure\"><code>allow_failure</code></a>：允许失败，该任务失败时不会影响整个流水线的结果。</li>\n<li><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#artifacts\"><code>artifacts</code></a>：任务执行的结果，比如执行 <code>打包任务</code> 后的产出资源。</li>\n<li><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#dependencies\"><code>dependencies</code></a>：依赖的其他任务。</li>\n<li><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#retry\"><code>retry</code></a>：当任务失败时最多重试的次数。</li>\n<li><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#coverage\"><code>coverage</code></a>：指定如何从任务结果中提取代码覆盖率。</li>\n<li><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#parallel\"><code>parallel</code></a>：允许并行的任务实例个数。</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>请注意版本问题，每个属性对版本的要求并不一致，具体的可以点击属性查看官方文档。</p>\n</blockquote>\n<h3 id=\"使用-Gitlab-CI\">使用 Gitlab CI</h3>\n<p>使用 Gitlab CI 服务的两种方式： 1. <a href=\"https://docs.gitlab.com/ce/topics/autodevops/index.html\">Auto DevOps</a> 2. 手动配置 CI/CD</p>\n<h4 id=\"Auto-DevOps\"><a href=\"https://docs.gitlab.com/ce/topics/autodevops/index.html\">Auto DevOps</a></h4>\n<p>Auto DevOps 是 Gitlab 11.0 推出的新功能，它提供了预定义的 CI/CD 配置，允许我们自动检测、构建、测试、发布以及监控应用。</p>\n<p>暂未使用，待补充。</p>\n<h4 id=\"手动配置-CI-CD\">手动配置 CI/CD</h4>\n<p>手动配置主要就 2 个步骤，配置 <code>.gitlab-ci.yml</code> 文件，添加 Gitlab Runner 运行该文件。</p>\n<hr>\n<p>下面，我们看看如何配置 Gitlab Runner：</p>\n<h4 id=\"Gitlab-Runner\">Gitlab Runner</h4>\n<p>Gitlab Runner 是一个开源项目，用来运行 <code>.gitlab-ci.yml</code> 中定义的任务并把结果返给 Gitlab。</p>\n<h5 id=\"安装-2\">安装</h5>\n<blockquote>\n<p>官方文档：<a href=\"https://docs.gitlab.com/runner/install/linux-repository.html\">https://docs.gitlab.com/runner/install/linux-repository.html</a></p>\n</blockquote>\n<p>首先，添加离线仓库：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | sudo bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后，安装最新版本：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo apt-get install gitlab-runner<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"注册\">注册</h5>\n<blockquote>\n<p>官方文档：<a href=\"https://docs.gitlab.com/runner/register/index.html\">https://docs.gitlab.com/runner/register/index.html</a></p>\n</blockquote>\n<p>首先，我们进入要配置 Runner 的 Gitlab 仓库，在 <code>Settings -&gt; CI / CD</code> 页面展开 <code>Runners</code> 配置面板可以看到已经分配的 Runner 以及注册 Runner 需要的参数：<img src=\"https://cimg1.17lai.site/data/2022/04/0820220408170943.png\" alt=\"img\"></p>\n<p>然后，我们使用 Gitlab-Runner 命名开始注册：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">gitlab-runner register<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行完会该命令，终端会有交互，要求我们输入以下参数：</p>\n<ol>\n<li>gitlab-ci coordinator url ：gitlab 服务地址</li>\n<li>gitlab-ci token：上图中的 token</li>\n<li>description：描述信息</li>\n<li>tags：标签，对应 <code>.gitlab-ci.yml</code> 任务中配置的 tags，只有 tags 匹配的任务才会被该 Runner 执行。</li>\n<li>executor：<a href=\"https://docs.gitlab.com/runner/executors/README.html\">执行器</a>，即任务脚本执行的环境</li>\n</ol>\n<blockquote>\n<p>如果使用 docker 执行，则需要事先安装 <a href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/\">Docker</a> 环境。</p>\n</blockquote>\n<p>参数填写完毕之后，一个 Runner 便被注册成功了：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/0820220408170946.png\" alt=\"img\"></p>\n<p>我们回到 gitlab 仓库页面，然后刷新便可以看到 <code>_fzBq4PN</code> 这个 Runner 已经被注册到该项目：</p>\n<p><img src=\"https://cimg1.17lai.site/data/2022/04/0820220408170952.png\" alt=\"img\"></p>\n<blockquote>\n<p>我们可以点击 <code>编辑图标</code> 对该 Runner 进行修改。我比较喜欢把 <code>Run untagged jobs</code> 选项勾上，这样就不用每个任务都添加对应的 tags 了（因为现在涉及到的都是一些简单的流程）。</p>\n</blockquote>\n<h3 id=\"总结-4\">总结</h3>\n<p>首先，CI/CD 是一种软件开发流程，Gitlab CI/CD 是 Gitlab 为实现该流程而提供的一个内置工具（服务）。 其次，我们有 <a href=\"https://docs.gitlab.com/ce/topics/autodevops/index.html\">Auto DevOps</a> 与 <code>手动配置</code> 两种方式使用，本文讲解的主要是 <code>手动配置</code> 方式。</p>\n<h2 id=\"加速Gitlab-Runner\">加速Gitlab Runner</h2>\n<blockquote>\n<p>gitlab runner构建镜像每次RUN 安装依赖包，都远程下载?可以缓存加速吗？ 可以的！</p>\n</blockquote>\n<p>在将GitLab Runner注册到GitLab page上，让GitLab page可以和你的Runner通信时，有一步是填写使用的executor</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入Runner的executor：\nPlease enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>如果你选择Docker作为Runner的executor，你还要选择默认的docker image来运行job(当然，你也可以在.gitlab-ci.yml里指明你需要用的image),这句话就跟文章使用gitlab-runner往k8s上发送curl命令实现pod中容器使用的镜像版本更新，地址： 开头讲述的那样，不过.gitlab-ci.yml里指明的image优先级高。</p>\n<p>注册完成后你可以在/etc/gitlab-runner里发现 config.toml文件，该文件是Runner的配置文件</p>\n<p>接下来就牵涉到一个重要的话题 —— Executor</p>\n<ol>\n<li>Shell Executor<br>\n以宿主机作为Runner的所有jobs的执行器。Runner将会从远程仓库pull你的工程，工程的目录为：/builds。如果你使用了cache，那么cache将会存在/cache/。<br>\n但是，它需要将构建所需的所有依赖手动安装到安装了Runner的同一台计算机上，比如使用到的git,jdk,maven,docekr等</li>\n<li>Docker Executor<br>\n所有jobs的执行环境为指定的docker image所生成的container，每个job都会生成一个container并且在job结束后立即销毁。这个说的就是config.toml文件和.gitlab-ci.yml中指定的image<br>\nDocker executor默认将所有的builds存储在/builds/(这里的路径是container里的路径，Runner配置文件config.toml里的build_dir字段可以重新指明build的目录，默认对应于宿主机的目录是在宿主机的docker volume下：/var/lib/docker/volumes//_data/)，默认将所有的caches存储在container里的/cache目录(config.toml里的cache_dir字段可以重新指明cache的目录)，注意build_dir和cache_dir指向的均是container里的目录，要想将container里的数据持久化，需要用到volumes字段，这个字段的使用和docker volume的使用是类似的，只需在config.toml的[runner.docker]部分添加volumes = [\"/cache\", \":rw\"]即可实现container里/cache目录数据的永久保存以及将host目录挂载到相应的container目录并具有读写的功能。<br>\n比如：</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 仅作展示，未显示完整\n[runners.docker]\n  image = \"jdd.io/jre:1.8.275\"\n  volumes = [\"/cache\",\"/run/docker.sock:/run/docker.sock\"]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当你使用docker 或 docker+machine executors时，你可以通过设置pull_policy来决定Runner如何pull docker image。pull_policy有三种值：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">always —— Runner始终从远程pull docker image。\nif-not-present —— Runner会首先检查本地是否有该image，如果有则用本地的，如果没有则从远程拉取。\nnever —— Runner始终使用本地的image。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>注意：这一步就是本文开头提到的，使用本地镜像，不用再从dockerhub上拉取了</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 仅作展示，未显示完整\n[runners.docker]\n  image = \"jdd.io/jre:1.8.275\"\n  pull_policy=\"if-not-present\" # 添加这个选项就可以了\n  volumes = [\"/cache\",\"/run/docker.sock:/run/docker.sock\"]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当你使用docker, docker+machine 或 kubernetes作为executor时，GitLab Runner将会使用特定的container来处理Git、artifacts 和cache 操作。</p>\n<h2 id=\"权限管理\">权限管理</h2>\n<p>以管理员的身份登入gitlab，点击Settings，然后选择Members，可以通过输入名字选择要分配权限的小组成员，然后分配角色，选择权限有效时间，点击Add to Project就把人员拉近到项目中。</p>\n<p>GitLab的角色有以下四种：</p>\n<ul>\n<li>Guest：可以创建issue、发表评论，不能读写版本库</li>\n<li>Reporter：可以克隆代码，不能提交，可以赋予测试、产品经理此权限</li>\n<li>Developer：可以克隆代码、开发、提交、push，可以赋予开发人员此权限</li>\n<li>MainMaster：可以创建项目、添加tag、保护分支、添加项目成员、编辑项目，一般GitLab管理员或者CTO才有此权限</li>\n</ul>\n<p>访问权限 - Visibility Level：</p>\n<p>这个是在建立项目时就需要选定的，主要用于决定哪些人可以访问此项目，包含3种</p>\n<ul>\n<li>Private - 私有，只有属于该项目成员才有原先查看</li>\n<li>Internal - 内部，用个Gitlab账号的人都可以clone</li>\n<li>Public - 公开，任何人可以clone</li>\n</ul>\n<p>本文作者：夜法之书       写作不易，转载请注明来源地址！</p>\n<h2 id=\"参考链接：\">参考链接：</h2>\n<ol>\n<li><a href=\"https://www.cnblogs.com/hgzero/p/14088215.html\">https://www.cnblogs.com/hgzero/p/14088215.html</a></li>\n<li><a href=\"http://www.51blogs.net/2017/11/10/1110113243.html\">http://www.51blogs.net/2017/11/10/1110113243.html</a></li>\n<li><a href=\"https://my.oschina.net/u/2400083/blog/808097\">https://my.oschina.net/u/2400083/blog/808097</a></li>\n</ol>\n<hr>\n<h2 id=\"i-class-fa-solid-fa-school-i-系列教程-9\"><i class=\"fa-solid fa-school\"></i><strong>系列教程</strong></h2>\n<p><a href=\"/atom.xml\"><i class=\"fa-solid fa-square-rss\"></i>全部文章RSS订阅</a></p>\n<h3 id=\"i-class-fa-brands-fa-dev-i-Devops系列\"><i class=\"fa-brands fa-dev\"></i><strong>Devops系列</strong></h3>\n<p><a href=\"/categories/devops/atom.xml\"><i class=\"fa-solid fa-square-rss\"></i><strong>Devops 分类 RSS 订阅</strong></a></p>\n<ul>\n<li><a href=\"/posts/ab63eb8f/\">自建全套开源Devops开发系统</a></li>\n<li><a href=\"/posts/d32a07a7/\">Git介绍以及分支模型图解</a></li>\n<li><a href=\"/posts/39563241/\">三万字无坑搭建基于Docker+K8S+GitLab/SVN+Jenkins+Harbor持续集成交付环境</a></li>\n<li><a href=\"/posts/3437994a/\">DevOps系列---【Jenkinsfile+Dockerfile+nginx+vue】</a></li>\n<li><a href=\"/posts/f4c3ad41/\">项目开发管理工具推荐</a></li>\n<li><a href=\"/posts/acc13b70/\">Gitlab的安装及使用教程完全版</a></li>\n<li><a href=\"/posts/d08eb7b/\">Gitlab的安装及使用</a></li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/bilicard.css\" type=\"text/css\">",
            "tags": [
                "gitlab",
                "git",
                "docker",
                "registry",
                "教程",
                "email",
                "https",
                "ssl"
            ]
        },
        {
            "id": "https://blog.17lai.site/posts/d08eb7b/",
            "url": "https://blog.17lai.site/posts/d08eb7b/",
            "title": "Gitlab的安装及使用",
            "date_published": "2021-07-09T08:25:00.000Z",
            "content_html": "<h2 id=\"Gitlab概述\">Gitlab概述</h2>\n<h3 id=\"1-1-GitLab介绍-2\">1.1 GitLab介绍</h3>\n<p>GitLab是利用Ruby on Rails一个开源的版本管理系统，实现一个自托管的Git项目仓库，可通过Web界面进行访问公开的或者私人项目。</p>\n<p>GitLab能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序(Wall)进行交流。</p>\n<p>它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找</p>\n<h3 id=\"1-2-Gitlab服务构成-2\">1.2 Gitlab服务构成</h3>\n<ul>\n<li>\n<p>Nginx：静态web服务器。</p>\n</li>\n<li>\n<p>gitlab-shell：用于处理Git命令和修改authorized keys列表。</p>\n</li>\n<li>\n<p>gitlab-workhorse: 轻量级的反向代理服务器。</p>\n</li>\n<li>\n<p>logrotate：日志文件管理工具。</p>\n</li>\n<li>\n<p>postgresql：数据库。</p>\n</li>\n<li>\n<p>redis：缓存数据库。</p>\n</li>\n<li>\n<p>sidekiq：用于在后台执行队列任务（异步执行）。</p>\n</li>\n<li>\n<p>unicorn：An HTTP server for Rack applications，GitLab Rails应用是托管在这个服务器上面的。</p>\n</li>\n</ul>\n<h3 id=\"1-3-Gitlab工作流程-2\">1.3 Gitlab工作流程</h3>\n<p><img src=\"https://cimg1.17lai.site/data/2021/05/2820210528222044.png\" alt=\"\"></p>\n<h3 id=\"1-4-GitLab-Shell-2\">1.4 GitLab Shell</h3>\n<p>GitLab Shell有两个作用：为GitLab处理Git命令、修改authorized keys列表</p>\n<p>当通过SSH访问GitLab Server时，GitLab Shell会：</p>\n<ul>\n<li>限制执行预定义好的Git命令（git push，git pull，git annex）</li>\n<li>调用GitLab Rails API检查权限</li>\n<li>执行pre-receive钩子（在企业版中叫做Git钩子）</li>\n<li>执行用户请求的动作，处理GitLab的post-receive动作</li>\n<li>处理自定义的post-receive动作</li>\n</ul>\n<p>当通过http(s)访问GitLab Server时，工作流程取决于你是从Git仓库拉取(pull)代码还是向git仓库推送(push)代码：</p>\n<p>如果是从Git仓库拉取(pull)代码，GitLab Rails应用会全权负责处理用户鉴权和执行Git命令的工作</p>\n<p>如果是向Git仓库推送(push)代码，GitLab Rails应用既不会进行用户鉴权也不会执行Git命令，它会把以下工作交由GitLab Shell进行处理：</p>\n<ul>\n<li>调用GitLab Rails API 检查权限</li>\n<li>执行pre-receive钩子（在GitLab企业版中叫做Git钩子）</li>\n<li>执行你请求的动作</li>\n<li>处理GitLab的post-receive动作</li>\n<li>处理自定义的post-receive动作</li>\n</ul>\n<h3 id=\"1-5-GitLab-Workhorse-2\">1.5 GitLab Workhorse</h3>\n<p>GitLab Workhorse是一个敏捷的反向代理。它会处理一些大的HTTP请求，比如文件上传、文件下载、Git push/pull和Git包下载。其它请求会反向代理到GitLab Rails应用，即反向代理给后端的unicorn。</p>\n<h2 id=\"Gitlab的安装部署\">Gitlab的安装部署</h2>\n<hr>\n<ul>\n<li>Gitlab要求服务器内存2G以上</li>\n</ul>\n<h3 id=\"2-1-方式一-下载gitlab-ce的rpm包-2\">2.1 方式一:下载gitlab-ce的rpm包</h3>\n<ul>\n<li><a href=\"https://packages.gitlab.com/gitlab/gitlab-ce\">gitlab官方rpm包下载</a></li>\n<li><a href=\"https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/\">清华的源</a></li>\n</ul>\n<p>将对应版本的gitlab-ce下载到本地后，直接yum安装即可</p>\n<h4 id=\"要先将这个rpm包下载到本地\">要先将这个rpm包下载到本地</h4>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> -y gitlab-ce-13.6.1-ce.0.el7.x86_64.rpm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2-2-方式二-配置yum源-2\">2.2 方式二:配置yum源</h3>\n<p>在 /etc/yum.repos.d/ 下新建 gitlab-ce.repo，写入如下内容：</p>\n<pre class=\"line-numbers language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\"><span class=\"token punctuation\">[</span>gitlab<span class=\"token operator\">-</span>ce<span class=\"token punctuation\">]</span>\nname<span class=\"token operator\">=</span>gitlab<span class=\"token operator\">-</span>ce\nbaseurl<span class=\"token operator\">=</span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>mirrors<span class=\"token punctuation\">.</span>tuna<span class=\"token punctuation\">.</span>tsinghua<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn<span class=\"token operator\">/</span>gitlab<span class=\"token operator\">-</span>ce<span class=\"token operator\">/</span>yum<span class=\"token operator\">/</span>el7<span class=\"token operator\">/</span> Repo_gpgcheck<span class=\"token operator\">=</span><span class=\"token number\">0</span>\nEnabled<span class=\"token operator\">=</span><span class=\"token number\">1</span> Gpgkey<span class=\"token operator\">=</span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>packages<span class=\"token punctuation\">.</span>gitlab<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>gpg<span class=\"token punctuation\">.</span>key<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后创建cache，再直接安装gitlab-ce</p>\n<p>yum makecache  # 这一步会创建大量的数据</p>\n<h4 id=\"直接安装最新版\">直接安装最新版</h4>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> -y gitlab-ce <span class=\"token comment\"># 如果要安装指定的版本，在后面填上版本号即可</span>\nyum <span class=\"token function\">install</span> -y  gitlab-ce-13.6.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"如果安装时出现gpgkey验证错误，只需在安装时明确指明不进行gpgkey验证\">如果安装时出现gpgkey验证错误，只需在安装时明确指明不进行gpgkey验证</h4>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> gitlab-ce -y --nogpgcheck<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2-3-gitlab的配置-2\">2.3 gitlab的配置</h3>\n<p>配置文件位置  /etc/gitlab/gitlab.rb</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@centos7 test<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim /etc/gitlab/gitlab.rb</span>\n<span class=\"token punctuation\">[</span>root@centos7 test<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep \"^[a-Z]\" /etc/gitlab/gitlab.rb</span>\nexternal_url <span class=\"token string\">'http://10.0.0.51'</span>  <span class=\"token comment\"># 这里一定要加上http://</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"配置邮件服务\">配置邮件服务</h4>\n<pre class=\"line-numbers language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\">gitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'smtp_enable'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'smtp_address'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"smtp.qq.com\"</span></span> gitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'smtp_port'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">25</span> gitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'smtp_user_name'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"hgzerowzh@qq.com\"</span></span>  <span class=\"token comment\"># 自己的qq邮箱账号</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'smtp_password'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"xxx\"</span></span>  <span class=\"token comment\"># 开通smtp时返回的授权码</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'smtp_domain'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"qq.com\"</span></span> gitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'smtp_authentication'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"login\"</span></span> gitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'smtp_enable_starttls_auto'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'smtp_tls'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'gitlab_email_from'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"hgzerowzh@qq.com\"</span></span>  <span class=\"token comment\"># 指定发送邮件的邮箱地址</span>\nuser<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"git_user_email\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"shit@qq.com\"</span></span>   <span class=\"token comment\"># 指定接收邮件的邮箱地址</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>修改好配置文件后，要使用 gitlab-ctl reconfigure 命令重载一下配置文件，否则不生效。</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">gitlab-ctl reconfigure # 重载配置文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2-4-Gitlab常用命令-2\">2.4 Gitlab常用命令</h3>\n<pre class=\"line-numbers language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\">gitlab<span class=\"token operator\">-</span>ctl start         <span class=\"token comment\"># 启动所有 gitlab 组件</span>\ngitlab<span class=\"token operator\">-</span>ctl stop          <span class=\"token comment\"># 停止所有 gitlab 组件</span>\ngitlab<span class=\"token operator\">-</span>ctl restart       <span class=\"token comment\"># 重启所有 gitlab 组件</span>\ngitlab<span class=\"token operator\">-</span>ctl status        <span class=\"token comment\"># 查看服务状态</span>\ngitlab<span class=\"token operator\">-</span>ctl reconfigure   <span class=\"token comment\"># 启动服务</span>\ngitlab<span class=\"token operator\">-</span>ctl show<span class=\"token operator\">-</span>config   <span class=\"token comment\"># 验证配置文件</span>\ngitlab<span class=\"token operator\">-</span>ctl tail          <span class=\"token comment\"># 查看日志</span>\ngitlab<span class=\"token operator\">-</span>rake gitlab<span class=\"token symbol\">:check</span> <span class=\"token constant\">SANITIZE</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span>trace    <span class=\"token comment\"># 检查gitlab</span>\nvim <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>gitlab<span class=\"token operator\">/</span>gitlab<span class=\"token punctuation\">.</span>rb <span class=\"token comment\"># 修改默认的配置文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Gitlab的使用\">Gitlab的使用</h2>\n<hr>\n<ul>\n<li>Gitlab安装好后，设置密码，管理账户为root</li>\n</ul>\n<h3 id=\"3-1-创建Group-2\"><strong>3.1 创建Group</strong></h3>\n<ul>\n<li>填上组名即可，这里组名为java</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/05/2820210528222105.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211347.png\" alt=\"\"></p>\n<h3 id=\"3-2-创建User-2\"><strong>3.2 创建User</strong></h3>\n<ul>\n<li>创建四个User：pm、dev1、dev2、dev3</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/05/2820210528222131.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/05/2820210528222120.png\" alt=\"\"></p>\n<h3 id=\"3-3-添加User到Group中并授权-2\"><strong>3.3 添加User到Group中并授权</strong></h3>\n<p><img src=\"https://cimg1.17lai.site/data/2021/05/2820210528222140.png\" alt=\"\"></p>\n<h3 id=\"3-4-创建Project并配置SSH-2\"><strong>3.4 创建Project并配置SSH</strong></h3>\n<p><img src=\"https://cimg1.17lai.site/data/2021/05/2820210528222147.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/05/2820210528222154.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/05/2820210528222201.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/05/2820210528222233.png\" alt=\"\"></p>\n<h3 id=\"3-5-在项目中添加成员-2\"><strong>3.5 在项目中添加成员</strong></h3>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211335.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211726.png\" alt=\"\"></p>\n<h3 id=\"3-6-将本地文件推送到Gitlab-2\">3.6 将本地文件推送到Gitlab</h3>\n<h4 id=\"将app01项目克隆下来\">将app01项目克隆下来</h4>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone git@10.0.0.51:java/app01.git <span class=\"token comment\"># 初始化配置</span>\n<span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"hgzero\"</span> <span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"hgzero@qq.com\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"在app01目录下新建一些文件\">在app01目录下新建一些文件</h4>\n<h4 id=\"推送到gitlab\">推送到gitlab</h4>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"first edition\"</span> <span class=\"token function\">git</span> push origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211546.png\" alt=\"\"></p>\n<ol start=\"4\">\n<li>制定开发计划</li>\n</ol>\n<hr>\n<h3 id=\"4-1-创建开发计划-2\"><strong>4.1 创建开发计划</strong></h3>\n<ul>\n<li>项目：app01</li>\n<li>版本：v1.0</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211325.png\" alt=\"\"></p>\n<h3 id=\"4-2-创建里程碑Milestones-2\"><strong>4.2 创建里程碑Milestones</strong></h3>\n<ul>\n<li>用pm账号登录gitlab后操作（先要在admin中设置pm账号的密码）</li>\n<li>要根据开发计划来创建Milestones</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211538.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211719.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211315.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211303.png\" alt=\"\"></p>\n<h3 id=\"4-3-根据开发计划创建issue-2\">4.3 根据开发计划创建issue</h3>\n<ul>\n<li>创建4个issue，分派给dev1和dev2这两个开发人员</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211529.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211304.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211711.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211520.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211514.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211252.png\" alt=\"\"></p>\n<h3 id=\"4-4-开发者登录账号查看分派的任务-2\">**4.4 开发者登录账号查看分派的任务 **</h3>\n<ul>\n<li>然后开发dev1登录gitlab，就能看到任务已经分配过来了</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211513.png\" alt=\"\"></p>\n<h3 id=\"4-5-开发流程-2\"><strong>4.5 开发流程</strong></h3>\n<ul>\n<li>公司里的开发开始任务</li>\n</ul>\n<h4 id=\"1-先从仓库把项目拉下来\">1. 先从仓库把项目拉下来</h4>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone git@10.0.0.51:java/app01.git\n<span class=\"token builtin class-name\">cd</span> app01/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"2-先创建一个自己的分支，然后进行开发\">2.先创建一个自己的分支，然后进行开发</h4>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout -b index   <span class=\"token comment\"># 创建一个叫index的分支，并切换到这个分支</span>\n<span class=\"token function\">git</span> status <span class=\"token comment\"># 3. 开始开发首页</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"&lt;h1&gt;welcome to this app&lt;/h1&gt;\"</span> <span class=\"token operator\">&gt;</span> index.html  <span class=\"token comment\"># 假设就开发了一个index页面</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-开发完成后，把项目传到仓库\">4. 开发完成后，把项目传到仓库</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"index\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"如果写成-git-commit-m-close-2-，则表示merge请求允许且merge成功之后，自动删除编号为-2的issue\">如果写成 git commit -m \"close #2\" ，则表示merge请求允许且merge成功之后，自动删除编号为#2的issue</h4>\n<h4 id=\"传到index分支\">传到index分支</h4>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin index<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"4-6-合并分支-2\"><strong>4.6 合并分支</strong></h3>\n<p><strong>1）开发dev1发送合并分支请求给pm</strong></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211242.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211503.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211701.png\" alt=\"\"></p>\n<p><strong>2）pm收到开发的Merge请求后进行处理</strong></p>\n<ul>\n<li>使用pm登录，就可以看到pm已经收到了合并请求merge request</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211231.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211502.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211647.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211221.png\" alt=\"\"></p>\n<p><strong>3）开发dev1确认任务完成</strong></p>\n<ul>\n<li>退出pm账户，登入dev1账户：</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211220.png\" alt=\"\"></p>\n<ul>\n<li>或者点进去后，在侧边栏进行标识Done，然后已经完成的issue，可以将其Close</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211454.png\" alt=\"\"></p>\n<ul>\n<li>这个时候Milestones的进度已经往前进了一些了：</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211446.png\" alt=\"\"></p>\n<h3 id=\"4-7-开发其他功能-2\">4.7 开发其他功能</h3>\n<ul>\n<li>然后其他开发者或者自己再次进行开发时，先要把刚刚更新后的内容（master主干）拉回来，然后再进行开发</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout master  <span class=\"token comment\"># 切换到master</span>\n<span class=\"token function\">git</span> pull             <span class=\"token comment\"># 从远端仓库拉取数据</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>然后再进行其他操作</p>\n<h2 id=\"Gitlab备份恢复\">Gitlab备份恢复</h2>\n<hr>\n<h3 id=\"5-1-备份gitlab-2\">5.1 备份gitlab</h3>\n<p><strong>1）修改配置文件</strong></p>\n<ul>\n<li><strong>/etc/gitlab/gitlab.rb</strong></li>\n</ul>\n<h4 id=\"备份保存的位置，这里是默认位置，可修改成指定的位置\">备份保存的位置，这里是默认位置，可修改成指定的位置</h4>\n<pre class=\"line-numbers language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\">gitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'backup_path'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"/var/opt/gitlab/backups\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"设置备份保存的时间，超过此时间的日志将会被新覆盖\">设置备份保存的时间，超过此时间的日志将会被新覆盖</h4>\n<pre class=\"line-numbers language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\">gitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'backup_keep_time'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">604800</span>  <span class=\"token comment\"># 这里是默认设置，保存7天</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"特别注意：-如果自定义了备份保存位置，则要修改备份目录的权限，比如：-chown-R-git-git-data-backup-gitlab\">特别注意： # 如果自定义了备份保存位置，则要修改备份目录的权限，比如： # chown -R git.git /data/backup/gitlab</h4>\n<ul>\n<li>配置完成后要重启以使配置生效</li>\n</ul>\n<h4 id=\"重读配置文件\">重读配置文件</h4>\n<pre class=\"line-numbers language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\">gitlab<span class=\"token operator\">-</span>ctl reconfigure <span class=\"token comment\"># 重启gitlab</span>\ngitlab<span class=\"token operator\">-</span>ctl restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>2）设置定时任务</strong></p>\n<h4 id=\"每天凌晨2点定时创建备份-将一下内容写入到定时任务中-crontab-e\">每天凌晨2点定时创建备份 # 将一下内容写入到定时任务中 crontab -e</h4>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">2</span> * * * /usr/bin/gitlab-rake gitlab:backup:create <span class=\"token comment\"># 备份策略建议： # 本地保留3到7天，在异地备份永久保存</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>3）备份时间的识别</strong></p>\n<h4 id=\"备份后的文件类似这样的形式：1494170842-gitlab-backup-tar，可以根据前面的时间戳确认备份生成的时间\">备份后的文件类似这样的形式：1494170842_gitlab_backup.tar，可以根据前面的时间戳确认备份生成的时间</h4>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">data -d  @1494170842<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"5-2-恢复gitlab-2\">5.2 恢复gitlab</h3>\n<p><strong>1）停止数据写入服务</strong></p>\n<h4 id=\"停止数据写入服务\">停止数据写入服务</h4>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gitlab-ctl stop unicorn\ngitlab-ctl stop sidekiq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>2）进行数据恢复并重启</strong></p>\n<h4 id=\"进行恢复\">进行恢复</h4>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gitlab-rake gitlab:backup:restore <span class=\"token assign-left variable\">BACKUP</span><span class=\"token operator\">=</span><span class=\"token number\">1494170842</span>  <span class=\"token comment\"># 这个时间戳就是刚刚备份的文件前面的时间戳</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"重启\">重启</h4>\n<pre class=\"line-numbers language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\">gitlab<span class=\"token operator\">-</span>ctl restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"gitlab邮件通知配置\">gitlab邮件通知配置</h2>\n<hr>\n<ul>\n<li>vim  /etc/gitlab/gitlab.rb</li>\n</ul>\n<pre class=\"line-numbers language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\">gitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'time_zone'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'Asia/Shanghai'</span></span> gitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'gitlab_email_enabled'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'gitlab_email_from'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'example@163.com'</span></span> <span class=\"token comment\"># 填写发件人的邮箱地址</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'gitlab_email_display_name'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'gitlab'</span></span> gitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'smtp_enable'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'smtp_address'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"smtp.163.com\"</span></span>  <span class=\"token comment\"># smtp服务器的地址,如网易的地址</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'smtp_port'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">25</span>                 <span class=\"token comment\"># 要注意如果使用了SSL/TLS的话,端口可能不是25</span>\ngitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'smtp_user_name'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"smtp用户名\"</span></span> gitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'smtp_password'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"smtp用户密码\"</span></span> gitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'smtp_domain'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"163.com\"</span></span> gitlab_rails<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'smtp_authentication'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"login\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"7\">\n<li>\n<h2 id=\"使用SourceTree进行项目开发\">使用SourceTree进行项目开发</h2>\n</li>\n</ol>\n<hr>\n<h3 id=\"7-1-项目拉取-2\">7.1 项目拉取</h3>\n<ul>\n<li>先把项目克隆下来</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211633.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211438.png\" alt=\"\"></p>\n<ul>\n<li>如果ssh的方式克隆失败，可能是因为SSH Key没找到，可以在这里添加</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211211.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211201.png\" alt=\"\"></p>\n<h3 id=\"7-2-创建分支进行功能开发-2\">7.2 创建分支进行功能开发</h3>\n<p><strong>1）新建立一个叫“pay”的分支</strong></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211618.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211430.png\" alt=\"\"></p>\n<p><strong>2）进行功能开发</strong></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211152.png\" alt=\"\"></p>\n<h3 id=\"7-3-提交项目-2\">7.3 提交项目</h3>\n<p><strong>1）开发pay功能完成后进行提交</strong></p>\n<ul>\n<li>可以看到SourceTree中已经有“未提交的更改”</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211422.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211144.png\" alt=\"\"></p>\n<p><strong>2）添加“用户信息”</strong></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211143.png\" alt=\"\"></p>\n<p>** 3）进行提交**</p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211415.png\" alt=\"\"></p>\n<ul>\n<li>注释也可以写成  close #3    ，作用是提交完成后关闭3号issue</li>\n</ul>\n<h3 id=\"7-4-推送到仓库-2\"><strong>7.4 推送到仓库</strong></h3>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211136.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211407.png\" alt=\"\"></p>\n<ul>\n<li>然后就可以在gitlab上进行发送merge请求了，后面就可以进行其他操作了</li>\n</ul>\n<h3 id=\"7-5-项目上线-2\">7.5 项目上线</h3>\n<p><strong>1）当所有工作完成之后，就可以进行上线了</strong></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211135.png\" alt=\"\"></p>\n<p><strong>2）打标签</strong></p>\n<ul>\n<li>上线先打个标签</li>\n</ul>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211127.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/09/1320210913211124.png\" alt=\"\"></p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/05/2820210528225256.png\" alt=\"\"></p>\n<p>** 3）删除无用分支**</p>\n<ul>\n<li>然后删除已经合并到主干中的不必要的分支，如index、pay等</li>\n<li>最后一定要注意时间一定要同步，不然会错乱</li>\n</ul>\n<h2 id=\"参考-14\">参考</h2>\n<ul>\n<li><a href=\"https://www.cnblogs.com/hgzero/p/14088215.html\">Praywu</a></li>\n</ul>\n<h2 id=\"Gitlab-使用系列\">Gitlab 使用系列</h2>\n<blockquote>\n<ul>\n<li><a href=\"/posts/acc13b70/\"><strong>Gitlab的安装及使用教程完全版</strong></a></li>\n<li><a href=\"/posts/29a820b3/\">破解Gitlab EE</a></li>\n<li><a href=\"/posts/d08eb7b/\">Gitlab的安装及使用</a></li>\n<li><a href=\"/posts/1879721e/\">CI/CD与Git Flow与GitLab</a></li>\n</ul>\n</blockquote>\n<h2 id=\"i-class-fa-solid-fa-school-i-系列教程-24\"><i class=\"fa-solid fa-school\"></i><strong>系列教程</strong></h2>\n<p><a href=\"/atom.xml\"><i class=\"fa-solid fa-square-rss\"></i>全部文章RSS订阅</a></p>\n<h3 id=\"i-class-fa-brands-fa-square-gitlab-i-Gitlab-使用系列-3\"><i class=\"fa-brands fa-square-gitlab\"></i><strong>Gitlab 使用系列</strong></h3>\n<p><a href=\"/categories/gitlab/atom.xml\"><i class=\"fa-solid fa-square-rss\"></i><strong>Gitlab RSS 分类订阅</strong></a></p>\n<ul>\n<li><a href=\"/posts/acc13b70/\"><strong>Gitlab的安装及使用教程完全版</strong></a></li>\n<li><a href=\"/posts/29a820b3/\">破解Gitlab EE</a></li>\n<li><a href=\"/posts/d08eb7b/\">Gitlab的安装及使用</a></li>\n<li><a href=\"/posts/1879721e/\">CI/CD与Git Flow与GitLab</a></li>\n</ul>\n<h3 id=\"i-class-fa-brands-fa-dev-i-Devops系列-7\"><i class=\"fa-brands fa-dev\"></i><strong>Devops系列</strong></h3>\n<p><a href=\"/categories/devops/atom.xml\"><i class=\"fa-solid fa-square-rss\"></i><strong>Devops 分类 RSS 订阅</strong></a></p>\n<ul>\n<li><a href=\"/posts/ab63eb8f/\">自建全套开源Devops开发系统</a></li>\n<li><a href=\"/posts/d32a07a7/\">Git介绍以及分支模型图解</a></li>\n<li><a href=\"/posts/39563241/\">三万字无坑搭建基于Docker+K8S+GitLab/SVN+Jenkins+Harbor持续集成交付环境</a></li>\n<li><a href=\"/posts/3437994a/\">DevOps系列---【Jenkinsfile+Dockerfile+nginx+vue】</a></li>\n<li><a href=\"/posts/f4c3ad41/\">项目开发管理工具推荐</a></li>\n<li><a href=\"/posts/acc13b70/\">Gitlab的安装及使用教程完全版</a></li>\n<li><a href=\"/posts/d08eb7b/\">Gitlab的安装及使用</a></li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/bilicard.css\" type=\"text/css\">",
            "tags": [
                "gitlab",
                "git",
                "crack"
            ]
        }
    ]
}