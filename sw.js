const cacheStorageKeyPrefix="17lai-cache-";const uniqueIdentifier="{uniqueIdentifier}";const cacheStorageKey=`${cacheStorageKeyPrefix}${uniqueIdentifier}`;var cacheList=["/css/matery.css?v=1.0.16","/css/my.css?v=1.0.1","/css/highlight.css?v=1.0.0","/css/highlight-dark.css?v=1.0.0","/libs/awesome/css/all.min.css?v=5.15.4","/libs/jquery/jquery.min.js","/libs/materialize/materialize.min.js?v=1.2.2","/libs/materialize/materialize.min.css?v=1.2.2","/libs/masonry/masonry.pkgd.min.js","/libs/aos/aos.min.css","/libs/aos/aos.min.js","/libs/waline/waline-count.js","/js/umami.js?v=1.0.3","/js/color-schema.js?v=1.0.0","/js/plugins.js?v=1.0.0","/js/tw_cn.js?v=1.0.0","/js/boot.js?v=1.0.0","/js/utils.js?v=1.0.6","/js/events.js?v=1.0.0"];self.addEventListener("install",e=>{e.waitUntil(caches.open(cacheStorageKey).then(e=>e.addAll(cacheList)).then(()=>self.skipWaiting()))});self.addEventListener("message",e=>{if(e.data&&e.data.action==="skipWaiting"){self.skipWaiting();console.log("[PWA] rec message skipWaiting")}});self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(e=>{return Promise.all(e.map(e=>{if(e.startsWith(cacheStorageKeyPrefix)){if(e!==cacheStorageKey){console.log("[PWA] Removing old cache:",e);return caches.delete(e)}}}))}).then(()=>{console.log("[PWA] Caching new resources",cacheStorageKey);return caches.open(cacheStorageKey).then(e=>{return e.addAll(cacheList)})}).then(()=>{console.log("[PWA] Activation complete");return self.clients.claim()}))});const customIdentifier="17laiIdentifier";self.addEventListener("message",e=>{if(e.data&&e.data.action==="checkIdentifier"){e.source.postMessage({identifier:customIdentifier})}});const proxyMap={"https://cdn.jsdelivr.net":"https://fastly.jsdelivr.net","https://unpkg.com/@waline/emojis":"https://fastly.jsdelivr.net/npm/@waline/emojis","https://cimg1.17lai.site":"https://cimg1.17lai.fun","https://cdn.17lai.fun":"https://cdn.17lai.site","https://cdn.webpushr.com":"https://cdn-push.17lai.site","https://bot.webpushr.com":"https://bot-push.17lai.site","https://analytics.webpushr.com":"https://analytics-push.17lai.site","https://notevents.webpushr.com":"https://notevents-push.17lai.site"};function isProxyRequired(t){const r=new URL(t);const s=Object.keys(proxyMap);for(let e=0;e<s.length;e++){const n=s[e];const c=proxyMap[n];const o=new URL(n);if(r.origin===o.origin&&r.pathname.startsWith(o.pathname)){console.log("[PWA] Proxy required for URL:",t,"to:",c);return c}}return null}function getMirrorRequired(e){const s=new URL(e);const t=Object.entries(proxyMap).find(([e,t])=>{const r=new URL(e);return s.origin===r.origin&&s.pathname.startsWith(r.pathname)});if(t){const[,r]=t;const n=e.replace(t[0],r);return n}else{return e}}function refreshCacheList(e){return caches.open(e).then(r=>{return Promise.all(cacheList.map(t=>{return r.match(t).then(e=>{if(!e){console.log("[PWA] Resource not found in cache, fetching from network:",t);return fetch(t,{cache:"default"}).then(e=>{if(e.ok){console.log("[PWA] Caching resource:",t);r.put(t,e.clone());return e}else{throw new Error(`Failed to fetch ${t}`)}})}else{return e}})}))}).catch(e=>{console.error("[PWA] Failed to refresh cache list:",e)})}self.addEventListener("fetch",t=>{const e=isProxyRequired(t.request.url);if(e){t.respondWith(caches.open(cacheStorageKey).then(e=>e.match(t.request,{ignoreSearch:true})).then(e=>{if(e){return e}else{return fetch(t.request).then(e=>{if(e.ok){return e}else{throw new Error("Original request failed")}}).catch(e=>{return fetchWithProxy(getMirrorRequired(t.request.url))})}}).catch(e=>{return refreshCacheList(cacheStorageKey).then(()=>caches.match(t.request.url,{ignoreSearch:true})).then(e=>e||fetch(t.request))}))}else{t.respondWith(caches.open(cacheStorageKey).then(e=>e.match(t.request,{ignoreSearch:true})).then(e=>{return e||fetch(t.request)}).catch(e=>{return refreshCacheList(cacheStorageKey).then(()=>caches.match(t.request.url,{ignoreSearch:true})).then(e=>e||fetch(t.request))}))}});async function fetchWithFallback(e){try{const t=await fetch(e);if(t.ok){return t}else{throw new Error(`Failed to fetch ${e}`)}}catch(e){console.error("[PWA] Fetch failed:",e);return new Response("Network request failed",{status:500})}}async function ProxyRequest(e,t){try{console.log("[PWA]Attempting proxy request to:",t);const r=new URL(e.url);console.log("[PWA]Original URL:",r.href);const s=await fetch(t+e.url.replace(e.referrer,""),e);console.log("[PWA]Proxy request:",t+(e.url.startsWith(e.referrer)?e.url.substring(e.referrer.length):e.url));return s}catch(e){console.error("[PWA]Error proxying request:",e);throw e}}async function handleProxyRequests(e){try{const t=await Promise.all(e.map(async e=>{const t=isProxyRequired(e.url);if(t){const r=getMirrorRequired(e.url);console.log("[PWA]Proxy request:",r);return fetch(r,e,{cache:"default"})}else{return fetch(e,{cache:"default"})}}));return t}catch(e){console.error("[PWA] Error handling proxy requests:",e);throw e}}async function handleProxyRequest(e,t){try{console.log("[PWA] Proxy fetch:",t);return fetch(t,e,{cache:"default"})}catch(e){console.error("[PWA]Error proxying request:",e);throw e}}function fetchWithProxy(e){try{console.log("[PWA] Proxy fetch:",e);return fetch(e)}catch(e){console.error("[PWA] Error proxying request:",e);throw e}}function fetchAndCache(r){try{return caches.open(cacheStorageKey).then(t=>{return fetch(r,{cache:"default"}).then(e=>{if(e.ok){console.log("[PWA]refresh cache:",r);t.put(r,e.clone())}return e})})}catch(e){console.error("[PWA]Error proxying request:",e);throw e}}