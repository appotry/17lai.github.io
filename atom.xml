<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.17lai.site</id>
    <title>夜法之书</title>
    <link href="https://blog.17lai.site" />
    <updated>2022-03-24T13:50:17.399Z</updated>
    <category term="Github" />
    <category term="Jekyll" />
    <category term="blog" />
    <category term="Gitlab" />
    <category term="Git" />
    <category term="Crack" />
    <category term="Linux" />
    <category term="hardlink" />
    <category term="bt" />
    <category term="pt" />
    <category term="note" />
    <category term="markdown" />
    <category term="picgo" />
    <category term="wiz" />
    <category term="Joplin" />
    <category term="Typora" />
    <category term="QNAP" />
    <category term="硬盘" />
    <category term="nas" />
    <category term="embeded" />
    <category term="3G" />
    <category term="4G" />
    <category term="3531a" />
    <category term="移植" />
    <category term="嵌入式" />
    <category term="hisilicon" />
    <category term="Driver" />
    <category term="3798M" />
    <category term="MPP" />
    <category term="UNF" />
    <category term="Kernel" />
    <category term="宝塔" />
    <category term="VPS" />
    <category term="建站" />
    <category term="Nginx" />
    <category term="Apache" />
    <category term="MySQL" />
    <category term="Docker" />
    <category term="LAMP" />
    <category term="PHP" />
    <category term="Tomcat" />
    <category term="JSP" />
    <category term="教程" />
    <category term="Rigistry" />
    <category term="email" />
    <category term="https" />
    <category term="ssl" />
    <category term="Debian" />
    <category term="Laptop" />
    <category term="ED2K" />
    <category term="ATI" />
    <category term="WIFI" />
    <category term="Hotkey" />
    <category term="SSD" />
    <category term="HDD" />
    <category term="管理" />
    <category term="PDCA" />
    <category term="5W2H" />
    <category term="SMART" />
    <category term="SWOT" />
    <category term="GROW" />
    <category term="OKR" />
    <category term="WBS" />
    <category term="PT" />
    <category term="BT" />
    <category term="qbittorrent" />
    <category term="transmission" />
    <category term="Emby" />
    <category term="Sonarr" />
    <category term="Jeckett" />
    <category term="Portainer" />
    <category term="Watchtower" />
    <category term="DNSMasq" />
    <category term="DNSCrypt" />
    <category term="启动" />
    <category term="优化" />
    <category term="SSL" />
    <category term="TLS" />
    <category term="隐私" />
    <category term="安全" />
    <category term="linux" />
    <category term="GitBook" />
    <category term="MySql" />
    <category term="Mariadb" />
    <category term="技巧" />
    <category term="Nas" />
    <category term="群晖" />
    <category term="MarkDown" />
    <category term="Mermaid" />
    <category term="hexo" />
    <category term="matery" />
    <category term="cdn" />
    <category term="seo" />
    <category term="web" />
    <category term="http" />
    <category term="css" />
    <category term="js" />
    <category term="3a" />
    <category term="ae" />
    <category term="image" />
    <category term="ai" />
    <category term="face" />
    <category term="ccs" />
    <category term="vim" />
    <category term="ide" />
    <category term="docker" />
    <category term="music" />
    <category term="韩红" />
    <category term="thinkpad" />
    <category term="sound" />
    <category term="speaker" />
    <category term="刮削" />
    <category term="MusicBrainz" />
    <category term="mp3tag" />
    <category term="tmm" />
    <category term="字幕" />
    <category term="emby" />
    <category term="plex" />
    <category term="qnap" />
    <category term="ipv6" />
    <category term="cmake" />
    <category term="develop" />
    <category term="traefik" />
    <category term="proxy" />
    <category term="swarm" />
    <category term="ubuntu" />
    <category term="vscode" />
    <category term="插件" />
    <category term="编码" />
    <category term="mermaid" />
    <category term="plantuml" />
    <category term="mathjax" />
    <category term="CI/CD" />
    <category term="git" />
    <category term="mstream" />
    <category term="selfhost" />
    <category term="Earthly" />
    <category term="中岛美嘉" />
    <category term="node" />
    <category term="jenkins" />
    <category term="shell" />
    <category term="tools" />
    <category term="winrar" />
    <category term="crack" />
    <category term="emoji" />
    <category term="isp" />
    <category term="awb" />
    <category term="mywork" />
    <entry>
        <id>https://blog.17lai.site/posts/798e6e62/</id>
        <title>ISP 数字图像处理 算法概述、工作原理、架构、处理流程</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/798e6e62/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;div class=&#34;hbe hbe-container&#34; id=&#34;hexo-blog-encrypt&#34; data-wpm=&#34;抱歉, 这个密码看着不太对, 请再试试.&#34; data-whm=&#34;抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.&#34;&gt;
  &lt;script id=&#34;hbeData&#34; type=&#34;hbeData&#34; data-hmacdigest=&#34;c293fefbb97c882608740cdb369669d456ee7a7e71954cc6747f9610361354f0&#34;&gt;&lt;/script&gt;
  &lt;div class=&#34;hbe hbe-content&#34;&gt;
    &lt;div class=&#34;hbe hbe-input hbe-input-default&#34;&gt;
      &lt;input class=&#34;hbe hbe-input-field hbe-input-field-default&#34; type=&#34;password&#34; id=&#34;hbePass&#34;&gt;
      &lt;label class=&#34;hbe hbe-input-label hbe-input-label-default&#34; for=&#34;hbePass&#34;&gt;
        &lt;span class=&#34;hbe hbe-input-label-content hbe-input-label-content-default&#34;&gt;您好, 这里需要密码.&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script data-pjax src=&#34;/lib/hbe.js&#34;&gt;&lt;/script&gt;&lt;link href=&#34;/css/hbe.style.css&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="isp" />
        <category term="awb" />
        <category term="mywork" />
        <updated>2022-03-24T13:50:17.399Z</updated>
    </entry>
    <entry>
        <id>https://blog.17lai.site/posts/80938cfe/</id>
        <title>emoji 表情符号</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/80938cfe/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;emoji 表情符号是非常流行的表情符号，几乎没有地方都会支持。这里列举出常用的 emoji 表情不好，方便大家使用与查阅。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;常用符号&#34;&gt;常用符号&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;❤❥웃유♋☮✌☏☢☠✔☑♚▲♪✈✞÷↑↓◆◇⊙■□△▽¿─│♥❣♂♀☿Ⓐ✍✉☣☤✘☒♛▼♫⌘☪≈←→◈◎☉★☆⊿※¡━┃♡ღ ツ

☼☁❅♒✎©®™Σ✪✯☭➳ 卐 √↖↗●◐Θ◤◥︻〖〗┄┆℃℉°✿ϟ☃☂✄¢€£∞✫★½✡×↙↘○◑⊕◣◢︼【】┅┇☽☾✚〓

▂▃▄▅▆▇█▉▊▋▌▍▎▏↔↕☽☾ の•▸◂▴▾┈┊①②③④⑤⑥⑦⑧⑨⑩ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩ ㍿ ▓♨♛❖♓☪✙

┉┋☹☺☻ت ヅツッシ Üϡﭢ™℠℗©®♥❤❥❣❦❧♡۵웃유ღ♋♂♀☿☼☀☁☂☄☾☽❄☃☈⊙☉℃℉❅✺ϟ☇♤♧♡♢♠♣

♥♦☜☞☝✍☚☛☟✌✽✾✿❁❃❋❀⚘☑✓✔√☐☒✗✘ ㄨ ✕✖✖⋆✢✣✤✥❋✦✧✩✰✪✫✬✭✮✯❂✡★✱✲✳✴✵✶✷✸✹✺✻✼❄❅❆❇❈❉❊†☨✞✝☥☦☓☩☯☧☬

☸✡♁✙♆。，、＇：∶；?‘’“”〝〞ˆˇ﹕︰﹔﹖﹑•¨….¸;！´？！～—ˉ ｜‖＂〃｀@﹫¡¿﹏﹋﹌︴々﹟#

﹩$﹠&amp;amp;﹪%*﹡﹢﹦﹤‐￣ ¯―﹨ˆ˜﹍﹎+=&amp;lt;＿*-\ˇ~﹉﹊（）〈〉‹›﹛﹜『』〖〗［］《》〔〕{}「」【】︵︷︿︹︽*﹁﹃︻︶︸﹀︺︾ˉ﹂﹄︼☩☨☦✞✛✜✝✙✠✚†‡◉○◌◍◎●◐◑◒◓◔◕◖◗❂☢⊗⊙◘◙◍⅟½⅓⅕⅙⅛⅔⅖⅚⅜¾⅗⅝⅞⅘≂≃≄≅≆≇≈≉≊≋≌

≍≎≏≐≑≒≓≔≕≖≗≘≙≚≛≜≝≞≟≠≡≢≣≤≥≦≧≨≩⊰⊱⋛⋚∫∬∭∮∯∰∱∲∳%℅‰‱㊣㊎㊍㊌㊋㊏㊐㊊㊚㊛㊤㊥

㊦㊧㊨㊒㊞㊑㊒㊓㊔㊕㊖㊗㊘㊜㊝㊟㊠㊡㊢㊩㊪㊫㊬㊭㊮㊯㊰㊙ ㉿ 囍 ♔♕♖♗♘♙♚♛♜♝♞♟ℂℍℕℙℚℝℤℬℰℯℱℊℋℎℐℒℓℳℴ℘ℛℭ℮ℌℑℜℨ♪♫♩♬♭♮♯°øⒶ☮✌☪✡☭✯ 卐 ✐✎✏

✑✒✍✉✁✂✃✄✆✉☎☏➟➡➢➣➤➥➦➧➨➚➘➙➛➜➝➞➸♐➲➳⏎➴➵➶➷➸➹➺➻➼➽←↑→↓↔↕↖↗↘↙↚↛↜↝

↞↟↠↡↢↣↤↥↦↧↨➫➬➩➪➭➮➯➱↩↪↫↬↭↮↯↰↱↲↳↴↵↶↷↸↹↺↻↼↽↾↿⇀⇁⇂⇃⇄⇅⇆⇇⇈⇉⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇕

⇖⇗⇘⇙⇚⇛⇜⇝⇞⇟⇠⇡⇢⇣⇤⇥⇦⇧⇨⇩⇪➀➁➂➃➄➅➆➇➈➉➊➋➌➍➎➏➐➑➒➓㊀㊁㊂㊃㊄㊅㊆㊇㊈㊉ⒶⒷⒸⒹⒺⒻⒼⒽⒾⒿⓀⓁⓂⓃⓄⓅⓆⓇⓈⓉⓊⓋⓌⓍⓎⓏⓐⓑⓒⓓⓔⓕⓖⓗⓘⓙⓚⓛⓜⓝⓞⓟⓠⓡ

ⓢⓣⓤⓥⓦⓧⓨⓩ⒜⒝⒞⒟⒠⒡⒢⒣⒤⒥⒦⒧⒨⒩⒪⒫⒬⒭⒮⒯⒰⒱⒲⒳⒴⒵ⅠⅡⅢⅣⅤ

ⅥⅦⅧⅨⅩⅪⅫⅬⅭⅮⅯⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹⅺⅻⅼⅽⅾⅿ┌┍┎┏┐┑┒┓└┕┖┗┘┙┚┛├┝┞┟┠┡┢┣┤┥┦┧┨┩┪┫
┬┭┮┯┰┱┲┳┴┵┶┷┸┹┺┻┼┽
┾┿╀╁╂╃╄╅╆╇╈╉╊╋╌╍╎╏
═║╒╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡╢╣╤╥╦╧╨╩╪╫╬◤◥◄►▶◀◣◢▲

▼◥▸◂▴▾△▽▷◁⊿▻◅▵▿▹◃❏❐❑❒▀▁▂▃▄▅▆▇▉▊▋█▌▍▎▏▐░▒▓▔▕■□▢▣▤▥▦▧

▨▩▪▫▬▭▮▯ ㋀㋁㋂㋃㋄㋅㋆㋇㋈㋉㋊㋋㏠㏡㏢㏣㏤㏥㏦㏧㏨㏩㏪㏫㏬㏭㏮㏯㏰㏱㏲

㏳㏴㏵㏶㏷㏸㏹㏺㏻㏼㏽㏾㍙㍚㍛㍜㍝㍞㍟㍠㍡㍢㍣㍤㍥㍦㍧㍨㍩㍪㍫㍬㍭㍮㍯㍰㍘

☰☲☱☴☵☶☳☷☯&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;特殊符号&#34;&gt;特殊符号&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;♠♣♧♡♥❤❥❣♂♀✲☀☼☾☽◐◑☺☻☎☏✿❀№↑↓←→√×÷★℃℉°◆◇⊙■□△▽¿½☯✡ ㍿卍卐 ♂♀✚〓㎡♪♫♩♬

㊚㊛囍㊒㊖ Φ♀♂‖KaTeX parse error: Expected ‘EOF’, got ‘&amp;amp;’ at position 3: @*&amp;amp;̲#※卍卐 Ψ♫♬♭♩♪♯♮⌒¶∮…&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;编号序号&#34;&gt;编号序号&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮⑯⑰⑱⑲⑳⓪

❶❷❸❹❺❻❼❽❾❿⓫⓬⓭⓮⓯⓰⓱⓲⓳⓴

㊀㊁㊂㊃㊄㊅㊆㊇㊈㊉㈠㈡㈢㈣㈤㈥㈦㈧㈨㈩⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂⒃⒄⒅⒆⒇

⒈⒉⒊⒋⒌⒍⒎⒏⒐⒑⒒⒓⒔⒕⒖⒗⒘⒙⒚⒛

ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹ

ⒶⒷⒸⒹⒺⒻⒼⒽⒾⒿⓀⓁⓂⓃⓄⓅⓆⓇⓈⓉⓊⓋⓌⓍⓎⓏⓐⓑⓒⓓⓔⓕⓖⓗⓘⓙⓚⓛⓜⓝⓞⓟⓠⓡⓢⓣⓤⓥⓦⓧⓨⓩ

⒜⒝⒞⒟⒠⒡⒢⒣⒤⒥⒦⒧⒨⒩⒪⒫⒬⒭⒮⒯⒰⒱⒲⒳⒴⒵&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;数学符号&#34;&gt;数学符号&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;﹢﹣×÷±/=≌∽≦≧≒ ﹤﹥ ≈≡≠=≤≥&amp;lt;&amp;gt;≮≯∷∶∫∮∝∞∧∨∑∏∪∩∈∵∴⊥∥∠⌒⊙√∟⊿㏒㏑%

‰⅟½⅓⅕⅙⅛⅔⅖⅚⅜¾⅗⅝⅞⅘≂≃≄≅≆≇≈≉≊≋≌≍≎≏≐≑≒≓≔≕≖≗≘≙≚≛≜≝≞≟

≠≡≢≣≤≥≦≧≨≩⊰⊱⋛⋚∫∬∭∮∯∰∱∲∳%℅‰‱øØπ&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;爱心符号&#34;&gt;爱心符号&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;♥❣ღ♠♡♤❤❥&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;标点符号&#34;&gt;标点符号&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;。，、＇：∶；?‘’“”〝〞ˆˇ﹕︰﹔﹖﹑•¨….¸;！´？！～—ˉ ｜‖＂〃｀@﹫¡¿﹏﹋﹌︴

々﹟#﹩$﹠&amp;amp;﹪%*﹡﹢﹦﹤‐￣ ¯―﹨ˆ˜﹍﹎+=&amp;lt;＿*-\ˇ~﹉﹊

（）〈〉‹›﹛﹜『』〖〗［］《》〔〕{}「」【】

︵︷︿︹︽*﹁﹃︻︶︸﹀︺︾ˉ﹂﹄︼❝❞&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;单位符号&#34;&gt;单位符号&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;°′″＄￥〒￠￡％＠℃℉ ﹩﹪‰﹫㎡㏕㎜㎝㎞㏎m³㎎㎏㏄º○¤%$º¹²³&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;货币符号&#34;&gt;货币符号&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;€£Ұ₴$₰¢₤¥₳₲₪₵ 元 ₣₱฿¤₡₮₭₩ރ 円 ₢₥₫₦zł﷼₠₧₯₨Kčर₹ƒ₸ ￠&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;箭头符号（含推导-转换符号）&#34;&gt;箭头符号（含推导 &amp;amp; 转换符号）&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;↑↓←→↖↗↘↙↔↕➻➼➽➸➳➺➻➴➵➶➷➹▶►▷◁◀◄«

»➩➪➫➬➭➮➯➱⏎➲➾➔➘➙➚➛➜➝➞➟➠➡➢➣➤➥➦➧➨

↚↛↜↝↞↟↠↠↡↢↣↤↤↥↦↧↨⇄⇅⇆⇇⇈⇉⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇖⇗⇘⇙

⇜↩↪↫↬↭↮↯↰↱↲↳↴↵↶↷↸↹☇☈↼↽↾↿⇀⇁⇂⇃⇞⇟⇠⇡⇢⇣⇤⇥⇦⇧⇨⇩⇪↺↻⇚⇛♐&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;符号图案&#34;&gt;符号图案&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;✐✎✏✑✒✍✉✁✂✃✄✆✉☎☏☑✓✔√☐☒✗✘ ㄨ ✕✖✖☢☠☣✈★☆✡ 囍㍿ ☯☰☲☱☴☵☶☳☷

☜☞☝✍☚☛☟✌♤♧♡♢♠♣♥♦☀☁☂❄☃♨웃유❖☽☾☪✿♂♀✪✯☭➳ 卍卐 √×■◆●○◐◑✙☺☻

❀⚘♔♕♖♗♘♙♚♛♜♝♞♟♧♡♂♀♠♣♥❤☜☞☎☏⊙◎☺☻☼▧▨♨◐◑↔↕▪▒◊◦▣▤▥▦▩◘◈◇

♬♪♩♭♪ の ★☆→ あぃ￡ Ю〓§♤♥▶¤✲❈✿✲❈➹☀☂☁【】┱┲❣✚✪✣✤✥✦❉❥❦❧❃❂❁❀✄☪☣☢☠☭ღ▶▷◀◁

☀☁☂☃☄★☆☇☈⊙☊☋☌☍ⓛⓞⓥⓔ╬『』∴☀♫♬♩♭♪☆∷﹌の ★◎▶☺☻►◄▧▨♨◐◑↔↕↘▀▄█▌

◦☼♪ の ☆→♧ ぃ￡ ❤▒▬♦◊◦♠♣▣۰•❤•۰►◄▧▨♨◐◑↔↕▪▫☼♦⊙●○①⊕◎Θ⊙¤ ㊣ ★☆♀◆◇◣◢◥▲▼△▽⊿◤◥

✐✌✍✡✓✔✕✖♂♀♥♡☜☞☎☏⊙◎☺☻►◄▧▨♨◐◑↔↕♥♡▪▫☼♦▀▄█▌▐░▒▬♦◊◘◙◦☼♠♣▣▤▥▦▩◘◙◈

♫♬♪♩♭♪✄☪☣☢☠♯♩♪♫♬♭♮☎☏☪♈ºº₪¤큐«»™♂✿♥ 　 ◕‿-｡　｡◕‿◕｡&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;希腊字母&#34;&gt;希腊字母&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ

αβγδεζνξοπρσηθικλμτυφχψω&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;俄语字母&#34;&gt;俄语字母&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвг

деёжзийклмнопрстуфхцчшщъыьэюя&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;汉语拼音&#34;&gt;汉语拼音&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;āáǎàōóǒòēéěèīíǐìūúǔùǖǘǚǜüêɑńňɡ ㄅㄆㄇㄈㄉ

ㄊㄋㄌㄍㄎㄏㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞ

ㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩ&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;中文字符&#34;&gt;中文字符&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;零壹贰叁肆伍陆柒捌玖拾佰仟万亿吉太拍艾分厘毫微

卍卐卄巜弍弎弐朤氺曱甴囍兀々〆のぁ〡〢〣〤〥〦〧〨〩

㊎㊍㊌㊋㊏㊚㊛㊐㊊㊣㊤㊥㊦㊧㊨㊒㊫㊑㊓㊔㊕㊖㊗㊘㊜㊝㊞㊟㊠㊡㊢㊩㊪㊬㊭㊮㊯㊰

㊀㊁㊂㊃㊄㊅㊆㊇㊈㊉&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;日文符号&#34;&gt;日文符号&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてで

とどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎ

わゐゑをんゔゕゖァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタ

ダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユ

ョヨラリルレロヮワヰヱヲンヴヵヶヷヸヹヺ・ーヽヾヿ゠ㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;制表符号&#34;&gt;制表符号&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;─ ━│┃╌╍╎╏┄ ┅┆┇┈ ┉┊┋┌┍┎┏┐┑┒┓└ ┕┖┗ ┘┙┚┛├┝┞┟┠┡┢┣ ┤┥┦┧┨┩┪┫┬ ┭ ┮ ┯ ┰ ┱ ┲ ┳

┴ ┵ ┶ ┷ ┸ ┹ ┺ ┻┼ ┽ ┾ ┿ ╀ ╁ ╂ ╃ ╄ ╅ ╆ ╇ ╈ ╉ ╊ ╋ ╪ ╫ ╬═║╒╓╔ ╕╖╗╘╙╚ ╛╜╝╞╟╠ ╡╢╣

╤ ╥ ╦ ╧ ╨ ╩ ╳╔ ╗╝╚ ╬ ═ ╓ ╩ ┠ ┨┯ ┷┏ ┓┗ ┛┳ ⊥ ﹃ ﹄┌ ╮ ╭ ╯╰&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;皇冠符号&#34;&gt;皇冠符号&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;♚ 　 ♛ 　 ♝ 　 ♞ 　 ♜ 　 ♟ 　 ♔ 　 ♕ 　 ♗ 　 ♘ 　 ♖ 　 ♟&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;彩色表情符号&#34;&gt;彩色表情符号&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;🌹🍀🍎💰📱🌙🍁🍂🍃🌷💎🔪🔫🏀⚽⚡👄👍🔥&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;常用-emoji-符号&#34;&gt;常用 emoji 符号&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;😀😁😂😃😄😅😆😉😊😋😎😍😘😗😙😚☺😇😐😑😶😏😣😥😮😯😪😫😴😌😛😜😝😒😓😔😕😲😷😖😞😟😤😢😭😦😧😨😬😰😱😳😵😡😠😈👿👹👺💀👻👽👦👧👨👩👴👵👶👱👮👲👳👷👸💂🎅👰👼💆💇🙍🙎🙅🙆💁🙋🙇🙌🙏👤👥🚶🏃👯💃👫👬👭💏💑👪💪👈👉☝👆👇✌✋👌👍👎✊👊👋👏👐✍👣👀👂👃👅👄💋👓👔👕👖👗👘👙👚👛👜👝🎒💼👞👟👠👡👢👑👒🎩🎓💄💅💍🌂🙈🙉🙊🐵🐒🐶🐕🐩🐺🐱😺😸😹😻😼😽🙀😿😾🐈🐯🐅🐆🐴🐎🐮🐂🐃🐄🐷🐖🐗🐽🐏🐑🐐🐪🐫🐘🐭🐁🐀🐹🐰🐇🐻🐨🐼🐾🐔🐓🐣🐤🐥🐦🐧🐸🐊🐢🐍🐲🐉🐳🐋🐬🐟🐠🐡🐙🐚🐌🐛🐜🐝🐞🦋💐🌸💮🌹🌺🌻🌼🌷🌱🌲🌳🌴🌵🌾🌿🍀🍁🍂🍃🌍🌎🌏🌐🌑🌒🌓🌔🌕🌖🌗🌘🌙🌚🌛🌜☀🌝🌞⭐🌟🌠☁⛅☔⚡❄🔥💧🌊💩🍇🍈🍉🍊🍋🍌🍍🍎🍏🍐🍑🍒🍓🍅🍆🌽🍄🌰🍞🍖🍗🍔🍟🍕🍳🍲🍱🍘🍙🍚🍛🍜🍝🍠🍢🍣🍤🍥🍡🍦🍧🍨🍩🍪🎂🍰🍫🍬🍭🍮🍯🍼☕🍵🍶🍷🍸🍹🍺🍻🍴🎪🎭🎨🎰🚣🛀🎫🏆⚽⚾🏀🏈🏉🎾🎱🎳⛳🎣🎽🎿🏂🏄🏇🏊🚴🚵🎯🎮🎲🎷🎸🎺🎻🎬👾🌋🗻🏠🏡🏢🏣🏤🏥🏦🏨🏩🏪🏫🏬🏭🏯🏰💒🗼🗽⛪⛲🌁🌃🌆🌇🌉🌌🎠🎡🎢🚂🚃🚄🚅🚆🚇🚈🚉🚊🚝🚞🚋🚌🚍🚎🚏🚐🚑🚒🚓🚔🚕🚖🚗🚘🚚🚛🚜🚲⛽🚨🚥🚦🚧⚓⛵🚤🚢✈💺🚁🚟🚠🚡🚀🎑🗿🛂🛃🛄🛅💌💎🔪💈🚪🚽🚿🛁⌛⏳⌚⏰🎈🎉🎊🎎🎏🎐🎀🎁📯📻📱📲☎📞📟📠🔋🔌💻💽💾💿📀🎥📺📷📹📼🔍🔎🔬🔭📡💡🔦🏮📔📕📖📗📘📙📚📓📃📜📄📰📑🔖💰💴💵💶💷💸💳✉📧📨📩📤📥📦📫📪📬📭📮✏✒📝📁📂📅📆📇📈📉📊📋📌📍📎📏📐✂🔒🔓🔏🔐🔑🔨🔫🔧🔩🔗💉💊🚬🔮🚩🎌💦💨💣☠♠♥♦♣🀄🎴🔇🔈🔉🔊📢📣💤💢💬💭♨🌀🔔🔕✡✝🔯📛🔰🔱⭕✅☑✔✖❌❎➕➖➗➰➿〽✳✴❇‼⁉❓❔❕❗©®™🎦🔅🔆💯🔠🔡🔢🔣🔤🅰🆎🅱🆑🆒🆓ℹ🆔Ⓜ🆕🆖🅾🆗🅿🆘🆙🆚🈁🈂🈷🈶🈯 🉐 🈹🈚🈲 🉑 🈸🈴🈳 ㊗㊙ 🈺🈵▪▫◻◼◽◾⬛⬜🔶🔷🔸🔹🔺🔻💠🔲🔳⚪⚫🔴🔵♈♉♊♋♌♍♎♏♐♑♒♓⛎💘❤💓💔💕💖💗💙💚💛💜💝💞💟❣🌿🚧💒☎📟💽⬆↗➡↘⬇↙⬅↖↕↔↩↪⤴⤵🔃🔄🔙🔚🔛🔜🔝🔀🔁🔂▶⏩◀⏪🔼⏫🔽⏬📱📶📳📴♻🏧🚮🚰♿🚹🚺🚻🚼🚾⚠🚸⛔🚫🚳🚭🚯🚱🚷🔞&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/bilicard.css&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="web" />
        <category term="emoji" />
        <updated>2022-03-23T10:18:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.17lai.site/posts/3b296307/</id>
        <title>winrar 去广告和破解</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/3b296307/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;WinRAR 是一款不错的解压缩软件，但还是收费软件，广告不少，今天就总结了一下网上的各路教程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/hexo@latest/medias_webp/cover/winrar.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;crack-winrar&#34;&gt;crack winrar&lt;/h2&gt;
&lt;p&gt;首先通过特殊方式获取软件许可：&lt;br&gt;
新建一个文本文档&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1920220319200929.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这个文本文档里输入内容：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-key&#34; data-language=&#34;key&#34;&gt;&lt;code class=&#34;language-key&#34;&gt;RAR registration data``Federal Agency ``for` `Education``1000000 PC usage license``UID=b621cca9a84bc5deffbf``6412612250ffbf533df6db2dfe8ccc3aae5362c06d54762105357d``5e3b1489e751c76bf6e0640001014be50a52303fed29664b074145``7e567d04159ad8defc3fb6edf32831fd1966f72c21c0c53c02fbbb``2f91cfca671d9c482b11b8ac3281cb21378e85606494da349941fa``e9ee328f12dc73e90b6356b921fbfb8522d6562a6a4b97e8ef6c9f``fb866be1e3826b5aa126a4d2bfe9336ad63003fc0e71c307fc2c60``64416495d4c55a0cc82d402110498da970812063934815d81470829275&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0320211103230820.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后将文件名改为：rarreg.key&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0320211103231031.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;再将这个文件导入 WinRAR 的安装文件夹&lt;br&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0320211103231545.png&#34; alt=&#34;img&#34;&gt;&lt;br&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0320211103231839.png&#34; alt=&#34;img&#34;&gt;&lt;br&gt;
这时点开关于 WinRAR，已经获取许可。&lt;br&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0320211103231800.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;去除广告&#34;&gt;去除广告&lt;/h2&gt;
&lt;p&gt;接下来使用 Resource Hacker 软件打开 &lt;strong&gt;winrar&lt;/strong&gt;.exe&lt;br&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0320211103231916.png&#34; alt=&#34;img&#34;&gt;&lt;br&gt;
进入字串表，找到 “80”，删除 “1267” 和 “1277” 行&lt;br&gt;
点击绿色三角形按钮，编译。&lt;br&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0320211103231939.png&#34; alt=&#34;img&#34;&gt;&lt;br&gt;
然后：文件→另存为，进行保存。&lt;br&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0320211103232002.png&#34; alt=&#34;img&#34;&gt;&lt;br&gt;
然后对源文件：winrar.exe 进行替换，注意，要关闭 winrar 软件&lt;br&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0320211103232039.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;至此，已经完成破解和去广告了。&lt;/p&gt;
&lt;p&gt;参考来源 52pojie&lt;/p&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/bilicard.css&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="tools" />
        <category term="winrar" />
        <category term="crack" />
        <updated>2022-03-19T12:00:47.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.17lai.site/posts/90e60aac/</id>
        <title>使用 Shell 脚本实现一个简单 Docker</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/90e60aac/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;《使用 Shell 脚本实现 Docker》旨在通过一系列的实验使用户对 docker 的底层技术，如 Namespace、CGroups、rootfs、联合加载等有一个感性的认识。在此过程中，我们还将通过 Shell 脚本一步一步地实现一个简易的 docker，以期使读者在使用 docker 的过程中知其然知其所以然。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们的实验环境为 Ubuntu 18.04 64bit，简易 docker 工程的名字为 docker.sh，该工程仓库地址如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-html&#34; data-language=&#34;html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;https://github.com/pandengyang/docker.sh.git
https://github.com/appotry/docker.sh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;《使用 Shell 脚本实现 Docker》目录如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;1. Namespace
1.1. Namespace简介
1.2. uts namespace
1.2.1. uts namespace简介
1.2.2. docker.sh
1.3. mount namespace
1.3.1. /etc/mtab、/proc/self/mounts
1.3.2. /proc/self/mountinfo
1.3.3. bind mount
1.3.4. mount namespace简介
1.3.5. docker.sh
1.4. pid namespace
1.4.1. unshare的--fork选项
1.4.2. pid namespace简介
1.4.3. pid嵌套
1.4.4. docker.sh
2. CGroups
2.1. CGroups简介
2.2. 限制内存
2.2.1. 用CGroups限制内存
2.2.2. docker.sh
3. 切换根文件系统
3.1. 根文件系统
3.2. pivot_root
3.3. docker.sh
4. 联合加载
4.1. 联合加载简介
4.2. AUFS
4.3. docker.sh
5. 卷
5.1. 卷简介
5.2. docker.sh
6. 后记&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;1-Namespace&#34;&gt;1.Namespace&lt;/h2&gt;
&lt;h3 id=&#34;1-1-Namespace简介&#34;&gt;1.1.Namespace 简介&lt;/h3&gt;
&lt;p&gt;传统上，在 Linux 中，许多资源是全局管理的。例如，系统中的所有进程按照惯例是通过 PID 标识的，这意味着内核必须管理一个全局的 PID 列表。而且，所有调用者通过 uname 系统调用返回的系统相关信息都是相同的。用户 id 的管理方式类似，即各个用户是通过一个全局唯一的 UID 标识。&lt;/p&gt;
&lt;p&gt;Namespace 是 Linux 用来隔离上述全局资源的一种方式。把一个或多个进程加入到同一个 namespace 中后，这些进程只会看到该 namespace 中的资源。namespace 是后来加入到 Linux 中的，为了兼容之前的全局资源管理方式，Linux 为每一种资源准备了一个全局的 namespace。Linux 中的每一个进程都默认加入了这些全局 namespace。&lt;/p&gt;
&lt;p&gt;Linux 中的每个进程都有一个 /proc/[pid]/ns/ 目录，里面包含了该进程所属的 namespace 信息。我们查看一下当前 Shell 的 /proc/[pid]/ns 目录，命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ls&lt;/span&gt; -l /proc/&lt;span class=&#34;token variable&#34;&gt;$$&lt;/span&gt;/ns
total &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;
lrwxrwxrwx &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; phl phl &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; Jan &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt; 08:43 cgroup -&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; cgroup:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4026531835&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
lrwxrwxrwx &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; phl phl &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; Jan &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt; 08:43 ipc -&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; ipc:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4026531839&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
lrwxrwxrwx &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; phl phl &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; Jan &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt; 08:43 mnt -&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; mnt:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4026531840&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
lrwxrwxrwx &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; phl phl &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; Jan &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt; 08:43 net -&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; net:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4026531993&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
lrwxrwxrwx &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; phl phl &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; Jan &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt; 08:43 pid -&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; pid:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4026531836&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
lrwxrwxrwx &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; phl phl &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; Jan &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt; 08:43 pid_for_children -&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; pid:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4026531836&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
lrwxrwxrwx &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; phl phl &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; Jan &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt; 08:43 user -&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; user:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4026531837&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
lrwxrwxrwx &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; phl phl &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; Jan &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt; 08:43 uts -&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; uts:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4026531838&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该目录下有很多符号链接，每个符号链接代表一个该进程所属的 namespace。用 readlink 读取这些符号链接可以查看进程所属的 namespace id。我们读一下当前 Shell 所属的 uts namespace id，命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; readlink /proc/&lt;span class=&#34;token variable&#34;&gt;$$&lt;/span&gt;/ns/uts
uts:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4026531838&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;后文中我们将介绍 uts namespace、mount namespace、pid namespace 的用法。&lt;/p&gt;
&lt;h3 id=&#34;1-2-uts-namespace&#34;&gt;1.2.uts namespace&lt;/h3&gt;
&lt;h4 id=&#34;1-2-1-uts-namespace简介&#34;&gt;1.2.1.uts namespace 简介&lt;/h4&gt;
&lt;p&gt;uts namespace 用于隔离系统的主机名等信息，我们将通过实验学习其用法。在实验过程中，我们采用如下的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查看全局 uts namespace 信息&lt;/li&gt;
&lt;li&gt;新建一个 uts namespace，查看其信息并作出修改&lt;/li&gt;
&lt;li&gt;查看全局 uts namespace，查看其是否被新建的 uts namespace 影响到&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于其他 namespace，我们也采取类似的步骤进行实验学习。&lt;/p&gt;
&lt;p&gt;首先，我们查看一下全局的 hostname 及 uts namespace id。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;hostname&lt;/span&gt;
kernelnewbies

phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; readlink /proc/&lt;span class=&#34;token variable&#34;&gt;$$&lt;/span&gt;/ns/uts
uts:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4026531838&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后，我们创建一个新的 uts namespace，并查看其 namespce id。&lt;/p&gt;
&lt;p&gt;在继续之前，需要介绍一个 namespace 工具 unshare。利用 unshare 我们可以新建一个的 namespace，并在新 namespace 中执行一条命令。unshare 执行时需要 root 权限。unshare 的使用方法如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;unshare &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;options&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;program &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;arguments&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行 unshare 时，我们可以指定要新建的 namespace 的类型以及要执行的命令。unshare 提供了一系列选项，当指定某个选项时可新建指定的 namespace。namespace 类型选项如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;--uts 创建新的 uts namespace&lt;/li&gt;
&lt;li&gt;--mount 创建新的 mount namespace&lt;/li&gt;
&lt;li&gt;--pid 创建新的 pid namespace&lt;/li&gt;
&lt;li&gt;--user 创建新的 user namespace&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;介绍完 unshare 之后，我们继续之前的实验。我们用 unshare 创建一个新的 uts namespace，并在新的 uts namespace 中执行 /bin/bash 命令，命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; unshare --uts /bin/bash
root@kernelnewbies:~&lt;span class=&#34;token comment&#34;&gt;#&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们用 unshare 创建了一个新的 uts namespace。在新的 uts namespace 中查看其 hostname 和 namespace id，命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;hostname&lt;/span&gt;
kernelnewbies

root@kernelnewbies:~&lt;span class=&#34;token comment&#34;&gt;# readlink /proc/$$/ns/uts&lt;/span&gt;
uts:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4026532177&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，新 uts namespace 的 id 与全局 uts namespace 的 id 不一致。这说明 /bin/bash 已运行在一个新的 uts namespace 中了。&lt;/p&gt;
&lt;p&gt;我们将新 uts namespace 的 hostname 改为 dreamland，并强制更新 Shell 提示符。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kernelnewbies:~&lt;span class=&#34;token comment&#34;&gt;# hostname dreamland&lt;/span&gt;
root@kernelnewbies:~&lt;span class=&#34;token comment&#34;&gt;# hostname&lt;/span&gt;
dreamland

root@kernelnewbies:~&lt;span class=&#34;token comment&#34;&gt;# exec /bin/bash&lt;/span&gt;
root@dreamland:~&lt;span class=&#34;token comment&#34;&gt;#&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，新 uts namespace 的 hostname 的确是被修改了，exec /bin/bash 用于强制更新 Shell 的提示符。&lt;/p&gt;
&lt;p&gt;我们重新打开一个 Shell 窗口，该 Shell 位于全局 uts namespace 中。在新的 Shell 窗口中查看全局 uts namespace id 及 hostname，命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;hostname&lt;/span&gt;
kernelnewbies

phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; readlink /proc/&lt;span class=&#34;token variable&#34;&gt;$$&lt;/span&gt;/ns/uts
uts:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4026531838&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，我们在新 uts namespace 中所作的修改并未影响到全局的 uts namespace。&lt;/p&gt;
&lt;p&gt;父进程创建子进程时只有提供创建新 namespace 的标志，才可创建新的 namespace，并使子进程处于新的 namespace 中。默认情况下，子进程与父进程处于相同的 namespace 中。我们在新的 uts namespace 中创建一个子进程，然后查看该子进程的 uts namespace id，命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; unshare --uts /bin/bash
root@kernelnewbies:~&lt;span class=&#34;token comment&#34;&gt;# readlink /proc/$$/ns/uts&lt;/span&gt;
uts:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4026532305&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;

root@kernelnewbies:~&lt;span class=&#34;token comment&#34;&gt;# bash&lt;/span&gt;
root@kernelnewbies:~&lt;span class=&#34;token comment&#34;&gt;# readlink /proc/$$/ns/uts&lt;/span&gt;
uts:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4026532305&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，子进程所属 uts namespace 的 id 与其父进程相同。其他 namespae 与 uts namespace 类似，子进程与父进程同属一个 namespace。&lt;/p&gt;
&lt;h4 id=&#34;1-2-2-docker-sh&#34;&gt;1.2.2.docker.sh&lt;/h4&gt;
&lt;p&gt;有了以上关于 uts namespace 的介绍，我们就可以将 uts namespace 加入到 docker.sh 中了。docker.sh 工程分为两个脚本：docker.sh 和 container.sh。&lt;/p&gt;
&lt;p&gt;docker.sh 用于收集用户输入、调用 unshare 创建 namespace 并执行 container.sh 脚本，docker.sh 脚本如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token shebang important&#34;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&#34;token function-name function&#34;&gt;usage&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; -e &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token entity&#34; title=&#34;\033&#34;&gt;\033&lt;/span&gt;[31mIMPORTANT: Run As Root&lt;span class=&#34;token entity&#34; title=&#34;\033&#34;&gt;\033&lt;/span&gt;[0m&#34;&lt;/span&gt;
        &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;
        &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Usage:    docker.sh [OPTIONS]&#34;&lt;/span&gt;
        &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;
        &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;A docker written by shell&#34;&lt;/span&gt;
        &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;
        &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Options:&#34;&lt;/span&gt;
        &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;          -c string       docker command&#34;&lt;/span&gt;
        &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;                          (&lt;span class=&#34;token entity&#34; title=&#34;\&amp;quot;&#34;&gt;\&#34;&lt;/span&gt;run&lt;span class=&#34;token entity&#34; title=&#34;\&amp;quot;&#34;&gt;\&#34;&lt;/span&gt;)&#34;&lt;/span&gt;
        &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;          -m              memory&#34;&lt;/span&gt;
        &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;                          (&lt;span class=&#34;token entity&#34; title=&#34;\&amp;quot;&#34;&gt;\&#34;&lt;/span&gt;100M, 200M, 300M...&lt;span class=&#34;token entity&#34; title=&#34;\&amp;quot;&#34;&gt;\&#34;&lt;/span&gt;)&#34;&lt;/span&gt;
        &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;          -C string       container name&#34;&lt;/span&gt;
        &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;          -I string       image name&#34;&lt;/span&gt;
        &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;          -V string       volume&#34;&lt;/span&gt;
        &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;          -P string       program to run in container&#34;&lt;/span&gt;

        &lt;span class=&#34;token builtin class-name&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;whoami&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; root
&lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;
        usage
        &lt;span class=&#34;token builtin class-name&#34;&gt;exit&lt;/span&gt; -1
&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;getopts&lt;/span&gt; c:m:C:I:V:P: option
&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$option&lt;/span&gt;&#34;&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt;
                c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$OPTARG&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
                m&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;memory&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$OPTARG&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
                C&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$OPTARG&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
                I&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$OPTARG&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
                V&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;volume&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$OPTARG&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
                P&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;program&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$OPTARG&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;?&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; usage
                    &lt;span class=&#34;token builtin class-name&#34;&gt;exit&lt;/span&gt; -2&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;esac&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;

&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$cmd&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;memory&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$memory&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$image&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;volume&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$volume&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;program&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$program&lt;/span&gt;

unshare --uts ./container.sh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;脚本最开始为 usage 函数，该函数为 docker.sh 的使用说明。当用户以非预期的方式使用 docker.sh 时，该函数会被调用。该函数输出如下信息：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;IMPORTANT: Run As Root

Usage:  docker.sh &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;OPTIONS&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;

A &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; written by shell

Options:
                -c string       &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;command&lt;/span&gt;
                                &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;run&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
                -m              memory
                                &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;100M, 200M, 300M...&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
                -C string       container name
                -I string       image name
                -V string       volume
                -P string       program to run &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; container&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从 usage 函数的输出我们可以看到，执行 docker.sh 时需要 root 权限且需要正确地传递参数。&lt;/p&gt;
&lt;p&gt;docker.sh 首先对当前用户进行检测，如果用户不为 root，则打印使用说明并退出脚本；如果用户为 root，则继续执行。检测用户的脚本如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;whoami&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; root
&lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;
        usage
        &lt;span class=&#34;token builtin class-name&#34;&gt;exit&lt;/span&gt; -1
&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后，docker.sh 使用 getopts 从命令行提取参数，然后赋值给合适的变量。从命令行提取参数的脚本如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;getopts&lt;/span&gt; c:m:C:I:V:P: option
&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$option&lt;/span&gt;&#34;&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt;
                c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$OPTARG&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
                m&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;memory&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$OPTARG&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
                C&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$OPTARG&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
                I&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$OPTARG&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
                V&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;volume&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$OPTARG&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
                P&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;program&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$OPTARG&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;?&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; usage
                    &lt;span class=&#34;token builtin class-name&#34;&gt;exit&lt;/span&gt; -2&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;esac&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果用户的输入不正确，则打印使用说明并退出脚本；如果用户输入正确，则解析命令行参数并赋值给合适的变量。&lt;/p&gt;
&lt;p&gt;为了简化，用户在运行 docker.sh 时需提供完整的参数列表，示例如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; ./docker.sh -c run -m 100M -C dreamland -I ubuntu1604 -V data1 -P /bin/bash&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然，如果当前用户就是 root，就不需要 sudo 了。下表列出了各个参数的含义及示例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1820220318143125.png&#34; alt=&#34;使用 Shell 脚本实现 Docker&#34;&gt;&lt;/p&gt;
&lt;p&gt;docker.sh 将命令行参数赋值给变量后，需要将这些变量导出，以传递给 container.sh。导出变量的脚本如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$cmd&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;memory&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$memory&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$image&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;volume&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$volume&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;program&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$program&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里说明一下为什么要将 docker.sh 工程拆分为 docker.sh 和 container.sh 两个脚本。因为调用 unshare 创建新的 namespace 时，会执行一个命令，该命令在新的 namespace 中运行。该命令一旦结束，unshare 也就结束了，unshare 创建的新 namespace 也就不存在了。&lt;/p&gt;
&lt;p&gt;docker.sh 不会并发地执行 unshare 命令与 unshare 之后的脚本，因此，只有 unshare 结束了，后续脚本才可继续运行。但是当 unshare 结束了，准备执行后续脚本时，新的 namespae 已经不存在了。因此一些加入 cgroups、切换根文件系统等工作必须在 unshare 执行的命令中进行，所以我们采用在 unshare 中执行 container.sh 脚本的方式完成后续的工作。&lt;/p&gt;
&lt;p&gt;最后，docker.sh 调用 unshare 创建新的 uts namespace，并执行 container.sh 脚本。调用 unshare 的脚本如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;unshare --uts ./container.sh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;container.sh 将容器的 hostname 修改为通过 - C 传递的容器的名字，然后执行通过 - P 传递的程序。container.sh 脚本如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token shebang important&#34;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&#34;token function&#34;&gt;hostname&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$program&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在，我们运行 docker.sh，并查看其 hostname。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/docker.sh$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; ./docker.sh -c run -m 100M -C dreamland -I ubuntu1604 -V data1 -P /bin/bash
root@dreamland:~/docker.sh&lt;span class=&#34;token comment&#34;&gt;# hostname&lt;/span&gt;
dreamland&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，容器的 hostname 已经改变为我们传递的容器名字 dreamland 了。&lt;/p&gt;
&lt;h3 id=&#34;1-3-mount-namespace&#34;&gt;1.3.mount namespace&lt;/h3&gt;
&lt;h4 id=&#34;1-3-1-etc-mtab、-proc-self-mounts&#34;&gt;1.3.1./etc/mtab、/proc/self/mounts&lt;/h4&gt;
&lt;p&gt;早期的 Linux 使用 /etc/mtab 文件来记录当前的挂载点信息。每次 mount/umount 文件系统时会更新 /etc/mtab 文件中的信息。&lt;/p&gt;
&lt;p&gt;后来，linux 引入了 mount namespace，每个进程都有一份自己的挂载点信息。当然，处于同一个 mount namespace 里面的进程，其挂载点信息是相同的。进程的挂载点信息通过 /proc/[pid]/mounts 文件导出给用户。&lt;/p&gt;
&lt;p&gt;为了兼容以前的 /etc/mtab，/etc/mtab 变成了指向 /proc/self/mounts 的符号链接。通过 readlink 查看 /etc/mtab 指向的文件，命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ readlink /etc/mtab
&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;/proc/self/mounts&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过读取 /proc/self/mounts 文件，可以查看当前的挂载点信息，命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; /proc/self/mounts
sysfs /sys sysfs rw,nosuid,nodev,noexec,relatime &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;
proc /proc proc rw,nosuid,nodev,noexec,relatime &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;
/dev/sda1 / ext4 rw,relatime,errors&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;remount-ro &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;
securityfs /sys/kernel/security securityfs rw,nosuid,nodev,noexec,relatime &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由于该文件中内容太多，我们省略了一部分，只保留了一些比较重要的挂载点信息。每行的信息分为六个字段，各字段的含义及示例如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1820220318143143.png&#34; alt=&#34;使用 Shell 脚本实现 Docker&#34;&gt;&lt;/p&gt;
&lt;p&gt;由于该文件有点过时，被后文介绍的 /proc/self/mountinfo 替换掉，所以不做过多介绍。&lt;/p&gt;
&lt;h4 id=&#34;1-3-2-proc-self-mountinfo&#34;&gt;1.3.2./proc/self/mountinfo&lt;/h4&gt;
&lt;p&gt;/proc/self/mountinfo 包含了进程 mount namespace 中的挂载点信息。 它提供了旧的 /proc/[pid]/mounts 文件中缺少的各种信息（传播状态，挂载点 id，父挂载点 id 等），并解决了 /proc/[pid]/mounts 文件的一些其他缺陷。我们查看进程挂载点信息时应优先使用该文件。&lt;/p&gt;
&lt;p&gt;该文件中每一行代表一个挂载点信息，每个挂载点信息分为 11 个字段。挂载点信息的示例如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1820220318143124.png&#34; alt=&#34;使用 Shell 脚本实现 Docker&#34;&gt;&lt;/p&gt;
&lt;p&gt;各字段的含义及示例如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1820220318143118.png&#34; alt=&#34;使用 Shell 脚本实现 Docker&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们主要关注可选字段中的传播状态选项。首先，我们看一下关于 mount namespace 的问题。问题如下：&lt;/p&gt;
&lt;p&gt;当创建 mount namespace 时，新 mount namespace 会拷贝一份老 mount namespace 里面的挂载点信息。例如，全局 mount namespace 中有一个 /a 挂载点，新建的 mount namespace 中也会有一个 /a 挂载点。那么我们在新 mount namespace 中的 /a 下创建或删除一个挂载点，全局 mount namespace 中的 /a 会同步创建或删除该挂载点吗？或者在全局 mount namespace 中的 /a 下创建或删除一个挂载点，新 mount namespace 中的 /a 会同步创建或删除该挂载点吗？&lt;/p&gt;
&lt;p&gt;mountinfo 文件中可选字段的传播状态就是控制在一个挂载点下进行创建 / 删除挂载点操作时是否会传播到其他挂载点的选项。传播状态有四种可取值，常见的有如下两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;shared 表示创建 / 删除挂载点的操作会传播到其他挂载点&lt;/li&gt;
&lt;li&gt; private 表示创建 / 删除挂载点的操作不会传播到其他挂载点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于在容器技术中要保证主机与容器的挂载点信息互不影响，因此要求容器中的挂载点的传播状态为 private。&lt;/p&gt;
&lt;h4 id=&#34;1-3-3-bind-mount&#34;&gt;1.3.3.bind mount&lt;/h4&gt;
&lt;p&gt;bind mount 可以将一个目录（源目录）挂载到另一个目录（目的目录），在目的目录里面的读写操作将直接作用于源目录。&lt;/p&gt;
&lt;p&gt;下面我们通过实验了解一下 bind mount 的功能，首先，我们准备一下实验所需要的的目录及文件。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;bind&lt;/span&gt;
phl@kernelnewbies:~$ &lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; bind/
phl@kernelnewbies:~/bind$ &lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; a
phl@kernelnewbies:~/bind$ &lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; b
phl@kernelnewbies:~/bind$ &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; hello, a &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; a/a.txt
phl@kernelnewbies:~/bind$ &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; hello, b &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; b/b.txt&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后，我们将 a 目录 bind mount 到 b 目录并查看 b 目录下的内容。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/bind$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt; --bind a b
phl@kernelnewbies:~/bind$ tree b
b
└── a.txt
&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; directories, &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;file&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，b 目录下原先的内容被隐藏，取而代之的是 a 目录下的内容。&lt;/p&gt;
&lt;p&gt;然后，我们修改 b 目录下的内容，修改完毕后，从 b 目录上卸载掉 a 目录。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/bind$ &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; hello, a from b &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; b/a.txt
phl@kernelnewbies:~/bind$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;umount&lt;/span&gt; b&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们读取一下 a 目录中 a.txt，看看其内容是否被改变。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/bind$ &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; a/a.txt
hello, a from b&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，a 目录中的内容确实被当 a 被 bind mount 到 b 时对 b 目录的操作所修改了。&lt;/p&gt;
&lt;p&gt;bind mount 在容器技术中有很重要的用途，后文会有涉及。&lt;/p&gt;
&lt;h4 id=&#34;1-3-4-mount-namespace简介&#34;&gt;1.3.4.mount namespace 简介&lt;/h4&gt;
&lt;p&gt;mount namespace 用来隔离文件系统的挂载点信息，使得不同的 mount namespace 拥有自己独立的挂载点信息。不同的 namespace 之间不会相互影响，其在 unshare 中的选项为 --mount。&lt;/p&gt;
&lt;p&gt;当用 unshare 创建新的 mount namespace 时，新创建的 namespace 将拷贝一份老 namespace 里的挂载点信息，但从这之后，他们就没有关系了。这是 unshare 将新 namespace 里面的所有挂载点的传播状态设置为 private 实现的。通过 mount 和 umount 增加和删除各自 mount namespace 里面的挂载点都不会相互影响。&lt;/p&gt;
&lt;p&gt;下面我们将演示 mount namespace 的用法。首先，我们准备需要的目录和文件，命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; -p hds/hd1 hds/hd2 &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; hds

phl@kernelnewbies:~/hds$ &lt;span class=&#34;token function&#34;&gt;dd&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;/dev/zero &lt;span class=&#34;token assign-left variable&#34;&gt;bs&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;1M &lt;span class=&#34;token assign-left variable&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;hd1.img &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mkfs.ext2 hd1.img
phl@kernelnewbies:~/hds$ &lt;span class=&#34;token function&#34;&gt;dd&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;/dev/zero &lt;span class=&#34;token assign-left variable&#34;&gt;bs&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;1M &lt;span class=&#34;token assign-left variable&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;hd2.img &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mkfs.ext2 hd2.img

phl@kernelnewbies:~$ tree &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;
├── hd1
├── hd1.img
├── hd2
└── hd2.img
&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; directories, &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; files&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后，我们在全局的 mount namespace 中挂载 hd1.img 到 hd1 目录，然后查看该 mount namespace 中的挂载点信息与 mount namespace id。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/hds$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt; hd1.img hd1
phl@kernelnewbies:~/hds$ &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; /proc/self/mountinfo &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; hd
&lt;span class=&#34;token number&#34;&gt;556&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;27&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;:18 / /home/phl/hds/hd1 rw,relatime shared:372 - ext2 /dev/loop18 rw

phl@kernelnewbies:~/hds$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; readlink /proc/&lt;span class=&#34;token variable&#34;&gt;$$&lt;/span&gt;/ns/mnt
mnt:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4026531840&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后，执行 unshare 命令创建一个新的 mount namespace 并查看该 mount namespace id 和挂载点信息。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/hds$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; unshare --uts --mount /bin/bash
root@kernelnewbies:~/hds&lt;span class=&#34;token comment&#34;&gt;# cat /proc/self/mountinfo | grep hd&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;739&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;570&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;:18 / /home/phl/hds/hd1 rw,relatime - ext2 /dev/loop18 rw

root@kernelnewbies:~/hds&lt;span class=&#34;token comment&#34;&gt;# readlink /proc/$$/ns/mnt&lt;/span&gt;
mnt:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4026532180&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，新 mount namespace 中的挂载点信息与全局 mountnamespace 中的挂载点信息基本一致，一些挂载选项（如传播状态）变化了。新的 mount namespace id 与全局 mount namespace id 是不一样的。&lt;/p&gt;
&lt;p&gt;然后，我们在新的 mount namespace 中挂载 hd2.img 到 hd2 目录，并查看挂载点信息。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kernelnewbies:~/hds&lt;span class=&#34;token comment&#34;&gt;# mount hd2.img hd2&lt;/span&gt;
root@kernelnewbies:~/hds&lt;span class=&#34;token comment&#34;&gt;# cat /proc/self/mountinfo | grep hd&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;739&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;570&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;:18 / /home/phl/hds/hd1 rw,relatime - ext2 /dev/loop18 rw
&lt;span class=&#34;token number&#34;&gt;740&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;570&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;:19 / /home/phl/hds/hd2 rw,relatime - ext2 /dev/loop19 rw&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，新 mount namespace 中有 hd1 和 hd2 这两个挂载点。现在启动一个新的 Shell 窗口，查看全局 mount namespace 中的挂载点信息。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/hds$ &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; /proc/self/mountinfo &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; hd
&lt;span class=&#34;token number&#34;&gt;556&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;27&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;:18 / /home/phl/hds/hd1 rw,relatime shared:372 - ext2 /dev/loop18 rw&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，全局 mount namespace 中的挂载点信息只有 hd1，而没有 hd2。这说明在新 mount namespace 中进行挂载 / 卸载操作不会影响其他 mount namespace 中的挂载点信息。&lt;/p&gt;
&lt;p&gt;mount namespace 只隔离挂载点信息，并不隔离挂载点下面的文件信息。对于多个 mount namespace 都能看到的挂载点，如果在一个 namespace 中修改了挂载点下面的文件，其他 namespace 也能感知到。下面，我们在新建的 mount namespace 中创建一个文件，命令如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kernelnewbies:~/hds&lt;span class=&#34;token comment&#34;&gt;# echo hello from new mount namespace &amp;gt; hd1/hello.txt&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在新启动的 Shell 中，查看 hd1 目录并读取 hd1/hello.txt 文件。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/hds$ tree hd1
hd1
├── hello.txt
└── lost+found &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;error opening dir&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; directory, &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;file&lt;/span&gt;

phl@kernelnewbies:~/hds$ &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; hd1/hello.txt
hello from new &lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt; namespace&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，在全局 mount namespace 中，我们可以读取到在新建的 mount namespace 中创建的文件。&lt;/p&gt;
&lt;h4 id=&#34;1-3-5-docker-sh&#34;&gt;1.3.5.docker.sh&lt;/h4&gt;
&lt;p&gt;有了以上关于 mount namespace 的知识，我们就可以将 mount namespace 加入到 docker.sh 中了。mount namespace 将放在 docker.sh 中，带下划线的行是我们为实现 mount namespace 而修改的代码。修改后的 docker.sh 脚本如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.
unshare --uts --mount ./container.sh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从上述代码我们可以看到，我们仅仅是在调用 unshare 时加入 --mount 选项，就可为 docker.sh 引入了 mount namespace 功能。&lt;/p&gt;
&lt;h3 id=&#34;1-4-pid-namespace&#34;&gt;1.4.pid namespace&lt;/h3&gt;
&lt;h4 id=&#34;1-4-1-unshare的-fork选项&#34;&gt;1.4.1.unshare 的 --fork 选项&lt;/h4&gt;
&lt;p&gt;unshare 有一个选项 --fork，当执行 unshare 时，如果没有这个选项，unshare 会直接 exec 新命令，也就是说 unshare 变成了新命令。如果带有 --fork 选项，unshare 会 fork 一个子进程，该子进程 exec 新命令，unshare 是该子进程的父进程。我们分别不带 --fork 和带 --fork 来执行 unshare，然后查看进程之间的关系。&lt;/p&gt;
&lt;p&gt;首先，我们不带 --fork 选项执行 unshare，并查看当前 Shell 的进程 id。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; unshare --uts /bin/bash
root@kernelnewbies:~/hds&lt;span class=&#34;token comment&#34;&gt;# echo $$&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;11699&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时 unshare 会创建一个新的 uts namespace，然后 exec /bin/bash。我们启动一个新 Shell，然后使用 pstree 查看进程间关系，命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/hds$ pstree -p &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11699&lt;/span&gt;
sudo&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;11698&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;---bash&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;11699&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，sudo fork 出一个子进程，该子进程执行 unshare。unshare 创建了新 uts namespace 后，exec 了 /bin/bash，也就是说 unshare 变成了 /bin/bash。&lt;/p&gt;
&lt;p&gt;然后，我们带 --fork 选项执行 unshare，并查看当前 Shell 的进程 id。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/hds$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; unshare --uts --fork /bin/bash
root@kernelnewbies:~/hds&lt;span class=&#34;token comment&#34;&gt;# echo $$&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;11866&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时 unshare 会创建一个新的 uts namespace，然后 fork 出一个子进程，该子进程 exec /bin/bash。我们启动一个新 Shell，然后使用 pstree 查看进程间关系，命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/hds$ pstree -p &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11866&lt;/span&gt;
sudo&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;11864&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;---unshare&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;11865&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;---bash&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;11866&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，sudo fork 出一个子进程，该子进程执行命令 unshare。unshare 创建了新 uts namespace 后，fork 出一个子进程，该子进程 exec /bin/bash，也就是说 unshare 变成了新的 /bin/bash 进程的父进程。&lt;/p&gt;
&lt;h4 id=&#34;1-4-2-pid-namespace简介&#34;&gt;1.4.2.pid namespace 简介&lt;/h4&gt;
&lt;p&gt;pid namespace 用来隔离进程 pid 空间，使得不同 pid namespace 里的进程 pid 可以重复且相互之间不影响。进程所属的 pid namespace 在创建的时候就确定了，无法更改，因此需要 --fork 选项来创建一个新进程，然后将该新进程加入新建的 pid namespace 中。pid namespace 在 unshare 中的选项为 --pid。&lt;/p&gt;
&lt;p&gt;unshare 在创建 pid namespace 时需同时提供 --pid 与 --fork 选项。unshare 本身会加入全局的 pid namespace，其 fork 出的子进程会加入新建的 pid namespace。&lt;/p&gt;
&lt;p&gt;首先，我们查看全局 pid namespace id，命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; readlink /proc/&lt;span class=&#34;token variable&#34;&gt;$$&lt;/span&gt;/ns/pid
pid:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4026531836&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后，执行 unshare 命令创建一个新的 pid namespace 并查看该 pid namespace id。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; unshare --mount --pid --fork /bin/bash
root@kernelnewbies:~&lt;span class=&#34;token comment&#34;&gt;# readlink /proc/$$/ns/pid&lt;/span&gt;
pid:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4026531836&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，新创建的进程也处于全局 pid namespace 中，而不是新的 pid namespace。&lt;/p&gt;
&lt;p&gt;出现这种情形是因为当前的 /proc 文件系统是老的。我们查看一下 $$ 的值，命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kernelnewbies:~&lt;span class=&#34;token comment&#34;&gt;# echo $$&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，$$ 的值为 1，但是 /proc 文件系统却是老的，因此我们查看的实际是 init 进程所属的 pid namespace，当然是全局 pid namespace 了。&lt;/p&gt;
&lt;p&gt;重新挂载 /proc 文件系统，这也是 unshare 执行时带 --mount 选项的原因，只有这样，重新挂载 /proc 文件系统时，不会搞乱整个系统。再次查看新进程所属的 pid namespace，命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kernelnewbies:~&lt;span class=&#34;token comment&#34;&gt;# mount -t proc proc /proc&lt;/span&gt;
root@kernelnewbies:~&lt;span class=&#34;token comment&#34;&gt;# readlink /proc/$$/ns/pid&lt;/span&gt;
pid:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4026532182&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，新进程的 pid namespace 与全局 pid namespace 的 id 不同。&lt;/p&gt;
&lt;p&gt;接下来，我们再来查看一下新 pid namespace 中的进程信息。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kernelnewbies:~&lt;span class=&#34;token comment&#34;&gt;# ps -ef&lt;/span&gt;
&lt;span class=&#34;token environment constant&#34;&gt;UID&lt;/span&gt;        PID  &lt;span class=&#34;token environment constant&#34;&gt;PPID&lt;/span&gt;  C STIME TTY          TIME CMD
root         &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;     &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;19&lt;/span&gt;:03 pts/1    00:00:00 /bin/bash
root        &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;     &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;19&lt;/span&gt;:03 pts/1    00:00:00 &lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt; -e&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，当前 pid namespace 中只有 2 个进程，看不到全局 pid namespace 里面的其他进程。我们通过 unshare 执行的进程 pid 为 1，也就是说该进程成了新 pid namespace 中的 init 进程。&lt;/p&gt;
&lt;h4 id=&#34;1-4-3-pid嵌套&#34;&gt;1.4.3.pid 嵌套&lt;/h4&gt;
&lt;p&gt;pid namespace 可以嵌套，也就是说有父子关系，在当前 pid namespace 里面创建的所有新的 pid namespace 都是当前 pid namespace 的子 pid namespace。&lt;/p&gt;
&lt;p&gt;首先，我们创建 3 个嵌套的 pid namespace，并查看每个 pid namespace id。--mount-proc 选项用于自动挂载 /proc 文件系统，省去了手动挂载 /proc 文件系统的操作。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; readlink /proc/&lt;span class=&#34;token variable&#34;&gt;$$&lt;/span&gt;/ns/pid
pid:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4026531836&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;

phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; unshare --uts --mount --pid --mount-proc --fork /bin/bash
root@kernelnewbies:~&lt;span class=&#34;token comment&#34;&gt;# readlink /proc/$$/ns/pid&lt;/span&gt;
pid:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4026532182&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;

root@kernelnewbies:~&lt;span class=&#34;token comment&#34;&gt;# unshare --uts --mount --pid --mount-proc --fork /bin/bash&lt;/span&gt;
root@kernelnewbies:~&lt;span class=&#34;token comment&#34;&gt;# readlink /proc/$$/ns/pid&lt;/span&gt;
pid:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4026532185&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;

root@kernelnewbies:~&lt;span class=&#34;token comment&#34;&gt;# unshare --uts --mount --pid --mount-proc --fork /bin/bash&lt;/span&gt;
root@kernelnewbies:~&lt;span class=&#34;token comment&#34;&gt;# readlink /proc/$$/ns/pid&lt;/span&gt;
pid:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4026532188&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后，我们启动一个新 Shell，然后使用 pstree 查看进程间关系。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ pstree -lp &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; unshare
sudo&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12547&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;---unshare&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12548&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;---bash&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12549&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;---unshare&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12579&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;---bash&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12580&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;---unshare&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12593&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;---bash&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12594&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用 cat /proc/[pid]/status | grep NSpid 可查看某进程在当前 pid namespace 及子孙 pid namespace 中的 pid。我们在全局 pid namespace 中查看上述各进程在各 pid namespace 中的 pid，命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; /proc/12594/status &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; NSpid
NSpid: &lt;span class=&#34;token number&#34;&gt;12594&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;21&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;

phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; /proc/12593/status &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; NSpid
NSpid: &lt;span class=&#34;token number&#34;&gt;12593&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;

phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; /proc/12580/status &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; NSpid
NSpid: &lt;span class=&#34;token number&#34;&gt;12580&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;

phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; /proc/12579/status &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; NSpid
NSpid: &lt;span class=&#34;token number&#34;&gt;12579&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;

phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; /proc/12549/status &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; NSpid
NSpid: &lt;span class=&#34;token number&#34;&gt;12549&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面我们将以上进程在各 pid namespace 中的 pid，整理成表格。表格信息如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1820220318143156.png&#34; alt=&#34;使用 Shell 脚本实现 Docker&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们以最后一行为例进行介绍，最后一行有 4 个 pid，这 4 个 pid 其实是同一个进程。这个进程在 4 个 pid namespace 中都可以被看到，且其在 4 个 pid namespace 中的 pid 各不相同。&lt;/p&gt;
&lt;h4 id=&#34;1-4-4-docker-sh&#34;&gt;1.4.4.docker.sh&lt;/h4&gt;
&lt;p&gt;有了以上关于 pid namespace 的知识，我们就可以将 pid namespae 加入到 docker.sh 中了。pid namespace 将放在 docker.sh 中，带下划线的行是我们为实现 pid namespace 而修改的代码。修改后的 docker.sh 脚本如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.
unshare --uts --mount --pid --fork ./container.sh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从上述代码我们可以看到，我们仅仅是在调用 unshare 时加入 --pid 和 --fork 选项，就可为 docker.sh 引入了 pid namespace 功能。&lt;/p&gt;
&lt;p&gt;然后，我们需要重新挂载 /proc 文件系统。重新挂载 /proc 文件系统的功能将放在 container.sh 中，带下划线的行是我们为重新挂载 /proc 文件系统而新添的代码。修改后的 container.sh 脚本如下如下所示：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;hostname&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt; -t proc proc /proc
&lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$program&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在，我们运行 docker.sh，并查看当前的进程信息。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/docker.sh$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; ./docker.sh -c run -m 100M -C dreamland -I ubuntu1604 -V data1 -P /bin/bash
root@dreamland:~/docker.sh&lt;span class=&#34;token comment&#34;&gt;# ps -ef&lt;/span&gt;
&lt;span class=&#34;token environment constant&#34;&gt;UID&lt;/span&gt;        PID  &lt;span class=&#34;token environment constant&#34;&gt;PPID&lt;/span&gt;  C STIME TTY          TIME CMD
root         &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;     &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;17&lt;/span&gt;:31 pts/1    00:00:00 /bin/bash
root        &lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;     &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;17&lt;/span&gt;:31 pts/1    00:00:00 &lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt; -ef&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可看出，当前进程只有两个，不再有主机上的其他进程。&lt;/p&gt;
&lt;h2 id=&#34;2-CGroups&#34;&gt;2.CGroups&lt;/h2&gt;
&lt;h3 id=&#34;2-1-CGroups简介&#34;&gt;2.1.CGroups 简介&lt;/h3&gt;
&lt;p&gt;CGroups 是一种将进程分组，并以组为单位对进程实施资源限制的技术。每个组都包含以下几类信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程列表&lt;/li&gt;
&lt;li&gt;资源 A 限制&lt;/li&gt;
&lt;li&gt;资源 B 限制&lt;/li&gt;
&lt;li&gt;资源 C 限制&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们将以常见的 CPU 资源及内存资源为例进行介绍。以下的信息将使进程号为 1001、1002、2008、3306 的四个进程总共只能使用一个 CPU 核心；总共最多使用 25% 的 CPU 资源；总共最多使用 100M 内存，这样的一个分组被称为 cgroup。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1820220318143103.png&#34; alt=&#34;使用 Shell 脚本实现 Docker&#34;&gt;&lt;/p&gt;
&lt;p&gt;上面的介绍只是说明了要将何种资源限制施加于哪些进程，并未说明资源限制是如何施加到进程上。具体施加资源限制的过程需要 subsystem 来帮忙。subsystem 读取 cgroup 中的资源限制和进程列表，然后将这些资源限制施加到这些进程上。常见的 subsystem 包括如下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cpu&lt;/li&gt;
&lt;li&gt;memory&lt;/li&gt;
&lt;li&gt;pids&lt;/li&gt;
&lt;li&gt;devices&lt;/li&gt;
&lt;li&gt;blkio&lt;/li&gt;
&lt;li&gt;net_cls&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个 subsystem 只读取与其相关的资源限制，然后施加到进程上。例如：memory 子系统只读取内存限制，而 cpu 子系统只读取 cpu 限制。&lt;/p&gt;
&lt;p&gt;cgroup 被组织成树，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1820220318143057.png&#34; alt=&#34;使用 Shell 脚本实现 Docker&#34;&gt;&lt;/p&gt;
&lt;p&gt;采用树状结构可以方便地实现资源限制继承，一个 cgroup 中的资源限制将作用于该 cgroup 及其子孙 cgroup 中的进程。例如：图中 13001、10339、2999 受到 A、B、C、D 四个 cgroup 中的资源限制。这样的一个树状结构被称为 hierarchy。&lt;/p&gt;
&lt;p&gt;hierarchy 中包含了系统中所有的进程，它们分布于各个 cgroup 中。在 hierarchy 中，一个进程必须属于且只属于一个 cgroup，这样才能保证对进程施加的资源限制不会遗漏也不会冲突。&lt;/p&gt;
&lt;p&gt;要想让一个 subsystem 读取 hierarchy 中各 cgroup 的资源限制，并施加于其中的进程需要将 subsystem 和 hierarchy 关联起来。subsystem 与 hierarchy 的关系如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统中可以有多个 hierarchy&lt;/li&gt;
&lt;li&gt; 一个 hierarchy 可以关联 0 个或多个 subsystem，当关联 0 个 subsystem 时，该 hierarchy 只是对进程进行分类&lt;/li&gt;
&lt;li&gt;一个 subsystem 最多关联到一个 hierarchy，因为每个 hierarchy 都包含系统中所有的进程，若一个 subsystem 关联到了多个 hierarchy，对同一进程将有多种资源限制，这是不对的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;系统使用 CGroups 通常有两种形式：一种是创建一个 hierarchy，将所有的 subsystem 关联到其上，在这个 hierarchy 上配置各种资源限制；另一种是为每一个 subsystem 创建一个 hierarchy，并将该 subsystem 关联到其上，每个 hierarchy 只对一种资源进行限制。后一种比较清晰，得到了更普遍的采用。&lt;/p&gt;
&lt;p&gt;CGroups 不像大多数的技术那样提供 API 或命令之类的用户接口，而是提供给用户一个虚拟文件系统，该虚拟文件系统类型为 cgroup。一个挂载后的 cgroup 文件系统就是一个 hierarchy，文件系统中的一个目录就是一个 cgroup，目录中的文件代表了进程列表或者资源限制信息。文件系统是树状结构，其各个目录之间的父子关系就代表了 cgroup 之间的继承关系。挂载 cgroup 虚拟文件系统后，通过在该文件系统上创建目录、写进程列表文件、写资源限制文件就可以操作 CGroups。&lt;/p&gt;
&lt;p&gt;下面，我们通过实验学习一下 CGroups 的用法。首先，我们挂载一个 cgroup 虚拟文件系统，该文件系统不与任何 subsystem 关联，仅仅是将进程进行分类。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; -p cg/test
&lt;span class=&#34;token comment&#34;&gt;# -o none,name=test 表示该cgroup文件系统不与任何子系统关联&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# 该文件系统用name=test来标识&lt;/span&gt;
phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt; -t cgroup -o none,name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;test &lt;span class=&#34;token builtin class-name&#34;&gt;test&lt;/span&gt; cg/test
phl@kernelnewbies:~$ tree cg/test
cg/test
├── cgroup.clone_children
├── cgroup.procs
├── cgroup.sane_behavior
├── notify_on_release
├── release_agent
└── tasks
&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; directories, &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt; files&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;挂载 cgroup 文件系统后，该 cgroup 文件系统的根目录下会生成许多文件，该根目录被称为 root cgroup。cgroup.procs 里面存放的是当前 cgroup 中的所有进程 id，由于该 hierarchy 中只有一个 cgroup，所以这个文件包含了系统中所有的进程 id。其他的文件与 cgroups 基本功能关系不大，暂时可以忽略。&lt;/p&gt;
&lt;p&gt;在 cgroup 文件系统中，创建一个目录就会创建一个 cgroup。下面我们将会演示如何创建下面这样的 hierarchy：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1820220318143054.png&#34; alt=&#34;使用 Shell 脚本实现 Docker&#34;&gt;&lt;/p&gt;
&lt;p&gt;命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; -p cg/test/test1/test11
phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; -p cg/test/test2/test22
phl@kernelnewbies:~$ tree cg/test
cg/test
├── cgroup.clone_children
├── cgroup.procs
├── cgroup.sane_behavior
├── notify_on_release
├── release_agent
├── tasks
├── test1
│   ├── cgroup.clone_children
│   ├── cgroup.procs
│   ├── notify_on_release
│   ├── tasks
│   └── test11
│       ├── cgroup.clone_children
│       ├── cgroup.procs
│       ├── notify_on_release
│       └── tasks
└── test2
    ├── cgroup.clone_children
    ├── cgroup.procs
    ├── notify_on_release
    ├── tasks
    └── test22
        ├── cgroup.clone_children
        ├── cgroup.procs
        ├── notify_on_release
        └── tasks

&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; directories, &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt; files&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，我们创建了相应的目录后，这些目录下自动出现了包含 cgroup 信息的目录及文件。&lt;/p&gt;
&lt;p&gt;删除 cgroup 时只需删除该 cgroup 所在的目录即可。下面我们将删除 test11 cgroup，命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rmdir&lt;/span&gt; cg/test/test1/test11
phl@kernelnewbies:~$ tree cg/test
cg/test
├── cgroup.clone_children
├── cgroup.procs
├── cgroup.sane_behavior
├── notify_on_release
├── release_agent
├── tasks
├── test1
│   ├── cgroup.clone_children
│   ├── cgroup.procs
│   ├── notify_on_release
│   └── tasks
└── test2
    ├── cgroup.clone_children
    ├── cgroup.procs
    ├── notify_on_release
    ├── tasks
    └── test22
        ├── cgroup.clone_children
        ├── cgroup.procs
        ├── notify_on_release
        └── tasks

&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; directories, &lt;span class=&#34;token number&#34;&gt;18&lt;/span&gt; files&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;每个 cgroup 下面都有一个 cgroup.procs 文件，该文件里面包含当前 cgroup 里面的所有进程 id。只要将某个进程的 id 写入该文件，即可将该进程加入到该 cgroup 中。下面，我们将当前的 bash 加入到 test22 cgroup 中，命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$$&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;3894&lt;/span&gt;
phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sh&lt;/span&gt; -c &lt;span class=&#34;token string&#34;&gt;&#34;echo 3894 &amp;gt; cg/test/test2/test22/cgroup.procs&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;/proc/[pid]/cgroup 包含了某个进程所在的 cgroup 信息。下面，我们查看一下当前 bash 进程所在的 cgroup 信息，命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; /proc/3894/cgroup
&lt;span class=&#34;token number&#34;&gt;13&lt;/span&gt;:name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;test:/test2/test22
&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;:freezer:/
&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;:perf_event:/
&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;:blkio:/user.slice
&lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;:devices:/user.slice
&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;:hugetlb:/
&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;:cpu,cpuacct:/user.slice
&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;:net_cls,net_prio:/
&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;:memory:/user.slice
&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;:rdma:/
&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;:pids:/user.slice/user-1001.slice/session-4.scope
&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;:cpuset:/
&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;:name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;systemd:/user.slice/user-1001.slice/session-4.scope
&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;::/user.slice/user-1001.slice/session-4.scope&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，当前 bash 进程加入了多个 cgroup，其中带下划线的行为我们刚刚加入的 cgroup。&lt;/p&gt;
&lt;p&gt;要想将 hierarchy 与子系统关联起来，需要在 - o 选项中指定子系统名称。下面演示了如何将 memory 子系统与新挂载的 cgroup 文件系统关联起来。代码如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; cg/memory
phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt; -t cgroup -o memory memcg cg/memory&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由于很多发行版的操作系统已经为我们配置好了这些 cgroup 文件系统，我们应当直接使用这些已经挂在好的文件系统，不需要自己去挂载。&lt;/p&gt;
&lt;p&gt;另外，当创建子进程时，子进程会自动加入父进程所在的 cgroup。&lt;/p&gt;
&lt;h3 id=&#34;2-2-限制内存&#34;&gt;2.2. 限制内存&lt;/h3&gt;
&lt;h4 id=&#34;2-2-1-用CGroups限制内存&#34;&gt;2.2.1. 用 CGroups 限制内存&lt;/h4&gt;
&lt;p&gt;下面我们将介绍演示 CGroups 如何限制进程使用的内存资源，我们以内存为例进行讲解。&lt;/p&gt;
&lt;p&gt;Ubuntu18.04 已经为我们挂载了一个关联 memory 子系统的 cgroup 虚拟文件系统。我们用 mount 命令查看一下该系统挂载到了何处，命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; cgroup
tmpfs on /sys/fs/cgroup &lt;span class=&#34;token builtin class-name&#34;&gt;type&lt;/span&gt; tmpfs &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ro,nosuid,nodev,noexec,mode&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;755&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
cgroup on /sys/fs/cgroup/unified &lt;span class=&#34;token builtin class-name&#34;&gt;type&lt;/span&gt; cgroup2 &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rw,nosuid,nodev,noexec,relatime,nsdelegate&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
cgroup on /sys/fs/cgroup/systemd &lt;span class=&#34;token builtin class-name&#34;&gt;type&lt;/span&gt; cgroup &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rw,nosuid,nodev,noexec,relatime,xattr,name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;systemd&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
cgroup on /sys/fs/cgroup/cpuset &lt;span class=&#34;token builtin class-name&#34;&gt;type&lt;/span&gt; cgroup &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rw,nosuid,nodev,noexec,relatime,cpuset&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
cgroup on /sys/fs/cgroup/pids &lt;span class=&#34;token builtin class-name&#34;&gt;type&lt;/span&gt; cgroup &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rw,nosuid,nodev,noexec,relatime,pids&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
cgroup on /sys/fs/cgroup/rdma &lt;span class=&#34;token builtin class-name&#34;&gt;type&lt;/span&gt; cgroup &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rw,nosuid,nodev,noexec,relatime,rdma&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
cgroup on /sys/fs/cgroup/memory &lt;span class=&#34;token builtin class-name&#34;&gt;type&lt;/span&gt; cgroup &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rw,nosuid,nodev,noexec,relatime,memory&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
cgroup on /sys/fs/cgroup/net_cls,net_prio &lt;span class=&#34;token builtin class-name&#34;&gt;type&lt;/span&gt; cgroup &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rw,nosuid,nodev,noexec,relatime,net_cls,net_prio&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
cgroup on /sys/fs/cgroup/cpu,cpuacct &lt;span class=&#34;token builtin class-name&#34;&gt;type&lt;/span&gt; cgroup &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rw,nosuid,nodev,noexec,relatime,cpu,cpuacct&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
cgroup on /sys/fs/cgroup/hugetlb &lt;span class=&#34;token builtin class-name&#34;&gt;type&lt;/span&gt; cgroup &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rw,nosuid,nodev,noexec,relatime,hugetlb&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
cgroup on /sys/fs/cgroup/devices &lt;span class=&#34;token builtin class-name&#34;&gt;type&lt;/span&gt; cgroup &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rw,nosuid,nodev,noexec,relatime,devices&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
cgroup on /sys/fs/cgroup/blkio &lt;span class=&#34;token builtin class-name&#34;&gt;type&lt;/span&gt; cgroup &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rw,nosuid,nodev,noexec,relatime,blkio&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
cgroup on /sys/fs/cgroup/perf_event &lt;span class=&#34;token builtin class-name&#34;&gt;type&lt;/span&gt; cgroup &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rw,nosuid,nodev,noexec,relatime,perf_event&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
cgroup on /sys/fs/cgroup/freezer &lt;span class=&#34;token builtin class-name&#34;&gt;type&lt;/span&gt; cgroup &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rw,nosuid,nodev,noexec,relatime,freezer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该系统挂载到了 /sys/fs/cgroup/memory 目录下。我们在该 hierarchy 中创建一个 test cgroup 并查看该 cgroup 的目录结构，命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; /sys/fs/cgroup/memory/test
phl@kernelnewbies:~$ tree /sys/fs/cgroup/memory/test
/sys/fs/cgroup/memory/test
├── cgroup.clone_children
├── cgroup.event_control
├── cgroup.procs
├── memory.failcnt
├── memory.force_empty
├── memory.kmem.failcnt
├── memory.kmem.limit_in_bytes
├── memory.kmem.max_usage_in_bytes
├── memory.kmem.slabinfo
├── memory.kmem.tcp.failcnt
├── memory.kmem.tcp.limit_in_bytes
├── memory.kmem.tcp.max_usage_in_bytes
├── memory.kmem.tcp.usage_in_bytes
├── memory.kmem.usage_in_bytes
├── memory.limit_in_bytes
├── memory.max_usage_in_bytes
├── memory.move_charge_at_immigrate
├── memory.numa_stat
├── memory.oom_control
├── memory.pressure_level
├── memory.soft_limit_in_bytes
├── memory.stat
├── memory.swappiness
├── memory.usage_in_bytes
├── memory.use_hierarchy
├── notify_on_release
└── tasks
&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; directories, &lt;span class=&#34;token number&#34;&gt;27&lt;/span&gt; files&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，新建的 test cgroup 中有许多文件，这些文件中存放着资源限制信息。其中 memory.limit_in_bytes 里面存放的是该 cgroup 中的进程能够使用的内存额度。&lt;/p&gt;
&lt;p&gt;下面，我们将当前 bash 加入到 test cgroup 中并查看当前 bash 所属的 cgroup 信息。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$$&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;2984&lt;/span&gt;
phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sh&lt;/span&gt; -c &lt;span class=&#34;token string&#34;&gt;&#34;echo 2984 &amp;gt; /sys/fs/cgroup/memory/test/cgroup.procs&#34;&lt;/span&gt;
phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; /proc/2984/cgroup
&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;:devices:/user.slice
&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;:hugetlb:/
&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;:memory:/test
&lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;:rdma:/
&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;:perf_event:/
&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;:blkio:/user.slice
&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;:cpu,cpuacct:/user.slice
&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;:pids:/user.slice/user-1001.slice/session-4.scope
&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;:freezer:/
&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;:cpuset:/
&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;:net_cls,net_prio:/
&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;:name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;systemd:/user.slice/user-1001.slice/session-4.scope
&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;::/user.slice/user-1001.slice/session-4.scope&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，当前 bash 所属的 memory cgroup 变为了 /test，该目录为一个相对于 root cgroup 的相对路径。&lt;/p&gt;
&lt;p&gt;然后，将 100M 写入 test cgroup 中的 memory.limit_in_bytes 文件中，命令如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sh&lt;/span&gt; -c &lt;span class=&#34;token string&#34;&gt;&#34;echo 100M &amp;gt; /sys/fs/cgroup/memory/test/memory.limit_in_bytes&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们在当前 bash 中启动一个占用 300M 进程的 stress 进程，该 stress 进程是 bash 的子进程，其与 bash 进程都在 test cgroup 中。命令如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ stress --vm &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; --vm-bytes 300M --vm-keep&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启动一个新的 Shell 窗口，执行 top 命令查看 stress 进程占用的内存。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;PID &lt;span class=&#34;token environment constant&#34;&gt;USER&lt;/span&gt;      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND
&lt;span class=&#34;token number&#34;&gt;14216&lt;/span&gt; root      &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;   &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;315440&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;101224&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;264&lt;/span&gt; D &lt;span class=&#34;token number&#34;&gt;27.7&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;2.5&lt;/span&gt;   &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;:02.66 stress&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，stress 进程占用了 2.5% 的内存。我的电脑的内存为 4G，4G * 2.5% = 100M，stress 进程确实受到了 cgroup 中设置的内存额度的限制。&lt;/p&gt;
&lt;h4 id=&#34;2-2-2-docker-sh&#34;&gt;2.2.2.docker.sh&lt;/h4&gt;
&lt;p&gt;下有了以上关于 CGroups 的知识，我们就可以将限制内存的功能加入到 docker.sh 中了。限制内存的功能将放在 container.sh 中，带下划线的行是我们为实现限制内存而新添的代码。修改后的 container.sh 脚本如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;hostname&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; -p /sys/fs/cgroup/memory/&lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$$&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; /sys/fs/cgroup/memory/&lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;/cgroup.procs
&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$memory&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; /sys/fs/cgroup/memory/&lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;/memory.limit_in_bytes
&lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt; -t proc proc /proc
&lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$program&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;首先，我们根据容器的名字创建 cgroup，命令如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; -p /sys/fs/cgroup/memory/&lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后，我们将当前 bash 加入到我们创建的 cgroup 中，命令如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$$&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; /sys/fs/cgroup/memory/&lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;/cgroup.procs&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后，我们将内存限制写入新 cgroup 的 memory.limit_in_bytes 文件中，命令如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$memory&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; /sys/fs/cgroup/memory/&lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;/memory.limit_in_bytes&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在，我们运行 docker.sh，并启动一个占用 300M 进程的 stress 进程。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/docker.sh$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; ./docker.sh -c run -m 100M -C dreamland -I ubuntu1604 -V data1 -P /bin/bash
root@dreamland:~/docker.sh&lt;span class=&#34;token comment&#34;&gt;# stress --vm 1 --vm-bytes 300M --vm-keep&lt;/span&gt;
stress: info: &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; dispatching hogs: &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; cpu, &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; io, &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; vm, &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; hdd&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启动一个新的 Shell 窗口，执行 top 命令查看 stress 进程占用的内存。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;PID &lt;span class=&#34;token environment constant&#34;&gt;USER&lt;/span&gt;      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND
&lt;span class=&#34;token number&#34;&gt;14216&lt;/span&gt; root      &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;   &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;315440&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;101224&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;264&lt;/span&gt; D &lt;span class=&#34;token number&#34;&gt;27.7&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;2.5&lt;/span&gt;   &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;:02.66 stress&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，容器内的 stress 进程只使用了 100M 的内存。&lt;/p&gt;
&lt;h2 id=&#34;3-切换根文件系统&#34;&gt;3. 切换根文件系统&lt;/h2&gt;
&lt;h3 id=&#34;3-1-根文件系统&#34;&gt;3.1. 根文件系统&lt;/h3&gt;
&lt;p&gt;在容器技术中，根文件系统可为容器进程提供一个与主机不一致的文件系统环境。举个例子，主机为 Ubuntu 18.04，创建的容器采用 Ubuntu 16.04 的根文件系统，那么容器运行时所用的软件及其依赖库、配置文件等都是 Ubuntu 16.04 的。尽管该容器使用的内核是仍旧是 Ubuntu 18.04 的，但应用软件的表现却与 Ubuntu 16.04 一致，从虚拟化的角度来说该容器就是一个 Ubuntu 16.04 系统。&lt;/p&gt;
&lt;p&gt;debootstrap 是 Ubuntu 下的一个工具，用来构建根文件系统。生成的目录符合 Linux 文件系统标准，即包含了 /boot、/etc、/bin、/usr 等目录。debootstrap 的安装命令如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;debootstrap&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面我们通过 debootstrap 构建 Ubuntu 16.04 的根文件系统。为了清晰，我们在 images 目录下生成根文件系统。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/docker.sh$ &lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; images
phl@kernelnewbies:~/docker.sh$ &lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; images
phl@kernelnewbies:~/docker.sh/images$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;debootstrap&lt;/span&gt; --arch amd64 xenial ./ubuntu1604&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;制作根文件系统需要从服务器下载很多文件，很耗时，请耐心等待。当文件系统制作好后，可以使用 tree 命令查看生成的根文件系统。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/docker.sh/images$ tree -L &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; ubuntu1604/
ubuntu1604/
├── bin
├── boot
├── dev
├── etc
├── home
├── lib
├── lib64
├── media
├── mnt
├── old_root
├── opt
├── proc
├── root
├── run
├── sbin
├── srv
├── sys
├── tmp
├── usr
└── var
&lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt; directories, &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; files&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个根文件系统与 Linux 系统目录很相近，我们后续的实验将使用该根文件系统。&lt;/p&gt;
&lt;h3 id=&#34;3-2-pivot-root&#34;&gt;3.2.pivot_root&lt;/h3&gt;
&lt;p&gt;pivot_root 命令用于切换根文件系统，其使用方式如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;pivot_root new_root put_old&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pivot_root 将当前进程的根文件系统移至 put_old 目录并使 new_root 目录成为新的根文件系统。&lt;/p&gt;
&lt;p&gt;下面我们将通过实验学习 pivot_root 的使用方法。为了简单，我们在一个新的 mount namespace 下进行实验。首先，我们创建一个新的 mount namespace，命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/docker.sh/images$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; unshare --mount /bin/bash
root@kernelnewbies:~/docker.sh/images&lt;span class=&#34;token comment&#34;&gt;#&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在我们的实验中，我们的根文件系统将挂载在 ubuntu1604 目录，而老的根文件系统将被移动到 ubuntu1604/old_root 目录下。我们先创建 old_root 目录，命令如下：&lt;/p&gt;
&lt;p&gt;root@kernelnewbies:~/docker.sh/images# mkdir -p ubuntu1604/old_root/&lt;/p&gt;
&lt;p&gt;由于 pivot_root 命令要求老的根目录和新的根目录不能在同一个挂载点下，因此我们通过 bind mount 将 ubuntu1604 目录变成一个挂载点。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kernelnewbies:~/docker.sh/images&lt;span class=&#34;token comment&#34;&gt;# mount --bind ubuntu1604 ubuntu1604&lt;/span&gt;
root@kernelnewbies:~/docker.sh/images&lt;span class=&#34;token comment&#34;&gt;# cat /proc/self/mountinfo | grep ubuntu1604&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;624&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;382&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;:1 /home/phl/docker.sh/images/ubuntu1604 /home/phl/docker.sh/images/ubuntu1604 rw,relatime - ext4 /dev/sda1 rw,errors&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;remount-ro&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;准备好切换根文件系统所需要的条件后，我们调用 pivot_root 切换根文件系统。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kernelnewbies:~/docker.sh/images&lt;span class=&#34;token comment&#34;&gt;# cd ubuntu1604/&lt;/span&gt;
root@kernelnewbies:~/docker.sh/images/ubuntu1604&lt;span class=&#34;token comment&#34;&gt;# pivot_root . old_root/&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时，已完成根文件系统的切换，/proc 文件系统也被挪到了&lt;br&gt;
/home/phl/docker.sh/images/ubuntu1604/old_root/proc，也就是说当前没有 /proc 文件系统，因此，我们无法查看挂载点信息，自然也无法执行一些依赖于 /proc 文件系统的操作。我们需要重新挂载 /proc 文件系统。命令如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kernelnewbies:~/docker.sh/images/ubuntu1604&lt;span class=&#34;token comment&#34;&gt;# mount -t proc proc /proc&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重新挂载 /proc 文件系统后，我们就可以查看当前的挂载点信息了。通过读取 /proc/self/mountinfo 文件来查看系统的挂载点信息。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kernelnewbies:~/docker.sh/images/ubuntu1604&lt;span class=&#34;token comment&#34;&gt;# cat /proc/self/mountinfo&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;382&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;624&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;:1 / /old_root rw,relatime - ext4 /dev/sda1 rw,errors&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;remount-ro
&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.
&lt;span class=&#34;token number&#34;&gt;624&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;381&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;:1 /home/phl/docker.sh/images/ubuntu1604 / rw,relatime - ext4 /dev/sda1 rw,errors&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;remount-ro
&lt;span class=&#34;token number&#34;&gt;625&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;624&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;:5 / /proc rw,relatime - proc proc rw&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时的挂载点很多，为了方便查看，此处只保留了一些主要的挂载点信息。这些挂载点信息包括 /、/proc、/old_root。/old_root 为老的根文件系统，我们需要将其卸载。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kernelnewbies:~/docker.sh/images/ubuntu1604&lt;span class=&#34;token comment&#34;&gt;# umount -l /old_root/&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;卸载掉老的根文件系统后，我们再查看系统的挂载点信息。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kernelnewbies:~/docker.sh/images/ubuntu1604&lt;span class=&#34;token comment&#34;&gt;# cat /proc/self/mountinfo&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;624&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;381&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;:1 /home/phl/docker.sh/images/ubuntu1604 / rw,relatime - ext4 /dev/sda1 rw,errors&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;remount-ro
&lt;span class=&#34;token number&#34;&gt;625&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;624&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;:5 / /proc rw,relatime - proc proc rw&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时，挂载点信息中只有 /、/proc，不再有主机的挂载点信息。&lt;/p&gt;
&lt;h3 id=&#34;3-3-docker-sh&#34;&gt;3.3.docker.sh&lt;/h3&gt;
&lt;p&gt;有了以上关于切换根文件系统的知识，我们就可以将切换根文件系统的功能加入到 docker.sh 中了。切换根文件系统的功能将放在 container.sh 中，带下划线的行是我们为实现切换根文件系统而新添的代码。修改后的 container.sh 脚本如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token shebang important&#34;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&#34;token function&#34;&gt;hostname&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;

&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; -p /sys/fs/cgroup/memory/&lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$$&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; /sys/fs/cgroup/memory/&lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;/cgroup.procs
&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$memory&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; /sys/fs/cgroup/memory/&lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;/memory.limit_in_bytes

&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; -p images/&lt;span class=&#34;token variable&#34;&gt;$image&lt;/span&gt;/old_root
&lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt; --bind images/&lt;span class=&#34;token variable&#34;&gt;$image&lt;/span&gt; images/&lt;span class=&#34;token variable&#34;&gt;$image&lt;/span&gt;

&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; images/&lt;span class=&#34;token variable&#34;&gt;$image&lt;/span&gt;
pivot_root &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt; ./old_root

&lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt; -t proc proc /proc
&lt;span class=&#34;token function&#34;&gt;umount&lt;/span&gt; -l /old_root

&lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$program&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;首先，我们在新的根文件系统目录中创建挂载老的根文件系统的目录。命令如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; -p images/&lt;span class=&#34;token variable&#34;&gt;$image&lt;/span&gt;/old_root&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后，我们将新根文件系统目录 bind mount 成一个挂载点。命令如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt; --bind images/&lt;span class=&#34;token variable&#34;&gt;$image&lt;/span&gt; images/&lt;span class=&#34;token variable&#34;&gt;$image&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后，我们切换根文件系统。命令如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; images/&lt;span class=&#34;token variable&#34;&gt;$image&lt;/span&gt;
pivot_root &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt; ./old_root&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后，我们重新挂载 /proc 文件系统，然后卸载掉老的根文件系统。命令如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt; -t proc proc /proc
&lt;span class=&#34;token function&#34;&gt;umount&lt;/span&gt; -l /old_root&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在，我们运行 docker.sh，并查看当前的发行版信息。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/docker.sh$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; ./docker.sh -c run -m 100M -C dreamland -I ubuntu1604 -V data1 -P /bin/bash
root@dreamland:/&lt;span class=&#34;token comment&#34;&gt;# cat /etc/issue&lt;/span&gt;
Ubuntu &lt;span class=&#34;token number&#34;&gt;16.04&lt;/span&gt; LTS &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;n &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;l&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看出，读出的发行版信息是 Ubuntu 16.04 LTS \n \l，而非主机的 Ubuntu 18.04.3 LTS \n \l。这说明当前使用的根文件系统确实是 ubuntu16.04 目录下的根文件系统，而非主机的根文件系统。&lt;/p&gt;
&lt;p&gt;我们再查看一下当前的挂载点信息，看看是否只有 / 与 /proc。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;root@dreamland:/&lt;span class=&#34;token comment&#34;&gt;# cat /proc/self/mountinfo&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;625&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;381&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;:1 /home/phl/docker.sh/images/ubuntu1604 / rw,relatime - ext4 /dev/sda1 rw,errors&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;remount-ro
&lt;span class=&#34;token number&#34;&gt;626&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;625&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;:52 / /proc rw,relatime - proc proc rw&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可看出，当前挂载点信息中只有 /、/proc，不再有主机的挂载点信息。&lt;/p&gt;
&lt;p&gt;通过根文件系统，我们实现了在容器中虚拟出与主机不一样的操作系统的功能。&lt;/p&gt;
&lt;h2 id=&#34;4-联合加载&#34;&gt;4. 联合加载&lt;/h2&gt;
&lt;h3 id=&#34;4-1-联合加载简介&#34;&gt;4.1. 联合加载简介&lt;/h3&gt;
&lt;p&gt;联合加载指的是一次同时加载多个文件系统，但是在外面看起来只能看到 一个文件系统。联合加载会将各层文件系统叠加到一起，这样最终的文件系统会 包含所有底层的文件和目录。&lt;/p&gt;
&lt;p&gt;联合加载的多个文件系统中有一个是可读写文件系统，称为读写层，其他文件系统是只读的，称为只读层。当联合加载的文件系统发生变化时，这些变化都应用到这个读写层。比如，如果想修改一个文件，这个文件首先会从只读层复制到读写层。原只读层中的文件依然存在，但是被读写层中的该文件副本所隐藏。我们以后读写该文件时，都是读写的该文件在读写层中的副本。这种机制被称为 写时复制。&lt;/p&gt;
&lt;p&gt;我们之前实现的 docker.sh，有一个很大的缺陷。那就是，如果使用相同的根文件系统同时启动多个容器的实例，那么，这些容器实例使用的根文件系统位于同一个目录。我们在不同的容器实例对根文件系统所作的修改，这些容器彼此之间都可以看到，甚至一个容器可以覆覆盖另一个容器所作的修改。同时，容器实例退出时，对根文件系统所作的修改也直接作用于其所使用的根文件系统。当我们使用该根文件系统再次启动容器实例时，新启动的容器实例也可以看到以前的这些修改。例如，我们用 ubuntu1604 根文件系统启动两个容器实例，命令如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/docker.sh$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; ./docker.sh -c run -m 100M -C dreamland -I ubuntu1604 -V data1 -P /bin/bash
phl@kernelnewbies:~/docker.sh$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; ./docker.sh -c run -m 100M -C dreamland2 -I ubuntu1604 -V data1 -P /bin/bash&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这两个容器实例对根文件系统做的修改彼此都可以看到。容器实例退出时，这些修改也被保存了下来，当用 ubuntu1604 根文件系统启动新的容器实例时，新实例也可看到以前实例所做的修改。&lt;/p&gt;
&lt;p&gt;如果容器使用的根文件系统是一个联合加载的文件系统，原先的根文件系统作为一个只读层，再添加一个读写层，那么，在容器内所作的修改都将只作用于读写层。为了区分，我们以后称 ubuntu1604 目录下的根文件系统为镜像。而我们可以为每一个容器实例指定一个唯一的读写层目录，这样的话，多个容器实例就可以使用同一个镜像，容器内所作的修改不会影响彼此，也不会影响到以后启动的容器实例。例如：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/docker.sh$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; ./docker.sh -c run -m 100M -C dreamland -I ubuntu1604 -V data1 -P /bin/bash
phl@kernelnewbies:~/docker.sh$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; ./docker.sh -c run -m 100M -C dreamland2 -I ubuntu1604 -V data1 -P /bin/bash&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们使用 ubuntu1604 镜像启动了两个容器示例，并在容器实例里进行读写操作。这两个容器实例的读写层目录是不一样的，在容器实例中所作的修改只作用于各自的读写层，彼此之间不会影响，当然更不会影响到后续启动的容器实例。&lt;/p&gt;
&lt;h3 id=&#34;4-2-AUFS&#34;&gt;4.2. AUFS&lt;/h3&gt;
&lt;p&gt;AUFS 是一个实现了联合加载功能的文件系统。我们将采用 AUFS 实现 docker.sh 中的联合加载功能。&lt;/p&gt;
&lt;p&gt;下面，我们将通过实验演示一下 AUFS 文件系统的用法。首先，我们准备需要用到的目录及文件。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~$ &lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; aufs
phl@kernelnewbies:~$ &lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; aufs/
phl@kernelnewbies:~/aufs$ &lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; rw r1 r2 union
phl@kernelnewbies:~/aufs$ &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; hello r1 &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; r1/hellor1.txt
phl@kernelnewbies:~/aufs$ &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; hello r2 &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; r2/hellor2.txt
phl@kernelnewbies:~/aufs$ &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; hello rw &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; rw/hellorw.txt&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下表列出了各个目录的作用。列表如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rw 为 aufs 文件系统的读写层目录&lt;/li&gt;
&lt;li&gt; r1 为 aufs 文件系统的只读层目录&lt;/li&gt;
&lt;li&gt; r2 为 aufs 文件系统的只读层目录&lt;/li&gt;
&lt;li&gt; union 为挂载点，联合加载的 aufs 文件系统挂载于此目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们将 rw、r1、r2 联合加载到 union 目录。命令如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/aufs$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt; -t aufs -o &lt;span class=&#34;token assign-left variable&#34;&gt;dirs&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;rw:r1:r2 none union&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;-t aufs 表示要挂载的文件系统类型为 AUFS&lt;/li&gt;
&lt;li&gt;-o dirs=rw:r1:r2 表示要将哪些目录加载到 afus 文件系统中，多个目录之间以：分隔。目录列表中的第一个目录表示读写层目录&lt;/li&gt;
&lt;li&gt; union 表示 aufs 文件系统要挂载的目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;挂载好 AUFS 文件系统后，我们进入该文件系统，查看其内容。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/aufs$ &lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; union/
phl@kernelnewbies:~/aufs/union$ &lt;span class=&#34;token function&#34;&gt;ls&lt;/span&gt;
hellor1.txt hellor2.txt hellorw.txt&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从输出结果来看，rw、r1、r2 目录下的内容全部出现在了 AUFS 文件系统中，该文件系统由 rw、r1、r2 目录叠加而成。&lt;/p&gt;
&lt;p&gt;然后，我们修改这些文件，看看原始的 rw、r1、r2 目录下的文件是否更改。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/aufs/union$ &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; hello to r1 from union &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; hellor1.txt
phl@kernelnewbies:~/aufs/union$ &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; hello to r2 from union &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; hellor2.txt
phl@kernelnewbies:~/aufs/union$ &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; hello to rw from union &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; hellorw.txt&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们返回到 aufs 目录，直接查看 aufs 目录下的内容。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/aufs$ tree &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;
├── r1
│   └── hellor1.txt
├── r2
│   └── hellor2.txt
├── rw
│   ├── hellor1.txt
│   ├── hellor2.txt
│   └── hellorw.txt
└── union
    ├── hellor1.txt
    ├── hellor2.txt
    └── hellorw.txt

&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; directories, &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt; files&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从输出结果我们可以看到，我们修改的 hellor1.txt 和 hellor2.txt 文件分别被拷贝了一份放在读写层目录 rw 中。我们查看一下这些文件的内容，命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/aufs$ &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; r1/hellor1.txt
hello r1
phl@kernelnewbies:~/aufs$ &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; r2/hellor2.txt
hello r2
phl@kernelnewbies:~/aufs$ &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; rw/hellor1.txt
hello to r1 from union
phl@kernelnewbies:~/aufs$ &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; rw/hellor2.txt
hello to r2 from union
phl@kernelnewbies:~/aufs$ &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; rw/hellorw.txt
hello to rw from union&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从输出结果我们看到，用户修改只读层 r1、r2 中的文件时，这些文件被复制到了读写层，我们修改的是读写层的副本，原只读层中的文件没有变化。用户修改读写层 rw 中的文件时，修改直接作用于这些文件本身。&lt;/p&gt;
&lt;h3 id=&#34;4-3-docker-sh&#34;&gt;4.3.docker.sh&lt;/h3&gt;
&lt;p&gt;在继续之前，我们需要将上一章在 ubuntu1604 根文件系统中创建的 old_root 目录删除掉，以保证该根文件系统跟刚制作好时一样。命令及结果如下：&lt;/p&gt;
&lt;p&gt;phl@kernelnewbies:~/docker.sh$ sudo rm -rf images/ubuntu1604/old_root&lt;/p&gt;
&lt;p&gt;有了以上关于联合加载的介绍，我们就可以将联合加载功能加入到 docker.sh 中了。联合加载功能将放在 container.sh 脚本中，带下划线的行是我们为实现联合加载功能而新添的代码。修改后的 container.sh 如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token shebang important&#34;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&#34;token function&#34;&gt;hostname&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;

&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; -p /sys/fs/cgroup/memory/&lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$$&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; /sys/fs/cgroup/memory/&lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;/cgroup.procs
&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$memory&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; /sys/fs/cgroup/memory/&lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;/memory.limit_in_bytes

&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; -p &lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;/rwlayer
&lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt; -t aufs -o &lt;span class=&#34;token assign-left variable&#34;&gt;dirs&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;/rwlayer:./images/&lt;span class=&#34;token variable&#34;&gt;$image&lt;/span&gt; none &lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;

&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; -p &lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;/old_root
&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;
pivot_root &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt; ./old_root

&lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt; -t proc proc /proc
&lt;span class=&#34;token function&#34;&gt;umount&lt;/span&gt; -l /old_root

&lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$program&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;首先，我们根据容器的名字创建联合加载需要的读写层目录及文件系统挂载目录。命令如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; -p &lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;/rwlayer&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;假如我们传递的容器的名字为 dreamland，将创建以下目录：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/docker.sh$ tree dreamland/
dreamland/
└── rwlayer&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中 dreamland/rwlayer 目录为创建的 AUFS 文件系统的读写层，dreamland 目录为 AUFS 文件系统的挂载点。&lt;/p&gt;
&lt;p&gt;然后我们将镜像目录、读写层目录联合加载到挂载点目录。命令如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt; -t aufs -o &lt;span class=&#34;token assign-left variable&#34;&gt;dirs&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;/rwlayer:./images/&lt;span class=&#34;token variable&#34;&gt;$image&lt;/span&gt; none &lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;假如容器名字为 dreamland，使用的镜像为 ubuntu1604 根文件系统，dreamland/rwlayer、images/ubuntu1604 将被联合加载的 dreamland 目录。其中，dreamland/rwlayer 为 AUFS 文件系统的读写层，images/ubuntu1604 为 AUFS 文件系统的只读层。&lt;/p&gt;
&lt;p&gt;之前我们将老的根文件系统挪到了 rootfs/old_root，rootfs 代表一个具体的镜像目录。创建 old_root 目录时直接修改了该镜像。下面我们将老的根文件系统的挂载点目录放在 AUFS 文件系统中，并将老的根文件系统挪到此处。命令如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; -p &lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;/old_root
&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;
pivot_root &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt; ./old_root&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时，$container 目录本身就是一个挂载点，挂载了 AUFS 文件系统。因此下面的代码就被移除了：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt; --bind images/&lt;span class=&#34;token variable&#34;&gt;$image&lt;/span&gt; images/&lt;span class=&#34;token variable&#34;&gt;$image&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在，我们运行 docker.sh，并在 /root 下创建一个文件。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/docker.sh$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; ./docker.sh -c run -m 100M -C dreamland -I ubuntu1604 -V data1 -P /bin/bash
root@dreamland:/&lt;span class=&#34;token comment&#34;&gt;# cd /root&lt;/span&gt;
root@dreamland:/root&lt;span class=&#34;token comment&#34;&gt;# ls&lt;/span&gt;
root@dreamland:/root&lt;span class=&#34;token comment&#34;&gt;# cat /etc/issue &amp;gt; hello.txt&lt;/span&gt;
root@dreamland:/root&lt;span class=&#34;token comment&#34;&gt;# cat hello.txt&lt;/span&gt;
Ubuntu &lt;span class=&#34;token number&#34;&gt;16.04&lt;/span&gt; LTS &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;n &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;l&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启动一个新的 Shell 窗口，查看一下该容器使用的 AUFS 文件系统。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/docker.sh$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; tree dreamland/
dreamland/
└── rwlayer
    ├── old_root
    └── root
        └── hello.txt

&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; directories, &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;file&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，我们新建的文件及创建的老根文件系统的挂载点目录都出现在了读写层。我们再查看一下新创建的文件。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/docker.sh$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; dreamland/rwlayer/root/hello.txt
Ubuntu &lt;span class=&#34;token number&#34;&gt;16.04&lt;/span&gt; LTS &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;n &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;l&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;文件内容是 Ubuntu 16.04 的发行版信息。&lt;/p&gt;
&lt;p&gt;通过联合加载，我们实现了在容器中的读写不会影响使用的镜像。这样使用 ubuntu1604 镜像创建多个容器时，彼此之间就不会相互影响了。&lt;/p&gt;
&lt;h2 id=&#34;5-卷&#34;&gt;5. 卷&lt;/h2&gt;
&lt;h3 id=&#34;5-1-卷简介&#34;&gt;5.1. 卷简介&lt;/h3&gt;
&lt;p&gt;卷是容器内的一个目录，这个目录可以绕过联合文件系统，提供数据共享（容器所使用的的联合文件系统不应该被主机或其他容器访问）与数据持久化的功能。&lt;/p&gt;
&lt;p&gt;举个例子，假如容器有个目录为 /data 的卷，我们向这个卷写入的内容不会出现在联合文件系统的读写层，而是直接出现在这个目录里。主机与其他容器也可以访问该目录，从而达到数据共享与数据持久化的目的。&lt;/p&gt;
&lt;p&gt;卷位于联合文件系统中，通常来说写入该目录的内容会被写入容器的读写层中，那么怎样才能是写入卷的目录直接出现在该目录中，而不是容器读写层呢？其实方法很简单，只要我们将该目录变成一个挂载点就行，变成挂载点后，这个目录中的内容就不属于联合文件系统了，写入该目录的内容自然会保存在挂载到该挂载点的设备中。&lt;/p&gt;
&lt;h3 id=&#34;5-2-docker-sh&#34;&gt;5.2 docker.sh&lt;/h3&gt;
&lt;p&gt;有了以上关于卷的介绍，我们就可以将卷功能加入到 docker.sh 中了。卷功能将放在 container.sh 脚本中，带下划线的行是我们为实现卷功能而新添的代码。修改后的 container.sh 脚本如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token shebang important&#34;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&#34;token function&#34;&gt;hostname&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;

&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; -p /sys/fs/cgroup/memory/&lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$$&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; /sys/fs/cgroup/memory/&lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;/cgroup.procs
&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$memory&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; /sys/fs/cgroup/memory/&lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;/memory.limit_in_bytes

&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; -p &lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;/rwlayer
&lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt; -t aufs -o &lt;span class=&#34;token assign-left variable&#34;&gt;dirs&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;/rwlayer:./images/&lt;span class=&#34;token variable&#34;&gt;$image&lt;/span&gt; none &lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;

&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; -p &lt;span class=&#34;token variable&#34;&gt;$volume&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; -p &lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;/&lt;span class=&#34;token variable&#34;&gt;$volume&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt; --bind &lt;span class=&#34;token variable&#34;&gt;$volume&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;/&lt;span class=&#34;token variable&#34;&gt;$volume&lt;/span&gt;

&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; -p &lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;/old_root
&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;
pivot_root &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt; ./old_root

&lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt; -t proc proc /proc
&lt;span class=&#34;token function&#34;&gt;umount&lt;/span&gt; -l /old_root

&lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$program&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;首先，我们根据卷的名字创建主机卷目录，我们在容器内部对卷的修改，都将作用于此目录。命令如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; -p &lt;span class=&#34;token variable&#34;&gt;$volume&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后，我们在容器内部创建同名卷目录，该目录本身会出现在容器的读写层中，因为该目录是在 AUFS 文件系统中创建的。因为&lt;img src=&#34;https://math.now.sh?inline=container%E7%9B%AE%E5%BD%95%E4%B8%BA%E5%AE%B9%E5%99%A8%E7%9A%84%E6%A0%B9%E7%9B%AE%E5%BD%95%EF%BC%8C%E6%89%80%E4%BB%A5%E5%AE%B9%E5%99%A8%E5%86%85%E9%83%A8%E5%8D%B7%E7%9B%AE%E5%BD%95%E7%9A%84%E8%B7%AF%E5%BE%84%E4%B8%BA%2F&#34; style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;&#34;&gt;volume。命令如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; -p &lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;/&lt;span class=&#34;token variable&#34;&gt;$volume&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将主机上的卷目录 bind mount 到容器内部的卷目录上，这样容器内部对卷目录的修改，都将作用于主机卷目录。命令如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt; --bind &lt;span class=&#34;token variable&#34;&gt;$volume&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$container&lt;/span&gt;/&lt;span class=&#34;token variable&#34;&gt;$volume&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在，我们运行 docker.sh，并在卷目录（/data1）中创建一个文件。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/docker.sh$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; ./docker.sh -c run -m 100M -C dreamland -I ubuntu1604 -V data1 -P /bin/bash
root@dreamland:/&lt;span class=&#34;token comment&#34;&gt;# cd /data1&lt;/span&gt;
root@dreamland:/data1&lt;span class=&#34;token comment&#34;&gt;# echo &#34;hello to data1 volume from ubuntu16.04&#34; &amp;gt;&amp;gt; hello.txt&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启动一个新的 Shell 窗口，查看一下该容器使用的 AUFS 文件系统中的内容。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/docker.sh$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; tree dreamland/
dreamland/
└── rwlayer
    ├── data1
    ├── old_root
    └── root
        └── hello.txt

&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; directories, &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;file&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，我们使用的卷目录被创建在了容器的读写层，但是我们在卷目录中新建的文件却没有出现在读写层中。&lt;/p&gt;
&lt;p&gt;我们再来查看一下主机卷目录的内容。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/docker.sh$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; tree data1/
data1/
└── hello.txt

&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; directories, &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;file&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，在容器内部对卷目录的修改直接作用在了主机上的卷目录。我们再来查看一下主机卷目录下 hello.txt 中的内容。命令及结果如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;phl@kernelnewbies:~/docker.sh$ &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; data1/hello.txt
hello to data1 volume from ubuntu16.04&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果我们可以看到，该文件的内容与我们在容器内部写入 hello.txt 的内容一致。&lt;/p&gt;
&lt;p&gt;通过卷目录，我们实现了容器之间数据共享与数据持久化的功能。&lt;/p&gt;
&lt;h2 id=&#34;6-后记&#34;&gt;6. 后记&lt;/h2&gt;
&lt;p&gt;至此，我们通过一系列的实验对 docker 的底层技术有了一个感性的认识。我们在使用 docker 时，也能够对其是如何运作的有了一个大致的了解。当然，这对于掌握 docker 技术来说还远远不够，有很多知识我们没有涉及，例如 user namespace、容器安全、其他的 CGroups、虚拟网络等。&lt;/p&gt;
&lt;p&gt;编辑整理 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.toutiao.com/i6890898988879315468/?tt_from=weixin&amp;amp;utm_campaign=client_share&amp;amp;wxshare_count=1&amp;amp;timestamp=1647576105&amp;amp;app=news_article&amp;amp;utm_source=weixin&amp;amp;utm_medium=toutiao_android&amp;amp;use_new_style=1&amp;amp;req_id=202203181201440101511900790A2CBE46&amp;amp;share_token=b2d9351e-4cb1-4a25-ae82-f70543ce2a3b&amp;amp;group_id=6890898988879315468&#34;&gt;ScratchLab&lt;/a&gt;&lt;/p&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/bilicard.css&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="linux" />
        <category term="docker" />
        <category term="shell" />
        <updated>2022-03-18T06:33:17.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.17lai.site/posts/68d3867d/</id>
        <title>node 项目从构建到使用 jenkins + docker + nginx + mysql + redis 自动化部署</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/68d3867d/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1&gt;概述&lt;/h1&gt;
&lt;p&gt;这都 2019 年末了，你还不会 docker 吗？ 你 low 爆了，我们作为一枚前端，不能说是要精通使用 docker 完成各种事情，但我觉得必须要学会使用 docker 干下面几件事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;部署前端应用&lt;/li&gt;
&lt;li&gt;部署 nginx&lt;/li&gt;
&lt;li&gt; 使用 docker-compose 部署&lt;/li&gt;
&lt;li&gt;在容器之间建立联系&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Docker 可理解为跑在宿主机上的非常精简、小巧、高度浓缩的虚拟机。 它可以将容器里的进程安稳的在宿主机上运行，之前我也有写过一些关于 docker 的文章，在这我就不做过多的介绍了，如有需要请自行查看我之前的文章即可，接下来我们通过项目来了解并使用 docker&lt;/p&gt;
&lt;h1&gt;Egg.js ？&lt;/h1&gt;
&lt;p&gt;在这里我使用 &lt;code&gt;egg.js&lt;/code&gt; 来为大家实操一下项目的部署流程。有人会问 &lt;code&gt;egg.js&lt;/code&gt; 是什么？ 我只能回答这是一款专业级的 &lt;code&gt;node&lt;/code&gt; 框架。作为一个有梦想的前端，我们有必要去学习一种后端语言，而作为前端 &lt;code&gt;node&lt;/code&gt; 的学习成本相对来说比较低的。 &lt;code&gt;egg.js&lt;/code&gt; 这个框架在 node 现有框架中也是比较优秀的，如有需要，大家可以自行学习，我们今天的学习主要还是项目的部署流程，在这我就不给大家做过多的介绍。如有需要，请查阅 &lt;a href=&#34;https://link.juejin.cn?target=https%3A%2F%2Feggjs.org%2Fzh-cn%2Fintro%2Findex.html&#34; title=&#34;https://eggjs.org/zh-cn/intro/index.html&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;开始前的准备&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;docker 与 docker-compose 的安装我就不给大家介绍了。在之前的文章中是有的，也比较详细，作为一位开发人员，我认为这点事情难不倒大家&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;初始化项目&#34;&gt;初始化项目&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;$ mkdir egg-example &amp;amp;&amp;amp; cd egg-example
$ npm init egg --type=simple
$ npm i
复制代码&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;创建需要的文件&#34;&gt;创建需要的文件&lt;/h2&gt;
&lt;p&gt;我们需要在项目根目录创建我们所需要的文件&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;$ touch Dockerfile
$ touch docker-compose.yml
$ setup.sh
复制代码&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;目录结构&#34;&gt;目录结构&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;egg-project
├── package.json
├── setup.sh (新建)
├── Dockerfile (新建)
├── docker-compose.yml (新建)
├── app
|   ├── router.js
│   ├── controller
│   |   └── home.js
│   ├── service (可选)
│   |   └── user.js
│   ├── middleware (可选)
│   |   └── response_time.js
│   ├── schedule (可选)
│   |   └── my_task.js

...

复制代码&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;常用指令&#34;&gt;常用指令&lt;/h2&gt;
&lt;p&gt;在开始之前我们要学习下常用的一些指令，看下方：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1120220311110127.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1&gt;了解流程&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1120220311110133.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1&gt;安装 jenkins&lt;/h1&gt;
&lt;p&gt;在安装 jenkins 我选择了使用 docker-compose&lt;br&gt;
docker-compose 是一个用来把 docker 自动化的东西&lt;br&gt;
有了 docker-compose 你可以把所有繁复的 docker 操作全都一条命令，自动化的完成。&lt;/p&gt;
&lt;h2 id=&#34;首先我们需要在服务器上创建一个目录机构-具体结构个人自行创建&#34;&gt;首先我们需要在服务器上创建一个目录机构 (具体结构个人自行创建)&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;/home/jenkins
     - docker-compose.yml
     - jenkins-home
复制代码&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;接下来我们来编写-docker-compose-yml-安装jenkins&#34;&gt;接下来我们来编写 docker-compose.yml 安装 jenkins&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;version: &#39;3&#39;                                    # 指定 docker-compose.yml 文件的写法格式
services:                                       # 多个容器集合
  docker_jenkins: 
    user: root                                  # 为了避免一些权限问题 在这我使用了root
    restart: always                             # 重启方式
    image: jenkins/jenkins:lts                  # 指定服务所使用的镜像 在这里我选择了 LTS (长期支持)
    container_name: jenkins                     # 容器名称
    ports:                                      # 对外暴露的端口定义
      - &#39;8080:8080&#39;
      - &#39;50000:50000&#39;
    volumes:                                    # 卷挂载路径
      - /home/jenkins/jenkins_home/:/var/jenkins_home   # 这是我们一开始创建的目录挂载到容器内的jenkins_home目录
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker                 # 这是为了我们可以在容器内使用docker命令
      - /usr/local/bin/docker-compose:/usr/local/bin/docker-compose     # 同样的这是为了使用docker-compose命令
复制代码&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们需要进入到 jenkins 目录下执行：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;$ docker-compose up -d
复制代码&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;
&lt;p&gt;不出意外你现在可以打开你的服务器地址 &lt;a href=&#34;https://link.juejin.cn?target=http%3A%2F%2Fxxxxxxx&#34; title=&#34;http://xxxxxxx&#34;&gt;http://xxxxxxx&lt;/a&gt;: 端口号 就能看到这个界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1120220311110139.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;打开你所创建的 jenkins 目录进入到 jenkins-home&lt;br&gt;
/home/jenkins/jenkins-home&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1120220311110148.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;进入 secrets 目录&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;$ cat initialAdminPassword
复制代码&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1120220311110209.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后把里面的文本复制出来填到管理员密码中&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1120220311110327.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1120220311110215.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来需要安装两个插件&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;NodeJS Plugin
Publish Over SSH
复制代码&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1120220311110334.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1120220311110221.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后我们滑到最下方&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1120220311110228.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1120220311110341.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1120220311110347.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1120220311110235.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1&gt;开始我们的操作&lt;/h1&gt;
&lt;h2 id=&#34;Dockerfile&#34;&gt;Dockerfile&lt;/h2&gt;
&lt;p&gt;我们在开始阶段的时候学过一些常用指令，大家应该一眼就可以看得懂这些命令。 加油！！&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;FROM node:10.0-alpine             # 镜像版本

# 设置时区
RUN apk --update add tzdata \
    &amp;amp;&amp;amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \
    &amp;amp;&amp;amp; echo &#34;Asia/Shanghai&#34; &amp;gt; /etc/timezone \
    &amp;amp;&amp;amp; apk del tzdata

# 创建app目录
RUN mkdir -p /usr/src/node-app/egg-santak

# 设置工作目录
WORKDIR /usr/src/node-app/egg-santak

# 拷贝package.json文件到工作目录
# !!重要：package.json需要单独添加。
# Docker在构建镜像的时候，是一层一层构建的，仅当这一层有变化时，重新构建对应的层。
# 如果package.json和源代码一起添加到镜像，则每次修改源码都需要重新安装npm模块，这样木有必要。
# 所以，正确的顺序是: 添加package.json；安装npm模块；添加源代码。
COPY package.json /usr/src/node-app/egg-santak/package.json

# 安装npm依赖(使用淘宝的镜像源)
# 如果使用的境外服务器，无需使用淘宝的镜像源，即改为`RUN npm i`。
RUN npm i --registry=https://registry.npm.taobao.org

# 拷贝所有源代码到工作目录
COPY . /usr/src/node-app/egg-santak

# 暴露容器端口
EXPOSE 7001

# 启动node应用
CMD npm start
复制代码&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;在服务器中创建我们所需要挂载的数据卷&#34;&gt;在服务器中创建我们所需要挂载的数据卷&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1120220311110241.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;# nginx
$ mkdir -p nginx/conf.d nginx/logs

# mysql
$ mkdir mysql

# redis
$ mkdir redis
复制代码&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后进入 &lt;code&gt;nginx/conf.d&lt;/code&gt; 文件夹中 创建一个后缀为 &lt;code&gt;conf&lt;/code&gt; 的文件&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;$ cd nginx/conf.d
$ touch default.conf
$ vim default.conf
复制代码&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;写入以下内容：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;server {
  listen 80;
  listen [::]:80;
  server_tokens off;

  root /var/www/html;
  index index.html index.htm;

  # 修改为自己的域名
  server_name api.lovelp.xin;

  # 访问 / 路径时执行反向代理
  location / {
    # 这里 nodejs 是 node 容器名
    proxy_pass http://nodejs:7001;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Host $host;
    # 后端的Web服务器可以通过 X-Forwarded-For 获取用户真实 IP
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # 允许客户端请求的最大单文件字节数
    client_max_body_size 15M;
    # 缓冲区代理缓冲用户端请求的最大字节数
    client_body_buffer_size 128k;
  }
}
复制代码&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;docker-compose-yml&#34;&gt;docker-compose.yml&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;version: &#39;3&#39;

services:
  santak_redis:
    image: redis:3                  # 指定服务镜像
    container_name: santak_redis    # 容器名称
    restart: always                 # 重启方式
    hostname: redis
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass 123456  --appendonly yes
    volumes:                        # 挂载数据卷
      - /root/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:                          # 映射端口
      - &#34;6379:6379&#34;     
    networks:                       # 加入指定网络
      - app-network

  santak_nginx:
    image: nginx:stable-alpine      # 指定服务镜像
    container_name: santak_nginx    # 容器名称
    restart: always                 # 重启方式
    ports:                          # 映射端口
      - &#34;80:80&#34;
    volumes:                        # 挂载数据卷
      - /etc/localtime:/etc/localtime
      - /root/nginx/conf.d:/etc/nginx/conf.d
      - /root/nginx/logs:/var/log/nginx
    depends_on:                     # 启动顺序
      - nodejs
    networks:                       # 加入指定网络
      - app-network

  santak_mysql:
    image: mysql:5.7
    container_name: santak_mysql
    restart: always
    ports:                          # 映射端口
      - &#34;3306:3306&#34;
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=lovelp           # 创建lovelp用户
      - MYSQL_PASSWORD=mm123321     # 设置lovelp用户的密码
      - MYSQL_DATABASE=santak       # 创建初始数据库
      - TZ=Asia/Shanghai            # 设置时区
    volumes:                        # 挂载数据卷
      - /root/mysql:/var/lib/mysql  # 为了数据持久化
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    networks:                       # 加入指定网络
      - app-network 

  nodejs:
    build:                          # 这里指的是我们刚刚撸的 Dockerfile 文件
      context: .                    
      dockerfile: Dockerfile
    image: nodejs                   # 镜像名称
    container_name: nodejs          # 容器名称
    restart: always                 # 重启方式
    depends_on:                     # 启动顺序
      - santak_redis
      - santak_mysql
    links:                          # 容器连接
      - santak_redis:santak_redis
      - santak_mysql:santak_mysql
    networks:                       # 加入指定网络
      - app-network

volumes:
  certbot-etc:
  certbot-var:

networks:  # 实现通信
  app-network:
    driver: bridge
复制代码&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;在项目中的使用&#34;&gt;在项目中的使用&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1120220311110359.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;setup-sh&#34;&gt;setup.sh&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;#!/usr/bin/env bash
#image_version=`date +%Y%m%d%H%M`;

# 关闭容器
docker-compose stop || true;
# 删除容器
docker-compose down || true;
# 构建镜像
docker-compose build;
# 启动并后台运行
docker-compose up -d;
# 查看日志
docker logs nodejs;
# 对空间进行自动清理
docker system prune -a -f

复制代码&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;jenkins 创建项目&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1120220311110247.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1120220311110248.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1120220311110254.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1120220311110409.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后我们就可以愉快的 &lt;code&gt;Build Now&lt;/code&gt; 了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1120220311110415.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这里我选择的是手动构建。其实 jenkins 有很多可配置项，比如自动化构建啥的，兴趣使然，大家自行摸索，谢谢大家&lt;/p&gt;
&lt;h2 id=&#34;整理转载&#34;&gt;整理转载:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://juejin.cn/post/6844904006184091662&#34;&gt;掘金&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/bilicard.css&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="web" />
        <category term="docker" />
        <category term="CI/CD" />
        <category term="node" />
        <category term="jenkins" />
        <updated>2022-03-16T10:04:02.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.17lai.site/posts/8b7d3a9a/</id>
        <title>音乐推荐 - 曾经我也想过一了百了</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/8b7d3a9a/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;现场MV-2&#34;&gt;现场 MV&lt;/h2&gt;
&lt;style&gt;.bbplayer{width: 100%; max-width: 850px; margin: auto}&lt;/style&gt;&lt;div class=&#34;bbplayer&#34;&gt;&lt;iframe class=&#34;bbplayer&#34; id=&#34;mmedia-WlKwvEZVtaiKMbAI&#34; src=&#34;https://player.bilibili.com/player.html?bvid=BV1b64y1d7pw&amp;amp;page=1&amp;amp;high_quality=1&amp;amp;danmaku=true&#34; allowfullscreen=&#34;allowfullscreen&#34; scrolling=&#34;no&#34; border=&#34;0&#34; frameborder=&#34;0&#34; framespacing=&#34;0&#34; sandbox=&#34;allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups&#34;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;script&gt; document.getElementById(&#34;mmedia-WlKwvEZVtaiKMbAI&#34;).style.height=document.getElementById(&#34;mmedia-WlKwvEZVtaiKMbAI&#34;).scrollWidth*0.76+&#34;px&#34;;
    window.onresize = function(){
      document.getElementById(&#34;mmedia-WlKwvEZVtaiKMbAI&#34;).style.height=document.getElementById(&#34;mmedia-WlKwvEZVtaiKMbAI&#34;).scrollWidth*0.76+&#34;px&#34;;
    }; &lt;/script&gt;
&lt;h2 id=&#34;背景介绍&#34;&gt;背景介绍&lt;/h2&gt;
&lt;p&gt;《曾经我也想过一了百了》是日本歌手中岛美嘉演唱的歌曲，由秋田弘填词和谱曲、出羽良彰编曲，于 2013 年 8 月 28 日发行，收录在中岛美嘉个人专辑《TOUGH 为爱勇敢》中。该歌曲勾勒出向死而生、努力活着的人，让人感到温暖和希望，让因为压力迷茫无助而有轻生想法的人，开始积极拥抱生活。 《曾经我也想过一了百了》由日本摇滚乐队 amazarashi 的主唱秋田弘创作，创作理念为 “为了描写浓烈的希望，必须先描写深层的黑暗”。2010 年，迎来出道十周年的中岛美嘉宣布自己因耳咽管开放症暂停一切音乐活动。在疾病的影响下，歌唱对她而言变得无比艰难。2011 年，她携单曲《Dear》复出，但复出后始终经历着状态的起伏和媒体的质疑。 中岛美嘉起先向 amazarashi 提出合作请求，希望乐队能为自己创作一首节奏明快的歌曲，但随后秋田弘向她播放了乐队一首未发行的样本歌曲，并认为该曲很适合由她来演唱。收到该曲时，中岛美嘉起先感到十分惊讶，但听到最后泪流不止，感到自己的心变得柔和，便立即要求演唱该曲。录制过程中，中岛美嘉将自己的心声融入到了该曲中，希望能将力量传达给低迷苦闷的听众。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-lrc&#34; data-language=&#34;lrc&#34;&gt;&lt;code class=&#34;language-lrc&#34;&gt;[00:00.10]僕が死のうと思ったのは (曾经我也想过一了百了) - 中島美嘉 (なかしま みか)
[00:00.20]词：秋田ひろむ
[00:00.30]曲：秋田ひろむ
[00:00.40]编曲：出羽良彰
[00:27.95]僕が死のうと思ったのは
[00:33.83]ウミネコが桟橋で鳴いたから
[00:39.20]波の随意に浮かんで消える
[00:45.33]過去も啄ばんで飛んでいけ
[00:50.70]僕が死のうと思ったのは
[00:56.52]誕生日に杏の花が咲いたから
[01:02.22]その木漏れ日でうたた寝したら
[01:08.09]虫の死骸と土になれるかな
[01:14.09]薄荷飴 漁港の灯台
[01:17.05]錆びたアーチ橋 捨てた自転車
[01:19.74]木造の駅のストーブの前で
[01:22.74]どこにも旅立てない心
[01:25.61]今日はまるで昨日みたいだ
[01:28.30]明日を変えるなら今日を変えなきゃ
[01:31.56]分かってる 分かってる けれど
[01:39.71]僕が死のうと思ったのは
[01:44.89]心が空っぽになったから
[01:50.71]満たされないと泣いているのは
[01:56.39]きっと満たされたいと願うから
[02:25.49]僕が死のうと思ったのは
[02:30.69]靴紐が解けたから
[02:36.57]結びなおすのは苦手なんだよ
[02:42.25]人との繋がりもまた然り
[02:47.90]僕が死のうと思ったのは
[02:53.65]少年が僕を見つめていたから
[02:59.30]ベッドの上で土下座してるよ
[03:05.12]あの日の僕にごめんなさいと
[03:11.43]パソコンの薄明かり
[03:14.05]上階の部屋の生活音
[03:16.80]インターフォンのチャイムの音
[03:19.80]耳を塞ぐ鳥かごの少年
[03:22.87]見えない敵と戦ってる
[03:25.43]六畳一間のドンキホーテ
[03:28.30]ゴールはどうせ醜いものさ
[03:36.74]僕が死のうと思ったのは
[03:42.05]冷たい人と言われたから
[03:47.94]愛されたいと泣いているのは
[03:53.63]人の温もりを知ってしまったから
[04:22.79]僕が死のうと思ったのは
[04:27.91]あなたが綺麗に笑うから
[04:33.49]死ぬことばかり考えてしまうのは
[04:39.62]きっと生きる事に真面目すぎるから
[04:45.43]僕が死のうと思ったのは
[04:50.70]まだあなたに出会ってなかったから
[04:56.51]あなたのような人が生まれた
[05:02.09]世界を少し好きになったよ
[05:07.96]あなたのような人が生きてる
[05:13.65]世界に少し期待するよ&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;中文翻唱&#34;&gt;中文翻唱&lt;/h2&gt;

        &lt;div id=&#34;aplayer-vNkwluFY&#34; class=&#34;aplayer aplayer-tag-marker&#34; style=&#34;margin-bottom: 20px;&#34;&gt;&lt;/div&gt;
			  &lt;script&gt;
				  var options = {&#34;narrow&#34;:false,&#34;autoplay&#34;:false,&#34;showlrc&#34;:3,&#34;mode&#34;:&#34;random&#34;,&#34;mutex&#34;:true,&#34;theme&#34;:&#34;#e6d0b2&#34;,&#34;preload&#34;:&#34;metadata&#34;,&#34;listmaxheight&#34;:&#34;513px&#34;,&#34;music&#34;:[{&#34;title&#34;:&#34;曾经我也想过一了百了&#34;,&#34;author&#34;:&#34;一么&#34;,&#34;url&#34;:&#34;https://cdn.17lai.site/media/music/僕が死のうと思ったのは/曾经我也想过一了百了-一么.mp3&#34;,&#34;pic&#34;:&#34;https://cdn.17lai.site/media/music/僕が死のうと思ったのは/僕が死のうと思ったのは.jpg&#34;,&#34;lrc&#34;:&#34;https://cdn.17lai.site/media/music/僕が死のうと思ったのは/曾经我也想过一了百了-一么.lrc&#34;},{&#34;title&#34;:&#34;僕が死のうと思ったのは&#34;,&#34;author&#34;:&#34;中岛美嘉&#34;,&#34;url&#34;:&#34;https://cdn.17lai.site/media/music/僕が死のうと思ったのは/01%20僕が死のうと思ったのは.mp3&#34;,&#34;pic&#34;:&#34;https://cdn.17lai.site/media/music/僕が死のうと思ったのは/僕が死のうと思ったのは.jpg&#34;,&#34;lrc&#34;:&#34;https://cdn.17lai.site/media/music/僕が死のうと思ったのは/01%20僕が死のうと思ったのは.lrc&#34;}]};
				  options.element = document.getElementById(&#34;aplayer-vNkwluFY&#34;);
				  var ap = new APlayer(options);
			    window.aplayers || (window.aplayers = []);
				  window.aplayers.push(ap);
			  &lt;/script&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;[00:02.09]作曲 : 秋田 ひろむ
[00:02.64]曾经我也想过一了百了
[00:03.21]原唱：中岛美嘉
[00:04.46] 
[00:29.85]曾经我 也想过 一了百了
[00:34.79]因为看见蜷缩的猫
[00:37.40]在码头望着远方
[00:40.40]海浪拍打在岸上
[00:43.44]一阵又一阵侵踏
[00:46.22]希望那些过往都消失
[00:49.38]不再回望
[00:52.43]曾经我 也想过
[00:54.82]一了百了
[00:57.46]是因为生日的那天
[01:00.10]杏花 又开放
[01:03.75]阳光灿烂树荫下
[01:06.41]落花已沉睡安详
[01:09.84]是否我也 能化作尘土
[01:12.16]不再流浪
[01:15.76]仍放抽屉里过期的糖
[01:18.28]迷路的单车被留在回家路上
[01:21.27]还有海边抛弃的避风港
[01:23.88]全都提醒 我和他们一样
[01:26.75]昨天和今天的画面不断浮现
[01:29.74]明天 渴望能不能有
[01:31.54]新的改变
[01:32.90]不能沮丧 我知道啊
[01:35.55]可是啊
[01:40.88]曾经我 也想过 一了百了
[01:46.24]身边一切都像在问我
[01:49.19]过得好不好
[01:52.28]泪不能停止的流
[01:55.05]流进心底的荒漠
[01:58.28]这颗心中的模样
[02:00.17]早空如一具躯壳
[02:26.84]曾经我 也想过 一了百了
[02:32.71]因为我的存在
[02:34.23]总让别人失望
[02:37.98]不曾拥有就不怕
[02:40.80]关于人与人的伤
[02:44.18]这么简单的道理
[02:45.96]我也只会搞砸
[02:49.80]曾经我 也想过 一了百了
[02:55.49]是因为墙上
[02:56.52]那张骄傲的自画像
[03:00.96]无力反驳地跪下
[03:03.66]只说的出一句话
[03:06.99]生而为人的我
[03:08.61]真的对不起呀
[03:12.75]房间里闪烁着荧幕微光
[03:15.56]伴随着屋外夜色的声音嘈杂
[03:18.43]电话那头传来窒息的话
[03:21.28]刺痛在笼中
[03:22.44]备受折磨的时间啊
[03:24.25]黑暗中我装备
[03:25.58]唐吉轲德的毅力
[03:26.89]对抗看不见的敌人
[03:28.38]摧毁我的决心
[03:29.85]不要害怕我知道啊可是啊
[03:38.04]曾经我也想过一了百了
[03:44.29]为何人们都说我无可救药
[03:49.69]不强求能明白我
[03:52.60]不奢望时间倒流
[03:55.70]因为很久很久以前我曾爱过
[04:00.86]曾经我 也想过 一了百了
[04:06.89]是因为我该那样
[04:08.43]灿烂那样美好
[04:12.49]一味消极着过去
[04:14.95]离去的念头缠绕
[04:17.29]闭上眼能感受到
[04:20.04]更好的明天来到
[04:24.35]茫茫人海中的你
[04:27.01]泪光中微笑的你
[04:30.26]在我耳边温柔唱起这首歌曲&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;PS: 数据丢失了一回，折腾了很长时间才重新补回来。&lt;/p&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/bilicard.css&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="music" />
        <category term="中岛美嘉" />
        <updated>2022-03-14T15:37:19.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.17lai.site/posts/2b9325d0/</id>
        <title>私人在线音乐服务器搭建与使用介绍</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/2b9325d0/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;多种音乐播放实现方式&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;页面内插入音乐列表。Aplayer 实现&lt;/li&gt;
&lt;li&gt;单独页面音乐列表。Aplayer 实现&lt;/li&gt;
&lt;li&gt;音乐 Docker。在线云音乐&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原作者 DMCA 原因不再维护，如果你想自己部署，需要修改原作者 docker 内部代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;音乐 Docker &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/linuxserver/docker-mstream&#34;&gt;Mstream docker&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;音乐 Docker &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://hub.docker.com/r/apnar/logitech-media-server&#34;&gt;Logitech Media Server&lt;/a&gt;。&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/Logitech/slimserver&#34;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt; 多用户音乐分享、播放，在线，分类等功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0720211107003631.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Aplayer-在线音乐&#34;&gt;Aplayer 在线音乐&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;博文页面内插入音乐列表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.css&#34;&gt;&lt;script src=&#34;https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.js&#34;&gt;&lt;/script&gt;&lt;div id=&#34;mmedia-LWllSXvwOQWxqykX&#34;&gt;&lt;/div&gt;&lt;script&gt; var LWllSXvwOQWxqykX_options = JSON.parse(&#39;{\&#34;lrcType\&#34;:3,\&#34;volume\&#34;:0.66,\&#34;audio\&#34;:[{\&#34;name\&#34;:\&#34;Hotel California\&#34;,\&#34;artist\&#34;:\&#34;Camille and Kennerly\&#34;,\&#34;url\&#34;:\&#34;https://cdn.17lai.site/media/music/Hotel%20California/01%20Hotel%20California.mp3\&#34;,\&#34;lrc\&#34;:\&#34;https://cdn.17lai.site/media/music/Hotel%20California/01%20Hotel%20California.lrc\&#34;,\&#34;cover\&#34;:\&#34;https://cdn.17lai.site/media/music/Hotel%20California/Hotel%20California.webp\&#34;}]}&#39;); LWllSXvwOQWxqykX_options.container = document.getElementById(&#34;mmedia-LWllSXvwOQWxqykX&#34;); const ap_LWllSXvwOQWxqykX = new APlayer(LWllSXvwOQWxqykX_options); &lt;/script&gt;



&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.css&#34;&gt;&lt;script src=&#34;https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.js&#34;&gt;&lt;/script&gt;&lt;div id=&#34;mmedia-YbgAPvldFrfLmgAy&#34;&gt;&lt;/div&gt;&lt;script&gt; var YbgAPvldFrfLmgAy_options = JSON.parse(&#39;{\&#34;lrcType\&#34;:3,\&#34;volume\&#34;:0.8,\&#34;autoplay\&#34;:false,\&#34;audio\&#34;:[{\&#34;name\&#34;:\&#34;Hotel California\&#34;,\&#34;artist\&#34;:\&#34;Camille and Kennerly\&#34;,\&#34;url\&#34;:\&#34;https://cdn.17lai.site/media/music/Hotel%20California/01%20Hotel%20California.mp3\&#34;,\&#34;cover\&#34;:\&#34;https://cdn.17lai.site/media/music/Hotel%20California/Hotel%20California.webp\&#34;,\&#34;lrc\&#34;:\&#34;https://cdn.17lai.site/media/music/Hotel%20California/01%20Hotel%20California.lrc\&#34;,\&#34;theme\&#34;:\&#34;#ebd0c2\&#34;},{\&#34;name\&#34;:\&#34;Sold Out\&#34;,\&#34;artist\&#34;:\&#34;Diamonds\&#34;,\&#34;url\&#34;:\&#34;https://cdn.17lai.site/media/music/Diamonds/05%20Sold%20Out.flac\&#34;,\&#34;cover\&#34;:\&#34;https://cdn.17lai.site/media/music/Diamonds/Diamonds.jpg\&#34;,\&#34;theme\&#34;:\&#34;#ebd0c2\&#34;},{\&#34;name\&#34;:\&#34;The Final Bell\&#34;,\&#34;artist\&#34;:\&#34;Rocky_ Original Motion Picture Score\&#34;,\&#34;url\&#34;:\&#34;https://cdn.17lai.site/media/music/Rocky_%20Original%20Motion%20Picture%20Score/12%20Bill%20Conti%20-%20The%20Final%20Bell.mp3\&#34;,\&#34;cover\&#34;:\&#34;https://cdn.17lai.site/media/music/Rocky_%20Original%20Motion%20Picture%20Score/Rocky_%20Original%20Motion%20Picture%20Score.jpg\&#34;,\&#34;theme\&#34;:\&#34;#ebd0c2\&#34;},{\&#34;name\&#34;:\&#34; Croatian Rhapsody\&#34;,\&#34;artist\&#34;:\&#34;The Piano Player\&#34;,\&#34;url\&#34;:\&#34;https://cdn.17lai.site/media/music/The%20Piano%20Player/11%20Croatian%20Rhapsody.mp3\&#34;,\&#34;cover\&#34;:\&#34;https://cdn.17lai.site/media/music/The%20Piano%20Player/The%20Piano%20Player.jpg\&#34;,\&#34;theme\&#34;:\&#34;#ebd0c2\&#34;}]}&#39;); YbgAPvldFrfLmgAy_options.container = document.getElementById(&#34;mmedia-YbgAPvldFrfLmgAy&#34;); const ap_YbgAPvldFrfLmgAy = new APlayer(YbgAPvldFrfLmgAy_options); &lt;/script&gt;
&lt;h2 id=&#34;单独Aplayer音乐页面&#34;&gt;单独 Aplayer 音乐页面&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;直接戳这里 -&amp;gt;&lt;/strong&gt; &lt;a href=&#34;https://blog.17lai.site/musics/&#34;&gt;Musics&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0720211107002935.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;在线云音乐&#34;&gt;在线云音乐&lt;/h2&gt;
&lt;p&gt;私人云音乐&lt;/p&gt;
&lt;div class=&#34;admonition note&#34;&gt;&lt;p class=&#34;admonition-title&#34;&gt;研究学习使用
&lt;/p&gt;&lt;p&gt;不对外公开发布，研究学习用。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;用户名密码 base64 编码&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-base64&#34; data-language=&#34;base64&#34;&gt;&lt;code class=&#34;language-base64&#34;&gt;55So5oi35ZCN5a+G56CB6YO95pivMTdsYWk=&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;base64 解密: &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;http://encode.chahuo.com/&#34;&gt;在线加密解密&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://musicplayer.17lai.site/&#34;&gt;&lt;strong&gt;入口&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;公开在线云音乐服务网页版。&lt;/li&gt;
&lt;li&gt;可以与网易云音乐 UID 同步！&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://hub.docker.com/r/oldiy/music-player-docker&#34;&gt;DockerHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/0920211009174442.png&#34; alt=&#34;在线云音乐入口&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1220211012022352.png&#34; alt=&#34;播放界面&#34;&gt;&lt;/p&gt;
&lt;p&gt;与网易云同步&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/0920211009174557.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;网易云 UID 在登陆 https://music.163.com/ 后 点击右上角图标的我的主页 https://music.163.com/#/user/home?id=617xxxxx0&lt;/p&gt;
&lt;p&gt;home?id= 后面的数字就是你的 UID。登录后，可以同步个人列表！&lt;/p&gt;
&lt;h2 id=&#34;私人音乐服务器&#34;&gt;私人音乐服务器&lt;/h2&gt;
&lt;p&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://music.17lai.site/&#34;&gt;&lt;strong&gt;入口&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;所有音乐作者，专辑，演唱者元数据刮削。&lt;/li&gt;
&lt;li&gt;rclone 挂载 webdav 网盘存储音乐文件。&lt;/li&gt;
&lt;li&gt;cloudflare parterner 加速。&lt;/li&gt;
&lt;li&gt;私人使用，不对外公开。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;在线音乐播放&#34;&gt;在线音乐播放&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;SelfHost 支持。Docker 部署！&lt;/li&gt;
&lt;li&gt;Github: &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/linuxserver/docker-mstream&#34;&gt;Mstream docker&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;浏览器界面支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/0620211006015739.png&#34; alt=&#34;私人音乐服务&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;支持DJ模式&#34;&gt;支持 DJ 模式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在音乐库中随机选择音乐播放。&lt;/li&gt;
&lt;li&gt;选择症患者救星。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/0620211006020713.png&#34; alt=&#34;DJ模式&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Android支持&#34;&gt;Android 支持&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/0620211006020403.png&#34; alt=&#34;Android支持&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;其它特性&#34;&gt;其它特性&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;转码支持&lt;/li&gt;
&lt;li&gt;遥控器支持&lt;/li&gt;
&lt;li&gt;播放列表&lt;/li&gt;
&lt;li&gt;等等&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/bilicard.css&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="docker" />
        <category term="music" />
        <category term="mstream" />
        <category term="selfhost" />
        <updated>2021-11-07T01:25:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.17lai.site/posts/d6bad1e5/</id>
        <title>自己动手制作电子书的最佳方式（支持 PDF、ePub、mobi 等格式）</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/d6bad1e5/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;前言-3&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;对于经常阅读的人来说，制作本地电子书，算是刚需了。网上的很多教程都不太好用，所以我特地整理出一个详细的教程。亲测有效，一劳永逸。&lt;/p&gt;
&lt;p&gt;当你意外发现某个宝藏公众号时，想要集中阅读上面的每一篇文章，恨不得一口气看完，你会怎么做呢？你可能会把它添加到 “微信读书” App 的书架上：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0220211102223600.jpeg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;但上面这种曲线救国的方式并非最佳，仍然不尽人意，存在不少问题。&lt;/p&gt;
&lt;p&gt;我知道，现在有很多的第三方服务，可以将任意公众号的文章制作成电子书，我试过很多次，但都是付费的。一听说要钱，你又不干了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0220211102223603.jpeg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;再列举一种场景：当你在 GitHub 上发现一个很全面很丰富的项目文档时，仿佛发现了新大陆。可 GitHub 网站的服务器在国外，国内的访问速度实在感人，你想要把它下载到本地查看，会怎么做呢？你估计会选择 &lt;code&gt;git clone&lt;/code&gt; 或者直接选择 “Download ZIP”，然后用 Typora 或者 VS Code 软件打开这个项目文档，在本地查看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0220211102223605.jpeg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;总之，你能想到的方式，我都想到了，而且都尝试过。&lt;/p&gt;
&lt;p&gt;现在的需求就是，如果你经常阅读网上的资料，肯定会有这样一个需求：&lt;strong&gt;怎么把这些几百页、甚至几千页的内容整理成 PDF、ePub、mobi 等格式的电子书呢&lt;/strong&gt;？&lt;/p&gt;
&lt;p&gt;要么花钱请别人做，要么自己做。&lt;/p&gt;
&lt;p&gt;今天这篇文章，就是来告诉你” &lt;strong&gt;自己动手制作 PDF、ePub、mobi 等格式电子书&lt;/strong&gt; “的最佳方式。如果你是码农出身，下面讲的这些步骤，根本难不倒你。如果你不是码农出身，也没关系，只要你有一台电脑，跟着我讲的教程研究下去，肯定能搞定。&lt;/p&gt;
&lt;p&gt;问题的关键不在于难不难、会不会，而是在于你是不是&lt;strong&gt;爱折腾&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;工具篇&#34;&gt;工具篇&lt;/h2&gt;
&lt;h3 id=&#34;bloodstar-gitbook-builder-2&#34;&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://hub.docker.com/r/bloodstar/gitbook-builder&#34;&gt;bloodstar/gitbook-builder&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Gitbook Docker 集成开发环境。支持 CJK，附带常用工具。使用它，下面一些列环境配置都可以省略了。开箱即用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;Usage&#34;&gt;Usage&lt;/h3&gt;
&lt;p&gt;Read the official &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://toolchain.gitbook.com/&#34;&gt;GitBook Toolchain Documentation&lt;/a&gt; documentation &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/GitbookIO/gitbook#how-to-use-it&#34;&gt;GitbookIO/gitbook&lt;/a&gt; first.&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# init&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run --rm -v &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token environment constant&#34;&gt;$PWD&lt;/span&gt;:/gitbook&#34;&lt;/span&gt; -p &lt;span class=&#34;token number&#34;&gt;4000&lt;/span&gt;:4000 bloodstar/gitbook-builder gitbook init
&lt;span class=&#34;token comment&#34;&gt;# serve&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run --rm -v &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token environment constant&#34;&gt;$PWD&lt;/span&gt;:/gitbook&#34;&lt;/span&gt; -p &lt;span class=&#34;token number&#34;&gt;4000&lt;/span&gt;:4000 bloodstar/gitbook-builder gitbook serve
&lt;span class=&#34;token comment&#34;&gt;# build&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run --rm -v &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token environment constant&#34;&gt;$PWD&lt;/span&gt;:/gitbook&#34;&lt;/span&gt; -p &lt;span class=&#34;token number&#34;&gt;4000&lt;/span&gt;:4000 bloodstar/gitbook-builder gitbook build&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For short, you can use alias for the long command line text. Place the alias statement in your &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;gitbook&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;docker run --rm -v &#34;$PWD&#34;:/gitbook -p 4000:4000 bloodstar/gitbook-builder gitbook&#39;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# init&lt;/span&gt;
gitbook init
&lt;span class=&#34;token comment&#34;&gt;# serve&lt;/span&gt;
gitbook serve
&lt;span class=&#34;token comment&#34;&gt;# build&lt;/span&gt;
gitbook build
&lt;span class=&#34;token comment&#34;&gt;# pdf output&lt;/span&gt;
gitbook pdf &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Integrate-with-Gitlab-CI&#34;&gt;Integrate with Gitlab CI&lt;/h3&gt;
&lt;p&gt;This docker image is originally designed for generating ebook with &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://about.gitlab.com/gitlab-ci/&#34;&gt;Gitlab CI&lt;/a&gt;. You could configure your Gitlab CI as following:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-yml&#34; data-language=&#34;yml&#34;&gt;&lt;code class=&#34;language-yml&#34;&gt;&lt;span class=&#34;token key atrule&#34;&gt;before_script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; env
  &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; export LC_ALL=zh_TW.UTF&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;

&lt;span class=&#34;token key atrule&#34;&gt;stages&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; build

&lt;span class=&#34;token key atrule&#34;&gt;ebook&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; build
  &lt;span class=&#34;token key atrule&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; gitbook pdf
  &lt;span class=&#34;token key atrule&#34;&gt;artifacts&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; book.pdf
  &lt;span class=&#34;token key atrule&#34;&gt;only&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; master
  &lt;span class=&#34;token key atrule&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; gitbook
  &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; bloodstar/gitbook&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;builder&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;latest
  &lt;span class=&#34;token key atrule&#34;&gt;allow_failure&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;制作电子书的具体步骤&#34;&gt;制作电子书的具体步骤&lt;/h2&gt;
&lt;h3 id=&#34;整体流程&#34;&gt;整体流程&lt;/h3&gt;
&lt;p&gt;先说一下整体步骤：&lt;/p&gt;
&lt;p&gt;（1）安装 gitbook 工具。&lt;/p&gt;
&lt;p&gt;（2）安装 calibre 软件，配置 &lt;code&gt;ebook-convert&lt;/code&gt; 工具。&lt;/p&gt;
&lt;p&gt;（3）将 &lt;code&gt;md&lt;/code&gt; 格式的多个文件素材导出为电子书（支持 PDF、ePub、mobi 等格式）。&lt;/p&gt;
&lt;p&gt;（4）高级进阶：配置电子书的目录、封面、页眉页脚等。&lt;/p&gt;
&lt;p&gt;整理流程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0220211102223611.jpeg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来我们看看详细的完整步骤。&lt;/p&gt;
&lt;h3 id=&#34;步骤-1：通过-npm-安装-gitbook-cli&#34;&gt;步骤 1：通过 npm 安装 gitbook-cli&lt;/h3&gt;
&lt;p&gt;安装命令如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; -g gitbook-cli&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装成功之后，再执行 &lt;code&gt;gitbook -V&lt;/code&gt; 命令确认是否安装成功：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;gitbook -V
CLI version: &lt;span class=&#34;token number&#34;&gt;2.3&lt;/span&gt;.2
GitBook version: &lt;span class=&#34;token number&#34;&gt;3.2&lt;/span&gt;.3&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;备注：如果你不知道 &lt;code&gt;npm&lt;/code&gt; 是什么，可以自行查阅&lt;strong&gt;如何安装 Node.js 和 npm 环境&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;步骤-2：安装-ebook-convert（针对-Windows-用户）&#34;&gt;步骤 2：安装 ebook-convert（针对 Windows 用户）&lt;/h3&gt;
&lt;p&gt;ebook-convert 是能够自由转化格式的一个命令行工具，已经包含在 calibre 软件里面了。&lt;/p&gt;
&lt;p&gt;（1）安装 &lt;code&gt;calibre&lt;/code&gt; 软件。calibre 的官网如下：（我们可以去官网下载安装）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;https://calibre-ebook.com/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（2）在终端输入如下命令，验证 &lt;code&gt;ebook-convert&lt;/code&gt; 是否能正常使用：&lt;/p&gt;
&lt;p&gt;如果输入上面的命令后提示错误，说明你还需要将 calibre 的安装目录添加到系统的环境变量中。&lt;/p&gt;
&lt;h3 id=&#34;步骤-2：安装-ebook-convert（针对-Mac-用户）&#34;&gt;步骤 2：安装 ebook-convert（针对 Mac 用户）&lt;/h3&gt;
&lt;p&gt;ebook-convert 是能够自由转化格式的一个命令行工具，已经包含在 calibre 软件里面了。&lt;/p&gt;
&lt;p&gt;（1）安装 &lt;code&gt;calibre&lt;/code&gt; 软件。calibre 的官网如下：（我们可以去官网下载安装）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;https://calibre-ebook.com/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（2）配置 &lt;code&gt;ebook-convert&lt;/code&gt;。针对 Mac 系统，需要执行如下命令，把 &lt;code&gt;ebook-convert&lt;/code&gt; 软链接到 &lt;code&gt;bin&lt;/code&gt; 目录：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ln&lt;/span&gt; -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/bin&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行上面的命令后，如果出现 &lt;code&gt;Operation not permitted&lt;/code&gt; 异常，说明系统权限限制，此时需要&lt;strong&gt;配置环境变量&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;（3）环境变量配置：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;vim&lt;/span&gt; ~/.bash_profile

&lt;span class=&#34;token comment&#34;&gt;# 将下面这两行配置，添加到 .bash_profile 文件中&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;EBOOK_PATH&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;/Applications/calibre.app/Contents/MacOS
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;&lt;span class=&#34;token environment constant&#34;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token environment constant&#34;&gt;$PATH&lt;/span&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$EBOOK_PATH&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;备注：可以自行研究下，在命令行环境，如何通过 vim 编辑文件。&lt;/p&gt;
&lt;p&gt;然后刷新一下刚刚的配置：&lt;/p&gt;
&lt;p&gt;验证 &lt;code&gt;ebook-convert&lt;/code&gt; 是否能正常使用：&lt;/p&gt;
&lt;h3 id=&#34;步骤-3：配置电子书的目录&#34;&gt;步骤 3：配置电子书的目录&lt;/h3&gt;
&lt;p&gt;本地新建一个空的文件夹，作为我们的电子书项目。文件夹的名字随便起，但建议用英文命名。&lt;/p&gt;
&lt;p&gt;（1）项目初始化。&lt;/p&gt;
&lt;p&gt;在当前项目下，执行如下命令，进行初始化：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;gitbook init&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时，项目下会自动生成如下两个文件：（&lt;strong&gt;非常重要，必不可少&lt;/strong&gt;）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;README.md&lt;/code&gt;：书籍的简介放在这个文件里。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SUMMARY.md&lt;/code&gt;：书籍的&lt;strong&gt;目录结构&lt;/strong&gt;在这里配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两个文件创建后，内容为空白，可使用 Markdown 语言自定义内容。&lt;/p&gt;
&lt;p&gt;（2）配置电子书的目录。&lt;/p&gt;
&lt;p&gt;我们先把本地的 markdown 文件（也就是我们的&lt;strong&gt;电子书素材&lt;/strong&gt;）放到项目中，然后在 &lt;code&gt;SUMMARY.md&lt;/code&gt; 文件中配置电子书的目录。&lt;/p&gt;
&lt;p&gt;比如说， 我的项目中有下面这些文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0220211102223644.jpeg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;那么，我在 &lt;code&gt;SUMMARY.md&lt;/code&gt; 文件中就要这样配置：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-markdown&#34; data-language=&#34;markdown&#34;&gt;&lt;code class=&#34;language-markdown&#34;&gt;&lt;span class=&#34;token title important&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;#&lt;/span&gt; 目录&lt;/span&gt;

&lt;span class=&#34;token list punctuation&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;[&lt;span class=&#34;token content&#34;&gt;README&lt;/span&gt;](&lt;span class=&#34;token url&#34;&gt;./README.md&lt;/span&gt;)&lt;/span&gt;
&lt;span class=&#34;token list punctuation&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;[&lt;span class=&#34;token content&#34;&gt;00-前端工具&lt;/span&gt;](&lt;span class=&#34;token url&#34;&gt;00-前端工具/0-README.md&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&#34;token list punctuation&#34;&gt;*&lt;/span&gt; [01-VS Code的使用](00-前端工具/01-VS Code的使用.md)
  &lt;span class=&#34;token list punctuation&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;[&lt;span class=&#34;token content&#34;&gt;02-Git的使用&lt;/span&gt;](&lt;span class=&#34;token url&#34;&gt;00-前端工具/02-Git的使用.md&lt;/span&gt;)&lt;/span&gt;
&lt;span class=&#34;token list punctuation&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;[&lt;span class=&#34;token content&#34;&gt;01-HTML&lt;/span&gt;](&lt;span class=&#34;token url&#34;&gt;01-HTML/0-README.md&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&#34;token list punctuation&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;[&lt;span class=&#34;token content&#34;&gt;01-认识Web和Web标准&lt;/span&gt;](&lt;span class=&#34;token url&#34;&gt;01-HTML/01-认识Web和Web标准.md&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&#34;token list punctuation&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;[&lt;span class=&#34;token content&#34;&gt;02-浏览器的介绍&lt;/span&gt;](&lt;span class=&#34;token url&#34;&gt;01-HTML/02-浏览器的介绍.md&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&#34;token list punctuation&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;[&lt;span class=&#34;token content&#34;&gt;03-初识HTML&lt;/span&gt;](&lt;span class=&#34;token url&#34;&gt;01-HTML/03-初识HTML.md&lt;/span&gt;)&lt;/span&gt;
&lt;span class=&#34;token list punctuation&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;[&lt;span class=&#34;token content&#34;&gt;02-CSS基础&lt;/span&gt;](&lt;span class=&#34;token url&#34;&gt;02-CSS基础/0-README.md&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&#34;token list punctuation&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;[&lt;span class=&#34;token content&#34;&gt;01-CSS属性：字体属性和文本属性&lt;/span&gt;](&lt;span class=&#34;token url&#34;&gt;02-CSS基础/01-CSS属性：字体属性和文本属性.md&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&#34;token list punctuation&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;[&lt;span class=&#34;token content&#34;&gt;02-CSS属性：背景属性&lt;/span&gt;](&lt;span class=&#34;token url&#34;&gt;02-CSS基础/02-CSS属性：背景属性.md&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&#34;token list punctuation&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;[&lt;span class=&#34;token content&#34;&gt;03-CSS样式表和选择器&lt;/span&gt;](&lt;span class=&#34;token url&#34;&gt;02-CSS基础/03-CSS样式表和选择器.md&lt;/span&gt;)&lt;/span&gt;
&lt;span class=&#34;token list punctuation&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;[&lt;span class=&#34;token content&#34;&gt;03-JavaScript基础&lt;/span&gt;](&lt;span class=&#34;token url&#34;&gt;03-JavaScript基础/0-README.md&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&#34;token list punctuation&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;[&lt;span class=&#34;token content&#34;&gt;00-编程语言&lt;/span&gt;](&lt;span class=&#34;token url&#34;&gt;03-JavaScript基础/00-编程语言.md&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&#34;token list punctuation&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;[&lt;span class=&#34;token content&#34;&gt;01-JS简介&lt;/span&gt;](&lt;span class=&#34;token url&#34;&gt;03-JavaScript基础/01-JS简介.md&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&#34;token list punctuation&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;[&lt;span class=&#34;token content&#34;&gt;02-变量&lt;/span&gt;](&lt;span class=&#34;token url&#34;&gt;03-JavaScript基础/02-变量.md&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&#34;token list punctuation&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;[&lt;span class=&#34;token content&#34;&gt;03-变量的数据类型：基本数据类型和引用数据类型&lt;/span&gt;](&lt;span class=&#34;token url&#34;&gt;03-JavaScript基础/03-变量的数据类型：基本数据类型和引用数据类型.md&lt;/span&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;制作成的目录，将会是下面这种效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0220211102223613.jpeg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;步骤-4：导出电子书&#34;&gt;步骤 4：导出电子书&lt;/h3&gt;
&lt;p&gt;（1）本地预览电子书：&lt;/p&gt;
&lt;p&gt;执行上方命令后，工具会对项目里的 Markdown 格式的文件进行转换，默认转换为 html 格式，最后提示 &lt;code&gt;Serving book on http://localhost:4000&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们打开浏览器输入 &lt;code&gt;http://localhost:4000&lt;/code&gt;，预览一下电子书的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0220211102223620.jpeg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;（2）制作并导出电子书。&lt;strong&gt;接下来就是见证奇迹的时刻&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;生成 PDF 格式的电子书：（PDF 是最常见的文档格式）&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;gitbook pdf ./ ./mybook.pdf&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成 epub 格式的电子书：（epub 是最常见、最通用的电子书格式）&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;gitbook epub ./ ./mybook.epub&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成 mobi 格式的电子书：（mobi 格式可以在 kindle 中打开）&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;gitbook mobi ./ ./mybook.mobi&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面这三种格式的电子书生成之后，项目里会看到这三个新增的文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0220211102223652.jpeg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们把电子书打开，验收一下成果。&lt;/p&gt;
&lt;p&gt;打开 pdf 电子书看看效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0220211102223700.jpeg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;打开 epub 电子书看看效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0220211102223622.jpeg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;怎么样，自制电子书就这样做好了，是不是很有成就感？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;更详细参考教程： &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://blog.17lai.fun/posts/7fe86002/&#34;&gt;GitBook+GitLab 撰写发布技术文档 - Part1:GitBook 篇&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;制作电子书的高级配置&#34;&gt;制作电子书的高级配置&lt;/h2&gt;
&lt;p&gt;电子书做好之后，我猜你肯定想进一步做&lt;strong&gt;个性化配置&lt;/strong&gt;，比如：怎么加封面？怎么修改页眉页脚？还有其他的一些配置。&lt;/p&gt;
&lt;p&gt;我们来看看亲手制作的电子书，有哪些常见的高级配置。&lt;/p&gt;
&lt;h3 id=&#34;制作书籍封面&#34;&gt;制作书籍封面&lt;/h3&gt;
&lt;p&gt;为了让书籍显示得更加优雅，我们可以指定一个自定义的封面。操作如下：&lt;/p&gt;
&lt;p&gt;在项目的根目录下准备好 &lt;code&gt;cover.jpg&lt;/code&gt; （大封面）和 &lt;code&gt;cover_small.jpg&lt;/code&gt; （小封面）这两种封面图片。注意，图片的文件名和后缀名必须严格按照这句话来。&lt;/p&gt;
&lt;p&gt;GitBook 的官方文档建议： &lt;code&gt;cover.jpg&lt;/code&gt; （大封面）的尺寸为 1800x2360 像素，&lt;code&gt;cover_small.jpg&lt;/code&gt;（小封面）的尺寸为 200x262 像素。图片的制作，建议遵循如下规范：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有边框&lt;/li&gt;
&lt;li&gt;清晰可见的书本标题&lt;/li&gt;
&lt;li&gt;任何重要的文字在小封面中应该清晰可见&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;book-json-：电子书的各种配置&#34;&gt;book.json ：电子书的各种配置&lt;/h3&gt;
&lt;p&gt;我们可以在项目的根目录下新建一个文件 &lt;code&gt;book.json&lt;/code&gt;（注意，文件名是 &lt;code&gt;book&lt;/code&gt;，后缀名是 &lt;code&gt;json&lt;/code&gt;），这个 &lt;code&gt;book.json&lt;/code&gt; 就是电子书的配置文件，可以在里面填一些常见的配置。&lt;/p&gt;
&lt;p&gt;关于 book.json 的配置项有很多，我们可以在网上搜索 “GitBook book.json” 找到。这里大致列举一些。&lt;/p&gt;
&lt;p&gt;1、&lt;strong&gt;常规配置&lt;/strong&gt;如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0220211102223624.jpeg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;配置 book.json 的示例如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-json&#34; data-language=&#34;json&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;&#34;title&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;前端入门和进阶图文教程&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;&#34;description&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;前端入门到进阶图文教程，超详细的Web前端学习笔记。从零开始学前端，做一名精致优雅的前端工程师。公众号「千古壹号」作者。&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;&#34;author&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;千古壹号&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;&#34;language&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;zh-hans&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;&#34;gitbook&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;3.2.3&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;&#34;root&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;.&#34;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;备注：上面的 &lt;code&gt;root&lt;/code&gt; 根目录为当前目录，使用默认的就好，此项可以删掉，这里仅做演示。&lt;/p&gt;
&lt;p&gt;2、&lt;strong&gt;pdf&lt;/strong&gt; 的配置如下：（使用 &lt;code&gt;book.json&lt;/code&gt; 中的一组选项来定制 PDF 输出）&lt;/p&gt;
&lt;p&gt;| 配置项 | 描述 | | ----------------- | ------------------------------------------------------------ | | pdf.pageNumbers | 将页码添加到每个页面的底部（默认为 true） | | pdf.fontSize | 基本字体大小（默认是 12） | | pdf.fontFamily | 基本字体样式（默认是 Arial） | | pdf.paperSize | 页面尺寸，选项有： a0、a1、 a2、 a3、a4、a5、a6、b0、b1、b2、b3、b4、b5、b6、legal、letter （默认值是 a4） | | pdf.margin.top | 上边距（默认值是 56） | | pdf.margin.bottom | 下边距（默认值是 56） | | pdf.margin.left | 左边距（默认值是 62） | | pdf.margin.right | 右边距（默认值是 62） |&lt;/p&gt;
&lt;p&gt;定制 PDF 文档输出格式的示例代码如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-json&#34; data-language=&#34;json&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;&#34;pdf&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;token property&#34;&gt;&#34;pageNumbers&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;token property&#34;&gt;&#34;fontSize&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;token property&#34;&gt;&#34;paperSize&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;a4&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;token property&#34;&gt;&#34;margin&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;token property&#34;&gt;&#34;top&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;36&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;token property&#34;&gt;&#34;bottom&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;36&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;token property&#34;&gt;&#34;left&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;62&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;token property&#34;&gt;&#34;right&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;62&lt;/span&gt;
        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;备注：如果你不需要对输出的 pdf 做任何特定的配置，则不需要添加上面的内容，让 pdf 的输出格式保持默认就好。&lt;/p&gt;
&lt;p&gt;3、&lt;strong&gt;plugins&lt;/strong&gt; 插件：&lt;/p&gt;
&lt;p&gt;插件及其配置在 &lt;code&gt;book.json&lt;/code&gt; 中指定，让电子书的配置能力更加强大。&lt;/p&gt;
&lt;p&gt;通过插件，我们可以做很多事情，比如：修改页眉页脚、自动生成并显示图片的标题等。&lt;/p&gt;
&lt;p&gt;另外，针对&lt;strong&gt;在线版&lt;/strong&gt;的 GitBook 电子书，也有很多插件，这里列举几个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自带的 search 插件不支持中文搜索，使用起来非常不方便，还好 &lt;code&gt;search-pro&lt;/code&gt; 插件横空出世，让搜索功能焕发出新的生机。插件地址：https://github.com/gitbook-plugins/gitbook-plugin-search-pro&lt;/li&gt;
&lt;li&gt; 默认侧边栏宽度是不能够调节的，如果想通过拖拽的方式自由调节侧边栏宽度，可以使用插件 &lt;code&gt;splitter&lt;/code&gt;。插件地址：https://github.com/yoshidax/gitbook-plugin-splitter&lt;/li&gt;
&lt;li&gt;donate 插件支持定义和显示支付宝和微信打赏。插件地址：&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/willin/gitbook-plugin-donate&#34;&gt;http://github.com/willin/gitbook-plugin-donate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于插件的具体配置，感兴趣的同学可以自行研究下。&lt;/p&gt;
&lt;h3 id=&#34;自动生成目录（重要）&#34;&gt;自动生成目录（重要）&lt;/h3&gt;
&lt;p&gt;如果你的电子书素材里有很多 markdown 文件，那么，如何将多个 markdown 文件的文件名，在 &lt;code&gt;SUMMARY.md&lt;/code&gt; 里快速生成对应的目录？&lt;/p&gt;
&lt;p&gt;难道要一个一个地手动 copy 吗？这不可能。&lt;/p&gt;
&lt;p&gt;说白了，这个需求就是：&lt;strong&gt;如何自动生成电子书的目录&lt;/strong&gt;？改变世界的程序员用「脚本」就能搞定，一键执行。&lt;/p&gt;
&lt;p&gt;网上有很多好用的脚本，我给你推荐一个亲测好用的脚本：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GitBook 自动生成目录的脚本：https://github.com/fushenghua/gitbook-plugin-summary&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;操作方法很简单，把上面这个链接中的项目下载下来，进入到这个项目的目录，执行 &lt;code&gt;$ python gitbook-plugin-summary.py dirPath&lt;/code&gt; 即可自动生成电子书的目录，亲测有效。备注：这里的 &lt;code&gt;dirPath&lt;/code&gt; 指的是你的电子书目录的绝对路径。&lt;/p&gt;
&lt;p&gt;对了，在执行上面这个脚本之前，记得先安装 &lt;code&gt;Python&lt;/code&gt; 环境。&lt;/p&gt;
&lt;h2 id=&#34;电子书用什么软件打开&#34;&gt;电子书用什么软件打开&lt;/h2&gt;
&lt;h3 id=&#34;用什么软件打开-PDF&#34;&gt;用什么软件打开 PDF&lt;/h3&gt;
&lt;p&gt;Windows 平台：可以用「福昕阅读器」或者「Acrobat Reader DC」。「福昕阅读器」既有 Windows 平台，也有 Mac 平台。&lt;/p&gt;
&lt;p&gt;Mac 平台：可以用自带的「预览」打开。&lt;/p&gt;
&lt;p&gt;其实，不管你用的是 Windows 电脑还是 Mac 电脑，你都可以用 Chrome 浏览器打开 PDF。&lt;/p&gt;
&lt;p&gt;iPhone 或 iPad 平台：可以用自带的「iBooks」打开，或者用「WPS Office」打开。也可以用第三方软件「GoodReader」，不过需要 40 人民币。&lt;/p&gt;
&lt;p&gt;Android 手机：可以用「WPS Office」等第三方办公软件打开。&lt;/p&gt;
&lt;h3 id=&#34;用什么软件阅读-ePub-电子书&#34;&gt;用什么软件阅读 ePub 电子书&lt;/h3&gt;
&lt;p&gt;Windows 平台：可以用「calibre」软件阅读 epub 电子书。&lt;/p&gt;
&lt;p&gt;Mac &amp;amp; iPhone &amp;amp; iPad 平台：用自带的「iBooks」阅读即可。iBooks 可以非常方便地对电子书进行标注和搜索，无疑是体验最好的 ePub 电子书阅读软件。&lt;/p&gt;
&lt;p&gt;Android 手机：可以用「多看阅读」App 来阅读 epub 格式电子书。&lt;/p&gt;
&lt;h3 id=&#34;用什么方式阅读-mobi-电子书&#34;&gt;用什么方式阅读 mobi 电子书&lt;/h3&gt;
&lt;p&gt;kindle 电子书有两种常见的电子书格式：「mobi」格式和「azw3」格式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对 mobi 格式的电子书，你既可以通过邮件的形式将其发送到 kindle 阅读器（可以自行网上查一下相关教程），也可以将其拷贝到 kindle 阅读器（是连接 usb 进行拷贝）。&lt;/li&gt;
&lt;li&gt;针对 azw3 格式的电子书，就只能通过拷贝的形式（是连接 usb 拷贝）传输到 kindle 阅读器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;小结&#34;&gt;小结&lt;/h3&gt;
&lt;p&gt;我在 2017 年 1 月写过一篇电子书科普的文章，快三年过去了，如今回过头来看，那篇文章一点也不过时，不妨看看：《&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/-FsT_GQtBQ0-q_ndO5X6sQ&#34;&gt;电子书有哪些常见格式？以及该怎样阅读它&lt;/a&gt;》&lt;/p&gt;
&lt;h2 id=&#34;最后一段-2&#34;&gt;最后一段&lt;/h2&gt;
&lt;p&gt;如果你一时半会儿找不到可用的素材来制作电子书，可以拿我的项目练练手。项目地址：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;https://github.com/qianguyihao/web&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不瞒你说，这篇文章，我在一年多以前就写好了初稿并放在了 GitHub 上，当时专门折腾过一次。&lt;/p&gt;
&lt;p&gt;最近几天，我突然又有了制作电子书的需求。一年多过去了，我还以为有啥新的方法可以试试，然而我在网上找了一圈，好用的方法还是没变。所以，我今天整理一下发出来，希望让更多人看到。&lt;/p&gt;
&lt;p&gt;其他的各种自制电子书的方法我都试过了，都不太好使，唯独 &lt;strong&gt;GitBook + calibre&lt;/strong&gt; 是最佳选择，信我没错！&lt;/p&gt;
&lt;h2 id=&#34;参考链接-2&#34;&gt;参考链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GITBOOK 使用：https://kuang.netlify.app/blog/gitbook.htmlbook.html&lt;/li&gt;
&lt;li&gt;GitBook 制作 Kindle 电子书详细教程：https://github.com/fushenghua/gitbook-plugin-summary/blob/master/gitbook-guide.md&lt;/li&gt;
&lt;li&gt;gitbook-plugin-summary 工具（自动生成目录）：https://github.com/fushenghua/gitbook-plugin-summary&lt;/li&gt;
&lt;li&gt;gitbook-plugin-atoc（自动生成目录的插件）：https://github.com/willin/gitbook-plugin-atoc&lt;/li&gt;
&lt;li&gt; 自动生成目录：https://github.com/mofhu/GitBook-auto-summary&lt;/li&gt;
&lt;li&gt; 使用 Gitbook 打造你的电子书：https://juejin.im/post/6844903793033740302&lt;/li&gt;
&lt;li&gt; 书籍《了不起的 Markdown》的第 8 章：自由地写作 ——GitBook&lt;/li&gt;
&lt;li&gt;gitbook 的 book.json 配置示例：https://blog.ujwd.cn/archives/349&lt;/li&gt;
&lt;li&gt; 关于更加详细的 book.json 文件配置：https://zhousiwei.gitee.io/mybook/notes/gitbook_config.html&lt;/li&gt;
&lt;li&gt;GitBook 简明使用教程：https://www.phpjieshuo.com/archives/153/&lt;/li&gt;
&lt;li&gt;gitbook 入门教程之导出电子书：https://juejin.im/post/5caa0fb46fb9a05e5a2e53b3&lt;/li&gt;
&lt;li&gt;GitBook 插件整理 - book.json 配置：https://www.cnblogs.com/mingyue5826/p/10307051.html&lt;/li&gt;
&lt;li&gt; 如何把 Markdown 文件批量转换为 PDF（不好用）：https://sspai.com/post/47110 &lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://zhuanlan.zhihu.com/p/245763905&#34;&gt;自己动手制作电子书的最佳方式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系列教程-7&#34;&gt;&lt;strong&gt;系列教程&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Gitbook 使用系列&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.17lai.site/posts/7fe86002/&#34;&gt;GitBook+GitLab 撰写发布技术文档 - Part1:GitBook 篇&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.17lai.site/posts/7790e989/&#34;&gt;GitBook+GitLab 撰写发布技术文档 - Part2:GitLab 篇&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.17lai.site/posts/d6bad1e5/&#34;&gt;自己动手制作电子书的最佳方式（支持 PDF、ePub、mobi 等格式）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;笔记系列&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/a8535f26/&#34;&gt;完美笔记进化论&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;经历了很长时间，使用了各种各样的方案，最终选择了一种相对完美的方式。docker 私有部署运行的 joplin，使用 markdown 语法，github 作为图床，picgo 作为图像自动上传后端，pypora 作为 MD 编辑器，Snipaste 作为截图工具。后备 gitlab ee selfhost 备份，自建图床 VPS 多线负载均衡。cloudflare partner cdn 加速，jsdelivr 加速。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pigo 图床搭建与配置&lt;/li&gt;
&lt;li&gt; Joplin 教程&lt;/li&gt;
&lt;li&gt; Snipaste 截图工具&lt;/li&gt;
&lt;li&gt; Typora 作为 Markdown 编辑器最强 &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://blog.17lai.fun/posts/e6086437/&#34;&gt;Joplin 入门指南 &amp;amp; 实践方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt; Joplin 和使用&lt;/li&gt;
&lt;li&gt; Joplin 同步与备份&lt;/li&gt;
&lt;li&gt; Joplin 导入与导出 &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/92d347d6/&#34;&gt;Joplin 插件以及其 Markdown 语法。All in One!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Joplin 简明教程&lt;/li&gt;
&lt;li&gt; markdown 语法简明教程 &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/e3ee7f8b/&#34;&gt;Joplin 插件使用推荐&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;教你用各种插件打造一个强大的笔记工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/1802a8a7/&#34;&gt;为知笔记私有化 Docker 部署&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如何部署自己私有的为知笔记。&lt;/li&gt;
&lt;li&gt;其实博主更推荐私有部署 joplin&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Gitlab 使用系列&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/acc13b70/&#34;&gt;&lt;strong&gt;Gitlab 的安装及使用教程完全版&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/29a820b3/&#34;&gt;破解 Gitlab EE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/d08eb7b/&#34;&gt;Gitlab 的安装及使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/1879721e/&#34;&gt;CI/CD 与 Git Flow 与 GitLab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/bilicard.css&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="GitBook" />
        <category term="docker" />
        <category term="git" />
        <updated>2021-11-02T01:25:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.17lai.site/posts/1879721e/</id>
        <title>CI/CD 与 Git Flow 与 GitLab</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/1879721e/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;CI/CD + Git Flow + GitLab 的整体工作流程记录。主要介绍一下 GitLab CI 相关功能，并通过 GitLab CI 实现自动化构建项目。项目中所用的示例项目已经上传到了 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/mritd/GitLabCI-TestProject&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;一、Git-Flow-简介&#34;&gt;一、Git Flow 简介&lt;/h3&gt;
&lt;p&gt;Git Flow 定义了一个围绕项目开发发布的严格 git 分支模型，用于管理多人协作的大型项目中实现高效的协作开发；Git Flow 分支模型最早起源于 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;http://nvie.com/about/&#34;&gt;Vincent Driessen&lt;/a&gt; 的 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;http://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;A successful Git branching model&lt;/a&gt; 文章；随着时间发展，Git Flow 大致分为三种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git Flow: 最原始的 Git Flow 分支模型&lt;/li&gt;
&lt;li&gt; Github Flow: Git Flow 的简化版，专门配合持续发布&lt;/li&gt;
&lt;li&gt; GitLab Flow: Git Flow 与 Github Flow 的结合版&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于三种 Git Flow 区别详情可参考 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.ruanyifeng.com/blog/2015/12/git-workflow.html&#34;&gt;Git 工作流程&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;二、-Git-Flow-流程&#34;&gt;二、 Git Flow 流程&lt;/h3&gt;
&lt;p&gt;Github Flow 和 GitLab Flow 对于持续发布支持比较好，但是原始版本的 Git Flow 对于传统的按照版本发布更加友好一些，所以以下主要说明以下 Git Flow 的工作流程；Git Flow 主要分支模型如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220215.jpg&#34; alt=&#34;git flow&#34;&gt;&lt;/p&gt;
&lt;p&gt;在整个分支模型中 &lt;strong&gt;存在两个长期分支: develop 和 master&lt;/strong&gt;，其中 develop 分支为开发分支，master 为生产分支；&lt;strong&gt;master 代码始终保持随时可以部署到线上的状态；develop 分支用于合并最新提交的功能性代码&lt;/strong&gt;；具体的分支定义如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master: 生产代码，始终保持可以直接部署生产的状态&lt;/li&gt;
&lt;li&gt; develop: 开发分支，每次合并最新功能代码到此分支&lt;/li&gt;
&lt;li&gt; feature: 新功能分支，所有新开发的功能将采用 &lt;code&gt;feature/xxxx&lt;/code&gt; 形式命名分支&lt;/li&gt;
&lt;li&gt; hotfixes: 紧急修复补丁分支，当新功能部署到了线上出现了严重 bug 需要紧急修复时，则创建 &lt;code&gt;hotfixes/xxxx&lt;/code&gt; 形式命名的分支&lt;/li&gt;
&lt;li&gt; release: 稳定版分支，当完成大版本变动后，应该创建 &lt;code&gt;release/xxxx&lt;/code&gt; 分支&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在整个分支模型中，develop 分支为最上游分支，会不断有新的 feature 合并入 develop 分支，当功能开发达到完成所有版本需求时，则从 develop 分支创建 release 分支，release 后如没有发现其他问题，最终 release 会被合并到 master 分支以完成线上部署&lt;/p&gt;
&lt;h3 id=&#34;三、Git-Flow-工具&#34;&gt;三、Git Flow 工具&lt;/h3&gt;
&lt;p&gt;针对于 Git Flow，其手动操作 git 命令可能过于繁琐，所以后来有了 git-flow 工具；git-flow 是一个 git 扩展集，按 Vincent Driessen 的分支模型提供高层次的库操作；使用 git-flow 工具可以以更加简单的命令完成对 Vincent Driessen 分支模型的实践；&lt;br&gt;
git-flow 安装以及使用具体请参考 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html&#34;&gt;git-flow 备忘清单&lt;/a&gt;，该文章详细描述了 git-flow 工具的使用方式&lt;/p&gt;
&lt;p&gt;还有另一个工具是 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/tj/git-extras&#34;&gt;git-extras&lt;/a&gt;，该工具没有 git-flow 那么简单化，不过其提供更加强大的命令支持&lt;/p&gt;
&lt;h3 id=&#34;四、Git-Commit-Message&#34;&gt;四、Git Commit Message&lt;/h3&gt;
&lt;p&gt;在整个 Git Flow 中，commit message 也是必不可少的一部分；一个良好且统一的 commit message 有助于代码审计以及 review 等；目前使用最广泛的写法是 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0&#34;&gt;Angular 社区规范&lt;/a&gt;，该规范大中 commit message 格式大致如下:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-html&#34; data-language=&#34;html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;scope&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;): &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;subject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;BLANK&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;LINE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;BLANK&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;LINE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;footer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总体格式大致分为 3 部分，首行主要 3 个组成部分:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;type: 本次提交类型&lt;/li&gt;
&lt;li&gt; scope: 本次提交影响范围，一般标明影响版本号或者具体的范围如 &lt;code&gt;$browser, $compile, $rootScope, ngHref, ngClick, ngView, etc...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;subject: 本次提交简短说明&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于 type 提交类型，有如下几种值:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;feat：新功能 (feature)&lt;/li&gt;
&lt;li&gt;fix：修补 bug&lt;/li&gt;
&lt;li&gt;docs：文档 (documentation)&lt;/li&gt;
&lt;li&gt;style： 格式 (不影响代码运行的变动)&lt;/li&gt;
&lt;li&gt;refactor：重构 (即不是新增功能，也不是修改 bug 的代码变动)&lt;/li&gt;
&lt;li&gt;test：增加测试&lt;/li&gt;
&lt;li&gt; chore：构建过程或辅助工具的变动&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中间的 body 部分是对本次提交的详细描述信息，底部的 footer 部分一般分为两种情况:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不兼容变动：如果出现不兼容变动，则以 &lt;code&gt;BREAKING CHANGE:&lt;/code&gt; 开头，后面跟上不兼容变动的具体描述和解决办法&lt;/li&gt;
&lt;li&gt;关闭 issue: 如果该 commit 针对某个 issue，并且可以将其关闭，则可以在其中指定关闭的 issue，如 &lt;code&gt;Close #9527,#9528&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过 footer 部分也有特殊情况，如回滚某次提交，则以 &lt;code&gt;revert:&lt;/code&gt; 开头，后面紧跟 commit 信息和具体描述；还有时某些 commit 只是解决了 某个 issue 的一部分问题，这是可以使用 &lt;code&gt;refs ISSUE&lt;/code&gt; 的方式来引用该 issue&lt;/p&gt;
&lt;h3 id=&#34;五、Git-Commit-Message-工具&#34;&gt;五、Git Commit Message 工具&lt;/h3&gt;
&lt;p&gt;针对 Git 的 commit message 目前已经有了成熟的生成工具，比较有名的为 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/commitizen/cz-cli&#34;&gt;commitizen-cli&lt;/a&gt; 工具，其采用 node.js 编写，执行 &lt;code&gt;git cz&lt;/code&gt; 命令能够自动生成符合 Angular 社区规范的 commit message；不过由于其使用 node.js 编写，所以安装前需要安装 node.js，因此可能不适合其他非 node.js 的项目使用；这里推荐一个基于 shell 编写的 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://cimhealth.github.io/git-toolkit&#34;&gt;Git-toolkit&lt;/a&gt;，安装此工具后执行 &lt;code&gt;git ci&lt;/code&gt; 命令进行提交将会产生交互式生成 Angular git commit message 格式的提交说明，截图如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220233.jpg&#34; alt=&#34;git ci&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;六、GitLab-整合&#34;&gt;六、GitLab 整合&lt;/h3&gt;
&lt;p&gt;以上 Git Flow 所有操作介绍的都是在本地操作，而正常我们在工作中都是基于 GitLab 搭建私有 Git 仓库来进行协同开发的，以下简述以下 Git Flow 配合 GitLab 的流程&lt;/p&gt;
&lt;h4 id=&#34;6-1、开发-features&#34;&gt;6.1、开发 features&lt;/h4&gt;
&lt;p&gt;当开发一个新功能时流程如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地 &lt;code&gt;git flow feature start xxxx&lt;/code&gt; 开启一个 feature 新分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git flow feature publish xxxx&lt;/code&gt; 将此分支推送到远端以便他人获取&lt;/li&gt;
&lt;li&gt;完成开发后 GitLab 上向 &lt;code&gt;develop&lt;/code&gt; 分支发起合并请求&lt;/li&gt;
&lt;li&gt; CI sonar 等质量检测工具扫描，其他用户 review 代码&lt;/li&gt;
&lt;li&gt;确认无误后 &lt;code&gt;master&lt;/code&gt; 权限用户合并其到 &lt;code&gt;develop&lt;/code&gt; 分支&lt;/li&gt;
&lt;li&gt;部署到测试环境以便测试组测试&lt;/li&gt;
&lt;li&gt;如果测试不通过，则继续基于此分支开发，直到该功能开发完成&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;6-2、创建-release&#34;&gt;6.2、创建 release&lt;/h4&gt;
&lt;p&gt;当一定量的 feature 开发完成并合并到 develop 后，如所有 feature 都测试通过并满足版本需求，则可以创建 release 版本分支；release 分支流程如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地 &lt;code&gt;git flow release start xxxx&lt;/code&gt; 开启 release 分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git flow release publish xxxx&lt;/code&gt; 将其推送到远端以便他人获取&lt;/li&gt;
&lt;li&gt;继续进行完整性测试，出现问题继续修复，直到 release 完全稳定&lt;/li&gt;
&lt;li&gt;从 release 分支向 master、develop 分支分别发起合并请求&lt;/li&gt;
&lt;li&gt; master 合并后创建对应的 release 标签，并部署生产环境&lt;/li&gt;
&lt;li&gt; develop 合并 release 的后期修改&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;6-3、紧急修复&#34;&gt;6.3、紧急修复&lt;/h4&gt;
&lt;p&gt;当 master 某个 tag 部署到生产环境后，也可能出现不符合预期的问题出现；此时应该基于 master 创建 hotfix 分支进行修复，流程如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地 &lt;code&gt;git flow hotfix start xxxx&lt;/code&gt; 创建紧急修复分支&lt;/li&gt;
&lt;li&gt;修改代码后将其推送到远端，并像 master、develop 分支发起合并&lt;/li&gt;
&lt;li&gt; develop 合并紧急修复补丁，如果必要最好再做一下测试&lt;/li&gt;
&lt;li&gt; master 合并紧急修复补丁，创建紧急修复 tag，并部署生产环境&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;七、环境准备&#34;&gt;七、环境准备&lt;/h3&gt;
&lt;p&gt;首先需要有一台 GitLab 服务器，然后需要有个项目；这里示例项目以 Spring Boot 项目为例，然后最好有一台专门用来 Build 的机器，实际生产中如果 Build 任务不频繁可适当用一些业务机器进行 Build；本文示例所有组件将采用 Docker 启动， GitLab HA 等不在本文阐述范围内&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker Version : 1.13.1&lt;/li&gt;
&lt;li&gt;GitLab Version : 10.1.4-ce.0&lt;/li&gt;
&lt;li&gt;GitLab Runner Version : 10.1.0&lt;/li&gt;
&lt;li&gt;GitLab IP : 172.16.0.37&lt;/li&gt;
&lt;li&gt;GitLab Runner IP : 172.16.0.36&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;八、GitLab-CI-简介&#34;&gt;八、GitLab CI 简介&lt;/h3&gt;
&lt;p&gt;GitLab CI 是 GitLab 默认集成的 CI 功能，GitLab CI 通过在项目内 &lt;code&gt;.gitlab-ci.yaml&lt;/code&gt; 配置文件读取 CI 任务并进行相应处理；GitLab CI 通过其称为 GitLab Runner 的 Agent 端进行 build 操作；Runner 本身可以使用多种方式安装，比如使用 Docker 镜像启动等；Runner 在进行 build 操作时也可以选择多种 build 环境提供者；比如直接在 Runner 所在宿主机 build、通过新创建虚拟机 (vmware、virtualbox) 进行 build 等；同时 Runner 支持 Docker 作为 build 提供者，即每次 build 新启动容器进行 build；GitLab CI 其大致架构如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220236.png&#34; alt=&#34;GitLab&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;九、搭建-GitLab-服务器&#34;&gt;九、搭建 GitLab 服务器&lt;/h3&gt;
&lt;h4 id=&#34;9-1、GitLab-搭建&#34;&gt;9.1、GitLab 搭建&lt;/h4&gt;
&lt;p&gt;GitLab 搭建这里直接使用 docker compose 启动，compose 配置如下&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-yaml&#34; data-language=&#34;yaml&#34;&gt;&lt;code class=&#34;language-yaml&#34;&gt;&lt;span class=&#34;token key atrule&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;2&#39;&lt;/span&gt;
&lt;span class=&#34;token key atrule&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;gitlab&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;gitlab/gitlab-ce:10.1.4-ce.0&#39;&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;restart&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; always
    &lt;span class=&#34;token key atrule&#34;&gt;container_name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; gitlab
    &lt;span class=&#34;token key atrule&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;git.mritd.me&#39;&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token key atrule&#34;&gt;GITLAB_OMNIBUS_CONFIG&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token scalar string&#34;&gt;
        external_url &#39;http://git.mritd.me&#39;
        # Add any other gitlab.rb configuration here, each on its own line&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;80:80&#39;&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;443:443&#39;&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;8022:22&#39;&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./data/gitlab/config:/etc/gitlab&#39;&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./data/gitlab/logs:/var/log/gitlab&#39;&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &#39;./data/gitlab/data&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;/var/opt/gitlab&#39;Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;直接启动后，首次登陆需要设置初始密码如下，默认用户为 &lt;code&gt;root&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220240.png&#34; alt=&#34;gitkab init&#34;&gt;&lt;/p&gt;
&lt;p&gt;登陆成功后创建一个用户 (该用户最好给予 Admin 权限，以后操作以该用户为例)，并且创建一个测试 Group 和 Project，如下所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220427.png&#34; alt=&#34;Create User&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220432.png&#34; alt=&#34;Test Project&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;9-2、增加示例项目&#34;&gt;9.2、增加示例项目&lt;/h4&gt;
&lt;p&gt;这里示例项目采用 Java 的 SpringBoot 项目，并采用 Gradle 构建，其他语言原理一样；&lt;strong&gt;如果不熟悉 Java 的没必要死磕此步配置，任意语言 (最好 Java) 整一个能用的 Web 项目就行，并不强求一定 Java 并且使用 Gradle 构建，以下只是一个样例项目&lt;/strong&gt;；SpringBoot 可以采用 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://start.spring.io/&#34;&gt;Spring Initializr&lt;/a&gt; 直接生成 (依赖要加入 WEB)，如下所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220246.png&#34; alt=&#34;Spring Initializr&#34;&gt;&lt;/p&gt;
&lt;p&gt;将项目导入 IDEA，然后创建一个 index 示例页面，主要修改如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;build.gradle&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-jade&#34; data-language=&#34;jade&#34;&gt;&lt;code class=&#34;language-jade&#34;&gt;buildscript {
    ext {
        springBootVersion = &#39;1.5.8.RELEASE&#39;
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath(&#34;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&#34;)
    }
}

apply plugin: &#39;java&#39;
apply plugin: &#39;eclipse&#39;
apply plugin: &#39;idea&#39;
apply plugin: &#39;org.springframework.boot&#39;

group = &#39;me.mritd&#39;
version = &#39;0.0.1-SNAPSHOT&#39;
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}


dependencies {
    compile(&#39;org.springframework.boot:spring-boot-starter&#39;)
    compile(&#39;org.springframework.boot:spring-boot-starter-web&#39;)
    compile(&#39;org.springframework.boot:spring-boot-starter-thymeleaf&#39;)
    testCompile(&#39;org.springframework.boot:spring-boot-starter-test&#39;)
}Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;新建一个 HomeController&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-jade&#34; data-language=&#34;jade&#34;&gt;&lt;code class=&#34;language-jade&#34;&gt;package me.mritd.TestProject;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

/*******************************************************************************
 * Copyright (c) 2005-2017 Mritd, Inc.
 * TestProject
 * me.mritd.TestProject
 * Created by mritd on 2017/11/24 下午12:23.
 * Description: 
 *******************************************************************************/
@Controller
public class HomeController {

    @RequestMapping(&#34;/&#34;)
    public String home(){
        return &#34;index&#34;;
    }
}Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;templates 下新建 index.html&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-html&#34; data-language=&#34;html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token doctype&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;token doctype-tag&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;en&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;UTF-8&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Title&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Test...&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后项目整体结构如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220249.png&#34; alt=&#34;TestProject&#34;&gt;&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;assemble&lt;/code&gt; Task 打包出可执行 jar 包，并运行 &lt;code&gt;java -jar TestProject-0.0.1-SNAPSHOT.jar&lt;/code&gt; 测试下能启动访问页面即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220251.png&#34; alt=&#34;TestProject assemble&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后将项目提交到 GitLab 后如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220304.png&#34; alt=&#34;init Project&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;十、GitLab-CI-配置&#34;&gt;十、GitLab CI 配置&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;针对这一章节创建基础镜像以及项目镜像，这里仅以 Java 项目为例；其他语言原理相通，按照其他语言对应的运行环境修改即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;10-1、增加-Runner&#34;&gt;10.1、增加 Runner&lt;/h4&gt;
&lt;p&gt;GitLab CI 在进行构建时会将任务下发给 Runner，让 Runner 去执行；所以先要添加一个 Runner，Runner 这里采用 Docker Compose 启动，build 方式也使用 Docker 方式 Build；compose 文件如下&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-yaml&#34; data-language=&#34;yaml&#34;&gt;&lt;code class=&#34;language-yaml&#34;&gt;&lt;span class=&#34;token key atrule&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;2&#39;&lt;/span&gt;
&lt;span class=&#34;token key atrule&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;gitlab-runner&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;container_name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; gitlab&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;runner
    &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; gitlab/gitlab&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;runner&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;alpine&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;v10.1.0
    &lt;span class=&#34;token key atrule&#34;&gt;restart&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; always
    &lt;span class=&#34;token key atrule&#34;&gt;network_mode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;host&#34;&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; /var/run/docker.sock&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;/var/run/docker.sock
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; ./config.toml&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;/etc/gitlab&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;runner/config.toml
    &lt;span class=&#34;token key atrule&#34;&gt;extra_hosts&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &#34;git.mritd.me&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;172.16.0.37&#34;Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;在启动前，我们需要先 touch 一下这个 config.toml 配置文件&lt;/strong&gt;；该文件是 Runner 的运行配置，此后 Runner 所有配置都会写入这个文件 (不 touch 出来 docker-compose 发现不存在会挂载一个目录进去，导致 Runner 启动失败)；启动 docker-compose 后，&lt;strong&gt;需要进入容器执行注册，让 Runner 主动去连接 GitLab 服务器&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 生成 Runner 配置文件&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;touch&lt;/span&gt; config.toml
&lt;span class=&#34;token comment&#34;&gt;# 启动 Runner&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;docker-compose&lt;/span&gt; up -d
&lt;span class=&#34;token comment&#34;&gt;# 激活 Runner&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; -it gitlab-runner gitlab-runner registerCopy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在执行上一条激活命令后，会按照提示让你输入一些信息；&lt;strong&gt;首先输入 GitLab 地址，然后是 Runner Token，Runner Token 可以从 GitLab 设置中查看&lt;/strong&gt;，如下所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220624.png&#34; alt=&#34;Runner Token&#34;&gt;&lt;/p&gt;
&lt;p&gt;整体注册流程如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220312.png&#34; alt=&#34;Runner registry&#34;&gt;&lt;/p&gt;
&lt;p&gt;注册完成后，在 GitLab Runner 设置中就可以看到刚刚注册的 Runner，如下所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220628.png&#34; alt=&#34;Runner List&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Runner 注册成功后会将配置写入到 config.toml 配置文件；由于两个测试宿主机都没有配置内网 DNS，所以为了保证 runner 在使用 docker build 时能正确的找到 GitLab 仓库地址，还需要增加一个 docker 的 host 映射 ( &lt;code&gt;extra_hosts&lt;/code&gt; )；同时为了能调用 宿主机 Docker 和持久化 build 的一些缓存还挂载了一些文件和目录；完整的 配置如下 (配置文件可以做一些更高级的配置，具体参考 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://docs.gitlab.com/runner/configuration/advanced-configuration.html&#34;&gt;官方文档&lt;/a&gt; )&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;config.toml&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-toml&#34; data-language=&#34;toml&#34;&gt;&lt;code class=&#34;language-toml&#34;&gt;&lt;span class=&#34;token key property&#34;&gt;concurrent&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;check_interval&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;

&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;runners&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Test Runner&#34;&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;http://git.mritd.me&#34;&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;token&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;c279ec1ac08aec98c7141c7cf2d474&#34;&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;executor&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;docker&#34;&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;builds_dir&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/gitlab/runner-builds&#34;&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;cache_dir&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/gitlab/runner-cache&#34;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;runners.docker&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;token key property&#34;&gt;tls_verify&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;
    &lt;span class=&#34;token key property&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;debian&#34;&lt;/span&gt;
    &lt;span class=&#34;token key property&#34;&gt;privileged&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;
    &lt;span class=&#34;token key property&#34;&gt;disable_cache&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;
    &lt;span class=&#34;token key property&#34;&gt;shm_size&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;token key property&#34;&gt;volumes&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/data/gitlab-runner:/gitlab&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/var/run/docker.sock:/var/run/docker.sock&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/data/maven_repo:/data/repo&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/data/maven_repo:/data/maven&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/data/gradle:/data/gradle&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/data/sonar_cache:/root/.sonar&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/data/androidsdk:/usr/local/android&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/data/node_modules:/data/node_modules&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;token key property&#34;&gt;extra_hosts&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;git.mritd.me:172.16.0.37&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;runners.cache&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意，这里声明的 Volumes 会在每个运行的容器中都生效；也就是说 build 时新开启的每个容器都会被挂载这些目录&lt;/strong&gt;；修改完成后重启 runner 容器即可，由于 runner 中没啥可保存的东西，所以可以直接 &lt;code&gt;docker-compose down &amp;amp;&amp;amp; docker-compose up -d&lt;/code&gt; 重启&lt;/p&gt;
&lt;h4 id=&#34;10-2、创建基础镜像&#34;&gt;10.2、创建基础镜像&lt;/h4&gt;
&lt;p&gt;由于示例项目是一个 Java 项目，而且是采用 Spring Boot 的，所以该项目想要运行起来只需要一个 java 环境即可，中间件已经被打包到了 jar 包中；以下是一个作为基础运行环境的 openjdk 镜像的 Dockerfile&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-dockerfile&#34; data-language=&#34;dockerfile&#34;&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM alpine:edge 

LABEL maintainer=&#34;mritd &amp;lt;mritd1234@gmail.com&amp;gt;&#34;

ENV JAVA_HOME /usr/lib/jvm/java-1.8-openjdk
ENV PATH $PATH:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin

RUN apk add --update bash curl tar wget ca-certificates unzip \
        openjdk8 font-adobe-100dpi ttf-dejavu fontconfig \
    &amp;amp;&amp;amp; rm -rf /var/cache/apk/* \

CMD [&#34;bash&#34;]Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;这个 openjdk Dockerfile 升级到了 8.151 版本，并且集成了一些字体相关的软件，以解决在 Java 中某些验证码库无法运行问题，详见 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mritd.me/2017/09/27/alpine-3.6-openjdk-8-bug/&#34;&gt;Alpine 3.6 OpenJDK 8 Bug&lt;/a&gt;&lt;/strong&gt;；使用这个 Dockerfile，在当前目录执行 &lt;code&gt;docker build -t mritd/openjdk:8 .&lt;/code&gt; build 一个 openjdk8 的基础镜像，然后将其推送到私服，或者 Docker Hub 即可&lt;/p&gt;
&lt;h4 id=&#34;10-3、创建项目镜像&#34;&gt;10.3、创建项目镜像&lt;/h4&gt;
&lt;p&gt;有了基本的 openjdk 的 docker 镜像后，针对于项目每次 build 都应该生成一个包含发布物的 docker 镜像，所以对于项目来说还需要一个项目本身的 Dockerfile；&lt;strong&gt;项目的 Dockerfile 有两种使用方式；一种是动态生成 Dockerfile，然后每次使用新生成的 Dockerfile 去 build；还有一种是写一个通用的 Dockerfile，build 时利用 ARG 参数传入变量&lt;/strong&gt;；这里采用第二种方式，以下为一个可以反复使用的 Dockerfile&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-dockerfile&#34; data-language=&#34;dockerfile&#34;&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM mritd/openjdk:8-144-01

MAINTAINER mritd &amp;lt;mritd1234@gmail.com&amp;gt;

ARG PROJECT_BUILD_FINALNAME

ENV TZ &#39;Asia/Shanghai&#39;
ENV PROJECT_BUILD_FINALNAME ${PROJECT_BUILD_FINALNAME}


COPY build/libs/${PROJECT_BUILD_FINALNAME}.jar /${PROJECT_BUILD_FINALNAME}.jar

CMD [&#34;bash&#34;,&#34;-c&#34;,&#34;java -jar /${PROJECT_BUILD_FINALNAME}.jar&#34;]Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;该 Dockerfile 通过声明一个 &lt;code&gt;PROJECT_BUILD_FINALNAME&lt;/code&gt; 变量来表示项目的发布物名称；然后将其复制到根目录下，最终利用 java 执行这个 jar 包；所以每次 build 之前只要能拿到项目发布物的名称即可&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;10-4、Gradle-修改&#34;&gt;10.4、Gradle 修改&lt;/h4&gt;
&lt;p&gt;上面已经创建了一个标准的通用型 Dockerfile，每次 build 镜像只要传入 &lt;code&gt;PROJECT_BUILD_FINALNAME&lt;/code&gt; 这个最终发布物名称即可；对于发布物名称来说，最好不要固定死；当然不论是 Java 还是其他语言的项目我们都能将最终发布物变成一个固定名字，最不济可以写脚本重命名一下；但是不建议那么干，最好保留版本号信息，以便于异常情况下进入容器能够分辨；对于当前 Java 项目来说，想要拿到 &lt;code&gt;PROJECT_BUILD_FINALNAME&lt;/code&gt; 很简单，我们只需要略微修改一下 Gradle 的 build 脚本，让其每次打包 jar 包时将项目的名称及版本号导出到文件中即可；同时这里也加入了镜像版本号的处理，Gradle 脚本修改如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;build.gradle 最后面增加如下 &lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-jade&#34; data-language=&#34;jade&#34;&gt;&lt;code class=&#34;language-jade&#34;&gt;bootRepackage {

    mainClass = &#39;me.mritd.TestProject.TestProjectApplication&#39;
    executable = true

    doLast {
        File envFile = new File(&#34;build/tmp/PROJECT_ENV&#34;)

        println(&#34;Create ${archivesBaseName} ENV File ===&amp;gt; &#34; + envFile.createNewFile())
        println(&#34;Export ${archivesBaseName} Build Version ===&amp;gt; ${version}&#34;)
        envFile.write(&#34;export PROJECT_BUILD_FINALNAME=${archivesBaseName}-${version}\n&#34;)

        println(&#34;Generate Docker image tag...&#34;)
        envFile.append(&#34;export BUILD_DATE=`date +%Y%m%d%H%M%S`\n&#34;)
        envFile.append(&#34;export IMAGE_NAME=mritd/test:`echo \${CI_BUILD_REF_NAME} | tr &#39;/&#39; &#39;-&#39;`-`echo \${CI_COMMIT_SHA} | cut -c1-8`-\${BUILD_DATE}\n&#34;)
        envFile.append(&#34;export LATEST_IMAGE_NAME=mritd/test:latest\n&#34;)
    }
}Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;这一步操作实际上是修改了 &lt;code&gt;bootRepackage&lt;/code&gt; 这个 Task (不了解 Gradle 或者不是 Java 项目的请忽略)，在其结束后创建了一个叫 &lt;code&gt;PROJECT_ENV&lt;/code&gt; 的文件，里面实际上就是写入了一些 bash 环境变量声明，以方便后面 source 一下这个文件拿到一些变量，然后用户 build 镜像使用&lt;/strong&gt;，&lt;code&gt;PROJECT_ENV&lt;/code&gt; 最终生成如下&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;PROJECT_BUILD_FINALNAME&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;TestProject-0.0.1-SNAPSHOT
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;BUILD_DATE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;date&lt;/span&gt; +%Y%m%d%H%M%S&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;IMAGE_NAME&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;mritd/test:&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; $&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;CI_BUILD_REF_NAME&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;tr&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/&#39;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;-&#39;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;-&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; $&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;CI_COMMIT_SHA&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cut&lt;/span&gt; -c1-8&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;-&lt;span class=&#34;token variable&#34;&gt;${BUILD_DATE}&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;LATEST_IMAGE_NAME&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;mritd/test:latestCopy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220738.png&#34; alt=&#34;PROJECT_ENV&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;10-5、创建-CI-配置文件&#34;&gt;10.5、创建 CI 配置文件&lt;/h4&gt;
&lt;p&gt;一切准备就绪以后，就可以编写 CI 脚本了；GitLab 依靠读取项目根目录下的 &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; 文件来执行相应的 CI 操作；以下为测试项目的 &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; 配置&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-yaml&#34; data-language=&#34;yaml&#34;&gt;&lt;code class=&#34;language-yaml&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 调试开启&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#before_script:&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#  - pwd&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#  - env&lt;/span&gt;

&lt;span class=&#34;token key atrule&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; $CI_PROJECT_NAME/$CI_COMMIT_REF_NAME&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;$CI_COMMIT_SHA
  &lt;span class=&#34;token key atrule&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; build

&lt;span class=&#34;token key atrule&#34;&gt;stages&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; build
  &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; deploy

&lt;span class=&#34;token key atrule&#34;&gt;auto-build&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; mritd/build&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;2.1.1
  &lt;span class=&#34;token key atrule&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; build
  &lt;span class=&#34;token key atrule&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; gradle &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;no&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;daemon clean assemble
  &lt;span class=&#34;token key atrule&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; test

&lt;span class=&#34;token key atrule&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; mritd/docker&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;kubectl&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;v1.7.4
  &lt;span class=&#34;token key atrule&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; deploy
  &lt;span class=&#34;token key atrule&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; source build/tmp/PROJECT_ENV
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; echo &#34;Build Docker Image ==&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt; $&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;IMAGE_NAME&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&#34;
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; docker build &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;t $&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;IMAGE_NAME&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;build&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;arg PROJECT_BUILD_FINALNAME=$&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;PROJECT_BUILD_FINALNAME&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; .
&lt;span class=&#34;token comment&#34;&gt;#    - docker push ${IMAGE_NAME}&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; docker tag $&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;IMAGE_NAME&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; $&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;LATEST_IMAGE_NAME&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#    - docker push ${LATEST_IMAGE_NAME}&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#    - docker rmi ${IMAGE_NAME} ${LATEST_IMAGE_NAME}&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#    - kubectl --kubeconfig ${KUBE_CONFIG} set image deployment/test test=$IMAGE_NAME&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; test
  &lt;span class=&#34;token key atrule&#34;&gt;only&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; master
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; develop
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; /^chore.&lt;span class=&#34;token important&#34;&gt;*$/Copy&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;关于 CI 配置的一些简要说明如下&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;stages&#34;&gt;stages&lt;/h5&gt;
&lt;p&gt;stages 字段定义了整个 CI 一共有哪些阶段流程，以上的 CI 配置中，定义了该项目的 CI 总共分为 &lt;code&gt;build&lt;/code&gt;、&lt;code&gt;deploy&lt;/code&gt; 两个阶段；GitLab CI 会根据其顺序执行对应阶段下的所有任务；&lt;strong&gt;在正常生产环境流程可以定义很多个，比如可以有 &lt;code&gt;test&lt;/code&gt;、&lt;code&gt;publish&lt;/code&gt;，甚至可能有代码扫描的 &lt;code&gt;sonar&lt;/code&gt; 阶段等；这些阶段没有任何限制，完全是自定义的&lt;/strong&gt;，上面的阶段定义好后在 CI 中表现如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220327.png&#34; alt=&#34;stages&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;task&#34;&gt;task&lt;/h5&gt;
&lt;p&gt;task 隶属于 stages 之下；也就是说一个阶段可以有多个任务，任务执行顺序默认不指定会并发执行；对于上面的 CI 配置来说 &lt;code&gt;auto-build&lt;/code&gt; 和 &lt;code&gt;deploy&lt;/code&gt; 都是 task，他们通过 &lt;code&gt;stage: xxxx&lt;/code&gt; 这个标签来指定他们隶属于哪个 stage；当 Runner 使用 Docker 作为 build 提供者时，我们可以在 task 的 &lt;code&gt;image&lt;/code&gt; 标签下声明该 task 要使用哪个镜像运行，不指定则默认为 Runner 注册时的镜像 (这里是 debian)；&lt;strong&gt;同时 task 还有一个 &lt;code&gt;tags&lt;/code&gt; 的标签，该标签指明了这个任务将可以在哪些 Runner 上运行；这个标签可以从 Runner 页面看到，实际上就是 Runner 注册时输入的哪个 tag；对于某些特殊的项目，比如 IOS 项目，则必须在特定机器上执行，所以此时指定 tags 标签很有用&lt;/strong&gt;，当 task 运行后如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101221014.png&#34; alt=&#34;Task&#34;&gt;&lt;/p&gt;
&lt;p&gt;除此之外 task 还能指定 &lt;code&gt;only&lt;/code&gt; 标签用于限定那些分支才能触发这个 task，如果分支名字不满足则不会触发；&lt;strong&gt;默认情况下，这些 task 都是自动执行的，如果感觉某些任务太过危险，则可以通过增加 &lt;code&gt;when: manual&lt;/code&gt; 改为手动执行；注意：手动执行被 GitLab 认为是高权限的写操作，所以只有项目管理员才能手动运行一个 task，直白的说就是管理员才能点击&lt;/strong&gt;；手动执行如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220759.png&#34; alt=&#34;manual task&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;cache&#34;&gt;cache&lt;/h5&gt;
&lt;p&gt;cache 这个参数用于定义全局那些文件将被 cache；&lt;strong&gt;在 GitLab CI 中，跨 stage 是不能保存东西的；也就是说在第一步 build 的操作生成的 jar 包，到第二部打包 docker image 时就会被删除；GitLab 会保证每个 stage 中任务在执行时都将工作目录 (Docker 容器 中) 还原到跟 GitLab 代码仓库中一模一样，多余文件及变更都会被删除&lt;/strong&gt;；正常情况下，第一步 build 生成 jar 包应当立即推送到 nexus 私服；但是这里测试没有搭建，所以只能放到本地；但是放到本地下一个 task 就会删除它，所以利用 &lt;code&gt;cache&lt;/code&gt; 这个参数将 &lt;code&gt;build&lt;/code&gt; 目录 cache 住，保证其跨 stage 也能存在&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于 &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; 具体配置更完整的请参考 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://docs.gitlab.com/ee/ci/yaml/&#34;&gt;官方文档&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;十一、其他相关&#34;&gt;十一、其他相关&lt;/h3&gt;
&lt;h4 id=&#34;11-1、GitLab-内置环境变量&#34;&gt;11.1、GitLab 内置环境变量&lt;/h4&gt;
&lt;p&gt;上面已经基本搞定了一个项目的 CI，但是有些变量可能并未说清楚；比如在创建的 &lt;code&gt;PROJECT_ENV&lt;/code&gt; 文件中引用了 &lt;code&gt;${CI_COMMIT_SHA}&lt;/code&gt; 变量；这种变量其实是 GitLab CI 的内置隐藏变量，这些变量在每次 CI 调用 Runner 运行某个任务时都会传递到对应的 Runner 的执行环境中；&lt;strong&gt;也就是说这些变量在每次的任务容器 SHELL 环境中都会存在，可以直接引用&lt;/strong&gt;，具体的完整环境变量列表可以从 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://docs.gitlab.com/ee/ci/variables/&#34;&gt;官方文档&lt;/a&gt; 中获取；如果想知道环境变量具体的值，实际上可以通过在任务执行前用 &lt;code&gt;env&lt;/code&gt; 指令打印出来，如下所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220338.png&#34; alt=&#34;env&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220800.png&#34; alt=&#34;env task&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;11-2、GitLab-自定义环境变量&#34;&gt;11.2、GitLab 自定义环境变量&lt;/h4&gt;
&lt;p&gt;在某些情况下，我们希望 CI 能自动的发布或者修改一些东西；比如将 jar 包上传到 nexus、将 docker 镜像 push 到私服；这些动作往往需要一个高权限或者说有可写入对应仓库权限的账户来支持，但是这些账户又不想写到项目的 CI 配置里；因为这样很不安全，谁都能看到；此时我们可以将这些敏感变量写入到 GitLab 自定义环境变量中，GitLab 会像对待内置变量一样将其传送到 Runner 端，以供我们使用；GitLab 中自定义的环境变量可以有两种，一种是项目级别的，只能够在当前项目使用，如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220803.png&#34; alt=&#34;project env&#34;&gt;&lt;/p&gt;
&lt;p&gt;另一种是组级别的，可以在整个组内的所有项目中使用，如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220805.png&#34; alt=&#34;group env&#34;&gt;&lt;/p&gt;
&lt;p&gt;这两种变量添加后都可以在 CI 的脚本中直接引用&lt;/p&gt;
&lt;h4 id=&#34;11-3、Kubernetes-集成&#34;&gt;11.3、Kubernetes 集成&lt;/h4&gt;
&lt;p&gt;对于 Kubernetes 集成实际上有两种方案，一种是对接 Kubernetes 的 api，纯代码实现；另一种取巧的方案是调用 kubectl 工具，用 kubectl 工具来实现滚动升级；这里采用后一种取巧的方式，将 kubectl 二进制文件封装到镜像中，然后在 deploy 阶段使用这个镜像直接部署就可以&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220345.png&#34; alt=&#34;kubectl&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;mritd/docker-kubectl:v1.7.4&lt;/code&gt; 这个镜像的 Dockerfile 如下&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-dockerfile&#34; data-language=&#34;dockerfile&#34;&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM docker:dind 

LABEL maintainer=&#34;mritd &amp;lt;mritd1234@gmail.com&amp;gt;&#34;

ARG TZ=&#34;Asia/Shanghai&#34;

ENV TZ ${TZ}

ENV KUBE_VERSION v1.8.0

RUN apk upgrade --update \
    &amp;amp;&amp;amp; apk add bash tzdata wget ca-certificates \
    &amp;amp;&amp;amp; wget https://storage.googleapis.com/kubernetes-release/release/${KUBE_VERSION}/bin/linux/amd64/kubectl -O /usr/local/bin/kubectl \
    &amp;amp;&amp;amp; chmod +x /usr/local/bin/kubectl \
    &amp;amp;&amp;amp; ln -sf /usr/share/zoneinfo/${TZ} /etc/localtime \
    &amp;amp;&amp;amp; echo ${TZ} &amp;gt; /etc/timezone \
    &amp;amp;&amp;amp; rm -rf /var/cache/apk/*

CMD [&#34;/bin/bash&#34;]Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里面的 &lt;code&gt;${KUBE_CONFIG}&lt;/code&gt; 是一个自定义的环境变量，对于测试环境我将配置文件直接挂载入了容器中，然后 &lt;code&gt;${KUBE_CONFIG}&lt;/code&gt; 只是指定了一个配置文件位置，实际生产环境中可以选择将配置文件变成自定义环境变量使用&lt;/p&gt;
&lt;h4 id=&#34;11-4、GitLab-CI-总结&#34;&gt;11.4、GitLab CI 总结&lt;/h4&gt;
&lt;p&gt;关于 GitLab CI 上面已经讲了很多，但是并不全面，也不算太细致；因为这东西说起来实际太多了，现在目测已经 1W 多字了；以下总结一下 GitLab CI 的总体思想，当思路清晰了以后，我想后面的只是查查文档自己试一试就行了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CS 架构&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GitLab 作为 Server 端，控制 Runner 端执行一系列的 CI 任务；代码 clone 等无需关心，GitLab 会自动处理好一切；Runner 每次都会启动新的容器执行 CI 任务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;容器即环境&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Runner 使用 Docker build 的前提下；&lt;strong&gt;所有依赖切换、环境切换应当由切换不同镜像实现，即 build 那就使用 build 的镜像，deploy 就用带有 deploy 功能的镜像；通过不同镜像容器实现完整的环境隔离&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CI 即脚本&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同的 CI 任务实际上就是在使用不同镜像的容器中执行 SHELL 命令，自动化 CI 就是执行预先写好的一些小脚本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;敏感信息走环境变量&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一切重要的敏感信息，如账户密码等，不要写到 CI 配置中，直接放到 GitLab 的环境变量中；GitLab 会保证将其推送到远端 Runner 的 SHELL 变量中&lt;/p&gt;
&lt;p&gt;转载整理 From：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mritd.com/2017/09/05/git-flow-note/&#34;&gt;git-flow-note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mritd.com/2017/11/28/ci-cd-gitlab-ci/&#34;&gt;ci-cd-gitlab-ci&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系列教程-3&#34;&gt;&lt;strong&gt;系列教程&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Gitlab 使用系列&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/acc13b70/&#34;&gt;&lt;strong&gt;Gitlab 的安装及使用教程完全版&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/29a820b3/&#34;&gt;破解 Gitlab EE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/d08eb7b/&#34;&gt;Gitlab 的安装及使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/1879721e/&#34;&gt;CI/CD 与 Git Flow 与 GitLab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/bilicard.css&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="Gitlab" />
        <category term="Git" />
        <category term="CI/CD" />
        <updated>2021-11-01T11:25:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.17lai.site/posts/593cc323/</id>
        <title>Earthly 一个更加强大的镜像构建工具</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/593cc323/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;一、Earthly-介绍&#34;&gt;一、Earthly 介绍&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;开局一张图，功能全靠吹。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101210057.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;Earthly 是一个更加高级的 Docker 镜像构建工具，Earthly 通过自己定义的 Earthfile 来代替传统的 Dockerfile 完成镜像构建；Earthfile 就如同 Earthly 官方所描述:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;**Makefile + Dockerfile = Earthfile**&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在使用 Earthly 进行构建镜像时目前强依赖于 buildkit，Earthly 通过 buildkit 支持了一些 Dockerfile 的扩展语法，同时将 Dockerfile 与 Makefile 整合，使得多平台构建和代码化 Dockerfile 变得更加简单；使用 Earthly 可以更加方便的完成 Dockerfile 的代码复用以及更加友好的 CI 自动集成。&lt;/p&gt;
&lt;h2 id=&#34;二、快速开始&#34;&gt;二、快速开始&lt;/h2&gt;
&lt;h3 id=&#34;2-1、安装依赖&#34;&gt;2.1、安装依赖&lt;/h3&gt;
&lt;p&gt;Earthly 目前依赖于 Docker 和 Git，所以安装 Earthly 前请确保机器已经安装了 Docker 和 Git。&lt;/p&gt;
&lt;h3 id=&#34;2-2、安装-Earthly&#34;&gt;2.2、安装 Earthly&lt;/h3&gt;
&lt;p&gt;Earthly 采用 Go 编写，所以主要就一个二进制文件，Linux 下安装可以直接参考官方的安装脚本:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; /bin/sh -c &lt;span class=&#34;token string&#34;&gt;&#39;wget https://github.com/earthly/earthly/releases/latest/download/earthly-linux-amd64 -O /usr/local/bin/earthly &amp;amp;&amp;amp; chmod +x /usr/local/bin/earthly &amp;amp;&amp;amp; /usr/local/bin/earthly bootstrap --with-autocomplete&#39;&lt;/span&gt;Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装完成后 Earthly 将会启动一个 buildkitd 容器: &lt;code&gt;earthly-buildkitd&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;2-3、语法高亮&#34;&gt;2.3、语法高亮&lt;/h3&gt;
&lt;p&gt;目前 Earthly 官方支持 VS Code、VIM 以及 Sublime Text 三种编辑器的语法高亮，具体如何安装请参考 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://earthly.dev/get-earthly&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;2-4、基本使用&#34;&gt;2.4、基本使用&lt;/h3&gt;
&lt;p&gt;本示例源于官方 Basic 教程，以下示例以编译 Go 项目为样例:&lt;/p&gt;
&lt;p&gt;首先创建一个任意名称的目录，目录中存在项目源码文件以及一个 &lt;code&gt;Earthfile&lt;/code&gt; 文件；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;main.go&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-go&#34; data-language=&#34;go&#34;&gt;&lt;code class=&#34;language-go&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;package&lt;/span&gt; main

&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;fmt&#34;&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    fmt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;hello world&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Earthfile&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-dockerfile&#34; data-language=&#34;dockerfile&#34;&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM golang:1.17-alpine
WORKDIR /go-example

build:
    COPY main.go .
    RUN go build -o build/go-example main.go
    SAVE ARTIFACT build/go-example /go-example AS LOCAL build/go-example

docker:
    COPY +build/go-example .
    ENTRYPOINT [&#34;/go-example/go-example&#34;]
    SAVE IMAGE go-example:latestCopy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;有了 &lt;code&gt;Earthfile&lt;/code&gt; 以后我们就可以使用 &lt;code&gt;Earthly&lt;/code&gt; 将其打包为镜像；&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 目录结构&lt;/span&gt;
~/t/earthlytest ❯❯❯ tree
&lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;
├── Earthfile
└── main.go

&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; directories, &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; files

&lt;span class=&#34;token comment&#34;&gt;# 通过 earthly 进行构建&lt;/span&gt;
~/t/earthlytest ❯❯❯ earthly +dockerCopy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101210338.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;构建完成后我们就可以直接从 docker 的 images 列表中查看刚刚构建的镜像，并运行:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101212129.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;三、进阶使用&#34;&gt;三、进阶使用&lt;/h2&gt;
&lt;h3 id=&#34;3-1、多阶段构建&#34;&gt;3.1、多阶段构建&lt;/h3&gt;
&lt;p&gt;Earthfile 中包含类似 Makefile 一样的 &lt;code&gt;target&lt;/code&gt;，不同的 &lt;code&gt;target&lt;/code&gt; 之间还可以通过特定语法进行引用，每个 &lt;code&gt;target&lt;/code&gt; 都可以被单独执行，执行过程中 earthly 会自动解析这些依赖关系。&lt;/p&gt;
&lt;p&gt;这种多阶段构建时语法很弹性，我们可以在每个阶段运行独立的命令以及使用不同的基础镜像；从快速开始中可以看到，我们始终使用了一个基础镜像 (&lt;code&gt;golang:1.17-alpine&lt;/code&gt;)，对于 Go 这种编译后自带运行时不依赖其语言 SDK 的应用，我们事实上可以将 “发布物” 仅放在简单的运行时系统镜像内，从而减少最终镜像体积:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101210338-2.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;由于使用了多个 target，所以我们可以单独的运行 &lt;code&gt;build&lt;/code&gt; 这个 target 来验证我们的编译流程，&lt;strong&gt;这种多 target 的设计方便我们构建应用时对编译、打包步骤的细化拆分，同时也方便我们进行单独的验证。&lt;/strong&gt; 例如我们单独执行 &lt;code&gt;build&lt;/code&gt; 这个 target 来验证我们的编译流程是否正确:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101210338-3.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;在其他阶段验证完成后，我们可以直接运行最终的 target，earthly 会自动识别到这种依赖关系从而自动运行其依赖的 target:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101210338-4.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-2、扩展指令&#34;&gt;3.2、扩展指令&lt;/h3&gt;
&lt;h4 id=&#34;3-2-1、SAVE&#34;&gt;3.2.1、SAVE&lt;/h4&gt;
&lt;p&gt;SAVE 指令是 Earthly 自己的一个扩展指令，实际上分为 &lt;code&gt;SAVE ARTIFACT&lt;/code&gt; 和 &lt;code&gt;SAVE IMAGE&lt;/code&gt;；其中 &lt;code&gt;SAVE ARTIFACT&lt;/code&gt; 指令格式如下:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-dockerfile&#34; data-language=&#34;dockerfile&#34;&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;SAVE ARTIFACT [--keep-ts] [--keep-own] [--if-exists] [--force] &amp;lt;src&amp;gt; [&amp;lt;artifact-dest-path&amp;gt;] [AS LOCAL &amp;lt;local-path&amp;gt;]Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;SAVE ARTIFACT&lt;/code&gt; 指令用于将文件或目录从 build 运行时环境保存到 target 的 artifact 环境；当保存到 artifact 环境后，可以通过 &lt;code&gt;COPY&lt;/code&gt; 等命令在其他位置进行引用，类似于 Dockerfile 的 &lt;code&gt;COPY --from...&lt;/code&gt; 语法；不同的是 &lt;code&gt;SAVE ARTIFACT&lt;/code&gt; 支持 &lt;code&gt;AS LOCAL &amp;lt;local-path&amp;gt;&lt;/code&gt; 附加参数，一但指定此参数后，earthly 会同时将文件或目录在宿主机复制一份，一般用于调试等目的。&lt;code&gt;SAVE ARTIFACT&lt;/code&gt; 命令在上面的样例中已经展示了，在运行完 &lt;code&gt;earthly +build&lt;/code&gt; 命令后实际上会在本地看到被 SAVE 出来的 ARTIFACT:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101210338-5.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;而另一个 &lt;code&gt;SAVE IMAGE&lt;/code&gt; 指令则主要用于将当前的 build 环境 SAVE 为一个 IMAGE，&lt;strong&gt;如果指定了 &lt;code&gt;--push&lt;/code&gt; 选项，同时在执行 &lt;code&gt;earthly +target&lt;/code&gt; 命令时也加入 &lt;code&gt;--push&lt;/code&gt; 选项，该镜像将会自动被推送到目标 Registry 上。&lt;/strong&gt;&lt;code&gt;SAVE IMAGE&lt;/code&gt; 指令格式如下:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-dockerfile&#34; data-language=&#34;dockerfile&#34;&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;SAVE IMAGE [--cache-from=&amp;lt;cache-image&amp;gt;] [--push] &amp;lt;image-name&amp;gt;...Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101210338-6.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;3-2-2、GIT-CLONE&#34;&gt;3.2.2、GIT CLONE&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;GIT CLONE&lt;/code&gt; 指令用于将指定 git 仓库 clone 到 build 环境中；与 &lt;code&gt;RUN git clone...&lt;/code&gt; 命令不同的是，&lt;strong&gt;&lt;code&gt;GIT CLONE&lt;/code&gt; 通过宿主机的 git 命令运行，它不依赖于容器内的 git 命令，同时还可以直接为 earthly 配置 git 认证，从而避免将这些安全信息泄漏到 build 环境中；&lt;/strong&gt; 关于如何配置 earthly 的 git 认证请参考 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://docs.earthly.dev/docs/guides/auth&#34;&gt;官方文档&lt;/a&gt;；下面是 &lt;code&gt;GIT CLONE&lt;/code&gt; 指令的样例&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101213746.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;3-2-3、COPY&#34;&gt;3.2.3、COPY&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;COPY&lt;/code&gt; 指令与标准的 Dockerfile COPY 指令类似，除了支持 Dockerfile 标准的 COPY 功能以外，&lt;strong&gt;earthly 中的 &lt;code&gt;COPY&lt;/code&gt; 指令可以引用其他 target 环节产生的 artifact，在引用时会自动声明依赖关系；即当在 &lt;code&gt;B&lt;/code&gt; target 中存在 &lt;code&gt;COPY +A/xxxxx /path/to/copy&lt;/code&gt; 类似的指令时，如果只单纯的执行 &lt;code&gt;earthly +B&lt;/code&gt;，那么 earthly 根据依赖分析会得出在 COPY 之前需要执行 target A。&lt;/strong&gt;&lt;code&gt;COPY&lt;/code&gt; 指令的语法格式如下:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-dockerfile&#34; data-language=&#34;dockerfile&#34;&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# 与 Dockerfile 相同的使用方式，从上下文复制
COPY [options...] &amp;lt;src&amp;gt;... &amp;lt;dest&amp;gt;

# 扩展支持的从 target 复制方式
COPY [options...] &amp;lt;src-artifact&amp;gt;... &amp;lt;dest&amp;gt;Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-2-4、RUN&#34;&gt;3.2.4、RUN&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;RUN&lt;/code&gt; 指令在标准使用上与 Dockerfile 里保持一致，除此之外增加了更多的扩展选项，其指令格式如下:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-dockerfile&#34; data-language=&#34;dockerfile&#34;&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# shell 方式运行(/bin/sh -c)
RUN [--push] [--entrypoint] [--privileged] [--secret &amp;lt;env-var&amp;gt;=&amp;lt;secret-ref&amp;gt;] [--ssh] [--mount &amp;lt;mount-spec&amp;gt;] [--] &amp;lt;command&amp;gt;

# exec 方式运行
RUN [[&amp;lt;flags&amp;gt;...], &#34;&amp;lt;executable&amp;gt;&#34;, &#34;&amp;lt;arg1&amp;gt;&#34;, &#34;&amp;lt;arg2&amp;gt;&#34;, ...]Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中 &lt;code&gt;--privileged&lt;/code&gt; 选项允许运行的命令使用 &lt;code&gt;privileged capabilities&lt;/code&gt;，但是需要 earthly 在运行 target 时增加 &lt;code&gt;--allow-privileged&lt;/code&gt; 选项；&lt;code&gt;--interactive / --interactive-keep&lt;/code&gt; 选项用于交互式执行一些命令，在完成交互后 build 继续进行，&lt;strong&gt;在交互过程中进行的操作都会被持久化到 镜像中:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101210338-8.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;限于篇幅原因，其他的具体指令请查阅官方文档 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://docs.earthly.dev/docs/earthfile&#34;&gt;Earthfile reference&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;3-3、UDCS&#34;&gt;3.3、UDCS&lt;/h3&gt;
&lt;p&gt;UDCs 全称 “User-defined commands”，即用户定义指令；通过 UDCs 我们可以将 Earthfile 中特定的命令剥离出来，从而实现更加通用和统一的代码复用；下面是一个定义 UDCs 指令的样例:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-dockerfile&#34; data-language=&#34;dockerfile&#34;&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# 定义一个 Command
# ⚠️ 注意: 语法必须满足以下规则
# 1、名称全大写
# 2、名称下划线分割
# 3、首个命令必须为 COMMAND(后面没有冒号)
MY_COPY:
    COMMAND
    ARG src
    ARG dest=./
    ARG recursive=false
    RUN cp $(if $recursive =  &#34;true&#34;; then printf -- -r; fi) &#34;$src&#34; &#34;$dest&#34;

# target 中引用
build:
    FROM alpine:3.13
    WORKDIR /udc-example
    RUN echo &#34;hello&#34; &amp;gt;./foo
    # 通过 DO 关键字引用 UDCs
    DO +MY_COPY --src=./foo --dest=./bar
    RUN cat ./bar # prints &#34;hello&#34;Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;UDCs 不光可以定义在一个 Earthfile 中，UDCs 可以跨文件、跨目录引用:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101212525.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;有了 UDCs 以后，我们可以通过这种方式将对基础镜像的版本统一控制、对特殊镜像的通用处理等操作全部抽象出来，然后每个 Earthfile 根据需要进行引用；关于 UDCs 的使用样例可以参考我的 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/mritd/autobuild&#34;&gt;autobuild&lt;/a&gt; 项目，其中的 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/mritd/autobuild/tree/main/earthfiles/udcs&#34;&gt;udcs&lt;/a&gt; 目录定义了大量的通用 UDCs，这些 UDCs 被其他目标镜的 Earthfile 批量引用。&lt;/p&gt;
&lt;h3 id=&#34;3-4、多平台构建&#34;&gt;3.4、多平台构建&lt;/h3&gt;
&lt;p&gt;在以前使用 Dockerfile 的时候，我们需要自己配置然后开启 buildkit 来实现多平台构建；在配置过程中可能会很繁琐，现在使用 earthly 可以默认帮我们实现多平台的交叉编译，我们需要做的仅仅是在 Earthfile 中声明需要支持哪些平台而已:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101210338-10.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;以上 Earthfile 在执行 &lt;code&gt;earthly --push +all&lt;/code&gt; 构建时，将会自动构建四个平台的镜像，并保持单个 tag，同时由于使用了 &lt;code&gt;--push&lt;/code&gt; 选项还会自动推送到 Docker Hub 上:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101210338-11.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;四、总结&#34;&gt;四、总结&lt;/h2&gt;
&lt;p&gt;Earthly 弥补了 Dockerfile 的很多不足，解决了很多痛点问题；但同样可能需要一些学习成本，但是如果已经熟悉了 Dockerfile 其实学习成本不高；所以目前还是比较推荐将 Dockerfile 切换为 Earthfile 进行统一和版本化管理的。本文由于篇幅所限 (懒) 很多地方没有讲，比如共享缓存等，所以关于 Earthly 更多的详细使用等最好还是仔细阅读一下&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://docs.earthly.dev/docs/guides&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;整理转载：&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mritd.com/2021/10/27/the-best-image-build-tool-earthly/&#34;&gt;the-best-image-build-tool-earthly&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/bilicard.css&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="Docker" />
        <category term="Earthly" />
        <updated>2021-10-31T23:25:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.17lai.site/posts/cf0f47fd/</id>
        <title>Hexo Markdown 以及各种插件功能测试</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/cf0f47fd/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;Markdown-插件&#34;&gt;Markdown 插件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/markdown-it/markdown-it-abbr&#34;&gt;markdown-it-abbr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/markdown-it/markdown-it-container&#34;&gt;markdown-it-container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/markdown-it/markdown-it-deflist&#34;&gt;markdown-it-deflist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/markdown-it/markdown-it-emoji&#34;&gt;markdown-it-emoji&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/markdown-it/markdown-it-footnote&#34;&gt;markdown-it-footnote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/tatsy/markdown-it-imsize&#34;&gt;markdown-it-imsize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/markdown-it/markdown-it-ins&#34;&gt;markdown-it-ins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/markdown-it/markdown-it-mark&#34;&gt;markdown-it-mark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/rlidwka/markdown-it-regexp&#34;&gt;markdown-it-regexp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/markdown-it/markdown-it-sub&#34;&gt;markdown-it-sub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/markdown-it/markdown-it-sup&#34;&gt;markdown-it-sup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/linsir/markdown-it-task-checkbox&#34;&gt;markdown-it-task-checkbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常用标记&#34;&gt;常用标记&lt;/h3&gt;
&lt;pre class=&#34;line-numbers language-markdown&#34; data-language=&#34;markdown&#34;&gt;&lt;code class=&#34;language-markdown&#34;&gt;&lt;span class=&#34;token list punctuation&#34;&gt;-&lt;/span&gt; 29^th^ =&amp;gt; &lt;span class=&#34;token code-snippet code keyword&#34;&gt;`29&amp;lt;sup&amp;gt;th&amp;lt;/sup&amp;gt;`&lt;/span&gt;
&lt;span class=&#34;token list punctuation&#34;&gt;-&lt;/span&gt; H&lt;span class=&#34;token strike&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token content&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;~&lt;/span&gt;&lt;/span&gt;0 =&amp;gt; &lt;span class=&#34;token code-snippet code keyword&#34;&gt;`H&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt;O`&lt;/span&gt;
&lt;span class=&#34;token list punctuation&#34;&gt;-&lt;/span&gt; ==marked== =&amp;gt; &lt;span class=&#34;token code-snippet code keyword&#34;&gt;`&amp;lt;mark&amp;gt;inserted&amp;lt;/mark&amp;gt;`&lt;/span&gt;
&lt;span class=&#34;token list punctuation&#34;&gt;-&lt;/span&gt; ++inserted++ =&amp;gt; &lt;span class=&#34;token code-snippet code keyword&#34;&gt;`&amp;lt;ins&amp;gt;inserted&amp;lt;/ins&amp;gt;`&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;29&lt;sup&gt;th&lt;/sup&gt; =&amp;gt; &lt;code&gt;29&amp;lt;sup&amp;gt;th&amp;lt;/sup&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;H&lt;sub&gt;2&lt;/sub&gt;0 =&amp;gt; &lt;code&gt;H&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt;O&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;marked&lt;/mark&gt; =&amp;gt; &lt;code&gt;&amp;lt;mark&amp;gt;inserted&amp;lt;/mark&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;ins&gt;inserted&lt;/ins&gt; =&amp;gt; &lt;code&gt;&amp;lt;ins&amp;gt;inserted&amp;lt;/ins&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;markdown-it-task-checkbox&#34;&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/linsir/markdown-it-task-checkbox&#34;&gt;markdown-it-task-checkbox&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;和主题某些 css 冲突，停用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;line-numbers language-markdown&#34; data-language=&#34;markdown&#34;&gt;&lt;code class=&#34;language-markdown&#34;&gt;&lt;span class=&#34;token list punctuation&#34;&gt;-&lt;/span&gt; [x] item 1
    &lt;span class=&#34;token list punctuation&#34;&gt;-&lt;/span&gt; [x] item 1-1
    &lt;span class=&#34;token list punctuation&#34;&gt;-&lt;/span&gt; [ ] item 1-2
    &lt;span class=&#34;token list punctuation&#34;&gt;-&lt;/span&gt; [ ] item 1-3
    &lt;span class=&#34;token list punctuation&#34;&gt;-&lt;/span&gt; [ ] item 1-4
&lt;span class=&#34;token list punctuation&#34;&gt;-&lt;/span&gt; [ ] item 2
    &lt;span class=&#34;token list punctuation&#34;&gt;-&lt;/span&gt; [ ] item 2-1
    &lt;span class=&#34;token list punctuation&#34;&gt;-&lt;/span&gt; [ ] item 2-2
    &lt;span class=&#34;token list punctuation&#34;&gt;-&lt;/span&gt; [ ] item 2-3
    &lt;span class=&#34;token list punctuation&#34;&gt;-&lt;/span&gt; [ ] item 2-4&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;[x] item 1
&lt;ul&gt;
&lt;li&gt;[x] item 1-1&lt;/li&gt;
&lt;li&gt;[ ] item 1-2&lt;/li&gt;
&lt;li&gt;[ ] item 1-3&lt;/li&gt;
&lt;li&gt;[ ] item 1-4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[ ] item 2
&lt;ul&gt;
&lt;li&gt;[ ] item 2-1&lt;/li&gt;
&lt;li&gt;[ ] item 2-2&lt;/li&gt;
&lt;li&gt;[ ] item 2-3&lt;/li&gt;
&lt;li&gt;[ ] item 2-4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;markdown-it-multimd-table&#34;&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/RedBug312/markdown-it-multimd-table&#34;&gt;markdown-it-multimd-table&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;目前仅支持多列合并&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;| 标题1        | 标题2        |
| ------------ | ------------ |
| 合并第一行                ||
| 第二行第一列 | 第二行第二列 |&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;标题 1&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt; 标题 2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 合并第一行&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;第二行第一列&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;第二行第二列&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;colspan &lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;empty cell&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;a&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;b&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;rowspan ‘^’&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;a&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;b&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;^^&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;line-numbers language-markdown&#34; data-language=&#34;markdown&#34;&gt;&lt;code class=&#34;language-markdown&#34;&gt;&lt;span class=&#34;token table&#34;&gt;&lt;span class=&#34;token table-header-row&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-header important&#34;&gt;   Markdown   &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-header important&#34;&gt; Rendered HTML &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;token table-line&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;--------------&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;---------------&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;token table-data-rows&#34;&gt;&lt;/span&gt;&lt;/span&gt;|    &lt;span class=&#34;token italic&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token content&#34;&gt;Italic&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;*&lt;/span&gt;&lt;/span&gt;  | &lt;span class=&#34;token italic&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token content&#34;&gt;Italic&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;*&lt;/span&gt;&lt;/span&gt;      | \
|              |               |
|    - Item 1  | - Item 1      | \
|    - Item 2  | - Item 2      |
|    ```python | ```python       \
|    .1 + .2   | .1 + .2         \
|    ```       | ```           |&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Markdown&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Rendered &lt;abbr title=&#34;Hyper Text Markup Language&#34;&gt;HTML&lt;/abbr&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;Italic&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;Italic&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;- Item 1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;- Item 1&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;- Item 2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;- Item 2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;```python&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;```python \&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;.1 + .2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;.1 + .2 \&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;```&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;```&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;line-numbers language-markdown&#34; data-language=&#34;markdown&#34;&gt;&lt;code class=&#34;language-markdown&#34;&gt;&lt;span class=&#34;token table&#34;&gt;&lt;span class=&#34;token table-header-row&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-header important&#34;&gt; Task           &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-header important&#34;&gt; Time required &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-header important&#34;&gt; Assigned to   &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-header important&#34;&gt; Current Status &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-header important&#34;&gt; Finished &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-header important&#34;&gt; &lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;token table-line&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;----------------&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;---------------&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;---------------&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;----------------&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;-----------&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;token table-data-rows&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-data&#34;&gt; Calendar Cache &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-data&#34;&gt; &amp;gt; 5 hours  &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-data&#34;&gt; @georgehrke &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-data&#34;&gt; in progress &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-data&#34;&gt; &lt;span class=&#34;token list punctuation&#34;&gt;-&lt;/span&gt; [x] ok?&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-data&#34;&gt; Object Cache   &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-data&#34;&gt; &amp;gt; 5 hours  &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-data&#34;&gt; @georgehrke &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-data&#34;&gt; in progress &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-data&#34;&gt; [x] item1&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;[ ] item2&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-data&#34;&gt; Object Cache   &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-data&#34;&gt; &amp;gt; 5 hours  &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-data&#34;&gt; @georgehrke &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-data&#34;&gt; in progress &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-data&#34;&gt; &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;- [x] item1&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;- [ ] item2&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-data&#34;&gt; Object Cache   &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-data&#34;&gt; &amp;gt; 5 hours  &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-data&#34;&gt; @georgehrke &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-data&#34;&gt; in progress &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-data&#34;&gt; &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;[x] item1&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;[ ] item2&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#34;token list punctuation&#34;&gt;-&lt;/span&gt; [x] works
&lt;span class=&#34;token list punctuation&#34;&gt;-&lt;/span&gt; [x] works too&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Task&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Time required&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Assigned to&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Current Status&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Finished&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Calendar Cache&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;gt; 5 hours&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@georgehrke&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;in progress&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;- [x] ok?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Object Cache&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;gt; 5 hours&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@georgehrke&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;in progress&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;[x] item1 [ ] item2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Object Cache&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;gt; 5 hours&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@georgehrke&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;in progress&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;- [x] item1- [ ] item2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Object Cache&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;gt; 5 hours&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@georgehrke&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;in progress&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;[x] item1[ ] item2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;[x] works&lt;/li&gt;
&lt;li&gt;[x] works too&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-markdown&#34; data-language=&#34;markdown&#34;&gt;&lt;code class=&#34;language-markdown&#34;&gt;&lt;span class=&#34;token table&#34;&gt;&lt;span class=&#34;token table-header-row&#34;&gt;&lt;span class=&#34;token table-header important&#34;&gt;Function &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-header important&#34;&gt; MySQL / MariaDB &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-header important&#34;&gt; PostgreSQL &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-header important&#34;&gt; SQLite&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;token table-line&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;:------------&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:-------------&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:-------------&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:-------------&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;token table-data-rows&#34;&gt;&lt;span class=&#34;token table-data&#34;&gt;substr &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-data&#34;&gt; :heavy_check_mark: &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-data&#34;&gt;  :white_check_mark: &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token table-data&#34;&gt; :heavy_check_mark:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Function&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;MySQL / MariaDB&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;PostgreSQL&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;SQLite&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;substr&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;✔️&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;✔️&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;emoji&#34;&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.webfx.com/tools/emoji-cheat-sheet/&#34;&gt;emoji&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&#34;line-numbers language-markdown&#34; data-language=&#34;markdown&#34;&gt;&lt;code class=&#34;language-markdown&#34;&gt;:smile::smirk::sunny:&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;😄😏☀️&lt;/p&gt;
&lt;h3 id=&#34;markdown-it-abbr&#34;&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/markdown-it/markdown-it-abbr&#34;&gt;markdown-it-abbr&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&#34;line-numbers language-markdown&#34; data-language=&#34;markdown&#34;&gt;&lt;code class=&#34;language-markdown&#34;&gt;&lt;span class=&#34;token italic&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token content&#34;&gt;[HTML]: Hyper Text Markup Language
&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token url-reference url&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;W3C&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;  World&lt;/span&gt; Wide Web Consortium
The HTML specification
is maintained by the W3C.&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;abbr title=&#34;Hyper Text Markup Language&#34;&gt;HTML&lt;/abbr&gt; specification&lt;br&gt;
is maintained by the &lt;abbr title=&#34;World Wide Web Consortium&#34;&gt;W3C&lt;/abbr&gt;.&lt;/p&gt;
&lt;h3 id=&#34;markdown-it-container&#34;&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/markdown-it/markdown-it-container&#34;&gt;markdown-it-container&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&#34;line-numbers language-markdown&#34; data-language=&#34;markdown&#34;&gt;&lt;code class=&#34;language-markdown&#34;&gt;::: warning
&lt;span class=&#34;token italic&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token content&#34;&gt;here be dragons&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;*&lt;/span&gt;&lt;/span&gt;
:::&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;here be dragons&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;footnote&#34;&gt;footnote&lt;/h3&gt;
&lt;pre class=&#34;line-numbers language-markdown&#34; data-language=&#34;markdown&#34;&gt;&lt;code class=&#34;language-markdown&#34;&gt;Here is a footnote reference,[^1] and another.[^longnote]

&lt;span class=&#34;token url-reference url&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;^1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; Here&lt;/span&gt; is the footnote.

&lt;span class=&#34;token url-reference url&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;^longnote&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; Here&#39;s&lt;/span&gt; one with multiple blocks.

&lt;span class=&#34;token code keyword&#34;&gt;    Subsequent paragraphs are indented to show that they&lt;/span&gt;
belong to the previous footnote.&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is a footnote reference,&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn1&#34; id=&#34;fnref1&#34;&gt;[1]&lt;/a&gt;&lt;/sup&gt; and another.&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn2&#34; id=&#34;fnref2&#34;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;belong to the previous footnote.&lt;/p&gt;
&lt;h3 id=&#34;markdown-it-imsize&#34;&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/tatsy/markdown-it-imsize&#34;&gt;markdown-it-imsize&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&#34;line-numbers language-markdown&#34; data-language=&#34;markdown&#34;&gt;&lt;code class=&#34;language-markdown&#34;&gt;&lt;span class=&#34;token url&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;[&lt;span class=&#34;token content&#34;&gt;test&lt;/span&gt;](&lt;span class=&#34;token url&#34;&gt;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1220211012022352.png&lt;/span&gt;)&lt;/span&gt;
![test](https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1220211012022352.png =100x200)&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1220211012022352.png&#34; alt=&#34;test&#34;&gt;&lt;br&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1220211012022352.png&#34; alt=&#34;test&#34; width=&#34;100&#34; height=&#34;200&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;公式测试&#34;&gt;公式测试&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;采用 **&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/MakerGYT/markdown-it-latex2img&#34;&gt;markdown-it-latex2img&lt;/a&gt;**&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://makergyt.github.io/markdown-it-latex2img/&#34;&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-数学公式&#34;&gt;1 数学公式&lt;/h3&gt;
&lt;h4 id=&#34;1-1-内联公式&#34;&gt;1.1 内联公式&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;开头的 &lt;code&gt;$&lt;/code&gt; 必须在其右边紧跟一个非空格字符，而结尾的 &lt;code&gt;$&lt;/code&gt; 必须在其左边紧接一个非空格字符，并且不能紧跟一个数字。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;勾股定理: &lt;img src=&#34;https://math.now.sh?inline=a%5E2%2Bb%5E2%3Dc%5E2&#34; style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;&#34;&gt;&lt;/li&gt;
&lt;li&gt;等差数列求和公式: &lt;img src=&#34;https://math.now.sh?inline=S_%7Bn%7D%3Dn%20a_%7B1%7D%2B%5Cfrac%7Bn%28n-1%29%7D%7B2%7D%20d%2C%20n%20%5Cin%20N%5E%7B*%7D&#34; style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;&#34;&gt;&lt;/li&gt;
&lt;li&gt;牛顿 - 莱布尼茨公式: &lt;img src=&#34;https://math.now.sh?inline=%5Cint_%7Ba%7D%5E%7Bb%7D%20f%28x%29%20d%20x%3DF(b)-F(a)%3D%5Cleft.F(x)%5Cright%7C_%7Ba%7D%20%5E%7Bb%7D&#34; style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;&#34;&gt;&lt;/li&gt;
&lt;li&gt;二项分布: &lt;img src=&#34;https://math.now.sh?inline=P_%7Bn%7D%28k%29%3DC_%7Bn%7D%5E%7Bk%7D%20p%5E%7Bk%7D%20q%5E%7Bn-k%7D%20%5Cquad%20k%3D0%2C1%2C2%20%5Cldots%20%5Cldots%2C%20n&#34; style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1-2-块公式&#34;&gt;1.2 块公式&lt;/h4&gt;
&lt;p&gt;正态分布&lt;img src=&#34;https://math.now.sh?inline=X%20%5Csim%20N%28%5Cmu%2C%5Csigma%5E2%29&#34; style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;&#34;&gt;:&lt;/p&gt;
&lt;p style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;&#34;&gt;&lt;img src=&#34;https://math.now.sh?from=f%28x%29%20%3D%20%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%5Csigma%7De%5E%7B-%5Cfrac%7B(x-%5Cmu)%5E2%7D%7B2%5Csigma%5E2%7D%7D%0A&#34;&gt;&lt;/p&gt;&lt;p&gt;斐波那契数列&lt;img src=&#34;https://math.now.sh?inline=A_n%3DA_%7Bn-1%7D%2BA_%7Bn-2%7D&#34; style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;&#34;&gt;, 前后两项的比值逐渐收敛到黄金分割比例&lt;/p&gt;
&lt;p style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;&#34;&gt;&lt;img src=&#34;https://math.now.sh?from=%5Clim_%7Bn%5Cto%20%5Cinfty%7D%5Cfrac%7BA_%7Bn-1%7D%7D%7BA_n%7D%3D%5Cfrac%7B%5Csqrt%7B5%7D-1%7D%7B2%7D.%0A&#34;&gt;&lt;/p&gt;&lt;p&gt;因式分解&lt;/p&gt;
&lt;p style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;&#34;&gt;&lt;img src=&#34;https://math.now.sh?from=%5Cbegin%7Bsplit%7D%28x%E2%88%921%29(x%E2%88%923)%26%3Dx%5E2%E2%88%924x%2B3%20%5C%5C%20%0A%26%3Dx%5E2%E2%88%924x%2B4%E2%88%921%20%5C%5C%20%0A%26%3D(x%E2%88%922)%5E2%E2%88%921%0A%5Cend%7Bsplit%7D%0A&#34;&gt;&lt;/p&gt;&lt;p&gt;狄利克雷函数&lt;/p&gt;
&lt;p style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;&#34;&gt;&lt;img src=&#34;https://math.now.sh?from=D%28x%29%3D%0A%5Cbegin%7Bcases%7D%0A1%2C%26%20x%20%5Cin%20Q%20%5C%5C%0A0%2C%26%20x%20%5Cnotin%20Q%0A%5Cend%7Bcases%7D%0A&#34;&gt;&lt;/p&gt;&lt;p&gt;高斯公式&lt;/p&gt;
&lt;p style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;&#34;&gt;&lt;img src=&#34;https://math.now.sh?from=%5Ciiint_%7B%5COmega%7D%5Cleft%28%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20x%7D%2B%5Cfrac%7B%5Cpartial%20Q%7D%7B%5Cpartial%20y%7D%2B%5Cfrac%7B%5Cpartial%20R%7D%7B%5Cpartial%20z%7D%5Cright%29%20d%20v%3D%5Ciint_%7B%5CSigma%7D%20P%20d%20y%20d%20z%2BQ%20d%20z%20d%20x%2BR%20d%20x%20d%20y%0A&#34;&gt;&lt;/p&gt;&lt;p&gt;范德蒙行列式&lt;/p&gt;
&lt;p style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;&#34;&gt;&lt;img src=&#34;https://math.now.sh?from=D_%7Bn-1%7D%3D%5Cleft%7C%5Cbegin%7Barray%7D%7Bcccc%7D%0A1%20%26%201%20%26%20%5Cdots%20%26%201%20%5C%5C%0Ax_%7B2%7D%20%26%20x_%7B3%7D%20%26%20%5Cdots%20%26%20x_%7Bn%7D%20%5C%5C%0A%5Cvdots%20%26%20%5Cvdots%20%26%20%26%20%5Cvdots%20%5C%5C%0Ax_%7B2%7D%5E%7Bn-2%7D%20%26%20x_%7B3%7D%5E%7Bn-2%7D%20%26%20%5Cdots%20%26%20x_%7Bn%7D%5E%7Bn-2%7D%0A%5Cend%7Barray%7D%5Cright%7C%3D%5Cprod_%7B2%20%5Cleq%20j%3Ci%20%5Cleq%20n%7D%5Cleft%28x_%7Bi%7D-x_%7Bj%7D%5Cright%29&#34;&gt;&lt;/p&gt;&lt;p&gt;线性方程组&lt;/p&gt;
&lt;p style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;&#34;&gt;&lt;img src=&#34;https://math.now.sh?from=%5Cleft%5C%7B%5Cbegin%7Baligned%7D%0Aa_%7B11%7D%20x_%7B1%7D%2Ba_%7B12%7D%20x_%7B2%7D%2B%5Ccdots%2Ba_%7B1%20n%7D%20x_%7Bn%7D%20%26%3Db_%7B1%7D%20%5C%5C%0Aa_%7B21%7D%20x_%7B1%7D%2Ba_%7B22%7D%20x_%7B2%7D%2B%5Ccdots%2Ba_%7B2%20n%7D%20x_%7Bn%7D%20%26%3Db_%7B2%7D%20%5C%5C%0A%5Ccdots%20%5Ccdots%20%5Ccdots%20%5C%5C%0Aa_%7Bm%201%7D%20x_%7B1%7D%2Ba_%7Bm%202%7D%20x_%7B2%7D%2B%5Ccdots%2Ba_%7Bm%20n%7D%20x_%7Bn%7D%20%26%3Db_%7Bm%7D%0A%5Cend%7Baligned%7D%5Cright.&#34;&gt;&lt;/p&gt;&lt;h3 id=&#34;2-物理公式&#34;&gt;2 物理公式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;牛顿第一定律: &lt;img src=&#34;https://math.now.sh?inline=%5Csum%20%5Cvec%7BF%7D_%7Bi%7D%3D%5Cfrac%7B%5Cmathrm%7Bd%7D%20%5Cvec%7Bv%7D%7D%7B%5Cmathrm%7Bd%7D%20t%7D%3D0&#34; style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;&#34;&gt;&lt;/li&gt;
&lt;li&gt;牛顿第二定律: &lt;img src=&#34;https://math.now.sh?inline=%5Cvec%7BF%7D%3D%5Cfrac%7B%5Cmathrm%7Bd%7D%20m%7D%7B%5Cmathrm%7Bd%7D%20t%7D%20%5Cvec%7Bv%7D%2Bm%20%5Cfrac%7B%5Cmathrm%7Bd%7D%20%5Cvec%7Bv%7D%7D%7B%5Cmathrm%7Bd%7D%20t%7D%3D%5Cfrac%7B%5Cmathrm%7Bd%7D%20m%7D%7B%5Cmathrm%7Bd%7D%20t%7D%20%5Cvec%7Bv%7D%2Bm%20%5Cvec%7Ba%7D%3D%5Cfrac%7B%5Cmathrm%7Bd%7D%20m%7D%7B%5Cmathrm%7Bd%7D%20t%7D%20%5Cvec%7Bv%7D%2Bm%20%5Cfrac%7B%5Cmathrm%7Bd%7D%5E%7B2%7D%20%5Cvec%7Br%7D%7D%7B%5Cmathrm%7Bd%7D%20t%5E%7B2%7D%7D&#34; style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;&#34;&gt;&lt;/li&gt;
&lt;li&gt;牛顿第三定律: &lt;img src=&#34;https://math.now.sh?inline=%5Coverrightarrow%7BF_%7B12%7D%7D%3D-%5Coverrightarrow%7BF_%7B21%7D%7D&#34; style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;&#34;&gt;&lt;/li&gt;
&lt;li&gt;质能守恒: &lt;img src=&#34;https://math.now.sh?inline=E%3Dmc%5E2&#34; style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;万有引力定律: &lt;img src=&#34;https://math.now.sh?inline=F%3D%5Cfrac%7BG%20M%20m%7D%7Br%5E%7B2%7D%7D&#34; style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;&#34;&gt;&lt;/p&gt;
&lt;p style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;&#34;&gt;&lt;img src=&#34;https://math.now.sh?from=G%20%5Cfrac%7Bm%20M%7D%7B%28r%2Bh%29%5E%7B2%7D%7D%3Dm%20%5Cfrac%7B%5Cnu%5E%7B2%7D%7D%7B(r%2Bh)%7D%0A&#34;&gt;&lt;/p&gt;&lt;p&gt;基尔霍夫定律&lt;/p&gt;
&lt;p style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;&#34;&gt;&lt;img src=&#34;https://math.now.sh?from=%5Cleft%5B%5Cfrac%7B%5Cpartial%5Cleft%28%5CDelta_%7Br%7D%20H_%7Bm%7D%5Cright%29%7D%7B%5Cpartial%20T%7D%5Cright%5D_%7Bp%7D%3D%5Csum_%7BB%7D%20v_%7BB%7D%20C_%7Bp%2C%20m%7D(B)%0A&#34;&gt;&lt;/p&gt;&lt;p&gt;热力学第二定律&lt;/p&gt;
&lt;p style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;&#34;&gt;&lt;img src=&#34;https://math.now.sh?from=d%20S%20%5Cgeq%20%5Cfrac%7B%5Cdelta%20Q%7D%7BT%7D%0A&#34;&gt;&lt;/p&gt;&lt;h3 id=&#34;3-化学公式&#34;&gt;3 化学公式&lt;/h3&gt;
&lt;p&gt;离子反应与沉淀: &lt;img src=&#34;https://math.now.sh?inline=%5Cce%7BSO4%5E2-%20%2B%20Ba%5E2%2B%20-%3E%20BaSO4%20v%7D&#34; style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;&#34;&gt;&lt;/p&gt;
&lt;p&gt;氮气氢气合成氨&lt;/p&gt;
&lt;p style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;&#34;&gt;&lt;img src=&#34;https://math.now.sh?from=%5Cce%7BN2%20%2B%203H2%20%3C%3D%3ET%5B%E9%AB%98%E6%B8%A9%E3%80%81%E5%8A%A0%E5%8E%8B%5D%5B%E5%82%AC%E5%8C%96%E5%89%82%5D%202NH3%7D%0A&#34;&gt;&lt;/p&gt;&lt;p&gt;化学平衡常数:&lt;img src=&#34;https://math.now.sh?inline=%5Cmathrm%7BZn%7D%2B2%20%5Cmathrm%7BHCl%7D%28%5Cmathrm%7Baq%7D%29%3D%5Cmathrm%7BH%7D_%7B2%7D%2B%5Cmathrm%7BZnCl%7D_%7B2%7D%20%5Cquad(%5Cmathrm%7Baq%7D)&#34; style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;&#34;&gt;&lt;/p&gt;
&lt;p style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;&#34;&gt;&lt;img src=&#34;https://math.now.sh?from=K%5E%7B%5Ctheta%7D%3D%5Cfrac%7B%5Cleft%5Bp%5Cleft%28%5Cmathrm%7BH%7D_%7B2%7D%5Cright%29%20%2F%20p%5E%7B%5Ctheta%7D%5Cright%5D%5Cleft%5Bc%5Cleft(%5Cmathrm%7BZnCl%7D_%7B2%7D%5Cright)%5Cright%5D%7D%7Bc%5E%7B2%7D(%5Cmathrm%7BHC%7D)%7D%0A&#34;&gt;&lt;/p&gt;&lt;h3 id=&#34;4-生物公式&#34;&gt;4 生物公式&lt;/h3&gt;
&lt;p&gt;光合作用&lt;/p&gt;
&lt;p style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;&#34;&gt;&lt;img src=&#34;https://math.now.sh?from=%5Cce%3C!--swig%EF%BF%BC75--%3E%0A&#34;&gt;&lt;/p&gt;&lt;h3 id=&#34;5-语法参考&#34;&gt;5 语法参考&lt;/h3&gt;
&lt;p&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference&#34;&gt;MathJax basic tutorial and quick reference&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;长公式&#34;&gt;长公式&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://math.now.sh/?from=%5Cdef%20%5Clowercase%20%7B%5Calpha%20%5Cbeta%20%5Cgamma%20%5Cdelta%20%5Cepsilon%20%5Czeta%20%5Ceta%20%5Ctheta%20%5Ciota%20%5Ckappa%20%5Clambda%20%5Cmu%20%5Cnu%20%5Comicron%20%5Cpi%20%5Crho%20%5Csigma%20%5Ctau%20%5Cupsilon%20%5Cphi%20%5Cchi%20%5Cpsi%20%5Comega%7D%0A%5Cdef%20%5Cuppercase%20%7BA%20B%20%5CGamma%20%5CDelta%20E%20Z%20E%20%5CTheta%20I%20K%20%5CLambda%20M%20N%20O%20%5CPi%20R%20%5CSigma%20T%20%5CUpsilon%20%5CPhi%20X%20%5CPsi%20%5COmega%7D%0A%5Cdef%20%5Clong%20%7B%5Cuppercase%20%5CLeftrightarrow%20%5Clowercase%7D%0A&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://math.now.sh/?inline=%5Ctext%7Blong%20inline%20mathjax%3A%7D%5Cquad%20%5Clong%20%5Cquad%20%5Clong%20%5Cquad%20%5Clong&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://math.now.sh/?from=%5Ctext%7B%3C-%20long%20displayed%20mathjax%20example%20-%3E%7D%20%5C%5C%0A%5Cbegin%7Bsplit%7D%0A%5Clong%20%5Cquad%20%26%5Clong%20%5C%5C%0A%26%5Clong%20%5Cquad%20%5Clong%0A%5Cend%7Bsplit%7D%0A&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;小括号测试&#34;&gt;小括号测试&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;$\alpha\beta$

$\alpha_\beta$

$\alpha_\beta = \gamma_\delta$

(abctest)

\(abctest\)

\\(abctest\\)&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://math.now.sh?inline=%5Calpha%5Cbeta&#34; style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://math.now.sh?inline=%5Calpha_%5Cbeta&#34; style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://math.now.sh?inline=%5Calpha_%5Cbeta%20%3D%20%5Cgamma_%5Cdelta&#34; style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(abctest)&lt;/p&gt;
&lt;p&gt;(abctest)&lt;/p&gt;
&lt;p&gt;\(abctest\)&lt;/p&gt;
&lt;h4 id=&#34;下划线测试&#34;&gt;下划线测试&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;w^{(l)}*{ij} = w^{(l)}*{ij} - \eta\frac{\partial E(W, b)}{\partial w^{(l)}_{ij}}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://math.now.sh/?from=w%5E%7B%28l%29%7D*%7Bij%7D%20%3D%20w%5E%7B(l)%7D*%7Bij%7D%20-%20%5Ceta%5Cfrac%7B%5Cpartial%20E(W%2C%20b)%7D%7B%5Cpartial%20w%5E%7B(l)%7D_%7Bij%7D%7D%0A&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;CSS测试&#34;&gt;CSS 测试&lt;/h2&gt;
&lt;p&gt;文字增加背景色块 &lt;span id=&#34;inline-blue&#34;&gt;站点配置文件&lt;/span&gt; ,&lt;br&gt;
&lt;span id=&#34;inline-purple&#34;&gt;主题配置文件&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;&amp;lt;span id=&#34;inline-blue&#34;&amp;gt;站点配置文件&amp;lt;/span&amp;gt;, 
&amp;lt;span id=&#34;inline-purple&#34;&amp;gt;主题配置文件&amp;lt;/span&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;引用边框变色&#34;&gt;引用边框变色&lt;/h3&gt;
&lt;p id=&#34;div-border-left-red&#34;&gt;如果没有安装成功，那可能就是墙的原因。建议下载 `Node.js` 直接安装. &lt;/p&gt;
&lt;p id=&#34;div-border-top-blue&#34;&gt;关于更多基本操作和基础知识，请查阅 [Hexo](https://hexo.io/zh-cn/) 与 [NexT](http://theme-next.iissnan.com/) 官方文档.&lt;/p&gt;  
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;&amp;lt;p id=&#34;div-border-left-red&#34;&amp;gt;如果没有安装成功, 那可能就是墙的原因. 建议下载 `Node.js` 直接安装. &amp;lt;/p&amp;gt;
&amp;lt;p id=&#34;div-border-top-blue&#34;&amp;gt;关于更多基本操作和基础知识, 请查阅 [Hexo](https://hexo.io/zh-cn/) 与 [NexT](http://theme-next.iissnan.com/) 官方文档.&amp;lt;/p&amp;gt;  &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;图形边框效果&#34;&gt;图形边框效果&lt;/h3&gt;
&lt;p&gt;&lt;a id=&#34;download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://git-scm.com/download/win&#34;&gt;&lt;i class=&#34;fa fa-download&#34;&gt;&lt;/i&gt;&lt;span&gt; Download Now&lt;/span&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;&amp;lt;a id=&#34;download&#34; href=&#34;https://git-scm.com/download/win&#34;&amp;gt;&amp;lt;i class=&#34;fa fa-download&#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;span&amp;gt; Download Now&amp;lt;/span&amp;gt;
&amp;lt;/a&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更多 tips 可参考 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://yangbingdong.com/2017/build-blog-hexo-advanced&#34;&gt;blog&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;在文档中增加图标&#34;&gt;在文档中增加图标&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fa fa-pencil&#34;&gt;&lt;/i&gt;支持 Markdown&lt;br&gt;
&lt;i&gt;Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件. &lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fa fa-cloud-upload&#34;&gt;&lt;/i&gt;一件部署&lt;br&gt;
&lt;i&gt;只需一条指令即可部署到 Github Pages, 或其他网站&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fa fa-cog&#34;&gt;&lt;/i&gt;丰富的插件&lt;br&gt;
&lt;i&gt;Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript. &lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;- &amp;lt;i class=&#34;fa fa-pencil&#34;&amp;gt;&amp;lt;/i&amp;gt;支持Markdown
&amp;lt;i&amp;gt;Hexo 支持 GitHub Flavored Markdown 的所有功能, 甚至可以整合 Octopress 的大多数插件. &amp;lt;/i&amp;gt;
- &amp;lt;i class=&#34;fa fa-cloud-upload&#34;&amp;gt;&amp;lt;/i&amp;gt;一件部署
&amp;lt;i&amp;gt;只需一条指令即可部署到Github Pages, 或其他网站&amp;lt;/i&amp;gt;
- &amp;lt;i class=&#34;fa fa-cog&#34;&amp;gt;&amp;lt;/i&amp;gt;丰富的插件
&amp;lt;i&amp;gt;Hexo 拥有强大的插件系统, 安装插件可以让 Hexo 支持 Jade, CoffeeScript. &amp;lt;/i&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;i class=&#34;fa fa-github&#34;&gt;&lt;/i&gt;&lt;br&gt;
&lt;i class=&#34;fa fa-github fa-lg&#34;&gt;&lt;/i&gt;&lt;br&gt;
&lt;i class=&#34;fa fa-github fa-2x&#34;&gt;&lt;/i&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;`&amp;lt;i class=&#34;fa fa-github&#34;&amp;gt;&amp;lt;/i&amp;gt;`
`&amp;lt;i class=&#34;fa fa-github fa-lg&#34;&amp;gt;&amp;lt;/i&amp;gt;`
`&amp;lt;i class=&#34;fa fa-github fa-2x&#34;&amp;gt;&amp;lt;/i&amp;gt;`&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;图表绘制&#34;&gt;图表绘制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/JameChou/hexo-tag-mermaid&#34;&gt;hexo-tag-mermaid&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://link.segmentfault.com/?enc=hOwQoD6fIIIe7W28woagTQ%3D%3D.VHuPUTxtKKrWqD9OwRmRWowEiRhfZtrRRPW0tAHaUnugQA9ofUIFaPqb38gbAsyx&#34;&gt;&lt;strong&gt;hexo-tag-plantuml&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hexo-tag-plantuml is a tag plugin for Hexo. It can work with plantuml to draw uml.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 Hexo 中绘制 uml 图。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://link.segmentfault.com/?enc=7CVDHj4WMnK6vHwS3JXOAQ%3D%3D.VqG%2BdxXCAb%2FdHLPgRnzrtjEUBUuK1EhF%2Fo7ev0Banu7ADAa3cS1GF4ROLNNWkriO&#34;&gt;&lt;strong&gt;hexo-filter-flowchart&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Generate flowchart diagrams for Hexo.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Mermaid&#34;&gt;Mermaid&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://blog.csdn.net/horsee/category_10772579.html&#34;&gt;Markdown mermaid 教程&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;mermaid&#34;&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/mermaid-js/mermaid&#34;&gt;mermaid&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/JameChou/hexo-tag-mermaid&#34;&gt;hexo-tag-mermaid&lt;/a&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/two/hexo-tag-plantuml&#34;&gt;hexo-tag-plantuml&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;需要用下面块包裹&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;line-numbers language-markdown&#34; data-language=&#34;markdown&#34;&gt;&lt;code class=&#34;language-markdown&#34;&gt;{% mermaid %}
[内容]
{% endmermaid %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;先来几个演示&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;
  graph LR 
	source (*.java) --javac--&amp;gt; bytecode (*.class) 
	bytecode --java--&amp;gt; result (程序输出)
&lt;/div&gt;

&lt;div class=&#34;mermaid&#34;&gt;
  graph LR 
	type(type) -.-&amp;gt; type 
	type -.-&amp;gt; object(object) 
	type -.-&amp;gt; A(A) 
	type -.-&amp;gt; int(int) 
	A -.-&amp;gt; a((a)) 
	int -.-&amp;gt; i((i)) 
	object --&amp;gt; type 
	object --&amp;gt; A
&lt;/div&gt;

&lt;h3 id=&#34;flowchart&#34;&gt;flowchart&lt;/h3&gt;
&lt;p&gt;[&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mermaid-js.github.io/mermaid/#/flowchart&#34;&gt;docs&lt;/a&gt; - &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mermaidjs.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoiZ3JhcGggVERcbiAgICBBW0hhcmRdIC0tPnxUZXh0fCBCKFJvdW5kKVxuICAgIEIgLS0-IEN7RGVjaXNpb259XG4gICAgQyAtLT58T25lfCBEW1Jlc3VsdCAxXVxuICAgIEMgLS0-fFR3b3wgRVtSZXN1bHQgMl0iLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9fQ&#34;&gt;live editor&lt;/a&gt;]&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% mermaid %}
graph TD
    A[Christmas] --&amp;gt;|Get money| B(Go shopping)
    B --&amp;gt; C{Let me think}
    C --&amp;gt;|One| D[Laptop]
    C --&amp;gt;|Two| E[iPhone]
    C --&amp;gt;|Three| F[Car]
{% endmermaid %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;mermaid&#34;&gt;
  graph TD
    A[Christmas] --&amp;gt;|Get money| B(Go shopping)
    B --&amp;gt; C{Let me think}
    C --&amp;gt;|One| D[Laptop]
    C --&amp;gt;|Two| E[iPhone]
    C --&amp;gt;|Three| F[Car]
&lt;/div&gt;

&lt;h3 id=&#34;Sequence-diagram&#34;&gt;Sequence &lt;strong&gt;diagram&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;[&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mermaid-js.github.io/mermaid/#/sequenceDiagram&#34;&gt;docs&lt;/a&gt; - &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mermaidjs.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG5BbGljZS0-PkpvaG46IEhlbGxvIEpvaG4sIGhvdyBhcmUgeW91P1xubG9vcCBIZWFsdGhjaGVja1xuICAgIEpvaG4tPj5Kb2huOiBGaWdodCBhZ2FpbnN0IGh5cG9jaG9uZHJpYVxuZW5kXG5Ob3RlIHJpZ2h0IG9mIEpvaG46IFJhdGlvbmFsIHRob3VnaHRzIVxuSm9obi0tPj5BbGljZTogR3JlYXQhXG5Kb2huLT4-Qm9iOiBIb3cgYWJvdXQgeW91P1xuQm9iLS0-PkpvaG46IEpvbGx5IGdvb2QhIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifX0&#34;&gt;live editor&lt;/a&gt;]&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% mermaid %}
sequenceDiagram
    loop every day
        Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
        John--&amp;gt;&amp;gt;Alice: Great!
    end
{% endmermaid %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;mermaid&#34;&gt;
  sequenceDiagram
    loop every day
        Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
        John--&amp;gt;&amp;gt;Alice: Great!
    end
&lt;/div&gt;

&lt;h3 id=&#34;Gantt-diagram&#34;&gt;Gantt &lt;strong&gt;diagram&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;[&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mermaid-js.github.io/mermaid/#/gantt&#34;&gt;docs&lt;/a&gt; - &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mermaidjs.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoiZ2FudHRcbnNlY3Rpb24gU2VjdGlvblxuQ29tcGxldGVkIDpkb25lLCAgICBkZXMxLCAyMDE0LTAxLTA2LDIwMTQtMDEtMDhcbkFjdGl2ZSAgICAgICAgOmFjdGl2ZSwgIGRlczIsIDIwMTQtMDEtMDcsIDNkXG5QYXJhbGxlbCAxICAgOiAgICAgICAgIGRlczMsIGFmdGVyIGRlczEsIDFkXG5QYXJhbGxlbCAyICAgOiAgICAgICAgIGRlczQsIGFmdGVyIGRlczEsIDFkXG5QYXJhbGxlbCAzICAgOiAgICAgICAgIGRlczUsIGFmdGVyIGRlczMsIDFkXG5QYXJhbGxlbCA0ICAgOiAgICAgICAgIGRlczYsIGFmdGVyIGRlczQsIDFkIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifX0&#34;&gt;live editor&lt;/a&gt;]&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% mermaid %}
gantt
    dateFormat  YYYY-MM-DD
    title Adding GANTT diagram functionality to mermaid

    section A section
    Completed task            :done,    des1, 2014-01-06,2014-01-08
    Active task               :active,  des2, 2014-01-09, 3d
    Future task               :         des3, after des2, 5d
    Future task2               :         des4, after des3, 5d

    section Critical tasks
    Completed task in the critical line :crit, done, 2014-01-06,24h
    Implement parser and jison          :crit, done, after des1, 2d
    Create tests for parser             :crit, active, 3d
    Future task in critical line        :crit, 5d
    Create tests for renderer           :2d
    Add to mermaid                      :1d

    section Documentation
    Describe gantt syntax               :active, a1, after des1, 3d
    Add gantt diagram to demo page      :after a1  , 20h
    Add another diagram to demo page    :doc1, after a1  , 48h

    section Last section
    Describe gantt syntax               :after doc1, 3d
    Add gantt diagram to demo page      : 20h
    Add another diagram to demo page    : 48h
{% endmermaid %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;mermaid&#34;&gt;
  gantt
    dateFormat  YYYY-MM-DD
    title Adding GANTT diagram functionality to mermaid

    section A section
    Completed task            :done,    des1, 2014-01-06,2014-01-08
    Active task               :active,  des2, 2014-01-09, 3d
    Future task               :         des3, after des2, 5d
    Future task2               :         des4, after des3, 5d
    
    section Critical tasks
    Completed task in the critical line :crit, done, 2014-01-06,24h
    Implement parser and jison          :crit, done, after des1, 2d
    Create tests for parser             :crit, active, 3d
    Future task in critical line        :crit, 5d
    Create tests for renderer           :2d
    Add to mermaid                      :1d
    
    section Documentation
    Describe gantt syntax               :active, a1, after des1, 3d
    Add gantt diagram to demo page      :after a1  , 20h
    Add another diagram to demo page    :doc1, after a1  , 48h
    
    section Last section
    Describe gantt syntax               :after doc1, 3d
    Add gantt diagram to demo page      : 20h
    Add another diagram to demo page    : 48h
&lt;/div&gt;

&lt;h3 id=&#34;ER图&#34;&gt;ER 图&lt;/h3&gt;
&lt;div class=&#34;mermaid&#34;&gt;
  erDiagram
    CUSTOMER ||--o{ ORDER : places
    CUSTOMER {
        string name
        string custNumber
        string sector
    }
    ORDER ||--|{ LINE-ITEM : contains
    ORDER {
        int orderNumber
        string deliveryAddress
    }
    LINE-ITEM {
        string productCode
        int quantity
        float pricePerUnit
    }
&lt;/div&gt;

&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;erDiagram
    CUSTOMER ||--o{ ORDER : places
    CUSTOMER {
        string name
        string custNumber
        string sector
    }
    ORDER ||--|{ LINE-ITEM : contains
    ORDER {
        int orderNumber
        string deliveryAddress
    }
    LINE-ITEM {
        string productCode
        int quantity
        float pricePerUnit
    }&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;class&#34;&gt;&lt;strong&gt;class&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;[&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mermaid-js.github.io/mermaid/#/classDiagram&#34;&gt;docs&lt;/a&gt; - &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mermaidjs.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoiY2xhc3NEaWFncmFtXG5DbGFzczAxIDx8LS0gQXZlcnlMb25nQ2xhc3MgOiBDb29sXG48PGludGVyZmFjZT4-IENsYXNzMDFcbkNsYXNzMDkgLS0-IEMyIDogV2hlcmUgYW0gaT9cbkNsYXNzMDkgLS0qIEMzXG5DbGFzczA5IC0tfD4gQ2xhc3MwN1xuQ2xhc3MwNyA6IGVxdWFscygpXG5DbGFzczA3IDogT2JqZWN0W10gZWxlbWVudERhdGFcbkNsYXNzMDEgOiBzaXplKClcbkNsYXNzMDEgOiBpbnQgY2hpbXBcbkNsYXNzMDEgOiBpbnQgZ29yaWxsYVxuY2xhc3MgQ2xhc3MxMCB7XG4gID4-c2VydmljZT4-XG4gIGludCBpZFxuICBzaXplKClcbn0iLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9fQ&#34;&gt;live editor&lt;/a&gt;]&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;classDiagram
class Shape{
    &amp;lt;&amp;lt;interface&amp;gt;&amp;gt;
    noOfVertices
    draw()
}
class Color{
    &amp;lt;&amp;lt;enumeration&amp;gt;&amp;gt;
    RED
    BLUE
    GREEN
    WHITE
    BLACK
}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;mermaid&#34;&gt;
  classDiagram
class Shape{
    &amp;lt;&lt;interface&gt;&amp;gt;
    noOfVertices
    draw()
}
class Color{
    &amp;lt;&lt;enumeration&gt;&amp;gt;
    RED
    BLUE
    GREEN
    WHITE
    BLACK
}
&lt;/enumeration&gt;&lt;/interface&gt;&lt;/div&gt;

&lt;h3 id=&#34;State&#34;&gt;&lt;strong&gt;State&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;[&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mermaid-js.github.io/mermaid/#/stateDiagram&#34;&gt;docs&lt;/a&gt; - &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoic3RhdGVEaWFncmFtLXYyXG4gICAgWypdIC0tPiBTdGlsbFxuICAgIFN0aWxsIC0tPiBbKl1cbiAgICBTdGlsbCAtLT4gTW92aW5nXG4gICAgTW92aW5nIC0tPiBTdGlsbFxuICAgIE1vdmluZyAtLT4gQ3Jhc2hcbiAgICBDcmFzaCAtLT4gWypdIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQiLCJ0aGVtZVZhcmlhYmxlcyI6eyJiYWNrZ3JvdW5kIjoid2hpdGUiLCJwcmltYXJ5Q29sb3IiOiIjRUNFQ0ZGIiwic2Vjb25kYXJ5Q29sb3IiOiIjZmZmZmRlIiwidGVydGlhcnlDb2xvciI6ImhzbCg4MCwgMTAwJSwgOTYuMjc0NTA5ODAzOSUpIiwicHJpbWFyeUJvcmRlckNvbG9yIjoiaHNsKDI0MCwgNjAlLCA4Ni4yNzQ1MDk4MDM5JSkiLCJzZWNvbmRhcnlCb3JkZXJDb2xvciI6ImhzbCg2MCwgNjAlLCA4My41Mjk0MTE3NjQ3JSkiLCJ0ZXJ0aWFyeUJvcmRlckNvbG9yIjoiaHNsKDgwLCA2MCUsIDg2LjI3NDUwOTgwMzklKSIsInByaW1hcnlUZXh0Q29sb3IiOiIjMTMxMzAwIiwic2Vjb25kYXJ5VGV4dENvbG9yIjoiIzAwMDAyMSIsInRlcnRpYXJ5VGV4dENvbG9yIjoicmdiKDkuNTAwMDAwMDAwMSwgOS41MDAwMDAwMDAxLCA5LjUwMDAwMDAwMDEpIiwibGluZUNvbG9yIjoiIzMzMzMzMyIsInRleHRDb2xvciI6IiMzMzMiLCJtYWluQmtnIjoiI0VDRUNGRiIsInNlY29uZEJrZyI6IiNmZmZmZGUiLCJib3JkZXIxIjoiIzkzNzBEQiIsImJvcmRlcjIiOiIjYWFhYTMzIiwiYXJyb3doZWFkQ29sb3IiOiIjMzMzMzMzIiwiZm9udEZhbWlseSI6IlwidHJlYnVjaGV0IG1zXCIsIHZlcmRhbmEsIGFyaWFsIiwiZm9udFNpemUiOiIxNnB4IiwibGFiZWxCYWNrZ3JvdW5kIjoiI2U4ZThlOCIsIm5vZGVCa2ciOiIjRUNFQ0ZGIiwibm9kZUJvcmRlciI6IiM5MzcwREIiLCJjbHVzdGVyQmtnIjoiI2ZmZmZkZSIsImNsdXN0ZXJCb3JkZXIiOiIjYWFhYTMzIiwiZGVmYXVsdExpbmtDb2xvciI6IiMzMzMzMzMiLCJ0aXRsZUNvbG9yIjoiIzMzMyIsImVkZ2VMYWJlbEJhY2tncm91bmQiOiIjZThlOGU4IiwiYWN0b3JCb3JkZXIiOiJoc2woMjU5LjYyNjE2ODIyNDMsIDU5Ljc3NjUzNjMxMjglLCA4Ny45MDE5NjA3ODQzJSkiLCJhY3RvckJrZyI6IiNFQ0VDRkYiLCJhY3RvclRleHRDb2xvciI6ImJsYWNrIiwiYWN0b3JMaW5lQ29sb3IiOiJncmV5Iiwic2lnbmFsQ29sb3IiOiIjMzMzIiwic2lnbmFsVGV4dENvbG9yIjoiIzMzMyIsImxhYmVsQm94QmtnQ29sb3IiOiIjRUNFQ0ZGIiwibGFiZWxCb3hCb3JkZXJDb2xvciI6ImhzbCgyNTkuNjI2MTY4MjI0MywgNTkuNzc2NTM2MzEyOCUsIDg3LjkwMTk2MDc4NDMlKSIsImxhYmVsVGV4dENvbG9yIjoiYmxhY2siLCJsb29wVGV4dENvbG9yIjoiYmxhY2siLCJub3RlQm9yZGVyQ29sb3IiOiIjYWFhYTMzIiwibm90ZUJrZ0NvbG9yIjoiI2ZmZjVhZCIsIm5vdGVUZXh0Q29sb3IiOiJibGFjayIsImFjdGl2YXRpb25Cb3JkZXJDb2xvciI6IiM2NjYiLCJhY3RpdmF0aW9uQmtnQ29sb3IiOiIjZjRmNGY0Iiwic2VxdWVuY2VOdW1iZXJDb2xvciI6IndoaXRlIiwic2VjdGlvbkJrZ0NvbG9yIjoicmdiYSgxMDIsIDEwMiwgMjU1LCAwLjQ5KSIsImFsdFNlY3Rpb25Ca2dDb2xvciI6IndoaXRlIiwic2VjdGlvbkJrZ0NvbG9yMiI6IiNmZmY0MDAiLCJ0YXNrQm9yZGVyQ29sb3IiOiIjNTM0ZmJjIiwidGFza0JrZ0NvbG9yIjoiIzhhOTBkZCIsInRhc2tUZXh0TGlnaHRDb2xvciI6IndoaXRlIiwidGFza1RleHRDb2xvciI6IndoaXRlIiwidGFza1RleHREYXJrQ29sb3IiOiJibGFjayIsInRhc2tUZXh0T3V0c2lkZUNvbG9yIjoiYmxhY2siLCJ0YXNrVGV4dENsaWNrYWJsZUNvbG9yIjoiIzAwMzE2MyIsImFjdGl2ZVRhc2tCb3JkZXJDb2xvciI6IiM1MzRmYmMiLCJhY3RpdmVUYXNrQmtnQ29sb3IiOiIjYmZjN2ZmIiwiZ3JpZENvbG9yIjoibGlnaHRncmV5IiwiZG9uZVRhc2tCa2dDb2xvciI6ImxpZ2h0Z3JleSIsImRvbmVUYXNrQm9yZGVyQ29sb3IiOiJncmV5IiwiY3JpdEJvcmRlckNvbG9yIjoiI2ZmODg4OCIsImNyaXRCa2dDb2xvciI6InJlZCIsInRvZGF5TGluZUNvbG9yIjoicmVkIiwibGFiZWxDb2xvciI6ImJsYWNrIiwiZXJyb3JCa2dDb2xvciI6IiM1NTIyMjIiLCJlcnJvclRleHRDb2xvciI6IiM1NTIyMjIiLCJjbGFzc1RleHQiOiIjMTMxMzAwIiwiZmlsbFR5cGUwIjoiI0VDRUNGRiIsImZpbGxUeXBlMSI6IiNmZmZmZGUiLCJmaWxsVHlwZTIiOiJoc2woMzA0LCAxMDAlLCA5Ni4yNzQ1MDk4MDM5JSkiLCJmaWxsVHlwZTMiOiJoc2woMTI0LCAxMDAlLCA5My41Mjk0MTE3NjQ3JSkiLCJmaWxsVHlwZTQiOiJoc2woMTc2LCAxMDAlLCA5Ni4yNzQ1MDk4MDM5JSkiLCJmaWxsVHlwZTUiOiJoc2woLTQsIDEwMCUsIDkzLjUyOTQxMTc2NDclKSIsImZpbGxUeXBlNiI6ImhzbCg4LCAxMDAlLCA5Ni4yNzQ1MDk4MDM5JSkiLCJmaWxsVHlwZTciOiJoc2woMTg4LCAxMDAlLCA5My41Mjk0MTE3NjQ3JSkifX0sInVwZGF0ZUVkaXRvciI6ZmFsc2V9&#34;&gt;live editor&lt;/a&gt;]&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% mermaid %}
stateDiagram-v2
    [*] --&amp;gt; Still
    Still --&amp;gt; [*]
    Still --&amp;gt; Moving
    Moving --&amp;gt; Still
    Moving --&amp;gt; Crash
    Crash --&amp;gt; [*]
{% endmermaid %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;mermaid&#34;&gt;
  stateDiagram-v2
    [*] --&amp;gt; Still
    Still --&amp;gt; [*]
    Still --&amp;gt; Moving
    Moving --&amp;gt; Still
    Moving --&amp;gt; Crash
    Crash --&amp;gt; [*]
&lt;/div&gt;

&lt;h3 id=&#34;Pie&#34;&gt;&lt;strong&gt;Pie&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;[&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mermaid-js.github.io/mermaid/#/pie&#34;&gt;docs&lt;/a&gt; - &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mermaidjs.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoicGllXG5cIkRvZ3NcIiA6IDQyLjk2XG5cIkNhdHNcIiA6IDUwLjA1XG5cIlJhdHNcIiA6IDEwLjAxIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifX0&#34;&gt;live editor&lt;/a&gt;]&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% mermaid %}
pie
&#34;Dogs&#34; : 386
&#34;Cats&#34; : 85
&#34;Rats&#34; : 15
{% endmermaid %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;mermaid&#34;&gt;
  pie
&#34;Dogs&#34; : 386
&#34;Cats&#34; : 85
&#34;Rats&#34; : 15
&lt;/div&gt;

&lt;h3 id=&#34;User-Journey&#34;&gt;&lt;strong&gt;User Journey&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;[&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mermaid-js.github.io/mermaid/#/user-journey&#34;&gt;docs&lt;/a&gt; - &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mermaidjs.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoic3RhdGVEaWFncmFtXG4gICAgWypdIC0tPiBTdGlsbFxuICAgIFN0aWxsIC0tPiBbKl1cbiAgICBTdGlsbCAtLT4gTW92aW5nXG4gICAgTW92aW5nIC0tPiBTdGlsbFxuICAgIE1vdmluZyAtLT4gQ3Jhc2hcbiAgICBDcmFzaCAtLT4gWypdIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifX0&#34;&gt;live editor&lt;/a&gt;]&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% mermaid %}
	  journey
    title My working day
    section Go to work
      Make tea: 5: Me
      Go upstairs: 3: Me
      Do work: 1: Me, Cat
    section Go home
      Go downstairs: 5: Me
      Sit down: 3: Me
{% endmermaid %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;mermaid&#34;&gt;
  journey
 title My working day
 section Go to work
   Make tea: 5: Me
   Go upstairs: 3: Me
   Do work: 1: Me, Cat
 section Go home
   Go downstairs: 5: Me
   Sit down: 3: Me
&lt;/div&gt;

&lt;h2 id=&#34;plant-uml&#34;&gt;plant uml&lt;/h2&gt;
&lt;p&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://link.segmentfault.com/?enc=ZnkRBa%2Fre3TQCl7KNJg2Sg%3D%3D.ZEjsSgGk0F1LOYjRqQLWGcsHdjIHjXJJNCwT20OKlas%3D&#34;&gt;&lt;strong&gt;PlantUML&lt;/strong&gt; &lt;/a&gt; 是一个允许你快速编写一下图表的组件 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://link.segmentfault.com/?enc=WnNQQpbhwLLtOvy0iZznAw%3D%3D.ufDzIrmSHLTJOvU%2B%2BrCbHKX7i%2BXDfiAs43p47%2Brd6CPQPzmoRjTx9Yjer2eCPMIx&#34;&gt;Sequence diagram&lt;/a&gt;（时序图）&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://link.segmentfault.com/?enc=swyHFudu0Dv1kgG36K6uKQ%3D%3D.%2F3OTiCZ42cJb5Qx7sx3T0xkD8UzUl2QpmT5nScfRShRBbDCjvTAYmIjQBdcndh5P&#34;&gt;Usecase diagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://link.segmentfault.com/?enc=y2iylEjbyP1BkiOoSD3aBQ%3D%3D.Uk3N50fH52eqKvi5pR9V2dCwZ2t88GyGCkB56t0bi51SDzK3TAm8q%2F%2BknYaMp6gq&#34;&gt;Class diagram&lt;/a&gt;（类图）&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://link.segmentfault.com/?enc=ZPF3Fm60rmWHTd6iqgefYw%3D%3D.hetxaEZitHOTlwF26EQHW1ze%2BqQe28tO5Zan9A6PQD7tELizzdVt2LCwJ7Wqni8N&#34;&gt;Activity diagram&lt;/a&gt; (here is &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://link.segmentfault.com/?enc=G1AlcTWhXkwCzalwXO04Tw%3D%3D.RKEPVfhovignZnpee9bltjlVeAZ25VKK5bSbzmo2G225h2cQ3wEKM8LyC23GxRLL&#34;&gt;the legacy syntax)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://link.segmentfault.com/?enc=Vxtv5M%2FcCgkpBtyWH8mDCA%3D%3D.xTXdTliRpsnQ8OniXrs1V6YfjTy0nSFbS7l7wqvn0uACpHlTJNL9BlF0xb7vfM4Z&#34;&gt;Component diagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://link.segmentfault.com/?enc=asRZoWO7I5UQ3wuP84r8hg%3D%3D.vyIPg7GpNKjSjf7e2IS4KO%2Bg6SnD1DLe9DYb9T1CuW2U41s72PgDFuT0hbkp2BO9&#34;&gt;State diagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://link.segmentfault.com/?enc=WMWDuC4PoXS%2BUq8UK%2B6m6Q%3D%3D.UaRzixgD%2B8x%2BRoBPDjArHXZEVWCpjnRwzoBn9HZDWAgyM2iggTjoxPJrpjuH5nZL&#34;&gt;Object diagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://link.segmentfault.com/?enc=4QYG%2FOLv5kpCA0Wur4JTBg%3D%3D.Ci3AIvz1ie0I6BCUt8a%2BaklDx8hJvKPujkVdWDGw%2BzDTkfdnBBhY5GhX9mIITaMb&#34;&gt;Deployment diagram&lt;/a&gt;(BETA)&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://link.segmentfault.com/?enc=%2Bi9ecBhjJV%2Fo6bPpIo6zEw%3D%3D.b0HW%2B0h7iKI3LibmVdbEmi77twGMobstSrkBWn2n6AucZmIcrNRI7QEhpDEMrUTR&#34;&gt;Timing diagram&lt;/a&gt;(BETA)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hexo 安装 hexo-tag-plantuml 插件，便能使其绘制的图表在博客上展示，其原理其实使用的是 PlantUML 提供的在线服务，只是简单地将标签包裹的代码传给服务器，获取生成的链接，生成 img 标签替换原来的代码区域.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://link.segmentfault.com/?enc=Om2tsztpVQpl48NLQP8wPg%3D%3D.lA5QuvRnDCcbundLA81sGH8MG3E6QjnIJQ6%2BgojZWH8%3D&#34;&gt;plantUML 在线编辑网站&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可使用 HTML 标签将其嵌套&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% plantuml %}
title Relationships - Class Diagram

class Dwelling {
  +Int Windows
  +void LockTheDoor()
}

class Apartment
class House
class Commune
class Window
class Door

Dwelling &amp;lt;|-down- Apartment: Inheritance
Dwelling &amp;lt;|-down- Commune: Inheritance
Dwelling &amp;lt;|-down- House: Inheritance
Dwelling &#34;1&#34; *-up- &#34;many&#34; Window: Composition
Dwelling &#34;1&#34; *-up- &#34;many&#34; Door: Composition
{% endplantuml %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;http://www.plantuml.com/plantuml/svg/XP0z2y8m48Rt_8gZanzaS2qkKWSBJY8uXpQqXybTQ5ABgF_TrhQAuCUMbpptt4V0O3Jij541cNo9peE4n2ZlOOsgg9GL8kjZeur1Ak0Y0EOf1JWWvTpuBfuOSzXoTjoNUirSJQRYDXQkdAg2rHI6lE7Qw-6TiBKrZQaNZlrQZH3FhikhRFz8ldGnf5Jg2eEYJ7y01_S_x37E5oXQH32JjPCGMKNdQ9WmxjoEFNP7-q5tAxonTm00&#34;&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% plantuml %}
[内容]
{% endplantuml %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;时序图&#34;&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://plantuml.com/zh/timing-diagram&#34;&gt;时序图&lt;/a&gt;&lt;/h3&gt;
&lt;pangu&gt; &lt;/pangu&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% plantuml %}
    Bob-&amp;gt;Alice : hello
{% endplantuml %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;http://www.plantuml.com/plantuml/svg/SyfFqhLppCbCJbMmKiX8pSd91m00&#34;&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;Alice -&amp;gt; Bob: Authentication Request
Bob --&amp;gt; Alice: Authentication Response

Alice -&amp;gt; Bob: Another authentication Request
Alice &amp;lt;-- Bob: Another authentication Response&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;http://www.plantuml.com/plantuml/svg/Syp9J4vLqBLJSCfFib9mB2t9ICqhoKnEBCdCprC8IYqiJIqkuGBAAUW2rJY256DHLLoGdrUSoiNbY6fONZvGNP528dP38OfjT7K9g8OO3W00&#34;&gt;
&lt;h3 id=&#34;用例图&#34;&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://plantuml.com/zh/use-case-diagram&#34;&gt;用例图&lt;/a&gt;&lt;/h3&gt;
&lt;pangu&gt; &lt;/pangu&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% plantuml %}
User -&amp;gt; (Start)
User --&amp;gt; (Use the application) : A small label

:Main Admin: ---&amp;gt; (Use the application) : This is\nyet another\nlabel
{% endplantuml %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;类图&#34;&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://plantuml.com/zh/class-diagram&#34;&gt;类图&lt;/a&gt;&lt;/h3&gt;
&lt;pangu&gt; &lt;/pangu&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% plantuml %}
class Object &amp;lt;&amp;lt; general &amp;gt;&amp;gt;
Object &amp;lt;|--- ArrayList

note top of Object : In java, every class\nextends this one.

note &#34;This is a floating note&#34; as N1
note &#34;This note is connected\nto several objects.&#34; as N2
Object .. N2
N2 .. ArrayList

class Foo
note left: On last defined class
{% endplantuml %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;活动图&#34;&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://plantuml.com/zh/activity-diagram-beta&#34;&gt;活动图&lt;/a&gt;&lt;/h3&gt;
&lt;pangu&gt; &lt;/pangu&gt;&lt;pre class=&#34;line-numbers language-markdown&#34; data-language=&#34;markdown&#34;&gt;&lt;code class=&#34;language-markdown&#34;&gt;{% plantuml %}
@startuml
start

if (Graphviz 已安装?) then (yes)
  :处理所有\n绘制任务;
else (no)
  :仅处理
  &lt;span class=&#34;token bold&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;__&lt;/span&gt;&lt;span class=&#34;token content&#34;&gt;时序图&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;__&lt;/span&gt;&lt;/span&gt; 和 &lt;span class=&#34;token bold&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;__&lt;/span&gt;&lt;span class=&#34;token content&#34;&gt;活动&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;__&lt;/span&gt;&lt;/span&gt; 图;
endif

stop
@enduml
{% endplantuml %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;http://www.plantuml.com/plantuml/svg/SoWkIImgAStDuG8pkBWoqnGqt8iI2pBACgiKdcxVz7HTvul5hVQQ2YKPgNaA6fMfnPfS2WfMJvUqF9_GzgopuTcSpfYyvxjdFEtOzcJtxgTT2wsvKdEAKnKqylB12f_iReMe1NBYuvzDt_PqL__JsVlYunMUJke1YMm1Qbe1uixU1zIQbvAPnWLqItu1bmEG0tGO0000&#34;&gt;
&lt;h3 id=&#34;组件图&#34;&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://plantuml.com/zh/component-diagram&#34;&gt;组件图&lt;/a&gt;&lt;/h3&gt;
&lt;pangu&gt; &lt;/pangu&gt;&lt;pre class=&#34;line-numbers language-markdown&#34; data-language=&#34;markdown&#34;&gt;&lt;code class=&#34;language-markdown&#34;&gt;{% plantuml %}
@startuml

[First component]
[Another component] as Comp2
component Comp3
component [Last\ncomponent] as Comp4

@enduml
{% endplantuml %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;http://www.plantuml.com/plantuml/svg/SoWkIImgAStDuUAATiiiAYvHICxFBSZFIyqhYUMATipBByb8BK8IKqWiLd06yeouu69WlZ4IFzediRWa9WzJamaNbqDgNWhGDW00&#34;&gt;
&lt;h3 id=&#34;状态图&#34;&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://plantuml.com/zh/state-diagram&#34;&gt;状态图&lt;/a&gt;&lt;/h3&gt;
&lt;pangu&gt; &lt;/pangu&gt;&lt;pre class=&#34;line-numbers language-markdown&#34; data-language=&#34;markdown&#34;&gt;&lt;code class=&#34;language-markdown&#34;&gt;{% plantuml %}
@startuml

[&lt;span class=&#34;token italic&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token content&#34;&gt;] --&amp;gt; State1
State1 --&amp;gt; [&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;*&lt;/span&gt;&lt;/span&gt;]
State1 : this is a string
State1 : this is another string

State1 -&amp;gt; State2
State2 --&amp;gt; [*]

@enduml
{% endplantuml %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;http://www.plantuml.com/plantuml/svg/SoWkIImgAStDuUAArefLqDMrKmWkIIn9DUI2K60He0oCQwLGaf5Ph014YGh59KMPUUbOPFBoIp9IYs3oS9EWHXj118pWHdCvfEQb09q00000&#34;&gt;
&lt;h3 id=&#34;对象图&#34;&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://plantuml.com/zh/object-diagram&#34;&gt;对象图&lt;/a&gt;&lt;/h3&gt;
&lt;pangu&gt; &lt;/pangu&gt;&lt;pre class=&#34;line-numbers language-markdown&#34; data-language=&#34;markdown&#34;&gt;&lt;code class=&#34;language-markdown&#34;&gt;{% plantuml %}
@startuml PERT
left to right direction
&#39; Horizontal lines: --&amp;gt;, &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;--,&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;&amp;lt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&#39; Vertical lines: -&amp;gt;, &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;-,&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
title PERT: Project Name

map Kick.Off {
}
map task.1 {
    Start =&amp;gt; End
}
map task.2 {
    Start =&amp;gt; End
}
map task.3 {
    Start =&amp;gt; End
}
map task.4 {
    Start =&amp;gt; End
}
map task.5 {
    Start =&amp;gt; End
}
Kick.Off --&amp;gt; task.1 : Label 1
Kick.Off --&amp;gt; task.2 : Label 2
Kick.Off --&amp;gt; task.3 : Label 3
task.1 --&amp;gt; task.4
task.2 --&amp;gt; task.4
task.3 --&amp;gt; task.4
task.4 --&amp;gt; task.5 : Label 4
@enduml
{% endplantuml %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;http://www.plantuml.com/plantuml/svg/XP7DQiCm48Jl-nHpwoKEn3yNqvfS0e64r3IbTyMM4oMo5EJjfQNl7iMaIcWD5gn0yosp8tRUiN3ysMgKYxTtqh9Xi8LJ-mEZLavMhAoX9oojKr_MiD3GoiWkHnGL4pn7KNyLlkL3EbRLGqFFhrKGAzQodv6ZTFReVR4HhIHgnHahLPschqs3R_hf1HRTQJhpJ_YplKR4Iu65gHzvFCAJ4PwEy6oOXx3-rxz1Swp5JchC1cWSQ3n0aq0Jkfa5bjBDuA-I_5FIkv85nvJcqjH-kHS0&#34;&gt;
&lt;h3 id=&#34;部署图&#34;&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://plantuml.com/zh/deployment-diagram&#34;&gt;部署图&lt;/a&gt;&lt;/h3&gt;
&lt;pangu&gt; &lt;/pangu&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% plantuml %}
@startuml
actor actor
agent agent
artifact artifact
boundary boundary
card card
cloud cloud
component component
control control
database database
entity entity
file file
folder folder
frame frame
interface  interface
node node
package package
queue queue
stack stack
rectangle rectangle
storage storage
usecase usecase
@enduml
{% endplantuml %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;http://www.plantuml.com/plantuml/svg/FP1B4eGm24JtVGgEubKmGSio1WV9mjiFyRTv_Gho8HaEP_Es5N1oDRe8dgKwNKIqbodAz0f6RJMpdVGA4bkc3gIYBRGJIRTTQp_fiwXLDotq938xZtm8lO9OjVX9Ts1QYb079YrPZEx0PBn5enDBTR6OJ8W-HTKir86TqnfFeIVnQzA4BY9UdrQw29FaNEUuxxFeg_MzJw8TalgqJsAGckFp_W00&#34;&gt;
&lt;h2 id=&#34;URL-卡片&#34;&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/toastsgithub/hexo-valkyr-url&#34;&gt;URL 卡片&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;vkr-url-wrapper&#34;&gt;
&lt;style&gt;
.vkr-url-wrapper {
    padding: 10px;
    border-radius: 5px;
    border: 1px solid;
    border-color: #eee #ddd #bbb;
    box-shadow: rgba(0,0,0,.14) 0 1px 3px;
    margin-bottom: 10px;
    display: flex;
}
.vkr-url-wrapper .desc-wrapper &gt; hr {
    margin: 10px 0;
    height: 1px;
}
.vkr-url-wrapper .avatar {
    width: 100px;
    height: 100px;
    border: solid 1px #eee;
    box-shadow: none!important;
    margin: 0;
    margin-right: 10px;
}
.vkr-url-wrapper h2 {
    border: none;
    margin: 0;
    padding: 0;
}
.vkr-url-wrapper .desc-wrapper {
    flex: 1;
}
.vkr-url-wrapper .desc-wrapper a {
    font-size: 22px;
    font-weight: 700;
}
&lt;/style&gt;
    
        &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/toastsgithub/valkyr-ssh&#34;&gt;&lt;img class=&#34;avatar&#34; src=&#34;http://images2.dzmtoast.top/post-cover/github-logo_hub2899c31b6ca7aed8d6a218f0e752fe4_46649_1200x1200_fill_box_center_2.png&#34;&gt;&lt;/a&gt;
    
    &lt;div class=&#34;desc-wrapper&#34;&gt;
        &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/toastsgithub/valkyr-ssh&#34;&gt;valkyr ssh manager&lt;/a&gt;
        &lt;hr&gt;
        &lt;div class=&#34;desc&#34;&gt;valkyr-ssh, a simple commandline tool to help you store ssh login address&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% valkyrurl
[url=https://github.com/toastsgithub/valkyr-ssh]
[title=&#34;valkyr ssh manager&#34;]
[avatar=http://images2.dzmtoast.top/post-cover/github-logo_hub2899c31b6ca7aed8d6a218f0e752fe4_46649_1200x1200_fill_box_center_2.png]
[desc=&#34;valkyr-ssh, a simple commandline tool to help you store ssh login address&#34;]
%}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% valkyrurl [url=http://example.com] [otherOpt=value] %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;avatar&lt;/code&gt; image that describe your link (optional)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt; title&lt;/li&gt;
&lt;li&gt;&lt;code&gt;desc&lt;/code&gt; description&lt;/li&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt; destination when you click image url or title&lt;/li&gt;
&lt;li&gt; 空格要用引号包裹起来！&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;BILIBILI卡片&#34;&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/MaxChang3/hexo-bilibili-card&#34;&gt;BILIBILI 卡片&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;bvideo&#34;&gt;
    &lt;a href=&#34;//www.bilibili.com/video/BV1sr4y1K7Be&#34; target=&#34;_blank&#34;&gt;
        &lt;div class=&#34;bvideo-box&#34;&gt;
            &lt;div class=&#34;bvideo-cover&#34;&gt;
                &lt;div class=&#34;cover-default&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;bvideo-cover-layer&#34; style=&#34;background-image:url(https://images.weserv.nl/?url=http://i1.hdslb.com/bfs/archive/ee23c0ab56c3e29838f1081a76cf55c5a6199bf0.jpg)&#34;&gt;
                    &lt;i class=&#34;icon-video&#34;&gt;&lt;/i&gt;
                &lt;/div&gt;
                &lt;span class=&#34;duration&#34;&gt; 52:09:00&lt;/span&gt;
            &lt;/div&gt;
            &lt;div class=&#34;bvideo-info&#34;&gt;
                &lt;p class=&#34;title&#34;&gt;【PKU】高等数学（全 60 讲)&lt;/p&gt;
                &lt;p class=&#34;card-status&#34;&gt;
                    &lt;span class=&#34;play-num&#34;&gt;
                        &lt;i class=&#34;fa fa-youtube-play&#34;&gt;&lt;/i&gt;
                        &lt;span&gt;26.6 万&lt;/span&gt;&lt;/span&gt;
                    &lt;span&gt;
                        &lt;i class=&#34;fa fa-list-alt&#34;&gt;&lt;/i&gt;
                        &lt;span&gt; 148&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;div class=&#34;partition&#34;&gt;
                    &lt;label class=&#34;card-label&#34;&gt;视频&lt;/label&gt;
                    &lt;label class=&#34;up-label&#34;&gt;&lt;/label&gt;
                    &lt;label class=&#34;up-name&#34;&gt;沉迷学习的 PickleFermi&lt;/label&gt;
                &lt;/div&gt;
                &lt;div class=&#34;actions hide&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% bilicard your_video_id %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;hexo-github-card&#34;&gt;&lt;strong&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/Gisonrg/hexo-github-card&#34;&gt;hexo-github-card&lt;/a&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% githubCard user:your_user [repo:your_repo] [width:400] [height:200] [theme:default] [client_id:your_client_id] [client_secret:your_client_secret] [align:text-align_position] %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;line-numbers language-markdown&#34; data-language=&#34;markdown&#34;&gt;&lt;code class=&#34;language-markdown&#34;&gt;{% githubCard user:appotry %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;line-numbers language-markdown&#34; data-language=&#34;markdown&#34;&gt;&lt;code class=&#34;language-markdown&#34;&gt;{% githubCard user:appotry repo:hexo-github-card %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
  &lt;div class=&#34;github-card&#34; data-user=&#34;appotry&#34; data-repo=&#34;&#34; data-height=&#34;200&#34; data-width=&#34;400&#34; data-theme=&#34;default&#34; data-target=&#34;&#34; data-client-id=&#34;&#34; data-client-secret=&#34;&#34;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;script src=&#34;/github-card-lib/githubcard.js&#34;&gt;&lt;/script&gt;

&lt;div style=&#34;text-align: center&#34;&gt;
  &lt;div class=&#34;github-card&#34; data-user=&#34;appotry&#34; data-repo=&#34;docker-hexo&#34; data-height=&#34;200&#34; data-width=&#34;400&#34; data-theme=&#34;default&#34; data-target=&#34;&#34; data-client-id=&#34;&#34; data-client-secret=&#34;&#34;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;script src=&#34;/github-card-lib/githubcard.js&#34;&gt;&lt;/script&gt;

&lt;div style=&#34;text-align: center&#34;&gt;
  &lt;div class=&#34;github-card&#34; data-user=&#34;appotry&#34; data-repo=&#34;PTtool&#34; data-height=&#34;200&#34; data-width=&#34;400&#34; data-theme=&#34;default&#34; data-target=&#34;&#34; data-client-id=&#34;&#34; data-client-secret=&#34;&#34;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;script src=&#34;/github-card-lib/githubcard.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;hexo-douban-card&#34;&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/TankNee/hexo-douban-card&#34;&gt;hexo-douban-card&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;douban-card-block&#34;&gt;
    &lt;a class=&#34;douban-card&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://movie.douban.com/subject/24745500&#34;&gt;
        &lt;div class=&#34;douban-card-bgimg&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2194066391.jpg&#39;);&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;douban-card-left&#34;&gt;
            &lt;div class=&#34;douban-card-img&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2194066391.jpg&#39;);&#34;&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-status&#34;&gt;灯影绰约&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;douban-card-right&#34;&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;电影名: &lt;/span&gt;&lt;strong&gt;绣春刀 (2014)&lt;/strong&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;导演: &lt;/span&gt;&lt;span&gt;路阳&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;主演: &lt;/span&gt;&lt;span&gt;张震 / 刘诗诗&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;上映时间: &lt;/span&gt;&lt;span&gt;2014-08-07 (中国大陆)&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;评分: &lt;/span&gt;&lt;span&gt;7.6&lt;/span&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;style&gt;
    .douban-card-block {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    max-height: 400px;
}

.douban-card {
    display: flex;
    margin: 30px 10px;
    padding: 15px;
    border-radius: 15px;
    position: relative;
    justify-content: center;
    align-items: center;
    overflow: hidden;
    color: antiquewhite;
    text-decoration: none;
}

.douban-card:hover {
    text-decoration: none;
}

.douban-card-bgimg {
    position: absolute;
    width: 115%;
    height: 115%;
    filter: blur(15px) brightness(0.6);
    background-size: 100%;
    background-position: center;
    background-repeat: no-repeat;
}

.douban-card-img {
    position: relative;
    height: 130px;
    width: 80px;
    background-size: 100%;
    background-position: center;
    background-repeat: no-repeat;
}

.douban-card-left:hover .douban-card-img {
    filter: blur(5px) brightness(0.6);
    transform: perspective(800px) rotateX(180deg);
}

.douban-card-left .douban-card-img {
    transition: all 500ms ease;
}

.douban-card-left {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.douban-card-left .douban-card-status {
    height: 130px;
    width: 80px;
    text-align: center;
    font-weight: bold;
    position: absolute;
    left: 0;
    top: 30%;
    transform: rotateX(180deg);
    backface-visibility: hidden;
    transition: all 500ms ease;
}

.douban-card-left:hover .douban-card-status {
    transform: perspective(800px) rotateX(0deg);
}

.douban-card-right {
    position: relative;
    display: flex;
    flex-direction: column;
    margin-left: 12px;
    font-size: 16px;
    font-family: &#34;Courier New&#34;, Courier, monospace;
    line-height: 1.3;
    color: antiquewhite;
}

.douban-card-item {
    margin-top: 4px;
}

&lt;/style&gt;
&lt;div class=&#34;douban-card-block&#34;&gt;
    &lt;a class=&#34;douban-card&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://book.douban.com/subject/30376420&#34;&gt;
        &lt;div class=&#34;douban-card-bgimg&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/s/public/s30015279.jpg&#39;);&#34;&gt;
        &lt;/div&gt;
        &lt;div class=&#34;douban-card-left&#34;&gt;
            &lt;div class=&#34;douban-card-img&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/s/public/s30015279.jpg&#39;);&#34;&gt;
            &lt;/div&gt;
            &lt;div class=&#34;douban-card-status&#34;&gt;见字如晤&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;douban-card-right&#34; style=&#34;line-height: 1.7;&#34;&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;书名: &lt;/span&gt;&lt;strong&gt;一个人生活&lt;/strong&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;作者: &lt;/span&gt;&lt;span&gt;[日] 谷川俊太郎&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;出版年份: &lt;/span&gt;&lt;span&gt;2019-3&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;评分: &lt;/span&gt;&lt;span&gt;7.1&lt;/span&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;style&gt;
    .douban-card-block {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    max-height: 400px;
}

.douban-card {
    display: flex;
    margin: 30px 10px;
    padding: 15px;
    border-radius: 15px;
    position: relative;
    justify-content: center;
    align-items: center;
    overflow: hidden;
    color: antiquewhite;
    text-decoration: none;
}

.douban-card:hover {
    text-decoration: none;
}

.douban-card-bgimg {
    position: absolute;
    width: 115%;
    height: 115%;
    filter: blur(15px) brightness(0.6);
    background-size: 100%;
    background-position: center;
    background-repeat: no-repeat;
}

.douban-card-img {
    position: relative;
    height: 130px;
    width: 80px;
    background-size: 100%;
    background-position: center;
    background-repeat: no-repeat;
}

.douban-card-left:hover .douban-card-img {
    filter: blur(5px) brightness(0.6);
    transform: perspective(800px) rotateX(180deg);
}

.douban-card-left .douban-card-img {
    transition: all 500ms ease;
}

.douban-card-left {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.douban-card-left .douban-card-status {
    height: 130px;
    width: 80px;
    text-align: center;
    font-weight: bold;
    position: absolute;
    left: 0;
    top: 30%;
    transform: rotateX(180deg);
    backface-visibility: hidden;
    transition: all 500ms ease;
}

.douban-card-left:hover .douban-card-status {
    transform: perspective(800px) rotateX(0deg);
}

.douban-card-right {
    position: relative;
    display: flex;
    flex-direction: column;
    margin-left: 12px;
    font-size: 16px;
    font-family: &#34;Courier New&#34;, Courier, monospace;
    line-height: 1.3;
    color: antiquewhite;
}

.douban-card-item {
    margin-top: 4px;
}

&lt;/style&gt;
&lt;div class=&#34;douban-card-block&#34;&gt;
	&lt;a class=&#34;douban-card&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://music.douban.com/subject/35099703&#34;&gt;
		&lt;div class=&#34;douban-card-bgimg&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/m/public/s33667479.jpg&#39;);&#34;&gt;&lt;/div&gt;
		&lt;div class=&#34;douban-card-left&#34;&gt;
			&lt;div class=&#34;douban-card-img&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/m/public/s33667479.jpg&#39;);&#34;&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-status&#34;&gt;余音绕梁&lt;/div&gt;
        &lt;/div&gt;
		&lt;div class=&#34;douban-card-right&#34;&gt;
			&lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;音乐名: &lt;/span&gt;&lt;strong&gt;María&lt;/strong&gt;&lt;/div&gt;
			&lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;表演者: &lt;/span&gt;&lt;span&gt;화사/ 华莎&lt;/span&gt;&lt;/div&gt;
			&lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;发行时间: &lt;/span&gt;&lt;span&gt;2020-06-30&lt;/span&gt;&lt;/div&gt;
			&lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;评分: &lt;/span&gt;&lt;span&gt;8.3&lt;/span&gt;&lt;/div&gt;
		&lt;/div&gt;
	&lt;/a&gt;
&lt;/div&gt;
&lt;style&gt;
    .douban-card-block {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    max-height: 400px;
}

.douban-card {
    display: flex;
    margin: 30px 10px;
    padding: 15px;
    border-radius: 15px;
    position: relative;
    justify-content: center;
    align-items: center;
    overflow: hidden;
    color: antiquewhite;
    text-decoration: none;
}

.douban-card:hover {
    text-decoration: none;
}

.douban-card-bgimg {
    position: absolute;
    width: 115%;
    height: 115%;
    filter: blur(15px) brightness(0.6);
    background-size: 100%;
    background-position: center;
    background-repeat: no-repeat;
}

.douban-card-img {
    position: relative;
    height: 130px;
    width: 80px;
    background-size: 100%;
    background-position: center;
    background-repeat: no-repeat;
}

.douban-card-left:hover .douban-card-img {
    filter: blur(5px) brightness(0.6);
    transform: perspective(800px) rotateX(180deg);
}

.douban-card-left .douban-card-img {
    transition: all 500ms ease;
}

.douban-card-left {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.douban-card-left .douban-card-status {
    height: 130px;
    width: 80px;
    text-align: center;
    font-weight: bold;
    position: absolute;
    left: 0;
    top: 30%;
    transform: rotateX(180deg);
    backface-visibility: hidden;
    transition: all 500ms ease;
}

.douban-card-left:hover .douban-card-status {
    transform: perspective(800px) rotateX(0deg);
}

.douban-card-right {
    position: relative;
    display: flex;
    flex-direction: column;
    margin-left: 12px;
    font-size: 16px;
    font-family: &#34;Courier New&#34;, Courier, monospace;
    line-height: 1.3;
    color: antiquewhite;
}

.douban-card-item {
    margin-top: 4px;
}

&lt;/style&gt;

&lt;pre class=&#34;line-numbers language-markdown&#34; data-language=&#34;markdown&#34;&gt;&lt;code class=&#34;language-markdown&#34;&gt;{% douban movie 24745500 %}

{% douban book 30376420 %}

{% douban music 35099703 %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;插入音乐和视频&#34;&gt;插入音乐和视频&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/MoePlayer/hexo-tag-aplayer&#34;&gt;hexo-tag-aplayer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/MoePlayer/hexo-tag-dplayer&#34;&gt;hexo-tag-dplayer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/u2sb/hexo-tag-mmedia&#34;&gt;hexo-tag-mmedia&lt;/a&gt; 推荐使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;插入音乐&#34;&gt;插入音乐&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md&#34;&gt;官方教程&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pangu&gt; &lt;/pangu&gt;&lt;pre class=&#34;line-numbers language-markdown&#34; data-language=&#34;markdown&#34;&gt;&lt;code class=&#34;language-markdown&#34;&gt;{% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt; : 曲目标题&lt;/li&gt;
&lt;li&gt;&lt;code&gt;author&lt;/code&gt;: 曲目作者&lt;/li&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt;: 音乐文件 URL 地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;picture_url&lt;/code&gt;: (可选) 音乐对应的图片地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;narrow&lt;/code&gt;: （可选）播放器袖珍风格&lt;/li&gt;
&lt;li&gt;&lt;code&gt;autoplay&lt;/code&gt;: (可选) 自动播放，移动端浏览器暂时不支持此能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width:xxx&lt;/code&gt;: (可选) 播放器宽度 (默认: 100%)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lrc:xxx&lt;/code&gt;: （可选）歌词文件 URL #### &lt;em&gt;&lt;strong&gt;单曲附带歌词显示&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

        &lt;div id=&#34;aplayer-kQJjOFbV&#34; class=&#34;aplayer aplayer-tag-marker&#34; style=&#34;margin-bottom: 20px;&#34;&gt;
            &lt;pre class=&#34;aplayer-lrc-content&#34;&gt;&lt;/pre&gt;
        &lt;/div&gt;
        &lt;script&gt;
          var ap = new APlayer({
            element: document.getElementById(&#34;aplayer-kQJjOFbV&#34;),
            narrow: false,
            autoplay: false,
            showlrc: 3,
            music: {
              title: &#34;Hotel California&#34;,
              author: &#34;Camille and Kennerly&#34;,
              url: &#34;https://cdn.17lai.site/media/music/Hotel%20California/01%20Hotel%20California.mp3&#34;,
              pic: &#34;https://cdn.17lai.site/media/music/Hotel%20California/Hotel%20California.webp&#34;,
              lrc: &#34;https://cdn.17lai.site/media/music/Hotel%20California/01%20Hotel%20California.lrc&#34;
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        &lt;/script&gt;

#### **音乐播放列表**


&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% aplayerlist %}
{
    &#34;narrow&#34;: false,                          // （可选）播放器袖珍风格
    &#34;autoplay&#34;: true,                         // （可选) 自动播放，移动端浏览器暂时不支持此功能
    &#34;mode&#34;: &#34;random&#34;,                         // （可选）曲目循环类型，有 &#39;random&#39;（随机播放）, &#39;single&#39; (单曲播放), &#39;circulation&#39; (循环播放), &#39;order&#39; (列表播放)， 默认：&#39;circulation&#39; 
    &#34;showlrc&#34;: 3,                             // （可选）歌词显示配置项，可选项有：1,2,3
    &#34;mutex&#34;: true,                            // （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停
    &#34;theme&#34;: &#34;#e6d0b2&#34;,	                      // （可选）播放器风格色彩设置，默认：#b7daff
    &#34;preload&#34;: &#34;metadata&#34;,                    // （可选）音乐文件预载入模式，可选项： &#39;none&#39; &#39;metadata&#39; &#39;auto&#39;, 默认: &#39;auto&#39;
    &#34;listmaxheight&#34;: &#34;513px&#34;,                 // (可选) 该播放列表的最大长度
    &#34;music&#34;: [
        {
            &#34;title&#34;: &#34;CoCo&#34;,
            &#34;author&#34;: &#34;Jeff Williams&#34;,
            &#34;url&#34;: &#34;caffeine.mp3&#34;,
            &#34;pic&#34;: &#34;caffeine.jpeg&#34;,
            &#34;lrc&#34;: &#34;caffeine.txt&#34;
        },
        {
            &#34;title&#34;: &#34;アイロニ&#34;,
            &#34;author&#34;: &#34;鹿乃&#34;,
            &#34;url&#34;: &#34;irony.mp3&#34;,
            &#34;pic&#34;: &#34;irony.jpg&#34;
        }
    ]
}
{% endaplayerlist %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;


        &lt;div id=&#34;aplayer-CfETWOtj&#34; class=&#34;aplayer aplayer-tag-marker&#34; style=&#34;margin-bottom: 20px;&#34;&gt;&lt;/div&gt;
			  &lt;script&gt;
				  var options = {&#34;narrow&#34;:false,&#34;autoplay&#34;:true,&#34;showlrc&#34;:3,&#34;mode&#34;:&#34;random&#34;,&#34;mutex&#34;:true,&#34;theme&#34;:&#34;#e6d0b2&#34;,&#34;preload&#34;:&#34;metadata&#34;,&#34;listmaxheight&#34;:&#34;513px&#34;,&#34;music&#34;:[{&#34;title&#34;:&#34;Hotel California&#34;,&#34;author&#34;:&#34;Camille and Kennerly&#34;,&#34;url&#34;:&#34;https://cdn.17lai.site/media/music/Hotel%20California/01%20Hotel%20California.mp3&#34;,&#34;pic&#34;:&#34;https://cdn.17lai.site/media/music/Hotel%20California/Hotel%20California.webp&#34;,&#34;lrc&#34;:&#34;https://cdn.17lai.site/media/music/Hotel%20California/01%20Hotel%20California.lrc&#34;},{&#34;title&#34;:&#34;Sold Out&#34;,&#34;author&#34;:&#34;Diamonds&#34;,&#34;url&#34;:&#34;https://cdn.17lai.site/media/music/Diamonds/05%20Sold%20Out.flac&#34;,&#34;pic&#34;:&#34;https://cdn.17lai.site/media/music/Diamonds/Diamonds.jpg&#34;}]};
				  options.element = document.getElementById(&#34;aplayer-CfETWOtj&#34;);
				  var ap = new APlayer(options);
			    window.aplayers || (window.aplayers = []);
				  window.aplayers.push(ap);
			  &lt;/script&gt;
&lt;h3 id=&#34;插入视频&#34;&gt;插入视频&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;http://dplayer.js.org/guide.html&#34;&gt;官方教程&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pangu&gt; &lt;/pangu&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% dplayer key=value ... %}
例：
{% dplayer &#34;url=http://www.nenu.edu.cn/_upload/article/videos/03/5f/7c999eed42e3aadc413d7f851f0e/0f50b3eb-9285-41d2-ac4d-6cc363651aad_B.mp4&#34;  &#34;autoplay=true&#34; &#34;preload=metadata&#34; &#34;hotkey=true&#34; %} &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;有关的选项列表如下:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;选项&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;默认值&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; url&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt; 必须值&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;视频地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; loop&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;视频循环播放&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; volume&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;0.7&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;播放器音量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; hotkey&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;开启热键&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; autoplay&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;自动播放，移动端浏览器暂时不支持此功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; logo&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在左上角展示一个 logo，你可以通过 CSS 调整它的大小和位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; mutex&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;该选项开启时，如果同页面有其他播放，该播放器会暂停&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; highlight&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;自定义进度条提示点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; preload&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;视频文件预载入模式，可选项： &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;metadata&lt;/code&gt;, &lt;code&gt;auto&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;theme&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;#ad7a86&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;播放器风格色彩设置&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注：如果使用腾讯视频、优酷视频等在线视频网站的资源，需要先进行视频地址解析，如&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;http://old.flvurl.cn/&#34;&gt;点量视频解析&lt;/a&gt;，获取到实际的视频地址。&lt;/p&gt;
&lt;p&gt;在使用优酷或者腾讯视频时可以直接复制分享代码到文章中，如：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;&amp;lt;iframe height=498 width=510 src=&#39;https://player.youku.com/embed/XMjk4ODAyMzIyOA==&#39; frameborder=0 &#39;allowfullscreen&#39;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dplayer&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% dplayer &#34;url=http://www.nenu.edu.cn/_upload/article/videos/03/5f/7c999eed42e3aadc413d7f851f0e/0f50b3eb-9285-41d2-ac4d-6cc363651aad_B.mp4&#34;  &#34;autoplay=false&#34; &#34;preload=metadata&#34; &#34;hotkey=true&#34; %} &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;iframe&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-html&#34; data-language=&#34;html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;iframe&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;498&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;510&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;https://player.youku.com/embed/XMjk4ODAyMzIyOA==&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;frameborder&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;0&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;&#39;allowfullscreen&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;iframe&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;hexo-tag-mmedia使用&#34;&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/u2sb/hexo-tag-mmedia&#34;&gt;hexo-tag-mmedia&lt;/a&gt; 使用&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.u2sb.com/pages/7c33e5/&#34;&gt;官方教程&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;audio&#34;&gt;&lt;strong&gt;audio&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;此部分请熟读 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.w3.org/TR/2014/REC-html5-20141028/embedded-content-0.html#the-audio-element&#34;&gt;Audio 相关介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前主题中不可用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;:&lt;/code&gt; 或 &lt;code&gt;=&lt;/code&gt; 分割。&lt;/li&gt;
&lt;li&gt;所有 &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; 标签的原生参数均可添加，只要能写进去就可以。&lt;/li&gt;
&lt;li&gt;具体能否实现相关标准，取决于客户端浏览器。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-twig&#34; data-language=&#34;twig&#34;&gt;&lt;code class=&#34;language-twig&#34;&gt;&lt;span class=&#34;token twig language-twig&#34;&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;token tag-name keyword&#34;&gt;mmedia&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;audio&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;src:a.mp3&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token delimiter punctuation&#34;&gt;%}&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;line-numbers language-twig&#34; data-language=&#34;twig&#34;&gt;&lt;code class=&#34;language-twig&#34;&gt;&lt;span class=&#34;token twig language-twig&#34;&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;token tag-name keyword&#34;&gt;mmedia&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;audio&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;src:https://baidu.com/a.mp3&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;autoplay:true&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token delimiter punctuation&#34;&gt;%}&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;video&#34;&gt;video&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;此部分请熟读 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.w3.org/TR/2014/REC-html5-20141028/embedded-content-0.html#the-video-element&#34;&gt;Video 相关介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前主题中不可用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;:&lt;/code&gt; 或 &lt;code&gt;=&lt;/code&gt; 分割。&lt;/li&gt;
&lt;li&gt;所有 &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; 标签的原生参数均可添加，只要能写进去就可以。&lt;/li&gt;
&lt;li&gt;具体能否实现相关标准，取决于客户端浏览器。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-twig&#34; data-language=&#34;twig&#34;&gt;&lt;code class=&#34;language-twig&#34;&gt;&lt;span class=&#34;token twig language-twig&#34;&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;token tag-name keyword&#34;&gt;mmedia&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;video&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;src:a.mp4&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token delimiter punctuation&#34;&gt;%}&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;line-numbers language-twig&#34; data-language=&#34;twig&#34;&gt;&lt;code class=&#34;language-twig&#34;&gt;&lt;span class=&#34;token twig language-twig&#34;&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;token tag-name keyword&#34;&gt;mmedia&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;video&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;src:https://baidu.com/a.mp4&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;autoplay:true&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token delimiter punctuation&#34;&gt;%}&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;MetingJS&#34;&gt;&lt;strong&gt;MetingJS&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;此部分请熟读 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/metowolf/MetingJS#option&#34;&gt;MetingJS 文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt; option&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;default&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;id&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;require&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;song id / playlist id / album id / search keyword&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;server&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;require&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;music platform: &lt;code&gt;netease&lt;/code&gt;, &lt;code&gt;tencent&lt;/code&gt;, &lt;code&gt;kugou&lt;/code&gt;, &lt;code&gt;xiami&lt;/code&gt;, &lt;code&gt;baidu&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;type&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;require&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;song&lt;/code&gt;, &lt;code&gt;playlist&lt;/code&gt;, &lt;code&gt;album&lt;/code&gt;, &lt;code&gt;search&lt;/code&gt;, &lt;code&gt;artist&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;auto&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;options&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;music link, support: &lt;code&gt;netease&lt;/code&gt;, &lt;code&gt;tencent&lt;/code&gt;, &lt;code&gt;xiami&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;fixed&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;enable fixed mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;mini&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;enable mini mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;autoplay&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;audio autoplay&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;theme&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;#2980b9&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;main color&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;loop&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;all&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;player loop play, values: ‘all’, ‘one’, ‘none’&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;order&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;player play order, values: ‘list’, ‘random’&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;preload&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;values: ‘none’, ‘metadata’, ‘auto’&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;volume&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;0.7&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;default volume, notice that player will remember user setting, default volume will not work after user set volume themselves&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;mutex&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;prevent to play multiple player at the same time, pause other players when this player start play&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;lrc-type&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;lyric type&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;list-folded&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;indicate whether list should folded at first&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;list-max-height&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;340px&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;list max height&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;storage-name&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;metingjs&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;localStorage key that store player setting&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Documentation for APlayer can be found at https://aplayer.js.org/#/home?id=options&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;单曲&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% mmedia &#34;meting&#34; &#34;auto=https://y.qq.com/n/ryqq/songDetail/0005RQAO3FqG5K&#34; %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.css&#34;&gt;&lt;script src=&#34;https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.js&#34;&gt;&lt;/script&gt;&lt;script src=&#34;https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js&#34;&gt;&lt;/script&gt;&lt;meting-js metin=&#34;meting&#34; auto=&#34;https://y.qq.com/n/ryqq/songDetail/0005RQAO3FqG5K&#34;&gt;&lt;/meting-js&gt;

&lt;pre class=&#34;line-numbers language-twig&#34; data-language=&#34;twig&#34;&gt;&lt;code class=&#34;language-twig&#34;&gt;&lt;span class=&#34;token twig language-twig&#34;&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;token tag-name keyword&#34;&gt;mmedia&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;meting&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;auto=https://y.qq.com/n/yqq/song/001RGrEX3ija5X.html&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token delimiter punctuation&#34;&gt;%}&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&#34;line-numbers language-twig&#34; data-language=&#34;twig&#34;&gt;&lt;code class=&#34;language-twig&#34;&gt;&lt;span class=&#34;token twig language-twig&#34;&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;token tag-name keyword&#34;&gt;mmedia&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;meting&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;server=netease&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;	&lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;type=playlist&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;	&lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;id=60198&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token delimiter punctuation&#34;&gt;%}&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

#### **Aplayer**

详细参数表：

| 参数           | 默认   | 解释                                           |
| :------------- | :----- | :--------------------------------------------- |
| name           | -      | audio name                                     |
| artist         | -      | audio artist                                   |
| url            | -      | audio url                                      |
| cover          | -      | audio cover                                    |
| lrc            | -      | audio lrc                                      |
| theme          | -      | audio theme                                    |
| type           | auto   | audio type 可选 ‘auto’, ‘hls’, ‘normal’        |
| autoplay       | false  | autoplay                                       |
| loop           | ‘all’  | player loop play, values: ‘all’, ‘one’, ‘none’ |
| order          | ‘list’ | player play order, values: ‘list’, ‘random’    |
| volume         | 0.7    | default volume,                                |
| tlistMaxHeight | -      | list max height                                |

不在表格内的参数请使用下面 JSON 类型的参数。

mmedia 插件允许在 contents 部分使用 JSON 编写配置，由于允许使用 JSON5，此项配置几乎与 APlayer 完全一致。

- **单曲**

&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% mmedia &#34;aplayer&#34; &#34;name:Hotel California&#34; &#34;artist:Camille and Kennerly&#34; &#34;url:https://cdn.17lai.site/media/music/Hotel%20California/01%20Hotel%20California.mp3&#34; &#34;lrc:https://cdn.17lai.site/media/music/Hotel%20California/01%20Hotel%20California.lrc&#34; &#34;cover:https://cdn.17lai.site/media/music/Hotel%20California/Hotel%20California.webp&#34; &#34;volume:0.66&#34; %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;



&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.css&#34;&gt;&lt;script src=&#34;https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.js&#34;&gt;&lt;/script&gt;&lt;div id=&#34;mmedia-MXaLVbvXXJvhvMSo&#34;&gt;&lt;/div&gt;&lt;script&gt; var MXaLVbvXXJvhvMSo_options = JSON.parse(&#39;{\&#34;lrcType\&#34;:3,\&#34;volume\&#34;:0.66,\&#34;autoplay\&#34;:false,\&#34;audio\&#34;:[{\&#34;name\&#34;:\&#34;Hotel California\&#34;,\&#34;artist\&#34;:\&#34;Camille and Kennerly\&#34;,\&#34;url\&#34;:\&#34;https://cdn.17lai.site/media/music/Hotel%20California/01%20Hotel%20California.mp3\&#34;,\&#34;lrc\&#34;:\&#34;https://cdn.17lai.site/media/music/Hotel%20California/01%20Hotel%20California.lrc\&#34;,\&#34;cover\&#34;:\&#34;https://cdn.17lai.site/media/music/Hotel%20California/Hotel%20California.webp\&#34;}]}&#39;); MXaLVbvXXJvhvMSo_options.container = document.getElementById(&#34;mmedia-MXaLVbvXXJvhvMSo&#34;); const ap_MXaLVbvXXJvhvMSo = new APlayer(MXaLVbvXXJvhvMSo_options); &lt;/script&gt;

- **列表**

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.css&#34;&gt;&lt;script src=&#34;https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.js&#34;&gt;&lt;/script&gt;&lt;div id=&#34;mmedia-PRvzwsNEAGnbMAyL&#34;&gt;&lt;/div&gt;&lt;script&gt; var PRvzwsNEAGnbMAyL_options = JSON.parse(&#39;{\&#34;lrcType\&#34;:3,\&#34;volume\&#34;:0.8,\&#34;autoplay\&#34;:false,\&#34;audio\&#34;:[{\&#34;name\&#34;:\&#34;Hotel California\&#34;,\&#34;artist\&#34;:\&#34;Camille and Kennerly\&#34;,\&#34;url\&#34;:\&#34;https://cdn.17lai.site/media/music/Hotel%20California/01%20Hotel%20California.mp3\&#34;,\&#34;cover\&#34;:\&#34;https://cdn.17lai.site/media/music/Hotel%20California/Hotel%20California.webp\&#34;,\&#34;lrc\&#34;:\&#34;https://cdn.17lai.site/media/music/Hotel%20California/01%20Hotel%20California.lrc\&#34;,\&#34;theme\&#34;:\&#34;#ebd0c2\&#34;},{\&#34;name\&#34;:\&#34;Sold Out\&#34;,\&#34;artist\&#34;:\&#34;Diamonds\&#34;,\&#34;url\&#34;:\&#34;https://cdn.17lai.site/media/music/Diamonds/05%20Sold%20Out.flac\&#34;,\&#34;cover\&#34;:\&#34;https://cdn.17lai.site/media/music/Diamonds/Diamonds.jpg\&#34;,\&#34;theme\&#34;:\&#34;#ebd0c2\&#34;},{\&#34;name\&#34;:\&#34;The Final Bell\&#34;,\&#34;artist\&#34;:\&#34;Rocky_Original Motion Picture Score\&#34;,\&#34;url\&#34;:\&#34;https://cdn.17lai.site/media/music/Rocky_%20Original%20Motion%20Picture%20Score/12%20Bill%20Conti%20-%20The%20Final%20Bell.mp3\&#34;,\&#34;cover\&#34;:\&#34;https://cdn.17lai.site/media/music/Rocky_%20Original%20Motion%20Picture%20Score/Rocky_%20Original%20Motion%20Picture%20Score.jpg\&#34;,\&#34;theme\&#34;:\&#34;#ebd0c2\&#34;},{\&#34;name\&#34;:\&#34; Croatian Rhapsody\&#34;,\&#34;artist\&#34;:\&#34;The Piano Player\&#34;,\&#34;url\&#34;:\&#34;https://cdn.17lai.site/media/music/The%20Piano%20Player/11%20Croatian%20Rhapsody.mp3\&#34;,\&#34;cover\&#34;:\&#34;https://cdn.17lai.site/media/music/The%20Piano%20Player/The%20Piano%20Player.jpg\&#34;,\&#34;theme\&#34;:\&#34;#ebd0c2\&#34;}]}&#39;); PRvzwsNEAGnbMAyL_options.container = document.getElementById(&#34;mmedia-PRvzwsNEAGnbMAyL&#34;); const ap_PRvzwsNEAGnbMAyL = new APlayer(PRvzwsNEAGnbMAyL_options); &lt;/script&gt;
&lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% mmedias &#34;aplayer&#34; &#34;autoplay:false&#34; %}
{
  &#34;volume&#34;: 0.8,
  &#34;audio&#34;:
  [
    {
      &#34;name&#34;: &#34;name1&#34;,
      &#34;artist&#34;: &#34;artist1&#34;,
      &#34;url&#34;: &#34;url1.mp3&#34;,
      &#34;cover&#34;: &#34;cover1.jpg&#34;,
      &#34;lrc&#34;: &#34;lrc1.lrc&#34;,
      &#34;theme&#34;: &#34;#ebd0c2&#34;
    },
    {
      &#34;name&#34;: &#34;name2&#34;,
      &#34;artist&#34;: &#34;artist2&#34;,
      &#34;url&#34;: &#34;url2.mp3&#34;,
      &#34;cover&#34;: &#34;cover2.jpg&#34;,
      &#34;lrc&#34;: &#34;lrc2.lrc&#34;,
      &#34;theme&#34;: &#34;#46718b&#34;
    }
  ]
}
{% endmmedias %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;Dplayer&#34;&gt;Dplayer&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;此部分请熟读 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;http://dplayer.js.org/&#34;&gt;DPlayer 文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pangu&gt; &lt;/pangu&gt;&lt;pre class=&#34;line-numbers language-twig&#34; data-language=&#34;twig&#34;&gt;&lt;code class=&#34;language-twig&#34;&gt;&lt;span class=&#34;token twig language-twig&#34;&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;token tag-name keyword&#34;&gt;mmedia&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;dplayer&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;url:a.mp4&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token delimiter punctuation&#34;&gt;%}&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;line-numbers language-twig&#34; data-language=&#34;twig&#34;&gt;&lt;code class=&#34;language-twig&#34;&gt;&lt;span class=&#34;token twig language-twig&#34;&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;token tag-name keyword&#34;&gt;mmedias&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;dplayer&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;flv:&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;url:https://dandoc.u2sb.com/video/%E5%AE%89%E8%A3%85/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85.mp4&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token delimiter punctuation&#34;&gt;%}&lt;/span&gt;&lt;/span&gt;
{
  &#34;contextmenu&#34;:
  [
    {
      text: &#34;custom1&#34;,
      link: &#34;https://github.com/DIYgod/DPlayer&#34;
    }
  ]
}
&lt;span class=&#34;token twig language-twig&#34;&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;token tag-name keyword&#34;&gt;endmmedias&lt;/span&gt; &lt;span class=&#34;token delimiter punctuation&#34;&gt;%}&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% mmedia &#34;dplayer&#34; &#34;url:https://sample-videos.com/video123/mp4/720/big_buck_bunny_720p_1mb.mp4&#34; %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;script src=&#34;https://cdn.jsdelivr.net/npm/dplayer@1/dist/DPlayer.min.js&#34;&gt;&lt;/script&gt;&lt;div id=&#34;mmedia-PlnuoNZmCstgpWAu&#34;&gt;&lt;/div&gt;&lt;script&gt; var PlnuoNZmCstgpWAu_options = JSON.parse(&#39;{\&#34;video\&#34;:{\&#34;url\&#34;:\&#34;https://sample-videos.com/video123/mp4/720/big_buck_bunny_720p_1mb.mp4\&#34;}}&#39;); PlnuoNZmCstgpWAu_options.container = document.getElementById(&#34;mmedia-PlnuoNZmCstgpWAu&#34;); const dp_PlnuoNZmCstgpWAu = new DPlayer(PlnuoNZmCstgpWAu_options); &lt;/script&gt;

&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% mmedias &#34;dplayer&#34; %}
{
  video: 
  {
    url: &#34;https://sample-videos.com/video123/mp4/720/big_buck_bunny_720p_1mb.mp4&#34;
  }
}
{% endmmedias %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

#### 哔哩哔哩

详细参数表：

| 参数            | 默认                                               | 解释                                                    |
| :-------------- | :------------------------------------------------- | :------------------------------------------------------ |
| aid             | -                                                  | aid                                                     |
| bvid            | -                                                  | bvid，与 aid 同时出现时以 bvid 为准                     |
| page            | 1                                                  | page                                                    |
| danmaku         | true                                               | 是否有弹幕 ture or false                                |
| allowfullscreen | allowfullscreen                                    | 允许全屏， allowfullscreen 或 true 允许，其他选项不允许 |
| sandbox         | 见 [配置](https://www.u2sb.com/pages/19d343/#配置) | iframe sandbox                                          |
| width           | 100%                                               | css 属性                                                |
| max_width       | 850px                                              | css 属性                                                |
| margin          | auto                                               | css 属性                                                |

mmedia 插件允许在 contents 部分使用 JSON 编写配置，使用 JSON5 标准。

&lt;style&gt;.bbplayer{width: 100%; max-width: 850px; margin: auto}&lt;/style&gt;&lt;div class=&#34;bbplayer&#34;&gt;&lt;iframe class=&#34;bbplayer&#34; id=&#34;mmedia-vOOxyYILvVdoZTAR&#34; src=&#34;https://player.bilibili.com/player.html?bvid=BV1fs411S7u7&amp;amp;page=1&amp;amp;high_quality=1&amp;amp;danmaku=true&#34; allowfullscreen=&#34;allowfullscreen&#34; scrolling=&#34;no&#34; border=&#34;0&#34; frameborder=&#34;0&#34; framespacing=&#34;0&#34; sandbox=&#34;allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups&#34;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;script&gt; document.getElementById(&#34;mmedia-vOOxyYILvVdoZTAR&#34;).style.height=document.getElementById(&#34;mmedia-vOOxyYILvVdoZTAR&#34;).scrollWidth*0.76+&#34;px&#34;;
    window.onresize = function(){
      document.getElementById(&#34;mmedia-vOOxyYILvVdoZTAR&#34;).style.height=document.getElementById(&#34;mmedia-vOOxyYILvVdoZTAR&#34;).scrollWidth*0.76+&#34;px&#34;;
    }; &lt;/script&gt;

&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% mmedia &#34;bilibili&#34; &#34;bvid:BV1fs411S7u7&#34; %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

#### 西瓜视频

&lt;pre class=&#34;line-numbers language-twig&#34; data-language=&#34;twig&#34;&gt;&lt;code class=&#34;language-twig&#34;&gt;&lt;span class=&#34;token twig language-twig&#34;&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;token tag-name keyword&#34;&gt;mmedia&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;xigua&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;xid=6925997698269053453&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token delimiter punctuation&#34;&gt;%}&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&#34;line-numbers language-twig&#34; data-language=&#34;twig&#34;&gt;&lt;code class=&#34;language-twig&#34;&gt;&lt;span class=&#34;token twig language-twig&#34;&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;token tag-name keyword&#34;&gt;mmedia&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;xigua&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;xid:6925997698269053453&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;autoplay:true&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token delimiter punctuation&#34;&gt;%}&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

详细参数表：

| 参数            | 默认                                               | 解释                                                    |
| :-------------- | :------------------------------------------------- | :------------------------------------------------------ |
| xid             | -                                                  | 西瓜视频的 ID，就是那一串数字                           |
| id              | -                                                  | 一般情况下不需要填写                                    |
| autoplay        | false                                              | autoplay                                                |
| startTime       | 0                                                  | 开始时间，秒                                            |
| allowfullscreen | allowfullscreen                                    | 允许全屏， allowfullscreen 或 true 允许，其他选项不允许 |
| sandbox         | 见 [配置](https://www.u2sb.com/pages/a0c4a7/#配置) | iframe sandbox                                          |
| width           | 100%                                               | css 属性                                                |
| max_width       | 850px                                              | css 属性                                                |
| margin          | auto                                               | css 属性                                                |

&lt;style&gt;.xgplayer{width: 100%; max-width: 850px; margin: auto}&lt;/style&gt;&lt;div class=&#34;xgplayer&#34;&gt;&lt;iframe class=&#34;xgplayer&#34; id=&#34;mmedia-srutcExQZEqVaMrZ&#34; src=&#34;https://www.ixigua.com/iframe/6925997698269053453?autoplay=0&amp;amp;startTime=undefined&#34; allowfullscreen=&#34;allowfullscreen&#34; scrolling=&#34;no&#34; border=&#34;0&#34; frameborder=&#34;0&#34; framespacing=&#34;0&#34; sandbox=&#34;allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups&#34;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;script&gt; document.getElementById(&#34;mmedia-srutcExQZEqVaMrZ&#34;).style.height=document.getElementById(&#34;mmedia-srutcExQZEqVaMrZ&#34;).scrollWidth*0.7+&#34;px&#34;;
    window.onresize = function(){
      document.getElementById(&#34;mmedia-srutcExQZEqVaMrZ&#34;).style.height=document.getElementById(&#34;mmedia-srutcExQZEqVaMrZ&#34;).scrollWidth*0.7+&#34;px&#34;;
    }; &lt;/script&gt;

&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% mmedia &#34;xigua&#34; &#34;xid=6925997698269053453&#34; %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

#### ArtPlayer

&amp;gt; 此部分请熟读 [ArtPlayer 文档](https://artplayer.org/document/#/options)

- 使用 `:` 或 `=` 分割。

详细参数表：

| 参数     | 默认  | 解释           |
| :------- | :---- | :------------- |
| url      | -     | url            |
| title    | -     | title          |
| poster   | -     | poster         |
| type     | -     | type           |
| autoplay | false | video autoplay |
| loop     | false | video loop     |
| volume   | 0.7   | default volume |
| style    | -     | style          |

上面有一个比较特殊的参数 flv，这里单独解释一下，这个参数是用于引入其他 js 文件的，目前支持的有： `hls` `dash` `shaka_dash` `flv` `webtorrent` ，上述参数可多个一起使用，如果后面带有 js 地址，将直接使用，否则将使用 `_config.yml` 配置或插件默认配置，如：

&lt;pre class=&#34;line-numbers language-twig&#34; data-language=&#34;twig&#34;&gt;&lt;code class=&#34;language-twig&#34;&gt;&lt;span class=&#34;token twig language-twig&#34;&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;token tag-name keyword&#34;&gt;mmedia&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;artplayer&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;flv:&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;url:a.flv&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token delimiter punctuation&#34;&gt;%}&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&#34;line-numbers language-twig&#34; data-language=&#34;twig&#34;&gt;&lt;code class=&#34;language-twig&#34;&gt;&lt;span class=&#34;token twig language-twig&#34;&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;token tag-name keyword&#34;&gt;mmedias&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;artplayer&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;flv:&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;hls:https://cdn.jsdelivr.net/npm/hls.js/dist/hls.min.js&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token delimiter punctuation&#34;&gt;%}&lt;/span&gt;&lt;/span&gt;
{
  ...
}
&lt;span class=&#34;token twig language-twig&#34;&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;token tag-name keyword&#34;&gt;endmmedias&lt;/span&gt; &lt;span class=&#34;token delimiter punctuation&#34;&gt;%}&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&#34;line-numbers language-twig&#34; data-language=&#34;twig&#34;&gt;&lt;code class=&#34;language-twig&#34;&gt;&lt;span class=&#34;token twig language-twig&#34;&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;token tag-name keyword&#34;&gt;mmedia&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;artplayer&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;url:https://dandoc.u2sb.com/video/%E5%AE%89%E8%A3%85/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85.mp4&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token delimiter punctuation&#34;&gt;%}&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&#34;line-numbers language-twig&#34; data-language=&#34;twig&#34;&gt;&lt;code class=&#34;language-twig&#34;&gt;&lt;span class=&#34;token twig language-twig&#34;&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;token tag-name keyword&#34;&gt;mmedias&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;artplayer&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;flv:&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;  &lt;span class=&#34;token delimiter punctuation&#34;&gt;%}&lt;/span&gt;&lt;/span&gt;
{
  url: &#34;https://dandoc.u2sb.com/video/%E5%AE%89%E8%A3%85/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85.mp4&#34;
}
&lt;span class=&#34;token twig language-twig&#34;&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;token tag-name keyword&#34;&gt;endmmedias&lt;/span&gt; &lt;span class=&#34;token delimiter punctuation&#34;&gt;%}&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% mmedia &#34;artplayer&#34; &#34;url:https://sample-videos.com/video123/mp4/720/big_buck_bunny_720p_2mb.mp4&#34; %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;script src=&#34;https://cdn.jsdelivr.net/npm/artplayer@3/dist/artplayer.js&#34;&gt;&lt;/script&gt;&lt;div id=&#34;mmedia-uZmgwfMrpcvgOBfu&#34; style=&#34;width:100%;height:650px;max-width:1200px;center&#34;&gt;&lt;/div&gt;&lt;script&gt; var uZmgwfMrpcvgOBfu_options = JSON.parse(&#39;{\&#34;style\&#34;:\&#34;width:100%;height:650px;max-width:1200px;center\&#34;,\&#34;autoSize\&#34;:true,\&#34;autoMini\&#34;:true,\&#34;fullscreen\&#34;:true,\&#34;fullscreenWeb\&#34;:true,\&#34;url\&#34;:\&#34;https://sample-videos.com/video123/mp4/720/big_buck_bunny_720p_2mb.mp4\&#34;}&#39;); uZmgwfMrpcvgOBfu_options.container = &#34;#mmedia-uZmgwfMrpcvgOBfu&#34;; const art_uZmgwfMrpcvgOBfu = new Artplayer(uZmgwfMrpcvgOBfu_options); &lt;/script&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;{% mmedias &#34;artplayer&#34; %}
{
  url: &#34;https://sample-videos.com/video123/mp4/720/big_buck_bunny_720p_2mb.mp4&#34;
}
{% endmmedias %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;脑图&#34;&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/MaxChang3/hexo-markmap&#34;&gt;脑图&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://zhangmaimai.com/2021/02/23/hexo-mindmap-plugin/&#34;&gt;原作者记录&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

    &lt;div class=&#34;markmap-container&#34; style=&#34;height:250px&#34;&gt;
      &lt;svg data=&#34;{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:1,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[0,1]},&amp;quot;v&amp;quot;:&amp;quot;思维导图？&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:2,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[1,2]},&amp;quot;v&amp;quot;:&amp;quot;使用现有的插件或组件？&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[2,3]},&amp;quot;v&amp;quot;:&amp;quot;Mermaid：更偏向流程图&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[3,4]},&amp;quot;v&amp;quot;:&amp;quot;Kityminder&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[4,5]},&amp;quot;v&amp;quot;:&amp;quot;现成hexo插件有些小问题。&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[5,6]},&amp;quot;v&amp;quot;:&amp;quot;二次开发，失败&amp;quot;}]}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:2,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[6,7]},&amp;quot;v&amp;quot;:&amp;quot;找寻相关项目？&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[8,9]},&amp;quot;v&amp;quot;:&amp;quot;Markmap大法！&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[9,10]},&amp;quot;v&amp;quot;:&amp;quot;直接弄，失败&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[10,11]},&amp;quot;v&amp;quot;:&amp;quot;使用jsdom，失败&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[11,12]},&amp;quot;v&amp;quot;:&amp;quot;寻找现成库，成功&amp;quot;}]}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:2,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[12,13]},&amp;quot;v&amp;quot;:&amp;quot;咕咕咕咕咕咕咕咕咕咕咕咕&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:2,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[13,14]},&amp;quot;v&amp;quot;:&amp;quot;凑一下行数让版面好看点&amp;quot;}]}&#34;&gt;&lt;/svg&gt;
    &lt;/div&gt;
  
&lt;pangu&gt; &lt;/pangu&gt;&lt;pre class=&#34;line-numbers language-markdown&#34; data-language=&#34;markdown&#34;&gt;&lt;code class=&#34;language-markdown&#34;&gt;{% markmap 250px %}
&lt;span class=&#34;token title important&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;#&lt;/span&gt; 思维导图？&lt;/span&gt;
&lt;span class=&#34;token title important&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;##&lt;/span&gt; 使用现有的插件或组件？&lt;/span&gt;
&lt;span class=&#34;token title important&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;###&lt;/span&gt; Mermaid：更偏向流程图&lt;/span&gt;
&lt;span class=&#34;token title important&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;###&lt;/span&gt; Kityminder&lt;/span&gt;
&lt;span class=&#34;token title important&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;####&lt;/span&gt; 现成hexo插件有些小问题。&lt;/span&gt;
&lt;span class=&#34;token title important&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;####&lt;/span&gt; 二次开发，失败&lt;/span&gt;
&lt;span class=&#34;token title important&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;##&lt;/span&gt; 找寻相关项目？&lt;/span&gt;
&lt;span class=&#34;token title important&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;###&lt;/span&gt; Markmap大法！&lt;/span&gt;
&lt;span class=&#34;token title important&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;####&lt;/span&gt; 直接弄，失败&lt;/span&gt;
&lt;span class=&#34;token title important&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;####&lt;/span&gt; 使用jsdom，失败&lt;/span&gt;
&lt;span class=&#34;token title important&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;####&lt;/span&gt; 寻找现成库，成功&lt;/span&gt;
&lt;span class=&#34;token title important&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;##&lt;/span&gt; 咕咕咕咕咕咕咕咕咕咕咕咕&lt;/span&gt;
&lt;span class=&#34;token title important&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;##&lt;/span&gt; 凑一下行数让版面好看点&lt;/span&gt;
{% endmarkmap %}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;系列教程-4&#34;&gt;&lt;strong&gt;系列教程&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;hexo 系列&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hexo 独立博客搭建 &lt;a href=&#34;https://blog.17lai.site/posts/40300608/&#34;&gt;[三万字教程] 基于 Hexo 的 matery 主题搭建博客并深度优化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt; docker 环境&lt;/li&gt;
&lt;li&gt; hexo 使用入门&lt;/li&gt;
&lt;li&gt; hexo 基础配置&lt;/li&gt;
&lt;li&gt;自定义修改&lt;/li&gt;
&lt;li&gt; hexo 部署&lt;/li&gt;
&lt;li&gt;个性定义&lt;/li&gt;
&lt;li&gt;性能优化&lt;/li&gt;
&lt;li&gt;常见问题 &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/cf0f47fd/&#34;&gt;Hexo Markdown 以及各种插件功能测试&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt; markdown 各种其它语法插件&lt;/li&gt;
&lt;li&gt; latex 公式支持&lt;/li&gt;
&lt;li&gt; mermaid 图表&lt;/li&gt;
&lt;li&gt; plant uml 图表&lt;/li&gt;
&lt;li&gt; URL 卡片&lt;/li&gt;
&lt;li&gt; bilibili 卡片&lt;/li&gt;
&lt;li&gt; github 卡片&lt;/li&gt;
&lt;li&gt;豆瓣卡片&lt;/li&gt;
&lt;li&gt;插入音乐和视频&lt;/li&gt;
&lt;li&gt;插入脑图&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;笔记系列&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/a8535f26/&#34;&gt;完美笔记进化论&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;经历了很长时间，使用了各种各样的方案，最终选择了一种相对完美的方式。docker 私有部署运行的 joplin，使用 markdown 语法，github 作为图床，picgo 作为图像自动上传后端，pypora 作为 MD 编辑器，Snipaste 作为截图工具。后备 gitlab ee selfhost 备份，自建图床 VPS 多线负载均衡。cloudflare partner cdn 加速，jsdelivr 加速。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pigo 图床搭建与配置&lt;/li&gt;
&lt;li&gt; Joplin 教程&lt;/li&gt;
&lt;li&gt; Snipaste 截图工具&lt;/li&gt;
&lt;li&gt; Typora 作为 Markdown 编辑器最强 &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://blog.17lai.fun/posts/e6086437/&#34;&gt;Joplin 入门指南 &amp;amp; 实践方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt; Joplin 和使用&lt;/li&gt;
&lt;li&gt; Joplin 同步与备份&lt;/li&gt;
&lt;li&gt; Joplin 导入与导出 &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/92d347d6/&#34;&gt;Joplin 插件以及其 Markdown 语法。All in One!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Joplin 简明教程&lt;/li&gt;
&lt;li&gt; markdown 语法简明教程 &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/e3ee7f8b/&#34;&gt;Joplin 插件使用推荐&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;教你用各种插件打造一个强大的笔记工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/1802a8a7/&#34;&gt;为知笔记私有化 Docker 部署&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如何部署自己私有的为知笔记。&lt;/li&gt;
&lt;li&gt;其实博主更推荐私有部署 joplin&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr class=&#34;footnotes-sep&#34;&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;ol class=&#34;footnotes-list&#34;&gt;
&lt;li id=&#34;fn1&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;Here is the footnote. &lt;a href=&#34;#fnref1&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn2&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;Here&#39;s one with multiple blocks.&lt;/p&gt;
&lt;p&gt;Subsequent paragraphs are indented to show that they &lt;a href=&#34;#fnref2&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/bilicard.css&#34; type=&#34;text/css&#34;&gt;
    &lt;style&gt;.markmap-container{display:flex;justify-content:center;margin:0 auto;width:90%;height:500px}.markmap-container svg{width:100%;height:100%}@media(max-width:768px){.markmap-container{height:400px}}&lt;/style&gt;
    &lt;script src=&#34;https://cdn.jsdelivr.net/npm/d3@6&#34;&gt;&lt;/script&gt;
    &lt;script src=&#34;https://cdn.jsdelivr.net/npm/markmap-view&#34;&gt;&lt;/script&gt;
    &lt;script&gt; document.querySelectorAll(&#39;.markmap-container&gt;svg&#39;).forEach(mindmap =&gt; markmap.Markmap.create(mindmap, null, JSON.parse(mindmap.getAttribute(&#39;data&#39;))))&lt;/script&gt;
  </content>
        <category term="hexo" />
        <category term="mermaid" />
        <category term="plantuml" />
        <category term="mathjax" />
        <updated>2021-10-20T01:25:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.17lai.site/posts/44557ab0/</id>
        <title>第一次使用 VS CODE 时你应该指导的一切配置</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/44557ab0/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;前言-2&#34;&gt;前言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;文章标题：《第一次使用 VS Code 时你应该知道的一切配置》。本文的最新内容，更新于 2021-10-09。大家完全不用担心这篇文章会过时，因为随着 VS Code 的版本更新和插件更新，本文也会随之更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;本文的最新内容，也会在 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/qianguyihao/Web/blob/master/00-%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/01-VS%20Code%E7%9A%84%E4%BD%BF%E7%94%A8.md&#34;&gt;GitHub&lt;/a&gt; 上同步更新，欢迎 star。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;VS Code 软件实在是太酷、太好用了，越来越多的新生代互联网民工正在使用它。&lt;/p&gt;
&lt;p&gt;前端男神&lt;strong&gt;尤雨溪&lt;/strong&gt;大大这样评价 VS Code：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201152.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;有一点你可能会感到惊讶：VS Code 这款软件本身，是用 JavaScript 语言编写的（具体请自行查阅基于 JS 的 PC 客户端开发框架 &lt;code&gt;Electron&lt;/code&gt;）。Jeff Atwood 在 2007 年提出了著名的 Atwood 定律：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;任何能够用 JavaScript 实现的应用系统，最终都必将用 JavaScript 实现&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Jeff Atwood 这个人是谁不重要（他是 Stack Overflow 网站的联合创始人），重要的是这条定律。&lt;/p&gt;
&lt;p&gt;前端目前是处在春秋战国时代，各路英雄豪杰成为后浪，各种框架工具层出不穷，VS Code 软件无疑是大前端时代最骄傲的工具。&lt;/p&gt;
&lt;p&gt;如果你是做前端开发（JavaScript 编程语言为主），则完全可以将 VS Code 作为「&lt;strong&gt;主力开发工具&lt;/strong&gt;」。这款软件是为前端同学量身定制的，开箱即用。&lt;/p&gt;
&lt;p&gt;如果你是做其他语言方向的开发，并且不需要太复杂的集成开发环境，那么，你可以把 VS Code 作为「&lt;strong&gt;代码编辑器&lt;/strong&gt;」来使用，纵享丝滑。&lt;/p&gt;
&lt;p&gt;甚至是一些写文档、写作的同学，也经常把 VS Code 作为 markdown &lt;strong&gt;写作工具&lt;/strong&gt;，毫无违和感。&lt;/p&gt;
&lt;p&gt;退而求其次，即便你不属于以上任何范畴，你还可以把 VS Code 当作最简单的&lt;strong&gt;文本编辑器&lt;/strong&gt;来使用，完胜 Windows 系统自带的记事本。&lt;/p&gt;
&lt;p&gt;写下这篇文章，是顺势而为。&lt;/p&gt;
&lt;h2 id=&#34;一、惊艳登场：VS-Code-的介绍&#34;&gt;一、惊艳登场：VS Code 的介绍&lt;/h2&gt;
&lt;p&gt;VS Code 的全称是 Visual Studio Code，是一款开源的、免费的、跨平台的、高性能的、轻量级的代码编辑器。它在性能、语言支持、开源社区方面，都做得很不错。&lt;/p&gt;
&lt;p&gt;微软有两种软件：一种是 VS Code，一种是其他软件。&lt;/p&gt;
&lt;p&gt;在 2015 年 4 月 29 日的微软 Build 开发者大会上，微软宣布推出 VS Code 之后，这个轻量级的编辑器成为全球无数开发者们最喜爱的开发工具。VS Code 基于开源且跨平台的理念，每月都会进行迭代，并提供每天发布的 insider 版本（insider 是微软的一种公测计划，类似于国内软件所说的内测版）。它拥有至少几万个插件，生态极为活跃和丰富。&lt;/p&gt;
&lt;h3 id=&#34;IDE-与-编辑器的对比&#34;&gt;IDE 与 编辑器的对比&lt;/h3&gt;
&lt;p&gt;IDE 和编辑器是有区别的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;IDE&lt;/strong&gt;（Integrated Development Environment，集成开发环境）：对代码有较好的智能提示和相互跳转，同时侧重于工程项目，对项目的开发、调试工作有较好的图像化界面的支持，因此比较笨重。比如 Eclipse 的定位就是 IDE。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;编辑器&lt;/strong&gt;：要相对轻量许多，侧重于文本的编辑。比如 Sublime Text 的定位就是编辑器。再比如 Windows 系统自带的「记事本」就是最简单的编辑器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要注意的是，VS Code 的定位是&lt;strong&gt;编辑器&lt;/strong&gt;，而非 IDE ，但 VS Code 又比一般的编辑器的功能要丰富许多。可以这样理解：VS Code 的体量是介于编辑器和 IDE 之间。VS Code 的使命，是让开发者在编辑器里拥有 IDE 那样的开发体验。&lt;/p&gt;
&lt;p&gt;VS Code 流行起来之后，使用 Sublime Text、Atom 这类编辑器软件的人，自然就越来越少了。&lt;/p&gt;
&lt;h3 id=&#34;VS-Code-的特点&#34;&gt;VS Code 的特点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;跨平台：支持 MacOS、Windows 和 Linux 等多个平台。在这多种平台下，拥有一致的用户界面和开发体验。&lt;/li&gt;
&lt;li&gt;开源：VS Code 的源代码以 MIT 协议开源。不仅代码开源，而且整个产品的开发计划和发布管理也都是开源的。VS Code 团队每年都会在 GitHub 的 Wiki 上发布 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/microsoft/vscode/wiki/Roadmap&#34;&gt;Roadmap&lt;/a&gt;，列出一整年的规划图。VS Code 软件的官方文档也托管在了 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/Microsoft/vscode-docs&#34;&gt;GitHub&lt;/a&gt; 上。&lt;/li&gt;
&lt;li&gt;自带终端、图形化的调试工具、Git 版本控制。&lt;/li&gt;
&lt;li&gt;插件扩展：支持第三方插件，功能强大。既有中心化的插件市场，也可以直接在 VS Code 里搜索你想要的插件。&lt;/li&gt;
&lt;li&gt;生态：社区生态活跃且丰富，社区氛围浓厚。&lt;/li&gt;
&lt;li&gt;自带  emmet：支持代码自动补全，快速生成简单的语法结构。要知道，这个功能在 Sublime Text 中，得先安装插件才行。&lt;/li&gt;
&lt;li&gt;语法支持：VS Code 自带了 JavaScript、TypeScript 和 Node.js 的&lt;strong&gt;语法支持&lt;/strong&gt;，包括：&lt;strong&gt;语法高亮、代码智能提示和补全、括号匹配、颜色区分、代码片段提示&lt;/strong&gt;等。也就是说，你在书写 JS 和 TS 时，这些语法支持都是自带的。其他的一些语言，你需要先安装相应的&lt;strong&gt;扩展包&lt;/strong&gt;插件，就出现语法支持。&lt;/li&gt;
&lt;li&gt;在修改配置方面，既有图形化的配置界面，也有 基于 JSON 文件的配置方式，满足不同人群的使用习惯。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;前端利器之争：-VS-Code-与-WebStorm&#34;&gt;前端利器之争： VS Code 与 WebStorm&lt;/h3&gt;
&lt;p&gt;前端小白最喜欢问的一个问题是：哪个编辑器 / IDE 好用？是 VS Code 还是 WebStorm （WebStorm 其实是 IntelliJ IDEA 的定制版）？我来做个对比：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;哪个更酷&lt;/strong&gt;：显然 VS Code 更酷。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内存占用情况&lt;/strong&gt;：根据我的观察，VS Code 是很占内存的（尤其是当你打开多个窗口的时候），但如果你的内存条够用，使用起来是不会有任何卡顿的感觉的。相比之下，IntelliJ IDEA 不仅非常占内存，而且还非常卡顿。如果你想换个既轻量级、又不占内存的编辑器，最好还是使用「Sublime Text」编辑器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用比例&lt;/strong&gt;：当然是 VS Code 更胜一筹。先不说别的，我就拿数据说话，我目前所在的研发团队有 200 人左右（120 个后台、80 个前端），他们绝大部分人都在用 VS Code 编码，妥妥的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，如果你以后还问这个问题，那就真有些掉底了。&lt;/p&gt;
&lt;h3 id=&#34;VS-Code-的技术栈、核心组件&#34;&gt;VS Code 的技术栈、核心组件&lt;/h3&gt;
&lt;p&gt;了解 VS Code 的技术栈和核心组件，可以让我们对 VS Code 有更深入的认识。此小段，了解即可。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发框架：Electron。Electron 可以使用 Node.js + JS 这样的技术栈开发桌面 GUI 应用程序。&lt;/li&gt;
&lt;li&gt;编辑器：Monaco Editor。Monaco Editor 是一款开源的在线代码编辑器，是 &lt;strong&gt;VS Code 浏览器版本&lt;/strong&gt;的最核心组件。&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://zhuanlan.zhihu.com/p/88828576&#34;&gt;#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;编程语言：TypeScript。TypeScript 是  JavaScript 的严格超集。TS 在 JS 的基础上添加了许多功能，引入了声明文件，而且支持类型扩展。TS 适合长期的、多人开发的大型项目开发。&lt;/li&gt;
&lt;li&gt;让编辑器支持语言功能：Language Server Protocol （LSP） 语言服务协议。LSP 是编辑器 / IDE 与语言服务器之间的一种协议，通过 JSON-PRC 传输消息，可以让编辑器嵌入并支持各种编程语言。开发者可以在编辑器中使用各种语言来编写程序。&lt;/li&gt;
&lt;li&gt;让编辑器支持调试功能：Debug Adapter Protocol（DAP）。DAP 是基于 JSON 的协议，它抽象了开发工具与调试工具质检的通信。&lt;/li&gt;
&lt;li&gt;集成终端：Xterm.js。VS Code 的集成终端是基于开源项目 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/xtermjs/xterm.js/&#34;&gt;Xterm.js&lt;/a&gt; 进行开发的。Xterm.js 是一个使用 TS 开发的终端组件。另外，Xterm.js 并不是直接下来下来就能用的终端应用，它只是一个前端组件，可以与 bash 这样的进程进行连接，然后让用户通过  Xterm.js 进行交互。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;VS-Code-的安装&#34;&gt;VS Code 的安装&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VS Code 官网：&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://code.visualstudio.com&#34;&gt;https://code.visualstudio.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;VS Code 的安装很简单，直接去官网下载安装包，然后双击安装即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201230.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图中，直接点击 download，一键下载安装即可。&lt;/p&gt;
&lt;p&gt;VS Code 支持以下平台：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201146.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;安装完成后的界面如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201237.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;VS  Code 被分为以下五个区域：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编辑器&lt;/li&gt;
&lt;li&gt;侧边栏&lt;/li&gt;
&lt;li&gt;状态栏&lt;/li&gt;
&lt;li&gt;活动栏&lt;/li&gt;
&lt;li&gt;面板&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;VS Code 在功能上非常克制，只包含了大多数开发流程中所需要的基础模块，包括：编辑器、文件管理、窗口管理、首选项设置、终端等。&lt;/p&gt;
&lt;p&gt;你需要根据具体需要安装额外的组件或者插件。比如说，如果开发 TS 项目，则需要安装 TS 编译器、ESLint、TSLint 等编译工具。如果开发 C 语言项目，则需要安装 gcc、Clang 等编辑工具。&lt;/p&gt;
&lt;h2 id=&#34;二、崭露锋芒：VS-Code-快捷键&#34;&gt;二、崭露锋芒：VS Code 快捷键&lt;/h2&gt;
&lt;p&gt;VS Code 用得熟不熟，首先就看你是否会用快捷键。以下列出的内容，都是常用快捷键，而加粗部分的快捷键，使用频率则非常高。&lt;/p&gt;
&lt;p&gt;任何工具，掌握 20% 的技能，足矣应对 80% 的工作。既然如此，你可能会问：那就只保留 20% 的特性，不久可以满足 80% 的用户了吗？&lt;/p&gt;
&lt;p&gt;但我想说的是：&lt;strong&gt;那从来都不是同样的 20%&lt;/strong&gt;，每个人都会用到不同的功能。&lt;/p&gt;
&lt;p&gt;掌握下面这些高频核心快捷键，你和你的工具，足矣露出锋芒。&lt;/p&gt;
&lt;h3 id=&#34;1、工作区快捷键&#34;&gt;1、工作区快捷键&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Mac 快捷键&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt; Win 快捷键&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;作用&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt; Cmd + Shift + P&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Ctrl + Shift + P&lt;/strong&gt;，F1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 显示命令面板&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt; Cmd + B&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Ctrl + B&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 显示 / 隐藏侧边栏&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;很实用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Cmd + \&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Ctrl + \&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;拆分为多个编辑器&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;【重要】抄代码利器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt; Cmd + 1、2&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Ctrl + 1、2&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 聚焦到第 1、第 2 个编辑器&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;同上重要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt; Cmd + +、Cmd + -&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;ctrl + +、ctrl + -&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 将工作区放大 / 缩小（包括代码字体、左侧导航栏）&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在投影仪场景经常用到&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Cmd + J&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ctrl + J&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 显示 / 隐藏控制台&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt; Cmd + Shift + N&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Ctrl + Shift + N&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 重新开一个软件的窗口&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;很常用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Cmd + Shift + W&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ctrl + Shift + W&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 关闭软件的当前窗口&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Cmd + N&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ctrl + N&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 新建文件&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Cmd + W&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ctrl + W&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 关闭当前文件&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;2、跳转操作&#34;&gt;2、跳转操作&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Mac 快捷键&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt; Win 快捷键&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;作用&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Cmd + `&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 没有&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在同一个软件的&lt;strong&gt;多个工作区&lt;/strong&gt;之间切换&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;使用很频繁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt; Cmd + Option + 左右方向键&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Ctrl + Pagedown/Pageup&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 在已经打开的&lt;strong&gt;多个文件&lt;/strong&gt;之间进行切换&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;非常实用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Ctrl + Tab&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ctrl + Tab&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 在已经打开的多个文件之间进行跳转&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不如上面的快捷键快&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Cmd + Shift + O&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ctrl + shift + O&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 在当前文件的各种&lt;strong&gt;方法之间&lt;/strong&gt;（符号：Symbol）进行跳转&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Cmd + T&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ctrl + T&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 在当前&lt;strong&gt;工作区&lt;/strong&gt;的各种方法之间（符号：Symbol）进行跳转&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Ctrl + G&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ctrl + G&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 跳转到指定行&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Cmd+Shift+\&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Ctrl+Shift+\&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;跳转到匹配的括号&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;3、移动光标&#34;&gt;3、移动光标&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Mac 快捷键&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt; Win 快捷键&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;作用&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;方向键&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;方向键&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在&lt;strong&gt;单个字符&lt;/strong&gt;之间移动光标&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;大家都知道&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt; option + 左右方向键&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt; Ctrl + 左右方向键&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在&lt;strong&gt;单词&lt;/strong&gt;之间移动光标&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;很常用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt; Cmd + 左右方向键&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt; Fn + 左右方向键&lt;/strong&gt;（或 Win + 左右方向键）&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将光标定位到当前行的最左侧、最右侧（在&lt;strong&gt;整行&lt;/strong&gt;之间移动光标）&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;很常用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt; Option + Alt + 左右方向键&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt; Alt + Shift + 左右方向键&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;左右扩大 / 缩小选中的范围&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;很酷，极为高效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Cmd + ↑&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ctrl + Home&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 将光标定位到文件的第一行&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Cmd + ↓&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ctrl + End&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 将光标定位到文件的最后一行&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Cmd + Shift + \&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 在&lt;strong&gt;代码块&lt;/strong&gt;之间移动光标&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;4、编辑操作&#34;&gt;4、编辑操作&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Mac 快捷键&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt; Win 快捷键&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;作用&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Cmd + C&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ctrl + C&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 复制&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Cmd + X&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ctrl + X&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 剪切&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Cmd + C&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ctrl + V&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 粘贴&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt; Cmd + Enter&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Ctrl + Enter&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 在当前行的下方新增一行，然后跳至该行&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;即使光标不在行尾，也能快速向下插入一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Cmd+Shift+Enter&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ctrl+Shift+Enter&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 在当前行的上方新增一行，然后跳至该行&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;即使光标不在行尾，也能快速向上插入一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt; Option + ↑&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Alt + ↑&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将代码向上移动&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;很常用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt; Option + ↓&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Alt + ↓&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将代码向下移动&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;很常用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Option + Shift + ↑&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Alt + Shift + ↑&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将代码向上复制一行&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt; Option + Shift + ↓&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Alt + Shift + ↓&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将代码向下复制一行&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;写重复代码的利器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;另外再补充一点：将光标点击到某一行的任意位置时，默认就已经是&lt;strong&gt;选中全行&lt;/strong&gt;了，此时可以直接&lt;strong&gt;复制&lt;/strong&gt;或&lt;strong&gt;剪切&lt;/strong&gt;，无需点击鼠标。这个非常实用，是所有的编辑操作中，使用得最频繁的。它可以有以下使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;场景 1：假设光标现在处于第 5 行的&lt;strong&gt;任意位置&lt;/strong&gt;，那么，直接依次按下 &lt;code&gt;Cmd + C&lt;/code&gt; 和 &lt;code&gt;Cmd + V&lt;/code&gt;，就会把这行代码复制到第 6 行。继续按 &lt;code&gt;Cmd + C&lt;/code&gt; 和 &lt;code&gt;Cmd + V&lt;/code&gt;，就会把这行代码复制到第 7 行。copy 代码 so easy。&lt;/li&gt;
&lt;li&gt;场景 2：假设光标现在处于第 5 行，那么，先按下 &lt;code&gt;Cmd + C&lt;/code&gt;，然后按两下&lt;code&gt;↑&lt;/code&gt; 方向键，此时光标处于第 3 行；紧接着，继续按下 &lt;code&gt;Cmd + V&lt;/code&gt;，就会把刚刚那行代码复制到第 3 行，原本处于第 3 行的代码会整体&lt;strong&gt;下移&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你看到了没？上面的两个场景，我全程没有使用鼠标，只通过简单的复制粘贴和方向键，就做到了如此迅速的 copy 代码。你说是不是很高效？&lt;/p&gt;
&lt;h3 id=&#34;5、删除操作&#34;&gt;5、删除操作&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Mac 快捷键&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt; Win 快捷键&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;作用&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Cmd + shift + K&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ctrl + Shift + K&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 删除整行&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;「Cmd + X」的作用是剪切，但也可以删除整行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt; option + Backspace&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Ctrl + Backspace&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 删除光标之前的一个单词&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;英文有效，很常用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; option + delete&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ctrl + delete&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 删除光标之后的一个单词&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt; Cmd + Backspace&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 删除光标之前的整行内容&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;很常用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Cmd + delete&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 删除光标之后的整行内容&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;备注：上面所讲到的移动光标、编辑操作、删除操作的快捷键，在其他编辑器里，大部分都适用。&lt;/p&gt;
&lt;h3 id=&#34;6、多光标选择-多光标编辑&#34;&gt;6、多光标选择 / 多光标编辑&lt;/h3&gt;
&lt;p&gt;多光标选择在编程的&lt;strong&gt;提效&lt;/strong&gt;方面可谓立下了汗马功劳。因为比较难记住，所以你要时不时回来复习这一段。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Mac 快捷键&lt;/th&gt;
&lt;th&gt; Win 快捷键&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt; Option + 鼠标连续点击任意位置&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt; Alt + 鼠标连续点击任意位置&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在任意位置，同时出现多个光标&lt;/td&gt;
&lt;td&gt;很容易记住&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; Cmd + D&lt;/td&gt;
&lt;td&gt;Ctrl + D&lt;/td&gt;
&lt;td&gt; 将光标放在某个单词的位置（或者先选中某个单词），然后反复按下「 &lt;strong&gt;Cmd + D&lt;/strong&gt; 」键， 即可将下一个相同的词逐一加入选择。&lt;/td&gt;
&lt;td&gt;较常用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt; Cmd + Shift + L&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Ctrl + Shift + L&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt; 将光标放在某个单词的位置（或者先选中某个单词），然后按下快捷键，则所有的相同内容处，都会出现光标。&lt;/td&gt;
&lt;td&gt;很常用。比如变量重命名的时候，就经常用到&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;7、多列选择-多列编辑&#34;&gt;7、多列选择 / 多列编辑&lt;/h3&gt;
&lt;p&gt;多列选择是更高效的多光标选择，所以单独列成一小段。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Mac 快捷键&lt;/th&gt;
&lt;th&gt; Win 快捷键&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; Cmd + Option + 上下键&lt;/td&gt;
&lt;td&gt; Ctrl + Alt + 上下键&lt;/td&gt;
&lt;td&gt;在连续的多列上，同时出现多个光标&lt;/td&gt;
&lt;td&gt;较常用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; Option + Shift + 鼠标拖动&lt;/td&gt;
&lt;td&gt; Alt + Shift + 鼠标拖动&lt;/td&gt;
&lt;td&gt;按住快捷键，然后把鼠标从区域的左上角拖至右下角，即可在选中区域的每一行末尾，出现光标。&lt;/td&gt;
&lt;td&gt;很神奇的操作，较常用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt; Option + Shift + i&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Alt + Shift + I&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt; 选中一堆文本后，按下快捷键，既可在&lt;strong&gt;每一行的末尾&lt;/strong&gt;都出现一个光标。&lt;/td&gt;
&lt;td&gt;很常用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;8、编程语言相关&#34;&gt;8、编程语言相关&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Mac 快捷键&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt; Win 快捷键&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;作用&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Cmd + /&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ctrl + /&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 添加单行注释&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;很常用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt; Option + Shift + F&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Alt + shift + F&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 代码格式化&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;很常用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; F2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;F2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 以重构的方式进行&lt;strong&gt;重命名&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;改代码备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Ctrl + J&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 将多行代码合并为一行&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Win 用户可在命令面板搜索” 合并行 “&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Cmd +&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Cmd + U&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ctrl + U&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 将光标的移动回退到上一个位置&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;撤销光标的移动和选择&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;9、搜索相关&#34;&gt;9、搜索相关&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Mac 快捷键&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt; Win 快捷键&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;作用&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt; Cmd + Shift + F&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Ctrl + Shift +F&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 全局搜索代码&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;很常用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt; Cmd + P&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Ctrl + P&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 在当前的项目工程里，&lt;strong&gt;全局&lt;/strong&gt;搜索文件名&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt; Cmd + F&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ctrl + F&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 在当前文件中搜索代码，光标在搜索框里&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt; Cmd + G&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;F3&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt; 在当前文件中搜索代码，光标仍停留在编辑器里&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;很巧妙&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;10、自定义快捷键&#34;&gt;10、自定义快捷键&lt;/h3&gt;
&lt;p&gt;按住快捷键「Cmd + Shift + P」，弹出命令面板，在命令面板中输入 “快捷键”，可以进入快捷键的设置。&lt;/p&gt;
&lt;p&gt;当然，你也可以选择菜单栏「偏好设置 --&amp;gt; 键盘快捷方式」，进入快捷键的设置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201244.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;11、快捷键列表&#34;&gt;11、快捷键列表&lt;/h3&gt;
&lt;p&gt;你可以点击 VS Code 左下角的齿轮按钮，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201139.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图中，在展开的菜单中选择「键盘快捷方式」，就可以查看和修改所有的快捷键列表了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201333.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;快捷键参考表（官方）&#34;&gt;快捷键参考表（官方）&lt;/h3&gt;
&lt;p&gt;VS Code 官网提供了 PDF 版本的键盘快捷键参考表，转需：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows 版本：https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf&lt;/li&gt;
&lt;li&gt;Mac 版本：https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf&lt;/li&gt;
&lt;li&gt;Linux 版本：https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们在 VS  Code 软件里通过菜单栏「帮助 --&amp;gt; 键盘快捷方式参考」也可以打开相应平台的快捷键大全（PDF 版本）。&lt;/p&gt;
&lt;h2 id=&#34;三、高端访问：命令面板的使用&#34;&gt;三、高端访问：命令面板的使用&lt;/h2&gt;
&lt;p&gt;Mac 用户按住快捷键 &lt;code&gt;Cmd+Shift+P&lt;/code&gt; （Windows 用户按住快捷键 &lt;code&gt;Ctrl+Shift+P&lt;/code&gt;），可以打开快速命令面板。效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201339.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;命令面板的作用是&lt;strong&gt;希望解放开发者的鼠标，让一些操作和配置可以直接通过键盘进行&lt;/strong&gt;。如果让开发者记住所有的配置项在菜单的哪个位置是不现实的，而且有些命令并不在菜单中。&lt;/p&gt;
&lt;p&gt;有了命令面板之后，如果你需要修改一些设置项，或者进行一些快捷操作，则可以通过「命令面板」来操作，效率会更高。接下来列举一些。&lt;/p&gt;
&lt;h3 id=&#34;1、VS-Code-设置为中文语言&#34;&gt;1、VS Code 设置为中文语言&lt;/h3&gt;
&lt;p&gt;Mac 用户按住快捷键 &lt;code&gt;Cmd+Shift+P&lt;/code&gt; （Windows 用户按住快捷键 &lt;code&gt;Ctrl+Shift+P&lt;/code&gt;），打开命令面板。&lt;/p&gt;
&lt;p&gt;在命令面板中，输入 &lt;code&gt;Configure Display Language&lt;/code&gt;，选择 &lt;code&gt;Install additional languages&lt;/code&gt;，然后安装插件 &lt;code&gt;Chinese (Simplified) Language Pack for Visual Studio Code&lt;/code&gt; 即可。&lt;/p&gt;
&lt;p&gt;或者，我们可以直接安装插件 &lt;code&gt;Chinese (Simplified) Language Pack for Visual Studio Code&lt;/code&gt;，是一样的。&lt;/p&gt;
&lt;p&gt;安装完成后，重启 VS Code。&lt;/p&gt;
&lt;h3 id=&#34;2、设置字体大小&#34;&gt;2、设置字体大小&lt;/h3&gt;
&lt;p&gt;在命令面板输入 “字体”，可以进行字体的设置，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201251.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然，你也可以在菜单栏，选择「首选项 - 设置 - 常用设置」，在这个设置项里修改字体大小。&lt;/p&gt;
&lt;h3 id=&#34;3、快捷键设置&#34;&gt;3、快捷键设置&lt;/h3&gt;
&lt;p&gt;在命令面板输入 “快捷键”，就可以进入快捷键的设置。&lt;/p&gt;
&lt;h3 id=&#34;4、大小写转换&#34;&gt;4、大小写转换&lt;/h3&gt;
&lt;p&gt;选中文本后，在命令面板中输入 &lt;code&gt;transfrom&lt;/code&gt;，就可以修改文本的大小写了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201132.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;5、使用命令行启动-VS-Code&#34;&gt;5、使用命令行启动 VS Code&lt;/h3&gt;
&lt;p&gt;（1）输入快捷键「Cmd + Shift + P 」，选择 &lt;code&gt;install code command&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201258.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;（2）使用命令行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;code&lt;/code&gt; 命令：启动 VS Code 软件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;code pathName/fileName&lt;/code&gt; 命令：通过 VS Code 软件打开指定目录 / 指定文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;备注：这种方法快捷简单，但是在电脑重启之后就失效了。稍后在第五段，我会介绍更常见的方法。&lt;/p&gt;
&lt;h3 id=&#34;6、修改特定编程语言的设置项&#34;&gt;6、修改特定编程语言的设置项&lt;/h3&gt;
&lt;p&gt;输入快捷键「Cmd + Shift + P 」打开命令面板，然后输入并执行 &lt;code&gt;Configure Language Specific Settings&lt;/code&gt; 即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201304.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;四、私人订制：VS-Code-的常见配置&#34;&gt;四、私人订制：VS Code 的常见配置&lt;/h2&gt;
&lt;h3 id=&#34;0、设置项介绍&#34;&gt;0、设置项介绍&lt;/h3&gt;
&lt;p&gt;在修改 VS Code 配置之前，我们需要知道，在哪里可以找到设置项的入口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方式 1&lt;/strong&gt;：Mac 用户选择菜单栏「Code--&amp;gt; 首选项 --&amp;gt; 设置」，即可打开配置项：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201346.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方式 2&lt;/strong&gt;：点击软件右下角的设置图标：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201347.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201125.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，VS Code 提供两种不同范围的设置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户&lt;/strong&gt;设置：全局生效。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作区&lt;/strong&gt;设置：只针对当前项目生效。工作区设置会覆盖用户设置。适用于团队协作场景。工作区的设置文件是保存在当前项目根目录的&lt;code&gt;.vscode/settings.json&lt;/code&gt; 中，可以被提交到 Git 仓库，方便共享给项目组的其他成员。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;操作技巧：&lt;/p&gt;
&lt;p&gt;（1）我们可以在设置面板的顶部搜索框，输入关键词，就能迅速定位到你想要的设置项。&lt;/p&gt;
&lt;p&gt;（2）上图中，点击右上角的 icon，可以通过 json 文件的形式修改设置项。&lt;/p&gt;
&lt;h3 id=&#34;1、修改主题&#34;&gt;1、修改主题&lt;/h3&gt;
&lt;p&gt;1）修改颜色主题：&lt;/p&gt;
&lt;p&gt;选择菜单栏「Code --&amp;gt; 首选项 --&amp;gt; 颜色主题」：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201353.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在弹出的对话框中，挑选你一个你喜欢的的颜色主题吧，或者安装其他颜色的主题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201119.png&#34; alt=&#34;20211013_1018&#34;&gt;&lt;/p&gt;
&lt;p&gt;或者在设置项里搜索 &lt;code&gt;Workbench: Color Theme&lt;/code&gt;，进行修改。&lt;/p&gt;
&lt;p&gt;2）修改文件图标的主题：&lt;/p&gt;
&lt;p&gt;选择菜单栏「Code --&amp;gt; 首选项 --&amp;gt; 文件图标主题」：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201113.png&#34; alt=&#34;20211013_1015&#34;&gt;&lt;/p&gt;
&lt;p&gt;在弹出的对话框中，挑选你一个你喜欢的的主题吧，或者安装其他的主题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201112.png&#34; alt=&#34;20211013_1019&#34;&gt;&lt;/p&gt;
&lt;p&gt;或者在设置项里搜索 &lt;code&gt;Workbench: Icon Theme&lt;/code&gt;，进行修改。&lt;/p&gt;
&lt;h3 id=&#34;2、面包屑（Breadcrumb）导航&#34;&gt;2、面包屑（Breadcrumb）导航&lt;/h3&gt;
&lt;p&gt;打开 VS Code 的设置项，选择「用户设置 -&amp;gt; 工作台 -&amp;gt; 导航路径」，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201400.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图中，将红框部分打钩即可。&lt;/p&gt;
&lt;p&gt;设置成功后，我们就可以查看到当前文件的「层级结构」，非常方便。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201106.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;有了这个面包屑导航，我们可以点击它，在任意目录、任意文件之间随意跳转。使用频繁非常高。&lt;/p&gt;
&lt;h3 id=&#34;3、是否显示代码的行号&#34;&gt;3、是否显示代码的行号&lt;/h3&gt;
&lt;p&gt;VS Code 默认显示代码的行号。你可以在设置项里搜索 &lt;code&gt;editor.lineNumbers&lt;/code&gt; 修改设置，配置项如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201105.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我建议保留这个设置项，无需修改。&lt;/p&gt;
&lt;h3 id=&#34;4、右侧是否显示代码的缩略图&#34;&gt;4、右侧是否显示代码的缩略图&lt;/h3&gt;
&lt;p&gt;如果某个文件的代码量很大，缩略图就很有用了，可以预览全局，并在当前文件中快速跳转。&lt;/p&gt;
&lt;p&gt;VS Code 会在代码的右侧，默认显示缩略图。你可以在设置项里搜索 &lt;code&gt;editor.minimap&lt;/code&gt; 进行设置，配置项如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201407.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上面这张图，你仔细琢磨下会发现，中文翻译十分精准。&lt;/p&gt;
&lt;h3 id=&#34;5、将当前行代码高亮显示（更改光标所在行的背景色）&#34;&gt;5、将当前行代码高亮显示（更改光标所在行的背景色）&lt;/h3&gt;
&lt;p&gt;当我们把光标放在某一行时，这一行的背景色并没有发生变化。如果想&lt;strong&gt;高亮显示&lt;/strong&gt;当前行的代码，需要设置两步：&lt;/p&gt;
&lt;p&gt;（1）在设置项里搜索 &lt;code&gt;editor.renderLineHighlight&lt;/code&gt;，将选项值设置为 &lt;code&gt;all&lt;/code&gt; 或者 &lt;code&gt;line&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;（2）在设置项里增加如下内容：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-json&#34; data-language=&#34;json&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;&lt;span class=&#34;token property&#34;&gt;&#34;workbench.colorCustomizations&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;&#34;editor.lineHighlightBackground&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;#00000090&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;&#34;editor.lineHighlightBorder&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;#ffffff30&#34;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上方代码，第一行代码的意思是：修改光标所在行的背景色（背景色设置为全黑，不透明度 90%）；第二行代码的意思是：修改光标所在行的边框色。&lt;/p&gt;
&lt;h3 id=&#34;6、改完代码后立即自动保存&#34;&gt;6、改完代码后立即自动保存&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;方式一&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;改完代码后，默认不会自动保存。你可以在设置项里搜索 &lt;code&gt;files.autoSave&lt;/code&gt;，修改参数值为 &lt;code&gt;afterDelay&lt;/code&gt;  ，即可自动保存。如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201514.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;files.autoSave 的参数值有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;off（默认值）：不自动保存。&lt;/li&gt;
&lt;li&gt;afterDelay（建议配置）：文件修改超过一定时间（默认 1 秒）后，就自动保存。&lt;/li&gt;
&lt;li&gt;onFocusChange：当前编辑器失去焦点时，则自动保存。如果我们将配置项修改为 &lt;code&gt;onFocusChange&lt;/code&gt; 之后，那么，当光标离开该文件后，这个文件就会自动保存了。&lt;/li&gt;
&lt;li&gt;onWindowChange：VS  Code 软件失去焦点时，则自动保存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;方式二&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;当然，你也可以直接在菜单栏选择「文件 - 自动保存」。勾选后，当你写完代码后，文件会立即实时保存。&lt;/p&gt;
&lt;h3 id=&#34;7、热退出&#34;&gt;7、热退出&lt;/h3&gt;
&lt;p&gt;当 VS Code 退出后，它可以记住未保存的文件。如果你希望达到这种效果，那么，你需要先将设置项 &lt;code&gt;files.hotExit&lt;/code&gt; 的值改为 &lt;code&gt;onExitAndWindowClose&lt;/code&gt;。这个配置项要不要改，看你个人需要。比如我自己平时设置的值是 &lt;code&gt;onExit&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201413.png&#34; alt=&#34;20211012_2014&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;8、保存代码后，是否立即格式化&#34;&gt;8、保存代码后，是否立即格式化&lt;/h3&gt;
&lt;p&gt;保存代码后，默认&lt;strong&gt;不会立即&lt;/strong&gt;进行代码的格式化。你可以在设置项里搜索 &lt;code&gt;editor.formatOnSave&lt;/code&gt; 查看该配置项：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201058.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我觉得这个配置项保持默认就好，不用打钩。&lt;/p&gt;
&lt;h3 id=&#34;9、自动格式化粘贴的内容&#34;&gt;9、自动格式化粘贴的内容&lt;/h3&gt;
&lt;p&gt;在设置项里搜索 &lt;code&gt;editor.formatOnPaste&lt;/code&gt;，将设置项改为 &lt;code&gt;true&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201059.png&#34; alt=&#34;20211012_1049&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;10、设置字体大小&#34;&gt;10、设置字体大小&lt;/h3&gt;
&lt;p&gt;在设置项里搜索 &lt;code&gt;fontSize&lt;/code&gt;，然后根据需要设置各种模块的字体大小：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201420.png&#34; alt=&#34;20211012_1053&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;11、空格-or-制表符&#34;&gt;11、空格 or 制表符&lt;/h3&gt;
&lt;p&gt;VS Code 会根据你所打开的文件来决定该使用空格还是制表。也就是说，如果你的项目中使用的都是制表符，那么，当你在写新的代码时，按下 tab 键后，编辑器就会识别成制表符。&lt;/p&gt;
&lt;p&gt;（1）建议的设置项如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;editor.detectIndentation&lt;/strong&gt;：自动检测（默认开启）。建议把这个配置项修改为 false，截图如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201052.png&#34; alt=&#34;20211012_1139&#34;&gt;&lt;/p&gt;
&lt;p&gt;这样做，是为了取消系统的自动缩进，建议自己手动格式化比较好。 参考链接：https://www.yisu.com/zixun/327399.html&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;editor.insertSpaces&lt;/strong&gt;：按 Tab 键时插入空格（默认值为 true）。截图如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201523.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;editor.tabSize&lt;/strong&gt;：一个制表符默认等于四个空格。截图如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201530.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;（2）状态栏也会显示当前的缩进值。点击状态栏，可以直接修改 tabSize 缩进值：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201045.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;（3）另外，我们还可以安装 prettier 插件，设置代码在格式化时默认缩进值。prettier 是做代码格式化的最常见工具。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201536.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;（4）去掉每一行末尾的空格。在设置项里搜索&lt;code&gt;空格&lt;/code&gt;或者 &lt;code&gt;&#34;files.trimTrailingWhitespace&#34;&lt;/code&gt;，将值设置为 true：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201858.png&#34; alt=&#34;20211012_1231&#34;&gt;&lt;/p&gt;
&lt;p&gt;一般来说，每一行代码末尾的空格是多余的，所以建议去掉。&lt;/p&gt;
&lt;h3 id=&#34;12、直观地显示代码里的空格和缩进-✨&#34;&gt;12、直观地显示代码里的空格和缩进 ✨&lt;/h3&gt;
&lt;p&gt;代码里如果有缩进或者空格，肉眼是看不出来的，但是我们可以修改配置项，把它揪出来。&lt;/p&gt;
&lt;p&gt;在配置项里搜索 &lt;code&gt;editor.renderWhitespace&lt;/code&gt;，修改为 &lt;code&gt;all&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201039.png&#34; alt=&#34;20211012_1150&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改之后，代码里的空格、缩进的展示效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201905.png&#34; alt=&#34;20211012_1258&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到了没？哪里有空格、哪里是缩进，全都一目了然。&lt;/p&gt;
&lt;h3 id=&#34;13、新建文件后的默认文件类型&#34;&gt;13、新建文件后的默认文件类型&lt;/h3&gt;
&lt;p&gt;当我们按下快捷键「Cmd + N」新建文件时，VS Code 默认无法识别这个文件到底是什么类型的，因此也就无法识别相应的语法高亮。&lt;/p&gt;
&lt;p&gt;如果你想修改默认的文件类型，可以在设置项里搜索 &lt;code&gt;files.defaultLanguage&lt;/code&gt;，设置项如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201542.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图中的红框部分，填入你期望的默认文件类型。我填的是 &lt;code&gt;html&lt;/code&gt; 类型，你也可以填写成 &lt;code&gt;javascript&lt;/code&gt; 或者 &lt;code&gt;markdown&lt;/code&gt;，或者其他的语言类型。&lt;/p&gt;
&lt;h3 id=&#34;14、删除文件时，是否弹出确认框&#34;&gt;14、删除文件时，是否弹出确认框&lt;/h3&gt;
&lt;p&gt;当我们在 VS Code 中删除文件时，默认会弹出确认框。如果你想修改设置，可以在设置项里搜索 &lt;code&gt;xplorer.confirmDelete&lt;/code&gt;。截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201032.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我建议这个设置项保持默认的打钩就好，不用修改。删除文件前的弹窗提示，也是为了安全考虑，万一手贱不小心删了呢？&lt;/p&gt;
&lt;h3 id=&#34;15、在新窗口打开文件-文件夹&#34;&gt;15、在新窗口打开文件 / 文件夹&lt;/h3&gt;
&lt;p&gt;通过 &lt;code&gt;window.openFoldersInNewWindow&lt;/code&gt;（默认值为 off）和 &lt;code&gt;window.openFilesInNewWindow&lt;/code&gt;（默认值为 default），可以配置在打开文件夹、打开文件时，是否开启一个新的窗口。我个人建议，把这两个配置项都设置为 on，避免旧的窗口被覆盖：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201549.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;补充知识 —— &lt;code&gt;window.restoreWindows&lt;/code&gt; 可以用来配置 如何恢复之前的会话窗口。涉及到的场景是：你把 VS Code 关闭了，然后又打开了，是否要展示之前打开过的文件、文件夹？参数值有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one（默认配置）：只会重新打开上一次回话中最后操作的那一个窗口。&lt;/li&gt;
&lt;li&gt;none：打开一个空的窗口，不包含任何文件、文件夹。&lt;/li&gt;
&lt;li&gt;all（建议配置）：恢复上一次会话中的所有窗口。&lt;/li&gt;
&lt;li&gt;folders：恢复上一次会话中包含文件夹的窗口。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201026.png&#34; alt=&#34;20211012_1704&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;接下来，我们来讲一些更高级的操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;五、纵享丝滑：常见操作和使用技巧&#34;&gt;五、纵享丝滑：常见操作和使用技巧&lt;/h2&gt;
&lt;h3 id=&#34;1、快速生成HTML骨架&#34;&gt;1、快速生成 HTML 骨架&lt;/h3&gt;
&lt;p&gt;先新建一个空的 html 文件，然后通过以下方式，可以快速生成 html 骨架。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方式 1&lt;/strong&gt;：输入 &lt;code&gt;!&lt;/code&gt;，然后按下 &lt;code&gt;enter&lt;/code&gt; 键，即可生成 html 骨架。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201555.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方式 2&lt;/strong&gt;：输入 &lt;code&gt;html:5&lt;/code&gt;，然后按住 &lt;code&gt;Tab&lt;/code&gt; 键，即可生成 html 骨架。&lt;/p&gt;
&lt;p&gt;生成的骨架，内容如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-html&#34; data-language=&#34;html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token doctype&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;token doctype-tag&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;en&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;UTF-8&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;http-equiv&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;X-UA-Compatible&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;IE=edge&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;viewport&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;width=device-width, initial-scale=1.0&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Document&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;有了上面的 html 骨架之后，我们就可以快乐地在里面插入 CSS 代码和 JS 代码。&lt;/p&gt;
&lt;h3 id=&#34;2、并排编辑：左右（上下）显示多个编辑器窗口（copy代码利器）&#34;&gt;2、并排编辑：左右（上下）显示多个编辑器窗口（copy 代码利器）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;并排编辑是所有的编辑操作中最常用的一个技巧，十分有用。比如我们在开发一个项目时，可能需要同时打开 HTML 文件和 CSS 文件，很常见。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mac 用户按住快捷键 &lt;code&gt;Cmd + \&lt;/code&gt;， Windows 用户按住快捷键 &lt;code&gt;Ctrl + \&lt;/code&gt;，即可同时打开多个编辑器窗口，进行并排编辑。效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201020.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;按快捷键「Cmd + 1 」切换到左边的窗口，按快捷键「Cmd + 2 」切换到右边的窗口，以此类推。随时随地，想切就切。&lt;/p&gt;
&lt;p&gt;学会了这一招，以后 copy 代码的时候，leader 再也不用担心我抄得慢了，一天工资到手。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;当然，使用快捷键 &lt;code&gt;Cmd + \&lt;/code&gt; 只是其中一种方式，我们还有很多种方式打开并行编辑。我们来做一个汇总。&lt;/p&gt;
&lt;p&gt;如果你已经打开了一个编辑器，那么可以通过以下几种方式在另一侧打开另一个编辑器：（按照使用频率，从高到低排序）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用快捷键 &lt;code&gt;Cmd + \&lt;/code&gt; 将编辑器一分为二。&lt;/li&gt;
&lt;li&gt;使用快捷键 &lt;code&gt;Cmd + P&lt;/code&gt; 调出文件列表，选择要打开的文件，然后按下 &lt;code&gt;Cmd + Enter&lt;/code&gt; 快捷键。【重要】&lt;/li&gt;
&lt;li&gt;按住 Option 键的同时，单击资源管理器的文件（Windows 用户是按 Alt 键）。&lt;/li&gt;
&lt;li&gt;点击编辑器右上角的 &lt;code&gt;Split Editor&lt;/code&gt; 按钮。&lt;/li&gt;
&lt;li&gt;选择菜单栏「查看 --&amp;gt; 编辑器布局」，然后选择你具体想要的布局，如下图所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201602.png&#34; alt=&#34;20211012_1451&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过拖拽，把当前文件移动到任意一侧。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;补充知识：通过配置项 &lt;code&gt;worbench.editor.OpenSideBySideDirection&lt;/code&gt; 可以控制编辑器在并排打开时出现的默认位置（默认值为 right，你也可以根据需要改为 down）。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201019.png&#34; alt=&#34;20211012_1455&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3、从终端-code-命令启动-VS-Code（Mac电脑）&#34;&gt;3、从终端 code 命令启动 VS Code（Mac 电脑）&lt;/h3&gt;
&lt;p&gt;在终端输入 &lt;code&gt;code&lt;/code&gt; 或者输入 &lt;code&gt;code + 指定项目的目录&lt;/code&gt;，就可以启动 VS  Code，十分便捷。即：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;code&lt;/code&gt; 命令：启动 VS Code 软件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;code pathName/fileName&lt;/code&gt; 命令：通过 VS Code 软件打开指定目录 / 指定文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了达到目的，我们需要先将 VS Code 的软件安装路径添加到环境变量，一劳永逸。具体操作如下：&lt;/p&gt;
&lt;p&gt;（1）打开 &lt;code&gt;bash_profile&lt;/code&gt; 文件：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; ~
&lt;span class=&#34;token function&#34;&gt;vim&lt;/span&gt; ./bash_profile&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（2）在 bash_profile 中添加如下内容：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 从终端启动VS Code，并设置vscode启动的命令别名&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意，由于 &lt;code&gt;Visual Studio Code.app&lt;/code&gt; 这个路径里有空格，所以需要在空格前面加上反斜杠 &lt;code&gt;\&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;（3）重启环境变量的配置：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;# 重启
source ~/.bash_profile&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;大功告成。&lt;/p&gt;
&lt;p&gt;改完之后，如果没生效，那你把  &lt;code&gt;bash_profile&lt;/code&gt; 文件 换成 &lt;code&gt;zshrc&lt;/code&gt; 文件试试。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://blog.csdn.net/logan_LG/article/details/106800904&#34;&gt;mac 通过终端 code 命令打开 vscode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3、从终端-code-命令启动-VS-Code（Windows电脑）&#34;&gt;3、从终端 code 命令启动 VS Code（Windows 电脑）&lt;/h3&gt;
&lt;p&gt;在终端输入 &lt;code&gt;code&lt;/code&gt; 或者输入 &lt;code&gt;code + 指定项目的目录&lt;/code&gt;，就可以启动 VS  Code，十分便捷。即：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;code&lt;/code&gt; 命令：启动 VS Code 软件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;code pathName/fileName&lt;/code&gt; 命令：通过 VS Code 软件打开指定目录 / 指定文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了达到目的，我们需要先将 VS Code 的软件安装路径添加到环境变量，一劳永逸。具体操作如下：&lt;/p&gt;
&lt;p&gt;（1）打开 VS Code 的安装位置，进入 bin 文件夹，复制路径。比如：&lt;code&gt;D:\Microsoft VS Code\bin&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;（2）回到桌面，右键我的电脑 --&amp;gt; 高级系统设置 --&amp;gt; 环境变量 --&amp;gt; 编辑 path 值，在原来的 path 后面，追加内容 &lt;code&gt;;D:\Microsoft VS Code\bin&lt;/code&gt;（即英文的分号 + VS  Code 的 bin 路径)&lt;/p&gt;
&lt;p&gt;（3）重启电脑，大功告成。&lt;/p&gt;
&lt;p&gt;改完之后，如果没生效，那八成是因为你填的 path 值有问题。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.cnblogs.com/zyl-Tara/p/10642704.html&#34;&gt;windows 使用 code . 命令打开 vscode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4、在当前文件中搜索&#34;&gt;4、在当前文件中搜索&lt;/h3&gt;
&lt;p&gt;在上面的快捷键列表中，我们已经知道如下快捷键：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cmd + F（Win 用户是 Ctrl + F）：在当前文件中搜索，光标在搜索框里&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cmd + G（Win 用户是 F3）：在当前文件中搜索，光标仍停留在编辑器里&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多个搜索结果出来之后，按下 Enter 键之后跳转到下一个搜索结果，按下 Shift + Enter 键之后跳转到上一个搜索结果。&lt;/p&gt;
&lt;p&gt;另外，你可能会注意到，搜索框里有很多按钮，每个按钮都对应着不同的功能，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201012.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图中，你可以通过「Tab」键和「Shift + Tab」键在输入框和替换框之间进行切换。&lt;/p&gt;
&lt;p&gt;「在选定内容中查找」这个功能还是比较实用的。你也可以在设置项里搜索 &lt;code&gt;editor.find.autoFindInSelection&lt;/code&gt;，勾选该设置项后，那么，当你选中指定内容后，然后按住「Cmd + F」，就可以&lt;strong&gt;自动&lt;/strong&gt;只在这些内容里进行查找。该设置项如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201608.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;5、全局搜索&#34;&gt;5、全局搜索&lt;/h3&gt;
&lt;p&gt;在上面的快捷键列表中，我们已经知道如下快捷键：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cmd + Shift + F（Win 用户是 Ctrl + Shift +F）：在全局的文件夹中进行搜索。效果如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201013.png&#34; alt=&#34;20211012_1548&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图中，你可以点击&lt;strong&gt;红框&lt;/strong&gt;部分，展开更多的配置项。然后点击&lt;strong&gt;红圈&lt;/strong&gt;部分，进行过滤搜索。注意，第二个红圈那里会经常用到，它可以在搜索时过滤掉  &lt;code&gt;.git&lt;/code&gt;、&lt;code&gt;.node_modules&lt;/code&gt; 等忽略文件。&lt;/p&gt;
&lt;p&gt;上图中，我们还可以点击 “在编辑器中打开”，在一个单独的文件中聚合展示搜索结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201615.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;6、文件名-文件夹的搜索&#34;&gt;6、文件名 / 文件夹的搜索&lt;/h3&gt;
&lt;p&gt;前面的快捷键那一段我们讲过，通过 「Cmd + P」可以快速搜索并打开&lt;strong&gt;文件&lt;/strong&gt; / 文件夹。这种方式，一般用于快速打开最近编辑过的文件。&lt;/p&gt;
&lt;p&gt;其实还有一种很巧妙的方式，可以在整个项目里，既能搜到文件，也能搜到&lt;strong&gt;文件夹&lt;/strong&gt;。这种方式，常用于&lt;strong&gt;过滤项目的目录&lt;/strong&gt;。操作方法很简单：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;直接在文件资源管理器输入关键字就行。搜索结果会自动出现；使用方向键进行上下移动，可以在搜索的文件和文件夹之间进行跳转。&lt;/p&gt;
&lt;p&gt;另外，右上角会看到一个过滤器，点击下图中的红圈部分，则只显示匹配的文件和文件夹。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201006.png&#34; alt=&#34;20211012_1616&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然，这招也有一点不足：不能搜中文。&lt;/p&gt;
&lt;h3 id=&#34;7、大纲视图&#34;&gt;7、大纲视图&lt;/h3&gt;
&lt;p&gt;如下图所示，大纲视图可以展示当前代码的方法结构、文件的目录结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201621.png&#34; alt=&#34;20211012_1628&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201929.png&#34; alt=&#34;20211012_1636&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;8、文件对比&#34;&gt;8、文件对比&lt;/h3&gt;
&lt;p&gt;VS Code 默认支持&lt;strong&gt;对比两个文件的内容&lt;/strong&gt;。选中两个文件，然后右键选择「将已选项进行比较」即可，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312200959.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;VS Code 自带的对比功能并不够强大，我们可以安装插件 &lt;code&gt;compareit&lt;/code&gt;，进行更丰富的对比。比如说，安装完插件 &lt;code&gt;compareit&lt;/code&gt; 之后，我们可以将「当前文件」与「剪切板」里的内容进行对比：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201628.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果你安装了 GitLens 插件，还可以将两个 git 分支的代码进行比对，非常完美。&lt;/p&gt;
&lt;h3 id=&#34;9、查找某个函数在哪些地方被调用了&#34;&gt;9、查找某个函数在哪些地方被调用了&lt;/h3&gt;
&lt;p&gt;比如我已经在 &lt;code&gt;a.js&lt;/code&gt; 文件里调用了 &lt;code&gt;foo()&lt;/code&gt; 函数。那么，如果我想知道 &lt;code&gt;foo()&lt;/code&gt; 函数在其他文件中是否也被调用了，该怎么做呢？&lt;/p&gt;
&lt;p&gt;做法如下：在 &lt;code&gt;a.js&lt;/code&gt; 文件里，选中 &lt;code&gt;foo()&lt;/code&gt; 函数（或者将光标放置在 &lt;code&gt;foo()&lt;/code&gt; 函数上），然后按住快捷键「Shift + F12」，就能看到 &lt;code&gt;foo()&lt;/code&gt; 函数在哪些地方被调用了，比较实用。&lt;/p&gt;
&lt;h3 id=&#34;10、鼠标操作&#34;&gt;10、鼠标操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在当前行的位置，鼠标三击，可以选中当前行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用鼠标单击文件的&lt;strong&gt;行号&lt;/strong&gt;，可以选中当前行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在某个&lt;strong&gt;行号&lt;/strong&gt;的位置，&lt;strong&gt;上下移动鼠标，可以选中多行&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;11、重构&#34;&gt;11、重构&lt;/h3&gt;
&lt;p&gt;重构分很多种，我们来举几个例子。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命名重构&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;当我们尝试去修改某个函数（或者变量名）时，我们可以把光标放在上面，然后按下「F2」键，那么，这个函数（或者变量名）出现的地方都会被修改。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法重构&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;选中某一段代码，这个时候，代码的左侧会出现一个「灯泡图标」，点击这个图标，就可以把这段代码提取为一个单独的函数。&lt;/p&gt;
&lt;h3 id=&#34;12：终端配置&#34;&gt;12：终端配置&lt;/h3&gt;
&lt;p&gt;VS Code 软件自带了终端，但我个人认为不是很好用，而且 VS Code 软件关了之后，终端也没了。建议大家使用其他的终端软件，专业的事情交给专业的人做。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows 平台的终端：推荐 PowerShell 软件。远程终端推荐 xshell 软件。&lt;/li&gt;
&lt;li&gt;Mac 平台的终端：推荐 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://iterm2.com/&#34;&gt;iTerm2 &lt;/a&gt;。 iTerm2 是 Mac 平台最好用的终端软件，没有之一。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;右键行为&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在终端上，单击右键所产生的行为在不同的系统里是不同的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Windows：如果有&lt;strong&gt;选定&lt;/strong&gt;文本，则复制当前文本；如果没有选定文本，则粘贴。&lt;/li&gt;
&lt;li&gt;macOS：选中光标所在位置的单词，并显示右键菜单。&lt;/li&gt;
&lt;li&gt;Linux：显示右键菜单。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;13、Git-版本管理&#34;&gt;13、Git 版本管理&lt;/h3&gt;
&lt;p&gt;在 VS Code 中使用 Git 之前，需要你先安装 Git 环境。&lt;/p&gt;
&lt;p&gt;VS Code 自带了 Git 版本管理的功能，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312200958.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图中，我们可以在这里进行常见的 git 命令操作。如果你还不熟悉 &lt;strong&gt;Git 版本管理&lt;/strong&gt;，可以先去补补课。&lt;/p&gt;
&lt;p&gt;我自己用的最多的功能是 &lt;strong&gt;diff 代码&lt;/strong&gt;和&lt;strong&gt;合并冲突&lt;/strong&gt;，自从用上了  VS Code 的这两个功能，简直离不开它。&lt;/p&gt;
&lt;p&gt;我们先来看看 diff 代码的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201634.png&#34; alt=&#34;20211013_1411&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图中，点击右上角的&lt;code&gt;...&lt;/code&gt;，然后点击&lt;code&gt;内联视图&lt;/code&gt;，则可以换一种视图 diff 代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201937.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Git 状态栏&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312200952.png&#34; alt=&#34;20211013_1421&#34;&gt;&lt;/p&gt;
&lt;p&gt;在 VS Code 的左下角会显示 Git 状态栏。如果当前代码仓库配置了远程仓库，那么 “同步更改” 会显示以下信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;左边的数字：表示远程分支比本地分支多了 XX 个 Git commit。&lt;/li&gt;
&lt;li&gt;右边的数字：表示本地分支比远程分支多了 XX 个 Git commit。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击 “同步更改” 按钮，会拉取（pull）远程分支到本地分支，并推送（push）本地的 Git commit 到远程分支。&lt;/p&gt;
&lt;p&gt;如果当前代码仓库没有配置远程仓库，则会显示 “发布更改” 的按钮。点击 “发布更改” 按钮，会把当前分支 push 到远程仓库。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;另外，我建议安装插件 &lt;code&gt;GitLens&lt;/code&gt; 搭配使用，它是 VS Code 中我最推荐的一个插件，简直是 Git 神器，码农必备。&lt;/p&gt;
&lt;p&gt;我还要补充一句：&lt;/p&gt;
&lt;p&gt;有人说，高手都是直接用命令行操作 Git。然而，根据我多年的经验来看，如果你的代码仓库需要管理的分支特别多，与团队的其他成员需要经常协作，那么，我建议你&lt;strong&gt;优先使用&lt;/strong&gt; GUI 图形化工具来操作 Git，避免出错。&lt;/p&gt;
&lt;p&gt;我推荐的 GUI 版的 Git 工具有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.git-tower.com/&#34;&gt;Tower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.sourcetreeapp.com/&#34;&gt;Sourcetree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.gitkraken.com/&#34;&gt;GitKraken&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;14、将工作区放大-缩小&#34;&gt;14、将工作区放大 / 缩小&lt;/h3&gt;
&lt;p&gt;我们在上面的设置项里修改字体大小后，仅仅只是修改了代码的字体大小。&lt;/p&gt;
&lt;p&gt;如果你想要缩放整个工作区（包括代码的字体、左侧导航栏的字体等），可以按下快捷键「&lt;strong&gt;cmd +/-&lt;/strong&gt;」。windows 用户是按下「ctrl +/-」&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当我们在投影仪上给别人演示代码的时候，这一招十分管用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果你想恢复默认的工作区大小，可以在命令面板输入&lt;code&gt;重置缩放&lt;/code&gt;（英文是 &lt;code&gt;reset zoom&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;f### 11、创建多层子文件夹&lt;/p&gt;
&lt;p&gt;我们可以在新建文件夹的时候，如果直接输入 &lt;code&gt;aa/bb/cc&lt;/code&gt;，比如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201641.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;那么，就可以创建多层子文件夹，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312200945.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;15、-vscode-文件夹的作用&#34;&gt;15、&lt;code&gt;.vscode&lt;/code&gt; 文件夹的作用&lt;/h3&gt;
&lt;p&gt;为了统一团队的 vscode 配置，我们可以在项目的根目录下建立&lt;code&gt;.vscode&lt;/code&gt; 目录，在里面放置一些配置内容，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;settings.json&lt;/code&gt;：工作空间设置、代码格式化配置、插件配置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sftp.json&lt;/code&gt;：ftp 文件传输的配置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;.vscode&lt;/code&gt; 目录里的配置只针对当前项目范围内生效。将&lt;code&gt;.vscode&lt;/code&gt; 提交到代码仓库，大家统一配置时，会非常方便。&lt;/p&gt;
&lt;h3 id=&#34;16、自带终端&#34;&gt;16、自带终端&lt;/h3&gt;
&lt;p&gt;我们可以按下「Ctrl + `」打开 VS Code 自带的终端。我认为内置终端并没有那么好用，我更建议你使用第三方的终端 &lt;strong&gt;item2&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;17、markdown-语法支持&#34;&gt;17、markdown 语法支持&lt;/h3&gt;
&lt;p&gt;VS Code 自带 markdown 语法高亮。也就是说，如果你是用 markdown 格式写文章，则完全可以用 VS Code 进行写作。&lt;/p&gt;
&lt;p&gt;写完 md 文件之后，你可以点击右上角的按钮进行预览，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201648.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我一般是安装「Markdown Preview Github Styling」插件，以 GitHub 风格预览 Markdown 样式。样式十分简洁美观。&lt;/p&gt;
&lt;p&gt;你也可以在控制面板输入 &lt;code&gt;Markdown: 打开预览&lt;/code&gt;，直接全屏预览 markdown 文件。&lt;/p&gt;
&lt;h3 id=&#34;18、Emmet-in-VS-Code&#34;&gt;18、Emmet in VS Code&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Emmet&lt;/code&gt; 可以极大的提高 html 和 css 的编写效率，它提供了一种非常简练的语法规则。&lt;/p&gt;
&lt;p&gt;举个例子，我们在编辑器中输入缩写代码：&lt;code&gt;ul&amp;gt;li*6&lt;/code&gt; ，然后按下 Tab 键，即可得到如下代码片段：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-html&#34; data-language=&#34;html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;VS Code 默认支持 Emmet。更多 Emmet 语法规则，可以自行查阅。&lt;/p&gt;
&lt;h3 id=&#34;19、修改字体，使用「Fira-Code」字体&#34;&gt;19、修改字体，使用「Fira Code」字体&lt;/h3&gt;
&lt;p&gt;这款字体很漂亮，很适合用来写代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201655.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;安装步骤如下：&lt;/p&gt;
&lt;p&gt;（1）进入 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;https://github.com/tonsky/FiraCode&lt;/a&gt; 网站，下载并安装「Fira Code」字体。&lt;/p&gt;
&lt;p&gt;（2）打开 VS Code 的「设置」，搜索 &lt;code&gt;font&lt;/code&gt;，修改相关配置为如下内容：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-json&#34; data-language=&#34;json&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;&lt;span class=&#34;token property&#34;&gt;&#34;editor.fontFamily&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#39;Fira Code&#39;,Menlo, Monaco, &#39;Courier New&#39;, monospace&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 设置字体显示&lt;/span&gt;
&lt;span class=&#34;token property&#34;&gt;&#34;editor.fontLigatures&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//控制是否启用字体连字，true启用，false不启用&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上方的第二行配置，取决于个人习惯，我是直接设置为 &lt;code&gt;&#34;editor.fontLigatures&#34;: null&lt;/code&gt;，因为我不太习惯连字。&lt;/p&gt;
&lt;h3 id=&#34;20、代码格式化&#34;&gt;20、代码格式化&lt;/h3&gt;
&lt;p&gt;VS Code 默认对 JavaScript、TypeScript、JSON、HTML 提供了开箱即用的代码格式化支持。其他语言则需要先安装相应的插件才能支持。&lt;/p&gt;
&lt;p&gt;另外，我们还可以安装 Prettier 插件进行&lt;strong&gt;更精细&lt;/strong&gt;的代码格式化。下一段将插件的时候，会讲解。&lt;/p&gt;
&lt;h3 id=&#34;21、智能提示-IntelliSense&#34;&gt;21、智能提示 IntelliSense&lt;/h3&gt;
&lt;p&gt;VS Code 默认对 JavaScript、TypeScript、JSON、HTML、CSS、SCSS、Less 这 7 种语言（文件）提供了&lt;strong&gt;智能提示&lt;/strong&gt;的支持。其他编程语言则需要先安装相应的插件才能支持。&lt;/p&gt;
&lt;p&gt;在 VS Code 插件职场中，下图是最受欢迎的 8 种&lt;a href=&#34;https://marketplace.visualstudio.com/search?target=VSCode&amp;amp;category=Programming%20Languages&amp;amp;sortBy=Installs&#34;&gt;编程语言插件&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201656.png&#34; alt=&#34;20211013_1120&#34;&gt;&lt;/p&gt;
&lt;p&gt;智能提示的功能很强大， 包括函数介绍、代码自动补全等等。&lt;/p&gt;
&lt;h3 id=&#34;22、调试与运行&#34;&gt;22、调试与运行&lt;/h3&gt;
&lt;p&gt;VS Code &lt;strong&gt;内置&lt;/strong&gt;了对 Node.js 运行时的调试支持，可以直接调试  JavaScript 和 TypeScript。其他编程语言的调试，则需要先安装相应的插件才能支持。&lt;/p&gt;
&lt;p&gt;在 VS Code 插件市场中，下图是最受欢迎的几种调试插件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312200938.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;23、文件传输：sftp&#34;&gt;23、文件传输：sftp&lt;/h3&gt;
&lt;p&gt;如果你需要将本地文件通过 ftp 的形式上传到局域网的服务器（需要先把服务端的配置搭建好），可以安装 &lt;code&gt;sftp&lt;/code&gt; 这个插件，很好用。在公司会经常用到。&lt;/p&gt;
&lt;p&gt;步骤如下：&lt;/p&gt;
&lt;p&gt;（1）安装插件 &lt;code&gt;sftp&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;（2）配置 &lt;code&gt;sftp.json&lt;/code&gt; 文件。 插件安装完成后，输入快捷键「cmd+shift+P」弹出命令面板，然后输入 &lt;code&gt;sftp:config&lt;/code&gt;，回车，当前工程的&lt;code&gt;.vscode&lt;/code&gt; 文件夹下就会自动生成一个 &lt;code&gt;sftp.json&lt;/code&gt; 文件，我们需要在这个文件里配置的内容可以是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;host&lt;/code&gt;：服务器的 IP 地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;username&lt;/code&gt;：用户名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;privateKeyPath&lt;/code&gt;：存放在本地的已配置好的用于登录工作站的密钥文件（也可以是 ppk 文件）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;remotePath&lt;/code&gt;：工作站上与本地工程同步的文件夹路径，需要和本地工程文件根目录同名，且在使用 sftp 上传文件之前，要手动在工作站上 mkdir 生成这个根目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ignore&lt;/code&gt;：指定在使用 sftp: sync to remote 的时候忽略的文件及文件夹，注意每一行后面有逗号，最后一行没有逗号&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举例如下：(注意，其中的注释需要去掉)&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-json&#34; data-language=&#34;json&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;host&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;192.168.xxx.xxx&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//服务器ip&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;port&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//端口，sftp模式是22&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;username&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//用户名&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;password&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//密码&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;protocol&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;sftp&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//模式&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;agent&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token null keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;privateKeyPath&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token null keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;passphrase&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token null keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;passive&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;interactiveAuth&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;remotePath&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/root/node/build/&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//服务器上的文件地址&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;context&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;./server/build&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//本地的文件地址&lt;/span&gt;

  &lt;span class=&#34;token property&#34;&gt;&#34;uploadOnSave&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//监听保存并上传&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;syncMode&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;update&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;watcher&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;//监听外部文件&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;&#34;files&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//外部文件的绝对路径&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;&#34;autoUpload&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;&#34;autoDelete&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;ignore&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;//忽略项&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#34;**/.vscode/**&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#34;**/.git/**&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#34;**/.DS_Store&#34;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（3）在 VS Code 的当前文件里，选择「右键 -&amp;gt; upload」，就可以将本地的代码上传到 指定的 ftp 服务器上（也就是在上方 &lt;code&gt;host&lt;/code&gt; 中配置的服务器 ip）。&lt;/p&gt;
&lt;p&gt;我们还可以选择「右键 -&amp;gt; Diff with Remote」，就可以将本地的代码和 ftp 服务器上的代码做对比，非常方便。&lt;/p&gt;
&lt;h3 id=&#34;24、沉浸模式-禅模式&#34;&gt;24、沉浸模式 / 禅模式&lt;/h3&gt;
&lt;p&gt;程序员写代码需要专注，有时需要进入一种心流。VS Code 给我们提供了一种全屏下的沉浸模式，周围的面板都会被隐藏起来，只显示编辑器部分。&lt;/p&gt;
&lt;p&gt;操作方法：菜单栏选择「查看 - 外观 - 禅模式」即可；或者按下快捷键 &lt;code&gt;Cmd + K&lt;/code&gt;，放手，再按 &lt;code&gt;Z&lt;/code&gt; 也可以达到目的。&lt;/p&gt;
&lt;h3 id=&#34;正则表达式批量删除字符串&#34;&gt;正则表达式批量删除字符串&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：将文本中的字符串 &lt;code&gt;axxxxb&lt;/code&gt;，批量替换为 &lt;code&gt;ab&lt;/code&gt;。其中，开头字符 a 和 结尾字符 b 固定，中间 xxx 长度不确定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决&lt;/strong&gt;：传统查找替换无法胜任。可以使用 VScode 正则表达式功能，查找 &lt;code&gt;a.*?b&lt;/code&gt; 替换为 &lt;code&gt;ab&lt;/code&gt; 即可。其中 &lt;code&gt;?&lt;/code&gt; 是禁止贪婪匹配，否则会误删很多内容。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;拓展需求&lt;/strong&gt;：需求 —— 将文本中的字符串 &lt;code&gt;axxxx&lt;/code&gt;，批量替换为 &lt;code&gt;a&lt;/code&gt;。其中，开头字符 a 固定，后面的 xxx 长度不确定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决&lt;/strong&gt;：传统查找替换无法胜任。可以使用 VScode 正则表达式功能，查找 &lt;code&gt;a.*?\n&lt;/code&gt; 替换为 &lt;code&gt;a\n&lt;/code&gt; 即可。&lt;/p&gt;
&lt;h2 id=&#34;六、三头六臂：VS-Code-插件介绍-插件推荐&#34;&gt;六、三头六臂：VS Code 插件介绍 &amp;amp; 插件推荐&lt;/h2&gt;
&lt;p&gt;VS Code 有一个很强大的功能就是支持插件扩展，让你的编辑器仿佛拥有了三头六臂。&lt;/p&gt;
&lt;h3 id=&#34;安装插件&#34;&gt;安装插件&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201702.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图中，点击红框部分，即可在顶部输入框里，查找你想要的插件名，然后进行安装。&lt;/p&gt;
&lt;p&gt;插件安装完成后，记得重启软件（或者点击插件位置的 “重新加载”），插件才会生效。&lt;/p&gt;
&lt;p&gt;另外，我们还可以访问官网的插件市场来安装插件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VS Code 插件市场（官方）：https://marketplace.visualstudio.com/vscode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;插件的安装目录&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows：：&lt;code&gt;%USERPROFILE%\.vscode\extensions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;macOS：&lt;code&gt;~/.vscode/extensions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;macOS：&lt;code&gt;~/.vscode/extensions&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;插件的类型&#34;&gt;插件的类型&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201709.png&#34; alt=&#34;20211013_1757_2&#34;&gt;&lt;/p&gt;
&lt;p&gt;插件市场的首页有四个模块，可以作为重要的信息来源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Featured：由  VS Code 团队精心推荐的插件。&lt;/li&gt;
&lt;li&gt;Trending：近期热门插件。&lt;/li&gt;
&lt;li&gt;Most Popular：按总安装量排序的插件。&lt;/li&gt;
&lt;li&gt;Recently Added：最新发布的插件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312200932.png&#34; alt=&#34;20211013_1758&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312200925.png&#34; alt=&#34;20211013_1955&#34;&gt;&lt;/p&gt;
&lt;p&gt;插件市场至少有 17 种类型的插件：（按照数量排序）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Themes：主题插件&lt;/li&gt;
&lt;li&gt; Programming Languages：编程语言插件&lt;/li&gt;
&lt;li&gt; Snippets：代码片段&lt;/li&gt;
&lt;li&gt; Extension Packs：插件包，里面包括多个插件&lt;/li&gt;
&lt;li&gt; Formatters：代码格式化&lt;/li&gt;
&lt;li&gt; Linters：静态检查&lt;/li&gt;
&lt;li&gt; Debuggers：调试器&lt;/li&gt;
&lt;li&gt; Keymaps：快捷键映射&lt;/li&gt;
&lt;li&gt; Visualization：可视化&lt;/li&gt;
&lt;li&gt; Language Packs：各国的语言插件&lt;/li&gt;
&lt;li&gt; Azure：Azure 云计算&lt;/li&gt;
&lt;li&gt; Data Science：数据科学&lt;/li&gt;
&lt;li&gt; SCM Providers：源代码控制管理器（source control manager）&lt;/li&gt;
&lt;li&gt;Notebooks&lt;/li&gt;
&lt;li&gt;Education：教育&lt;/li&gt;
&lt;li&gt; Testing：测试相关&lt;/li&gt;
&lt;li&gt; Machine Learning：机器学习&lt;/li&gt;
&lt;li&gt; Others：其他&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;插件的过滤显示&#34;&gt;插件的过滤显示&lt;/h3&gt;
&lt;p&gt;在 VS  Code 中打开插件管理视图，可以针对已安装的插件，进行过滤展示。&lt;/p&gt;
&lt;p&gt;1）点击插件视图右上角的&lt;code&gt;...&lt;/code&gt; 按钮，可以展示不同状态的插件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201958.png&#34; alt=&#34;20211013_2011&#34;&gt;&lt;/p&gt;
&lt;p&gt;2）在搜索框输入字符 &lt;code&gt;@&lt;/code&gt;，会展示出不同类型的过滤器：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201716.png&#34; alt=&#34;20211013_2015&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常见的过滤器如下&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;1）按大类搜：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@builtin&lt;/code&gt;：显示 VS Code 内置的插件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@disabled&lt;/code&gt;：显示被禁用的插件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@enabled&lt;/code&gt;：显示已启用的插件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@installed&lt;/code&gt;：显示已安装的插件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@outdated&lt;/code&gt;：显示待更新的插件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2）精准搜索：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@id&lt;/code&gt;：按 id 显示插件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@tag&lt;/code&gt;：根据标签显示插件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3）对插件进行排序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@sort:installs&lt;/code&gt;：根据插件的安装量排序&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@sourt:rating&lt;/code&gt;：根据插件的评分排序&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@sort:name&lt;/code&gt;：根据插件名字的字母顺序排序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4）组合搜索：（举例）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@installed @category:themes&lt;/code&gt;：显示已安装的主题插件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@sort:installs java&lt;/code&gt;：对 Java 相关的插件按照安装量排序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面的内容，我来列举一些常见的插件，这些插件都很实用，小伙伴们可以按需安装。注意：每一类插件里，&lt;strong&gt;顺序越靠前，越实用&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;1、基本插件&#34;&gt;1、基本插件&lt;/h3&gt;
&lt;h4 id=&#34;Chinese-Simplified-Language-Pack-for-Visual-Studio-Code&#34;&gt;Chinese (Simplified) Language Pack for Visual Studio Code&lt;/h4&gt;
&lt;p&gt;让软件显示为简体中文语言。&lt;/p&gt;
&lt;h3 id=&#34;2、Git-相关插件&#34;&gt;2、Git 相关插件&lt;/h3&gt;
&lt;h4 id=&#34;GitLens-【荐】&#34;&gt;GitLens 【荐】&lt;/h4&gt;
&lt;p&gt;我强烈建议你安装插件 &lt;code&gt;GitLens&lt;/code&gt;，它是 VS Code 中我最推荐的一个插件，简直是 Git 神器，码农必备。如果你不知道，那真是 out 了。&lt;/p&gt;
&lt;p&gt;GitLens 在 Git 管理上有很多强大的功能，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将光标放置在代码的当前行，可以看到这样代码的提交者是谁，以及提交时间。这一点，是 GitLens 最便捷的功能。&lt;/li&gt;
&lt;li&gt;查看某个 commit 的代码改动记录&lt;/li&gt;
&lt;li&gt;查看不同的分支&lt;/li&gt;
&lt;li&gt;可以将两个 commit 进行代码对比&lt;/li&gt;
&lt;li&gt;甚至可以将两个 branch 分支进行整体的代码对比。这一点，简直是 GitLens 最强大的功能。当我们在不同分支 review 代码的时候，就可以用到这一招。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;打开你的 Git 仓库，未安装  GitLens 时是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312200918.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;安装了  GitLens 之后是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201723.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图中，红框部分就是  GitLens 的功能，诸君可以自由发挥。&lt;/p&gt;
&lt;p&gt;补充一个有意思的趣事：Python 插件、Ruby 插件、GitLens 插件、Vetur 插件，这四个插件的开发者先后加入了微软。&lt;/p&gt;
&lt;h4 id=&#34;Git-History&#34;&gt;Git History&lt;/h4&gt;
&lt;p&gt;有些同学习惯使用编辑器中的 Git 管理工具，而不太喜欢要打开另外一个 Git UI 工具的同学，这一款插件满足你查询所有 Git 记录的需求。&lt;/p&gt;
&lt;h4 id=&#34;Local-History-【荐】&#34;&gt;Local History 【荐】&lt;/h4&gt;
&lt;p&gt;维护文件的本地历史记录。代码意外丢失时，有时可以救命。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201729.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3、代码智能提示插件&#34;&gt;3、代码智能提示插件&lt;/h3&gt;
&lt;h4 id=&#34;Vetur&#34;&gt;Vetur&lt;/h4&gt;
&lt;p&gt;Vue 多功能集成插件，包括：语法高亮，智能提示，emmet，错误提示，格式化，自动补全，debugger。VS Code 官方钦定 Vue 插件，Vue 开发者必备。&lt;/p&gt;
&lt;h4 id=&#34;ES7-React-Redux-GraphQL-React-Native-snippets&#34;&gt;ES7 React/Redux/GraphQL/React-Native snippets&lt;/h4&gt;
&lt;p&gt;React/Redux/react-router 的语法智能提示。&lt;/p&gt;
&lt;h4 id=&#34;JavaScript-ES6-code-snippets&#34;&gt;JavaScript(ES6) code snippets&lt;/h4&gt;
&lt;p&gt;ES6 语法智能提示，支持快速输入。&lt;/p&gt;
&lt;h4 id=&#34;javascript-console-utils：快速打印-log-日志【荐】&#34;&gt;javascript console utils：快速打印 log 日志【荐】&lt;/h4&gt;
&lt;p&gt;安装这个插件后，当我们按住快捷键「Cmd + Shift + L」后，即可自动出现日志 &lt;code&gt;console.log()&lt;/code&gt;。简直是日志党福音。&lt;/p&gt;
&lt;p&gt;当我们选中某个变量 &lt;code&gt;name&lt;/code&gt;，然后按住快捷键「Cmd + Shift + L」，即可自动出现这个变量的日志 &lt;code&gt;console.log(name)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;其他的同类插件还有：Turbo Console Log。&lt;/p&gt;
&lt;p&gt;不过，生产环境的代码，还是尽量少打日志比较好，避免出现一些异常。&lt;/p&gt;
&lt;p&gt;编程有三等境界：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第三等境界是打日志，这是最简单、便捷的方式，略显低级，一般新手或资深程序员偷懒时会用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二等境界是断点调试，在前端、Java、PHP、iOS 开发时非常常用，通过断点调试可以很直观地跟踪代码执行逻辑、调用栈、变量等，是非常实用的技巧。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第一等境界是测试驱动开发，在写代码之前先写测试。与第二等的断点调试刚好相反，大部分人不是很习惯这种方式，但在国外开发者或者敏捷爱好者看来，这是最高效的开发方式，在保证代码质量、重构等方面非常有帮助，是现代编程开发必不可少的一部分。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Code-Spell-Checker：单词拼写错误检查&#34;&gt;Code Spell Checker：单词拼写错误检查&lt;/h4&gt;
&lt;p&gt;这个拼写检查程序的目标是帮助捕获常见的单词拼写错误，可以检测驼峰命名。从此告别 Chinglish.&lt;/p&gt;
&lt;h4 id=&#34;Auto-Close-Tag、Auto-Rename-Tag&#34;&gt;Auto Close Tag、Auto Rename Tag&lt;/h4&gt;
&lt;p&gt;自动闭合配对的标签、自动重命名配对的标签。&lt;/p&gt;
&lt;h3 id=&#34;4、代码显示增强插件&#34;&gt;4、代码显示增强插件&lt;/h3&gt;
&lt;h4 id=&#34;Bracket-Pair-Colorizer-2：突出显示成对的括号【荐】&#34;&gt;Bracket Pair Colorizer 2：突出显示成对的括号【荐】&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Bracket Pair Colorizer 2&lt;/code&gt; 插件：以不同颜色显示成对的括号，并用连线标注括号范围。简称&lt;strong&gt;彩虹括号&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;另外，还有个 &lt;code&gt;Rainbow Brackets&lt;/code&gt; 插件，也可以突出显示成对的括号。&lt;/p&gt;
&lt;h4 id=&#34;highlight-icemode：选中相同的代码时，让高亮显示更加明显【荐】&#34;&gt;highlight-icemode：选中相同的代码时，让高亮显示更加明显【荐】&lt;/h4&gt;
&lt;p&gt;VSCode 自带的高亮显示，实在是不够显眼。用插件支持一下吧。&lt;/p&gt;
&lt;p&gt;所用了这个插件之后，VS Code 自带的高亮就可以关掉了：&lt;/p&gt;
&lt;p&gt;在用户设置里添加 &lt;code&gt;&#34;editor.selectionHighlight&#34;: false&lt;/code&gt; 即可。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://blog.csdn.net/palmer_kai/article/details/79548164&#34;&gt;vscode 选中后相同内容高亮插件推荐&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;vscode-icons&#34;&gt;vscode-icons&lt;/h4&gt;
&lt;p&gt;vscode-icons 会根据文件的后缀名来显示不同的图标，让你更直观地知道每种文件是什么类型的。&lt;/p&gt;
&lt;h4 id=&#34;indent-rainbow：突出显示代码缩进&#34;&gt;indent-rainbow：突出显示代码缩进&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;indent-rainbow&lt;/code&gt; 插件：突出显示代码缩进。&lt;/p&gt;
&lt;p&gt;安装完成后，效果如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312200911.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;TODO-Highlight&#34;&gt;TODO Highlight&lt;/h4&gt;
&lt;p&gt;写代码过程中，突然发现一个 Bug，但是又不想停下来手中的活，以免打断思路，怎么办？按照代码规范，我们一般是在代码中加个 TODO 注释。比如：（注意，一定要写成大写 &lt;code&gt;TODO&lt;/code&gt;，而不是小写的 &lt;code&gt;todo&lt;/code&gt;）&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;//TODO:这里有个bug，我一会儿再收拾你&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;//FIXME:我也不知道为啥， but it works only that way.&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装了插件 &lt;code&gt;TODO Highlight&lt;/code&gt; 之后，按住「Cmd + Shift + P」打开命令面板，输入「Todohighlist」，选择相关的命令，我们就可以看到一个 todoList 的清单。&lt;/p&gt;
&lt;h4 id=&#34;Better-Comments&#34;&gt;Better Comments&lt;/h4&gt;
&lt;p&gt;为注释添加更醒目、带分类的色彩。&lt;/p&gt;
&lt;h3 id=&#34;5、代码格式化插件&#34;&gt;5、代码格式化插件&lt;/h3&gt;
&lt;h4 id=&#34;Prettier：代码格式化&#34;&gt;Prettier：代码格式化&lt;/h4&gt;
&lt;p&gt;Prettier 是一个代码格式化工具，&lt;strong&gt;只关注格式化，但不具备校验功能&lt;/strong&gt;。在一个多人协同开发的团队中，统一的代码编写规范非常重要。一套规范可以让我们编写的代码达到一致的风格，提高代码的可读性和统一性。自然维护性也会有所提高，代码的展示也会更加美观。&lt;/p&gt;
&lt;p&gt;步骤如下：&lt;/p&gt;
&lt;p&gt;（1）安装插件 &lt;code&gt;Prettier&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;（2）在项目的根路径下，新建文件&lt;code&gt;.prettierrc&lt;/code&gt;，并在文件中添加如下内容：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-json&#34; data-language=&#34;json&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;printWidth&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;150&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;tabWidth&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;semi&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;singleQuote&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;trailingComma&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;es5&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;tslintIntegration&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;insertSpaceBeforeFunctionParenthesis&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的内容，是我自己的配置，你可以参考。更多配置，可见官方文档：&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://prettier.io/docs/en/options.html&#34;&gt;https://prettier.io/docs/en/options.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;（3）Mac 用户按快捷键「Option + Shift + F」，Win 用户按快捷键「Alt + shift + F」，即可完成代码的格式化。如果你的 VS Code 设置的是自动格式化代码，那么这一步可以忽略。&lt;/p&gt;
&lt;h4 id=&#34;ESLint：代码格式的校验&#34;&gt;ESLint：代码格式的校验&lt;/h4&gt;
&lt;p&gt;日常开发中，建议用 Prettier 做&lt;strong&gt;代码格式化&lt;/strong&gt;，然后用 eslint 做&lt;strong&gt;格式校验&lt;/strong&gt;。很多人把这两个插件的功能弄混了。&lt;/p&gt;
&lt;p&gt;一般做法是：格式化建议是由程序员手动触发，格式校验由系统强制校验。通过 Prettier &lt;strong&gt;手动&lt;/strong&gt;触发格式化，是为了让用户有感知；通过 eslint 做&lt;strong&gt;强制&lt;/strong&gt;校验之后，如果代码的格式不符合要求，系统就禁止你提交代码。&lt;/p&gt;
&lt;h4 id=&#34;Beautify&#34;&gt;Beautify&lt;/h4&gt;
&lt;p&gt;代码格式化工具。&lt;/p&gt;
&lt;p&gt;备注：相比之下，Prettier 是当前最流行的代码格式化工具，比 Beautify 用得更多。&lt;/p&gt;
&lt;h4 id=&#34;Paste-JSON-as-Code&#34;&gt;Paste JSON as Code&lt;/h4&gt;
&lt;p&gt;此插件可以将剪贴板中的 JSON 字符串转换成工作代码。支持多种语言。&lt;/p&gt;
&lt;h4 id=&#34;JS-CSS-HTML-Formatter【荐】&#34;&gt;JS-CSS-HTML Formatter【荐】&lt;/h4&gt;
&lt;p&gt;保存文件时，自动格式化 HTML、CSS、JS 代码。&lt;/p&gt;
&lt;h3 id=&#34;6、图片相关插件&#34;&gt;6、图片相关插件&lt;/h3&gt;
&lt;h4 id=&#34;Polacode-2020：生成代码截图-【荐】&#34;&gt;Polacode-2020：生成代码截图 【荐】&lt;/h4&gt;
&lt;p&gt;可以把代码片段保存成美观的图片，主题不同，代码的配色方案也不同，也也可以自定义设置图片的边框颜色、大小、阴影。&lt;/p&gt;
&lt;p&gt;尤其是在我们做 PPT 分享时需要用到代码片段时，或者需要在网络上优雅地分享代码片段时，这一招很有用。&lt;/p&gt;
&lt;p&gt;生成的效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312200904.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;其他同类插件：&lt;code&gt;CodeSnap&lt;/code&gt;。我们也可以通过 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://carbon.now.sh/&#34;&gt;https://carbon.now.sh/&lt;/a&gt; 这个网站生成代码图片&lt;/p&gt;
&lt;p&gt;有人可能会说：直接用 QQ 截图不行吗？可以是可以，但不够美观、不够干净。&lt;/p&gt;
&lt;h4 id=&#34;Image-Preview-【荐】&#34;&gt;Image Preview 【荐】&lt;/h4&gt;
&lt;p&gt;图片预览。鼠标移动到图片 url 上的时候，会自动显示图片的预览和图片尺寸。&lt;/p&gt;
&lt;h3 id=&#34;7、CSS相关插件&#34;&gt;7、CSS 相关插件&lt;/h3&gt;
&lt;h4 id=&#34;CSS-Peek&#34;&gt;CSS Peek&lt;/h4&gt;
&lt;p&gt;增强 HTML 和 CSS 之间的关联，快速查看该元素上的 CSS 样式。&lt;/p&gt;
&lt;h4 id=&#34;Vue-CSS-Peek&#34;&gt;Vue CSS Peek&lt;/h4&gt;
&lt;p&gt;CSS Peek 对 Vue 没有支持，该插件提供了对 Vue 文件的支持。&lt;/p&gt;
&lt;h4 id=&#34;Color-Info&#34;&gt;Color Info&lt;/h4&gt;
&lt;p&gt;这个便捷的插件，将为你提供你在 CSS 中使用颜色的相关信息。你只需在颜色上悬停光标，就可以预览色块中色彩模型的（HEX、 RGB、HSL 和 CMYK）相关信息了。&lt;/p&gt;
&lt;h3 id=&#34;8、Mardown-相关插件&#34;&gt;8、Mardown 相关插件&lt;/h3&gt;
&lt;h4 id=&#34;Markdown-Preview-Github-Styling-【荐】&#34;&gt;Markdown Preview Github Styling 【荐】&lt;/h4&gt;
&lt;p&gt;以 GitHub 风格预览 Markdown 样式，十分简洁优雅。就像下面这样，左侧书写 Markdown 文本，右侧预览 Markdown 的渲染效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201736.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;Markdown-Preview-Enhanced&#34;&gt;Markdown Preview Enhanced&lt;/h4&gt;
&lt;p&gt;预览 Markdown 样式。&lt;/p&gt;
&lt;h4 id=&#34;Markdown-All-in-One&#34;&gt;Markdown All in One&lt;/h4&gt;
&lt;p&gt;这个插件将帮助你更高效地在 Markdown 中编写文档。&lt;/p&gt;
&lt;h3 id=&#34;9、通用工具类插件&#34;&gt;9、通用工具类插件&lt;/h3&gt;
&lt;h4 id=&#34;sftp：文件传输-【荐】&#34;&gt;sftp：文件传输 【荐】&lt;/h4&gt;
&lt;p&gt;如果你需要将本地文件通过 ftp 的形式上传到局域网的服务器，可以安装 &lt;code&gt;sftp&lt;/code&gt; 这个插件，很好用。在公司会经常用到。&lt;/p&gt;
&lt;p&gt;详细配置已经在上面讲过。&lt;/p&gt;
&lt;h4 id=&#34;Live-Server-【荐】&#34;&gt;Live Server 【荐】&lt;/h4&gt;
&lt;p&gt;在本地启动一个服务器，代码写完后可以实现「热更新」，实时地在网页中看到运行效果。就不需要每次都得手动刷新页面了。&lt;/p&gt;
&lt;p&gt;使用方式：安装插件后，开始写代码；代码写完后，右键选择「Open with Live Server」。&lt;/p&gt;
&lt;h4 id=&#34;open-in-browser&#34;&gt;open in browser&lt;/h4&gt;
&lt;p&gt;安装 &lt;code&gt;open in browser&lt;/code&gt; 插件后，在 HTML 文件中「右键选择 --&amp;gt; Open in Default Browser」，即可在浏览器中预览网页。&lt;/p&gt;
&lt;h4 id=&#34;Project-Manager&#34;&gt;Project Manager&lt;/h4&gt;
&lt;p&gt;工作中，我们经常会来回切换多个项目，每次都要找到对应项目的目录再打开，比较麻烦。Project Manager 插件可以解决这样的烦恼，它提供了专门的视图来展示你的项目，我们可以把常用的项目保存在这里，需要时一键切换，十分方便。&lt;/p&gt;
&lt;h4 id=&#34;WakaTime-【荐】&#34;&gt;WakaTime 【荐】&lt;/h4&gt;
&lt;p&gt;统计在 VS Code 里写代码的时间。统计效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312200858.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;Code-Time&#34;&gt;Code Time&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Code Time&lt;/code&gt; 插件：记录编程时间，统计代码行数。&lt;/p&gt;
&lt;p&gt;安装该插件后，VS Code 底部的状态栏右下角可以看到时间统计。点击那个位置之后，选择「Code Time Dashboard」，即可查看统计结果。&lt;/p&gt;
&lt;p&gt;备注：团长试了一下这个 code time 插件，发现统计结果不是很准。&lt;/p&gt;
&lt;h4 id=&#34;File-Tree-to-Text-Generator：快速生成文件的目录树&#34;&gt;File Tree to Text Generator：快速生成文件的目录树&lt;/h4&gt;
&lt;p&gt;如题。&lt;/p&gt;
&lt;h4 id=&#34;Settings-Sync&#34;&gt;Settings Sync&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;地址：&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/shanalikhan/code-settings-sync&#34;&gt;https://github.com/shanalikhan/code-settings-sync&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;作用：多台设备之间，同步 VS Code 配置。通过登录 GitHub 账号来使用这个同步工具。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同步的详细操作，下一段会讲。&lt;/p&gt;
&lt;p&gt;另外，北京时间的 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://zhuanlan.zhihu.com/p/184868336&#34;&gt;2020 年 8 月 14 日&lt;/a&gt;，微软发布 Visual Studio Code 1.48 稳定版。此版本&lt;strong&gt;原生&lt;/strong&gt;支持用户同步 VS Code 的配置，只需要登录微软账号或者 GitHub 账号即可。&lt;/p&gt;
&lt;h4 id=&#34;vscode-syncing&#34;&gt;vscode-syncing&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;地址：&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/nonoroazoro/vscode-syncing&#34;&gt;https://github.com/nonoroazoro/vscode-syncing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;作用：多台设备之间，同步 VS Code 配置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;minapp：小程序支持&#34;&gt;minapp：小程序支持&lt;/h4&gt;
&lt;p&gt;小程序开发必备插件。&lt;/p&gt;
&lt;h4 id=&#34;Search-node-modules&#34;&gt;Search node_modules&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;node_modules&lt;/code&gt; 模块里面的文件夹和模块实在是太多了，根本不好找。好在安装 &lt;code&gt;Search node_modules&lt;/code&gt; 这个插件后，输入快捷键「Cmd + Shift + P」，然后输入 &lt;code&gt;node_modules&lt;/code&gt;，在弹出的选项中选择 &lt;code&gt;Search node_modules&lt;/code&gt;，即可搜索 node_modules 里的模块。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312200857.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;RemoteHub&#34;&gt;RemoteHub&lt;/h4&gt;
&lt;p&gt;不要惊讶，RemoteHub 和 GitLens 是同一个作者开发出来的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RemoteHub&lt;/code&gt; 插件的作用是：可以在本地查看 GitHub 网站上的代码，而不需要将代码下载到本地。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312200857.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个插件目前使用的人还不多，赶紧安装起来尝尝鲜吧。&lt;/p&gt;
&lt;h4 id=&#34;Live-Share：实时编码分享&#34;&gt;Live Share：实时编码分享&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Live Share&lt;/code&gt; 这个神奇的插件是由微软官方出品，它的作用是：&lt;strong&gt;实时编码分享&lt;/strong&gt;。也就是说，它可以实现你和你的同伴一起写代码。这绝对就是&lt;strong&gt;结对编程&lt;/strong&gt;的神器啊。&lt;/p&gt;
&lt;p&gt;安装方式：&lt;/p&gt;
&lt;p&gt;打开插件管理，搜索 “live share”，安装。安装后重启 VS Code，在左侧会多出一个按钮：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201743.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图中，点击红框部分，登录后就可以分享你的工作空间了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312200850.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;Import-Cost&#34;&gt;Import Cost&lt;/h4&gt;
&lt;p&gt;在项目开发过程中，我们会引入很多 npm 包，有时候可能只用到了某个包里的一个方法，却引入了整个包，导致代码体积增大很多。&lt;code&gt;Import Cost&lt;/code&gt; 插件可以在代码中友好的提示我们，当前引入的包会增加多少体积，这很有助于帮我们优化代码的体积。&lt;/p&gt;
&lt;h3 id=&#34;10、主题插件&#34;&gt;10、主题插件&lt;/h3&gt;
&lt;p&gt;给你的 VS Code 换个皮肤吧，免费的那种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Dracula Theme&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Material Theme&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nebula Theme&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme&#34;&gt;One Dark Pro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One Monokai Theme&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Monokai Pro&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ayu&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://marketplace.visualstudio.com/items?itemName=akarlsten.vscode-snazzy-akarlsten&#34;&gt;Snazzy Plus&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://marketplace.visualstudio.com/items?itemName=alexanderte.dainty-vscode&#34;&gt;Dainty&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SynthWave &#39;84&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitHub Plus Theme：白色主题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Horizon Theme：红色主题&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;七、无缝切换：VS-Code-配置云同步&#34;&gt;七、无缝切换：VS Code 配置云同步&lt;/h2&gt;
&lt;p&gt;我们可以将配置云同步，这样的话，当我们换个电脑时，即可将配置一键同步到本地，就不需要重新安装插件了，也不需要重新配置软件。&lt;/p&gt;
&lt;p&gt;下面讲的两个同步方法，都可以，看你自己需要。方法 1 是 VS Code 自带的同步功能，操作简单。方法 2 需要安装插件，支持更多的自定义配置。&lt;/p&gt;
&lt;h3 id=&#34;方法1：使用-VS-Code-自带的同步功能&#34;&gt;方法 1：使用 VS Code 自带的同步功能&lt;/h3&gt;
&lt;p&gt;1、&lt;strong&gt;配置同步&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;（1）在菜单栏选择「 Code --&amp;gt; 首选项 --&amp;gt; 打开设置同步」：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201750.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;（2）选择需要同步的配置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312200843.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;（3）通过 Microsoft 或者 GitHub 账号登录。 上图中，点击 “登录并打开”，然后弹出如下界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201757.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图中，使用  微软账号或者 GitHub 账号登录：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312201803.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;（4）同步完成后，菜单栏会显示 “首先项同步已打开”，最左侧也会多出一个同步图标，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312202032.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;2、&lt;strong&gt;管理同步&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;（1）点击菜单栏「Code --&amp;gt; 首选项 --&amp;gt; 设置同步已打开」，会弹出如下界面，进行相应的同步管理即可：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312200836.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;（2）换另外一个电脑时，登录相同的账号，即可完成同步。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://blog.csdn.net/baidu_33340703/article/details/106967884&#34;&gt;VS Code 原生的配置同步功能 ——Settings Sync&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;方法2：使用插件-settings-sync&#34;&gt;方法 2：使用插件 &lt;code&gt;settings-sync&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;使用方法 2，我们还可以把配置分享其他用户，也可以把其他用户的配置给自己用。&lt;/p&gt;
&lt;p&gt;1、&lt;strong&gt;配置同步&lt;/strong&gt;：（将自己本地的配置云同步到 GitHub）&lt;/p&gt;
&lt;p&gt;（1）安装插件 &lt;code&gt;settings-sync&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;（2）安装完插件后，在插件里使用 GitHub 账号登录。&lt;/p&gt;
&lt;p&gt;（3）登录后在 vscode 的界面中，可以选择一个别人的 gist；也可以忽略掉，然后创建一个属于自己的 gist。&lt;/p&gt;
&lt;p&gt;（4）使用快捷键 「Command + Shift + P」，在弹出的命令框中输入 sync，并选择「更新 / 上传配置」，这样就可以把最新的配置上传到 GitHub。&lt;/p&gt;
&lt;p&gt;2、&lt;strong&gt;管理同步&lt;/strong&gt;：（换另外一个电脑时，从云端同步配置到本地）&lt;/p&gt;
&lt;p&gt;（1）当我们换另外一台电脑时，可以先在 VS Code 中安装 &lt;code&gt;settings-sync&lt;/code&gt; 插件。&lt;/p&gt;
&lt;p&gt;（2）安装完插件后，在插件里使用 GitHub 账号登录。&lt;/p&gt;
&lt;p&gt;（3）登录之后，插件的界面上，会自动出现之前的同步记录：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312200829.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图中，我们点击最新的那条记录，就可将云端的最新配置同步到本地：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2022/03/1220220312200825.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果你远程的配置没有成功同步到本地，那可能是网络的问题，此时，可以使用快捷键 「Command + Shift + P」，在弹出的命令框中输入 sync，并选择「下载配置」，多试几次。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用其他人的配置&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;如果我们想使用别人的配置，首先需要对方提供给你 gist。具体步骤如下：&lt;/p&gt;
&lt;p&gt;（1）安装插件 &lt;code&gt;settings-sync&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;（2）使用快捷键 「Command + Shift + P」，在弹出的命令框中输入 sync，并选择「下载配置」&lt;/p&gt;
&lt;p&gt;（3）在弹出的界面中，选择「Download Public Gist」，然后输入别人分享给你的 gist。注意，这一步不需要登录 GitHub 账号。&lt;/p&gt;
&lt;h2 id=&#34;最后一段&#34;&gt;最后一段&lt;/h2&gt;
&lt;p&gt;如果你还有什么推荐的 VS Code 插件，欢迎留言。&lt;/p&gt;
&lt;p&gt;大家完全不用担心这篇文章会过时，随着 VS Code 的版本更新和插件更新，本文也会随之更新。关于 VS Code 内容的后续更新，你可以关注我在 GitHub 上的前端入门项目，项目地址是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;https://github.com/qianguyihao/Web&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个超级详细和真诚的前端入门项目。&lt;/p&gt;
&lt;h2 id=&#34;todo&#34;&gt;todo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/qianguyihao/Web/issues/84&#34;&gt;issues 84&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考链接&#34;&gt;参考链接&lt;/h2&gt;
&lt;h3 id=&#34;2021年&#34;&gt;2021 年&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;中文版 Awesome VS Code：https://github.com/formulahendry/awesome-vscode-cn&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2020年&#34;&gt;2020 年&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://juejin.im/post/5ea40c6751882573b219777d&#34;&gt;VSCode 插件大全｜ VSCode 高级玩家之第二篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;http://www.supuwoerc.xyz/tools/vscode/plugins.html&#34;&gt;http://www.supuwoerc.xyz/tools/vscode/plugins.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://zhuanlan.zhihu.com/p/99462672&#34;&gt;如何让 VS Code 更好用 10 倍？这里有一份 VS Code 新手指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://lyreal666.com/%E9%82%A3%E4%BA%9B%E4%BD%A0%E5%BA%94%E8%AF%A5%E8%80%83%E8%99%91%E5%8D%B8%E8%BD%BD%E7%9A%84-VSCode-%E6%89%A9%E5%B1%95/#more&#34;&gt;那些你应该考虑卸载的 VSCode 扩展&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://juejin.im/post/5d74eb5c51882525017787d9&#34;&gt;VS Code 折腾记 - (16) 推荐一波实用的插件集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://juejin.im/post/5db66672f265da4d0e009aad&#34;&gt;VSCode 前端必备插件，有可能你装了却不知道如何使用？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://juejin.im/post/5a08d1d6f265da430f31950e&#34;&gt;能让你开发效率翻倍的 VSCode 插件配置（上）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://segmentfault.com/a/1190000012811886&#34;&gt;https://segmentfault.com/a/1190000012811886&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://idoubi.cc/2019/07/08/vscode-sublime-theme/&#34;&gt;「Vscode」打造类 sublime 的高颜值编辑器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://lsqy.tech/2020/03/14/20200314Mac-Vscode%E5%BF%AB%E6%8D%B7%E9%94%AE/&#34;&gt;Mac Vscode 快捷键&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mp.weixin.qq.com/s?src=11&amp;amp;timestamp=1591581536&amp;amp;ver=2387&amp;amp;signature=i4xLZlLe1Gkl7OiBIhPO*VSeNB5lzFgTY-dgNW9E9ZbtIAv4bnJ1RdAAZdhvDw*cg-DmMcUa-V8NSUdV-tthmXZCq3ht4edCweq6v0QxKjnh8IuAxyyh5qymdRui*8iE&amp;amp;new=1&#34;&gt;使用 VSCode 的一些技巧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;转载来源，[GitHub](https://github.com/qianguyihao/Web/blob/master/00 - 前端工具 / 01-VS Code 的使用.md) 推荐关注 star！&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/bilicard.css&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="vscode" />
        <category term="插件" />
        <category term="编码" />
        <updated>2021-10-18T04:25:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.17lai.site/posts/465d2738/</id>
        <title>如何使用 Traefik V2 在 Ubuntu20.04 上面来做 Dockers Containers 的反向代理</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/465d2738/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;How To Use Traefik v2 as a Reverse Proxy for Docker Containers on Ubuntu 20.04&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Traefik 适合配合 Dockers swarm 做服务， Dockers portainer 做管理，ELK 集群做监控日志。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1420211014200800.png&#34; alt=&#34;Traefik&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;traefik&lt;/code&gt; 与 &lt;code&gt;nginx&lt;/code&gt; 一样，是一款优秀的反向代理工具，或者叫 &lt;code&gt;Edge Router&lt;/code&gt;。至于使用它的原因则基于以下几点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无须重启即可更新配置&lt;/li&gt;
&lt;li&gt;自动的服务发现与负载均衡&lt;/li&gt;
&lt;li&gt;与 &lt;code&gt;docker&lt;/code&gt; 完美集成，基于 &lt;code&gt;container label&lt;/code&gt; 的配置&lt;/li&gt;
&lt;li&gt;漂亮的 &lt;code&gt;dashboard&lt;/code&gt; 界面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;metrics&lt;/code&gt; 的支持，支持对 &lt;code&gt;prometheus&lt;/code&gt; 和 &lt;code&gt;k8s&lt;/code&gt; 集成&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Introduction&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; can be an efficient way to run web applications in production, but you may want to run multiple applications on the same Docker host. In this situation, you’ll need to set up a reverse proxy. This is because you only want to expose ports &lt;code&gt;80&lt;/code&gt; and &lt;code&gt;443&lt;/code&gt; to the rest of the world.&lt;/p&gt;
&lt;p&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://traefik.io/&#34;&gt;Traefik&lt;/a&gt; is a Docker-aware reverse proxy that includes a monitoring dashboard. Traefik v1 has been widely used for a while, and &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.digitalocean.com/community/tutorials/how-to-use-traefik-as-a-reverse-proxy-for-docker-containers-on-ubuntu-20-04&#34;&gt;you can follow this earlier tutorial to install Traefik v1&lt;/a&gt;). But in this tutorial, you’ll install and configure Traefik v2, which includes quite a few differences.&lt;/p&gt;
&lt;p&gt;The biggest difference between Traefik v1 and v2 is that &lt;em&gt;frontends&lt;/em&gt; and &lt;em&gt;backends&lt;/em&gt; were removed and their combined functionality spread out across &lt;em&gt;routers&lt;/em&gt;, &lt;em&gt;middlewares&lt;/em&gt;, and &lt;em&gt;services&lt;/em&gt;. Previously a backend did the job of making modifications to requests and getting that request to whatever was supposed to handle it. Traefik v2 provides more separation of concerns by introducing middlewares that can modify requests before sending them to a service. Middlewares make it easier to specify a single modification step that might be used by a lot of different routes so that they can be reused (such as HTTP Basic Auth, which you’ll see later). A router can also use many different middlewares.&lt;/p&gt;
&lt;p&gt;In this tutorial you’ll configure Traefik v2 to route requests to two different web application containers: a &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;http://wordpress.org/&#34;&gt;Wordpress&lt;/a&gt; container and an &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.adminer.org/&#34;&gt;Adminer&lt;/a&gt; container, each talking to a &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.mysql.com/&#34;&gt;MySQL&lt;/a&gt; database. You’ll configure Traefik to serve everything over HTTPS using &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://letsencrypt.org/&#34;&gt;Let’s Encrypt&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;To complete this tutorial, you will need the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.digitalocean.com/products/linux-distribution/ubuntu/&#34;&gt;One Ubuntu 20.04 server&lt;/a&gt; with a sudo non-root user and a firewall. You can set this up by following our &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04&#34;&gt;Ubuntu 20.04 initial server setup guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Docker installed on your server, which you can accomplish by following &lt;strong&gt;Steps 1 and 2&lt;/strong&gt; of &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04&#34;&gt;How to Install and Use Docker on Ubuntu 20.04&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Docker Compose installed using the instructions from &lt;strong&gt;Step 1&lt;/strong&gt; of &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-compose-on-ubuntu-20-04&#34;&gt;How to Install Docker Compose on Ubuntu 20.04&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A domain and three A records, &lt;code&gt;db-admin.your_domain&lt;/code&gt;, &lt;code&gt;blog.your_domain&lt;/code&gt; and &lt;code&gt;monitor.your_domain&lt;/code&gt;. Each should point to the IP address of your server. You can learn how to point domains to DigitalOcean Droplets by reading through &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.digitalocean.com/docs/networking/dns/&#34;&gt;DigitalOcean’s Domains and DNS documentation&lt;/a&gt;. Throughout this tutorial, substitute your domain for &lt;code&gt;your_domain&lt;/code&gt; in the configuration files and examples.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Step-1-—-Configuring-and-Running-Traefik&#34;&gt;Step 1 — Configuring and Running Traefik&lt;/h2&gt;
&lt;p&gt;The Traefik project has an &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://hub.docker.com/_/traefik&#34;&gt;official Docker image&lt;/a&gt;, so you will use that to run Traefik in a Docker container.&lt;/p&gt;
&lt;p&gt;But before you get your Traefik container up and running, you need to create a configuration file and set up an encrypted password so you can access the monitoring dashboard.&lt;/p&gt;
&lt;p&gt;You’ll use the &lt;code&gt;htpasswd&lt;/code&gt; utility to create this encrypted password. First, install the utility, which is included in the &lt;code&gt;apache2-utils&lt;/code&gt; package:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt-get&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; apache2-utils&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then generate the password with &lt;code&gt;htpasswd&lt;/code&gt;. Substitute &lt;code&gt;secure_password&lt;/code&gt; with the password you’d like to use for the Traefik admin user:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;htpasswd -nb admin secure_password&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output from the program will look like this:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;Outputadmin:$apr1$ruca84Hq$mbjdMZBAG.KWn7vfN/SNK/&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll use this output in the Traefik configuration file to set up HTTP Basic Authentication for the Traefik health check and monitoring dashboard. Copy the entire output line so you can paste it later.&lt;/p&gt;
&lt;p&gt;To configure the Traefik server, you’ll create two new configuration files called &lt;code&gt;traefik.toml&lt;/code&gt; and &lt;code&gt;traefik_dynamic.toml&lt;/code&gt; using the TOML format. &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/toml-lang/toml&#34;&gt;TOML&lt;/a&gt; is a configuration language similar to INI files, but standardized. &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://docs.traefik.io/providers/overview/&#34;&gt;These files let us configure the Traefik server and various integrations&lt;/a&gt;, or &lt;code&gt;providers&lt;/code&gt;, that you want to use. In this tutorial, you will use three of Traefik’s available providers: &lt;code&gt;api&lt;/code&gt;, &lt;code&gt;docker&lt;/code&gt;, and &lt;code&gt;acme&lt;/code&gt;. The last of these, &lt;code&gt;acme&lt;/code&gt;, supports TLS certificates using Let’s Encrypt.&lt;/p&gt;
&lt;p&gt;Create and open &lt;code&gt;traefik.toml&lt;/code&gt; using &lt;code&gt;nano&lt;/code&gt; or your preferred text editor:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;nano&lt;/span&gt; traefik.toml&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, you want to specify the ports that Traefik should listen on using the &lt;code&gt;entryPoints&lt;/code&gt; section of your config file. You want two because you want to listen on port &lt;code&gt;80&lt;/code&gt; and &lt;code&gt;443&lt;/code&gt;. Let’s call these &lt;code&gt;web&lt;/code&gt; (port &lt;code&gt;80&lt;/code&gt;) and &lt;code&gt;websecure&lt;/code&gt; (port &lt;code&gt;443&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Add the following configurations:&lt;/p&gt;
&lt;p&gt;traefik.toml&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-toml&#34; data-language=&#34;toml&#34;&gt;&lt;code class=&#34;language-toml&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;entryPoints&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;entryPoints.web&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;token key property&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;:80&#34;&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;entryPoints.web.http.redirections.entryPoint&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
      &lt;span class=&#34;token key property&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;websecure&#34;&lt;/span&gt;
      &lt;span class=&#34;token key property&#34;&gt;scheme&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;https&#34;&lt;/span&gt;

  &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;entryPoints.websecure&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;token key property&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;:443&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that you are also automatically redirecting traffic to be handled over TLS.&lt;/p&gt;
&lt;p&gt;Next, configure the Traefik &lt;code&gt;api&lt;/code&gt;, which gives you access to both the API and your dashboard interface. The heading of &lt;code&gt;[api]&lt;/code&gt; is all that you need because the dashboard is then enabled by default, but you’ll be explicit for the time being.&lt;/p&gt;
&lt;p&gt;Add the following code:&lt;/p&gt;
&lt;p&gt;traefik.toml&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-toml&#34; data-language=&#34;toml&#34;&gt;&lt;code class=&#34;language-toml&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;dashboard&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To finish securing your web requests you want to use Let’s Encrypt to generate valid TLS certificates. Traefik v2 supports Let’s Encrypt out of the box and you can configure it by creating a &lt;em&gt;certificates resolver&lt;/em&gt; of the type &lt;code&gt;acme&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s configure your certificates resolver now using the name &lt;code&gt;lets-encrypt&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;traefik.toml&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-toml&#34; data-language=&#34;toml&#34;&gt;&lt;code class=&#34;language-toml&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;certificatesResolvers.lets-encrypt.acme&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;email&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;your_email@your_domain&#34;&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;storage&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;acme.json&#34;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;certificatesResolvers.lets-encrypt.acme.tlsChallenge&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This section is called &lt;code&gt;acme&lt;/code&gt; because &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/ietf-wg-acme/acme/&#34;&gt;ACME&lt;/a&gt; is the name of the protocol used to communicate with Let’s Encrypt to manage certificates. The Let’s Encrypt service requires registration with a valid email address, so to have Traefik generate certificates for your hosts, set the &lt;code&gt;email&lt;/code&gt; key to your email address. You then specify that you will store the information that you will receive from Let’s Encrypt in a JSON file called &lt;code&gt;acme.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;acme.tlsChallenge&lt;/code&gt; section allows us to specify how Let’s Encrypt can verify that the certificate. You’re configuring it to serve a file as part of the challenge over port &lt;code&gt;443&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, you need to configure Traefik to work with Docker.&lt;/p&gt;
&lt;p&gt;Add the following configurations:&lt;/p&gt;
&lt;p&gt;traefik.toml&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-toml&#34; data-language=&#34;toml&#34;&gt;&lt;code class=&#34;language-toml&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;providers.docker&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;watch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;network&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;web&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;docker&lt;/code&gt; provider enables Traefik to act as a proxy in front of Docker containers. You’ve configured the provider to &lt;code&gt;watch&lt;/code&gt; for new containers on the &lt;code&gt;web&lt;/code&gt; network, which you’ll create soon.&lt;/p&gt;
&lt;p&gt;Our final configuration uses the &lt;code&gt;file&lt;/code&gt; provider. With Traefik v2, static and dynamic configurations can’t be mixed and matched. To get around this, you will use &lt;code&gt;traefik.toml&lt;/code&gt; to define your static configurations and then keep your dynamic configurations in another file, which you will call &lt;code&gt;traefik_dynamic.toml&lt;/code&gt;. Here you are using the &lt;code&gt;file&lt;/code&gt; provider to tell Traefik that it should read in dynamic configurations from a different file.&lt;/p&gt;
&lt;p&gt;Add the following &lt;code&gt;file&lt;/code&gt; provider:&lt;/p&gt;
&lt;p&gt;traefik.toml&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;providers.file&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  filename &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;traefik_dynamic.toml&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your completed &lt;code&gt;traefik.toml&lt;/code&gt; will look like this:&lt;/p&gt;
&lt;p&gt;traefik.toml&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-toml&#34; data-language=&#34;toml&#34;&gt;&lt;code class=&#34;language-toml&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;entryPoints&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;entryPoints.web&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;token key property&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;:80&#34;&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;entryPoints.web.http.redirections.entryPoint&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
      &lt;span class=&#34;token key property&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;websecure&#34;&lt;/span&gt;
      &lt;span class=&#34;token key property&#34;&gt;scheme&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;https&#34;&lt;/span&gt;

  &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;entryPoints.websecure&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;token key property&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;:443&#34;&lt;/span&gt;

&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;dashboard&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;

&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;certificatesResolvers.lets-encrypt.acme&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;email&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;your_email@your_domain&#34;&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;storage&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;acme.json&#34;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;certificatesResolvers.lets-encrypt.acme.tlsChallenge&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;providers.docker&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;watch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;network&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;web&#34;&lt;/span&gt;

&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;providers.file&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;traefik_dynamic.toml&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save and close the file.&lt;/p&gt;
&lt;p&gt;Now let’s create &lt;code&gt;traefik_dynamic.toml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The dynamic configuration values that you need to keep in their own file are the &lt;em&gt;middlewares&lt;/em&gt; and the &lt;em&gt;routers&lt;/em&gt;. To put your dashboard behind a password you need to customize the API’s &lt;em&gt;router&lt;/em&gt; and configure a &lt;em&gt;middleware&lt;/em&gt; to handle HTTP basic authentication. Let’s start by setting up the middleware.&lt;/p&gt;
&lt;p&gt;The middleware is configured on a per-protocol basis and since you’re working with HTTP you’ll specify it as a section chained off of &lt;code&gt;http.middlewares&lt;/code&gt;. Next comes the name of your middleware so that you can reference it later, followed by the type of middleware that it is, which will be &lt;code&gt;basicAuth&lt;/code&gt; in this case. Let’s call your middleware &lt;code&gt;simpleAuth&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Create and open a new file called &lt;code&gt;traefik_dynamic.toml&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;nano&lt;/span&gt; traefik_dynamic.toml&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the following code. This is where you’ll paste the output from the &lt;code&gt;htpasswd&lt;/code&gt; command:&lt;/p&gt;
&lt;p&gt;traefik_dynamic.toml&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-toml&#34; data-language=&#34;toml&#34;&gt;&lt;code class=&#34;language-toml&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;http.middlewares.simpleAuth.basicAuth&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;users&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#34;admin:$apr1$ruca84Hq$mbjdMZBAG.KWn7vfN/SNK/&#34;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To configure the router for the api you’ll once again be chaining off of the protocol name, but instead of using &lt;code&gt;http.middlewares&lt;/code&gt;, you’ll use &lt;code&gt;http.routers&lt;/code&gt; followed by the name of the router. In this case, the &lt;code&gt;api&lt;/code&gt; provides its own named router that you can configure by using the &lt;code&gt;[http.routers.api]&lt;/code&gt; section. You’ll configure the domain that you plan on using with your dashboard also by setting the &lt;code&gt;rule&lt;/code&gt; key using a host match, the entrypoint to use &lt;code&gt;websecure&lt;/code&gt;, and the middlewares to include &lt;code&gt;simpleAuth&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Add the following configurations:&lt;/p&gt;
&lt;p&gt;traefik_dynamic.toml&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-toml&#34; data-language=&#34;toml&#34;&gt;&lt;code class=&#34;language-toml&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;http.routers.api&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Host(`monitor.your_domain`)&#34;&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;entrypoints&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;websecure&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;middlewares&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;simpleAuth&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;api@internal&#34;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;http.routers.api.tls&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;token key property&#34;&gt;certResolver&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;lets-encrypt&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;web&lt;/code&gt; entry point handles port &lt;code&gt;80&lt;/code&gt;, while the &lt;code&gt;websecure&lt;/code&gt; entry point uses port &lt;code&gt;443&lt;/code&gt; for TLS/SSL. You automatically redirect all of the traffic on port &lt;code&gt;80&lt;/code&gt; to the &lt;code&gt;websecure&lt;/code&gt; entry point to force secure connections for all requests.&lt;/p&gt;
&lt;p&gt;Notice the last three lines here configure a &lt;em&gt;service&lt;/em&gt;, enable tls, and configure &lt;code&gt;certResolver&lt;/code&gt; to &lt;code&gt;&#34;lets-encrypt&#34;&lt;/code&gt;. Services are the final step to determining where a request is finally handled. The &lt;code&gt;api@internal&lt;/code&gt; service is a built-in service that sits behind the API that you expose. Just like routers and middlewares, services can be configured in this file, but you won’t need to do that to achieve your desired result.&lt;/p&gt;
&lt;p&gt;Your completed &lt;code&gt;traefik_dynamic.toml&lt;/code&gt; file will look like this:&lt;/p&gt;
&lt;p&gt;traefik_dynamic.toml&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-toml&#34; data-language=&#34;toml&#34;&gt;&lt;code class=&#34;language-toml&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;http.middlewares.simpleAuth.basicAuth&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;users&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#34;admin:$apr1$ruca84Hq$mbjdMZBAG.KWn7vfN/SNK/&#34;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;http.routers.api&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Host(`monitor.your_domain`)&#34;&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;entrypoints&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;websecure&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;middlewares&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;simpleAuth&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;api@internal&#34;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;http.routers.api.tls&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;token key property&#34;&gt;certResolver&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;lets-encrypt&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save the file and exit the editor.&lt;/p&gt;
&lt;p&gt;With these configurations in place, you will now start Traefik.&lt;/p&gt;
&lt;h2 id=&#34;Step-2-–-Running-the-Traefik-Container&#34;&gt;Step 2 – Running the Traefik Container&lt;/h2&gt;
&lt;p&gt;In this step you will create a Docker network for the proxy to share with containers. You will then access the Traefik dashboard. The Docker network is necessary so that you can use it with applications that are run using Docker Compose.&lt;/p&gt;
&lt;p&gt;Create a new Docker network called &lt;code&gt;web&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; network create web&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the Traefik container starts, you will add it to this network. Then you can add additional containers to this network later for Traefik to proxy to.&lt;/p&gt;
&lt;p&gt;Next, create an empty file that will hold your Let’s Encrypt information. You’ll share this into the container so Traefik can use it:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;touch&lt;/span&gt; acme.json&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Traefik will only be able to use this file if the root user inside of the container has unique read and write access to it. To do this, lock down the permissions on &lt;code&gt;acme.json&lt;/code&gt; so that only the owner of the file has read and write permission.&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;chmod&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;600&lt;/span&gt; acme.json&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the file gets passed to Docker, the owner will automatically change to the &lt;strong&gt;root&lt;/strong&gt; user inside the container.&lt;/p&gt;
&lt;p&gt;Finally, create the Traefik container with this command:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run -d &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
  -v /var/run/docker.sock:/var/run/docker.sock &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
  -v &lt;span class=&#34;token environment constant&#34;&gt;$PWD&lt;/span&gt;/traefik.toml:/traefik.toml &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
  -v &lt;span class=&#34;token environment constant&#34;&gt;$PWD&lt;/span&gt;/traefik_dynamic.toml:/traefik_dynamic.toml &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
  -v &lt;span class=&#34;token environment constant&#34;&gt;$PWD&lt;/span&gt;/acme.json:/acme.json &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
  -p &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;:80 &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
  -p &lt;span class=&#34;token number&#34;&gt;443&lt;/span&gt;:443 &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
  --network web &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
  --name traefik &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
  traefik:v2.2&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command is a little long. Let’s break it down.&lt;/p&gt;
&lt;p&gt;You use the &lt;code&gt;-d&lt;/code&gt; flag to run the container in the background as a daemon. You then share your &lt;code&gt;docker.sock&lt;/code&gt; file into the container so that the Traefik process can listen for changes to containers. You also share the &lt;code&gt;traefik.toml&lt;/code&gt; and &lt;code&gt;traefik_dynamic.toml&lt;/code&gt; configuration files into the container, as well as &lt;code&gt;acme.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, you map ports &lt;code&gt;:80&lt;/code&gt; and &lt;code&gt;:443&lt;/code&gt; of your Docker host to the same ports in the Traefik container so Traefik receives all HTTP and HTTPS traffic to the server.&lt;/p&gt;
&lt;p&gt;You set the network of the container to &lt;code&gt;web&lt;/code&gt;, and you name the container &lt;code&gt;traefik&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, you use the &lt;code&gt;traefik:v2.2&lt;/code&gt; image for this container so that you can guarantee that you’re not running a completely different version than this tutorial is written for.&lt;/p&gt;
&lt;p&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://docs.docker.com/engine/reference/builder/#entrypoint&#34;&gt;A Docker image’s &lt;code&gt;ENTRYPOINT&lt;/code&gt; is a command that always runs when a container is created from the image&lt;/a&gt;. In this case, the command is the &lt;code&gt;traefik&lt;/code&gt; binary within the container. You can pass additional arguments to that command when you launch the container, but you’ve configured all of your settings in the &lt;code&gt;traefik.toml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;With the container started, you now have a dashboard you can access to see the health of your containers. You can also use this dashboard to visualize the routers, services, and middlewares that Traefik has registered. You can try to access the monitoring dashboard by pointing your browser to &lt;code&gt;https://monitor.your_domain/dashboard/&lt;/code&gt; (the trailing &lt;code&gt;/&lt;/code&gt; is required).&lt;/p&gt;
&lt;p&gt;You will be prompted for your username and password, which are &lt;strong&gt;admin&lt;/strong&gt; and the password you configured in Step 1.&lt;/p&gt;
&lt;p&gt;Once logged in, you’ll see the Traefik interface:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1420211014200207.png&#34; alt=&#34;Empty Traefik dashboard&#34;&gt;&lt;/p&gt;
&lt;p&gt;You will notice that there are already some routers and services registered, but those are the ones that come with Traefik and the router configuration that you wrote for the API.&lt;/p&gt;
&lt;p&gt;You now have your Traefik proxy running, and you’ve configured it to work with Docker and monitor other containers. In the next step you will start some containers for Traefik to proxy.&lt;/p&gt;
&lt;h2 id=&#34;Step-3-—-Registering-Containers-with-Traefik&#34;&gt;Step 3 — Registering Containers with Traefik&lt;/h2&gt;
&lt;p&gt;With the Traefik container running, you’re ready to run applications behind it. Let’s launch the following containers behind Traefik:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A blog using the &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://hub.docker.com/_/wordpress/&#34;&gt;official WordPress image&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A database management server using the &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://hub.docker.com/_/adminer/&#34;&gt;official Adminer image&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You’ll manage both of these applications with Docker Compose using a &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Create and open the &lt;code&gt;docker-compose.yml&lt;/code&gt; file in your editor:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;nano&lt;/span&gt; docker-compose.yml&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the following lines to the file to specify the version and the networks you’ll use:&lt;/p&gt;
&lt;p&gt;docker-compose.yml&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-yaml&#34; data-language=&#34;yaml&#34;&gt;&lt;code class=&#34;language-yaml&#34;&gt;&lt;span class=&#34;token key atrule&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;3&#34;&lt;/span&gt;

&lt;span class=&#34;token key atrule&#34;&gt;networks&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;external&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;internal&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;external&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;false&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You use Docker Compose version &lt;code&gt;3&lt;/code&gt; because it’s the newest major version of the Compose file format.&lt;/p&gt;
&lt;p&gt;For Traefik to recognize your applications, they must be part of the same network, and since you created the network manually, you pull it in by specifying the network name of &lt;code&gt;web&lt;/code&gt; and setting &lt;code&gt;external&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. Then you define another network so that you can connect your exposed containers to a database container that you won’t expose through Traefik. You’ll call this network &lt;code&gt;internal&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, you’ll define each of your &lt;code&gt;services&lt;/code&gt;, one at a time. Let’s start with the &lt;code&gt;blog&lt;/code&gt; container, which you’ll base on the official WordPress image. Add this configuration to the bottom of the file:&lt;/p&gt;
&lt;p&gt;docker-compose.yml&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-yaml&#34; data-language=&#34;yaml&#34;&gt;&lt;code class=&#34;language-yaml&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;...&lt;/span&gt;

&lt;span class=&#34;token key atrule&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;blog&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; wordpress&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;4.9.8&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;apache
    &lt;span class=&#34;token key atrule&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token key atrule&#34;&gt;WORDPRESS_DB_PASSWORD&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; traefik.http.routers.blog.rule=Host(`blog.your_domain`)
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; traefik.http.routers.blog.tls=true
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; traefik.http.routers.blog.tls.certresolver=lets&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;encrypt
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; traefik.port=80
    &lt;span class=&#34;token key atrule&#34;&gt;networks&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; internal
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; web
    &lt;span class=&#34;token key atrule&#34;&gt;depends_on&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; mysql&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;environment&lt;/code&gt; key lets you specify environment variables that will be set inside of the container. By not setting a value for &lt;code&gt;WORDPRESS_DB_PASSWORD&lt;/code&gt;, you’re telling Docker Compose to get the value from your shell and pass it through when you create the container. You will define this environment variable in your shell before starting the containers. This way you don’t hard-code passwords into the configuration file.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;labels&lt;/code&gt; section is where you specify configuration values for Traefik. Docker labels don’t do anything by themselves, but Traefik reads these so it knows how to treat containers. Here’s what each of these labels does:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;traefik.http.routers.adminer.rule=Host(`````blog.your_domain`````)&lt;/code&gt; creates a new &lt;em&gt;router&lt;/em&gt; for your container and then specifies the routing rule used to determine if a request matches this container.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;traefik.routers.custom_name.tls=true&lt;/code&gt; specifies that this router should use TLS.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;traefik.routers.custom_name.tls.certResolver=lets-encrypt&lt;/code&gt; specifies that the certificates resolver that you created earlier called &lt;code&gt;lets-encrypt&lt;/code&gt; should be used to get a certificate for this route.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;traefik.port&lt;/code&gt; specifies the exposed port that Traefik should use to route traffic to this container.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this configuration, all traffic sent to your Docker host on port &lt;code&gt;80&lt;/code&gt; or &lt;code&gt;443&lt;/code&gt; with the domain of &lt;code&gt;blog.your_domain&lt;/code&gt; will be routed to the &lt;code&gt;blog&lt;/code&gt; container.&lt;/p&gt;
&lt;p&gt;You assign this container to two different networks so that Traefik can find it via the &lt;code&gt;web&lt;/code&gt; network and it can communicate with the database container through the &lt;code&gt;internal&lt;/code&gt; network.&lt;/p&gt;
&lt;p&gt;Lastly, the &lt;code&gt;depends_on&lt;/code&gt; key tells Docker Compose that this container needs to start &lt;em&gt;after&lt;/em&gt; its dependencies are running. Since WordPress needs a database to run, you must run your &lt;code&gt;mysql&lt;/code&gt; container before starting your &lt;code&gt;blog&lt;/code&gt; container.&lt;/p&gt;
&lt;p&gt;Next, configure the MySQL service:&lt;/p&gt;
&lt;p&gt;docker-compose.yml&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-yaml&#34; data-language=&#34;yaml&#34;&gt;&lt;code class=&#34;language-yaml&#34;&gt;&lt;span class=&#34;token key atrule&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;...&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;mysql&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; mysql&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5.7&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token key atrule&#34;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;networks&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; internal
    &lt;span class=&#34;token key atrule&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; traefik.enable=false&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’re using the official MySQL 5.7 image for this container. You’ll notice that you’re once again using an &lt;code&gt;environment&lt;/code&gt; item without a value. The &lt;code&gt;MYSQL_ROOT_PASSWORD&lt;/code&gt; and &lt;code&gt;WORDPRESS_DB_PASSWORD&lt;/code&gt; variables will need to be set to the same value to make sure that your WordPress container can communicate with the MySQL. You don’t want to expose the &lt;code&gt;mysql&lt;/code&gt; container to Traefik or the outside world, so you’re only assigning this container to the &lt;code&gt;internal&lt;/code&gt; network. Since Traefik has access to the Docker socket, the process will still expose a router for the &lt;code&gt;mysql&lt;/code&gt; container by default, so you’ll add the label &lt;code&gt;traefik.enable=false&lt;/code&gt; to specify that Traefik should not expose this container.&lt;/p&gt;
&lt;p&gt;Finally, define the Adminer container:&lt;/p&gt;
&lt;p&gt;docker-compose.yml&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-yaml&#34; data-language=&#34;yaml&#34;&gt;&lt;code class=&#34;language-yaml&#34;&gt;&lt;span class=&#34;token key atrule&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;...&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;adminer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; adminer&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;4.6.3&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;standalone
    &lt;span class=&#34;token key atrule&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; traefik.http.routers.adminer.rule=Host(`db&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;admin.your_domain`)
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; traefik.http.routers.adminer.tls=true
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; traefik.http.routers.adminer.tls.certresolver=lets&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;encrypt
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; traefik.port=8080
    &lt;span class=&#34;token key atrule&#34;&gt;networks&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; internal
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; web
    &lt;span class=&#34;token key atrule&#34;&gt;depends_on&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; mysql&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This container is based on the official Adminer image. The &lt;code&gt;network&lt;/code&gt; and &lt;code&gt;depends_on&lt;/code&gt; configuration for this container exactly match what you’re using for the &lt;code&gt;blog&lt;/code&gt; container.&lt;/p&gt;
&lt;p&gt;The line &lt;code&gt;traefik.http.routers.adminer.rule=Host(`````db-admin.your_domain`````)&lt;/code&gt; tells Traefik to examine the host requested. If it matches the pattern of &lt;code&gt;db-admin.your_domain&lt;/code&gt;, Traefik will route the traffic to the &lt;code&gt;adminer&lt;/code&gt; container over port &lt;code&gt;8080&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Your completed &lt;code&gt;docker-compose.yml&lt;/code&gt; file will look like this:&lt;/p&gt;
&lt;p&gt;docker-compose.yml&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-yaml&#34; data-language=&#34;yaml&#34;&gt;&lt;code class=&#34;language-yaml&#34;&gt;&lt;span class=&#34;token key atrule&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;3&#34;&lt;/span&gt;

&lt;span class=&#34;token key atrule&#34;&gt;networks&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;external&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;internal&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;external&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;false&lt;/span&gt;

&lt;span class=&#34;token key atrule&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;blog&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; wordpress&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;4.9.8&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;apache
    &lt;span class=&#34;token key atrule&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token key atrule&#34;&gt;WORDPRESS_DB_PASSWORD&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; traefik.http.routers.blog.rule=Host(`blog.your_domain`)
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; traefik.http.routers.blog.tls=true
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; traefik.http.routers.blog.tls.certresolver=lets&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;encrypt
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; traefik.port=80
    &lt;span class=&#34;token key atrule&#34;&gt;networks&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; internal
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; web
    &lt;span class=&#34;token key atrule&#34;&gt;depends_on&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; mysql

  &lt;span class=&#34;token key atrule&#34;&gt;mysql&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; mysql&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5.7&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token key atrule&#34;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;networks&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; internal
    &lt;span class=&#34;token key atrule&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; traefik.enable=false

  &lt;span class=&#34;token key atrule&#34;&gt;adminer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; adminer&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;4.6.3&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;standalone
    &lt;span class=&#34;token key atrule&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; traefik.http.routers.adminer.rule=Host(`db&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;admin.your_domain`)
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; traefik.http.routers.adminer.tls=true
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; traefik.http.routers.adminer.tls.certresolver=lets&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;encrypt
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; traefik.port=8080
    &lt;span class=&#34;token key atrule&#34;&gt;networks&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; internal
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; web
    &lt;span class=&#34;token key atrule&#34;&gt;depends_on&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; mysql&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save the file and exit the text editor.&lt;/p&gt;
&lt;p&gt;Next, set values in your shell for the &lt;code&gt;WORDPRESS_DB_PASSWORD&lt;/code&gt; and &lt;code&gt;MYSQL_ROOT_PASSWORD&lt;/code&gt; variables:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;WORDPRESS_DB_PASSWORD&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;secure_database_password
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;secure_database_password&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Substitute &lt;code&gt;secure_database_password&lt;/code&gt; with your desired database password. Remember to use the same password for both &lt;code&gt;WORDPRESS_DB_PASSWORD&lt;/code&gt; and &lt;code&gt;MYSQL_ROOT_PASSWORD&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With these variables set, run the containers using &lt;code&gt;docker-compose&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;docker-compose&lt;/span&gt; up -d&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now watch the Traefik admin dashboard while it populates.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1420211014200110.png&#34; alt=&#34;Populated Traefik dashboard&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you explore the &lt;strong&gt;Routers&lt;/strong&gt; section you will find routers for &lt;code&gt;adminer&lt;/code&gt; and &lt;code&gt;blog&lt;/code&gt; configured with TLS:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1420211014200142.png&#34; alt=&#34;HTTP Routers w/ TLS&#34;&gt;&lt;/p&gt;
&lt;p&gt;Navigate to &lt;code&gt;blog.your_domain&lt;/code&gt;, substituting &lt;code&gt;your_domain&lt;/code&gt; with your domain. You’ll be redirected to a TLS connection and you can now complete the WordPress setup:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1420211014200114.png&#34; alt=&#34;WordPress setup screen&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now access Adminer by visiting &lt;code&gt;db-admin.your_domain&lt;/code&gt; in your browser, again substituting &lt;code&gt;your_domain&lt;/code&gt; with your domain. The &lt;code&gt;mysql&lt;/code&gt; container isn’t exposed to the outside world, but the &lt;code&gt;adminer&lt;/code&gt; container has access to it through the &lt;code&gt;internal&lt;/code&gt; Docker network that they share using the &lt;code&gt;mysql&lt;/code&gt; container name as a hostname.&lt;/p&gt;
&lt;p&gt;On the Adminer login screen, enter &lt;code&gt;root&lt;/code&gt; for &lt;strong&gt;Username&lt;/strong&gt;, enter &lt;code&gt;mysql&lt;/code&gt; for &lt;strong&gt;Server&lt;/strong&gt;, and enter the value you set for &lt;code&gt;MYSQL_ROOT_PASSWORD&lt;/code&gt; for the &lt;strong&gt;Password&lt;/strong&gt;. Leave &lt;strong&gt;Database&lt;/strong&gt; empty. Now press &lt;strong&gt;Login&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Once logged in, you’ll see the Adminer user interface.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1420211014200132.png&#34; alt=&#34;Adminer connected to the MySQL database&#34;&gt;&lt;/p&gt;
&lt;p&gt;Both sites are now working, and you can use the dashboard at &lt;code&gt;monitor.your_domain&lt;/code&gt; to keep an eye on your applications.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this tutorial, you configured Traefik v2 to proxy requests to other applications in Docker containers.&lt;/p&gt;
&lt;p&gt;Traefik’s declarative configuration at the application container level makes it easy to configure more services, and there’s no need to restart the &lt;code&gt;traefik&lt;/code&gt; container when you add new applications to proxy traffic to since Traefik notices the changes immediately through the Docker socket file it’s monitoring.&lt;/p&gt;
&lt;p&gt;To learn more about what you can do with Traefik v2, head over to &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://doc.traefik.io/traefik/&#34;&gt;the official Traefik documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;服务集群&#34;&gt;服务集群&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;k8s 太重了，虽然也有 k3s 之类的轻量级 k8s 解决方案，不过我还是选择了原生的 docker swarm。VPS 安装好 Docker 之后，不需要额外安装软件，就可以马上建立集群。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 集群初始化，节点成为 manager 节点&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; swarm init --advertise-addr&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;x.x.x.x

&lt;span class=&#34;token comment&#34;&gt;# 集群丢失 Leader 时，强制重建集群&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; swarm init --advertise-addr&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;x.x.x.x --force-new-cluster

&lt;span class=&#34;token comment&#34;&gt;# 获取作为 worker 节点加入集群的命令&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; swarm join-token worker

&lt;span class=&#34;token comment&#34;&gt;# 获取作为 manager 节点加入集群的命令&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; swarm join-token manager

&lt;span class=&#34;token comment&#34;&gt;# 加入集群&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; swarm &lt;span class=&#34;token function&#34;&gt;join&lt;/span&gt; --token xxx x.x.x.x:xxx --advertise-addr&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;x.x.x.x
&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参考：-2&#34;&gt;参考：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.digitalocean.com/community/tutorials/how-to-use-traefik-v2-as-a-reverse-proxy-for-docker-containers-on-ubuntu-20-04&#34;&gt;digitalocean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://shanyue.tech/op/traefik.html&#34;&gt;shanyue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/bilicard.css&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="docker" />
        <category term="traefik" />
        <category term="proxy" />
        <category term="swarm" />
        <category term="ubuntu" />
        <updated>2021-10-14T11:25:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.17lai.site/posts/462f1e5c/</id>
        <title>通过 IPV6 访问 Qnap NAS 中 Docker 的服务</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/462f1e5c/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;
&lt;p&gt;系统：QTS 4.3.6&lt;br&gt;
网络：IPV4 &amp;amp; IPV6&lt;br&gt;
Docker: 由 Container Station 提供&lt;/p&gt;
&lt;h2 id=&#34;问题-2&#34;&gt;问题&lt;/h2&gt;
&lt;p&gt;通过 ipv6 地址可以打开 NAS 的管理页面，但是无法访问 Docker 对应端口的服务。&lt;/p&gt;
&lt;h2 id=&#34;排查&#34;&gt;排查&lt;/h2&gt;
&lt;p&gt;QTS 中 Docker 使用的虚拟交换机网络没有启动 IPV6，且无法在虚拟交换机设置中手动启动。&lt;br&gt;
这样一来，Docker 只监听了 tcp4 的端口，对于主机上 tcp6 的端口的访问无法映射到 docker 容器上。&lt;/p&gt;
&lt;h2 id=&#34;解决方案-2&#34;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;在主机上开一个 tcp6 的端口，将其转发到主机上与 docker 关联的 tcp4 端口。&lt;br&gt;
即：&lt;br&gt;
docker(tcp4)–&amp;gt;host(tcp4)–&amp;gt;host(tcp6)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 qts 上安装包管理器：Entware. https://github.com/Entware/Entware/wiki/Install-on-QNAP-NAS&lt;/li&gt;
&lt;li&gt; 执行 opkg update, 更新&lt;/li&gt;
&lt;li&gt;安装端口转发工具，这里使用 socat：opkg install socat&lt;/li&gt;
&lt;li&gt; 设置转发 host (tcp6)–&amp;gt;host (tcp4):(socat TCP6-LISTEN:6880,reuseaddr,fork TCP4:127.0.0.1:7880 &amp;amp;)&lt;/li&gt;
&lt;li&gt; 大功告成&lt;/li&gt;
&lt;/ul&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/bilicard.css&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="nas" />
        <category term="docker" />
        <category term="qnap" />
        <category term="ipv6" />
        <updated>2021-10-12T05:42:55.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.17lai.site/posts/495db4d3/</id>
        <title>CMake 快速入门教程</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/495db4d3/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;1-cmake简介&#34;&gt;1.cmake 简介&lt;/h2&gt;
&lt;p&gt;cmake 是跨平台的 makefile 文件生成工具，是为了解决各个平台下面 make 工具不同造成的 makefile 文件格式不同的问题。也就是 cmake 是用来解决跨平台编译问题的。常见的还有 autotool 工具集，该工具集用于 GNU 软件协议的 makefile 文件生成，方便 GNU 包的编译和安装。&lt;/p&gt;
&lt;h2 id=&#34;2-cmake文件编辑规则&#34;&gt;2.cmake 文件编辑规则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1) &lt;strong&gt;命令不区分大小写，但是变量区分大小写&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;2) &lt;strong&gt;注释&lt;/strong&gt;使用 #符号&lt;/li&gt;
&lt;li&gt; 3) 命令如果有多个参数，互相之间用空格隔开&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-cmake保留变量&#34;&gt;3.cmake 保留变量&lt;/h2&gt;
&lt;p&gt;cmake 里面有很多的预定义变量，是程序环境固有的，比如 CUDA_NVCC_FLAGS, 不同的变量有固定的作用，比如 CUDA_NVCC_FLAGS 是 nvcc 的参数 list, 变量可以使用 set 命令和 list 命令进行赋值和追加值，要注意的是变量可能可以有多个值，值与值之间用分号分开，可以使用 set (var a b c) 给 var 赋值 a b c, 还可以使用 list 命令给 var 追加删除插入值等，不同的变量有不同的值域，需要查阅&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://cmake.org/documentation/&#34;&gt;手册&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-cmake变量引用&#34;&gt;4.cmake 变量引用&lt;/h2&gt;
&lt;p&gt;cmake 里面变量的取值引用要使用 ${var} 的形式，但是在赋值的时候是不需要的，和 shell 命令有点相似.&lt;/p&gt;
&lt;h2 id=&#34;5-cmake指定Debug和Release版本&#34;&gt;5.cmake 指定 Debug 和 Release 版本&lt;/h2&gt;
&lt;p&gt;指定 Debug 和 Release 一共有三种方法：&lt;/p&gt;
&lt;p&gt;1. 使用 ADD_COMPILE_OPTIONS () 加入 - g 指定 Debug 版本.&lt;/p&gt;
&lt;p&gt;2. 使用 SET (CMAKE_BUILD_TYPE Debug/Rrelease) 指定 Debug&lt;br&gt;
在下面加入：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-cmake&#34; data-language=&#34;cmake&#34;&gt;&lt;code class=&#34;language-cmake&#34;&gt;&lt;span class=&#34;token function&#34;&gt;SET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;CMAKE_CXX_FLAGS_DEBUG&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;$ENV{CXXFLAGS} -O0 -Wall -g2 -ggdb&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;SET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;CMAKE_CXX_FLAGS_RELEASE&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;$ENV{CXXFLAGS} -O3 -Wall&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的设置 C++ 编译选项，对于 C 语言，设置 CMAKE_C_FLAGS_DEBUG、CMAKE_._FLAGS_RELEASE 变量，一般来说最好两个都设置原因是 CMake 中有一个变量 CMAKE_BUILD_TYPE , 可以的取值是 Debug Release 等。当这个变量值为 Debug 的时候，CMake 会使用变量 CMAKE_CXX_FLAGS_DEBUG 和 CMAKE_C_FLAGS_DEBUG 中的字符串作为编译选项生成 Makefile&lt;/p&gt;
&lt;p&gt;编译动态库 or 静态库时，最好通过修改 CXXFLAGS 和 CFLAGS，以支持 - fPIC，这个选项有时是默认开启，有时默认关闭，但为了以后的应用，库文件最好都使用 - fPIC 编译&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;在使用 cmake 命令时加上 - DCMAKE_BUILD_TYPE=Debug/Release&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5-cmake指定生成文件&#34;&gt;5.cmake 指定生成文件&lt;/h2&gt;
&lt;p&gt;CUDA_ADD_LIBRARY () 指明目标文件是库文件，CUDA_ADD_EXECUTABLE () 指明生成的文件为可执行文件&lt;/p&gt;
&lt;h2 id=&#34;6-配置模板&#34;&gt;6. 配置模板&lt;/h2&gt;
&lt;p&gt;通常我们要在工程目录下面创建 include、src 文件夹，include 文件夹里面存放头文件，src 文件夹里面存放源代码，注意这时候的源代码里面包含头文件的路径应该是 “../include/xx.h”，然后在工程根目录下面创建 CMakeLists.txt 文件，里面写入命令。在编译的时候为了不搞乱工程目录，在工程根目录下面创建 build 文件夹，在里面使用 “cmake ..” 命令创建 CMakefile, 再 make 即可。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-cmake&#34; data-language=&#34;cmake&#34;&gt;&lt;code class=&#34;language-cmake&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;#指定cmake最低版本号&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;cmake_minimum_required&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;VERSION&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3.2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;#指定项目名称&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;PROJECT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Liner_Struct&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;#指定头文件目录，不同目录用空格隔开,目录中有空格可用引号&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#如果是相对路径，相对于CMakeLists.txt文件&lt;/span&gt;
&lt;span class=&#34;token property&#34;&gt;INCLUDE_DIRECTORIES&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;include&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;#指定源文件目录，DIR_SRCS值自定义变量，下面的命令对其进行了赋值&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;AUX_SOURCE_DIRECTORY&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;src DIR_SRCS&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;#设置变量用于存放所有的编译文件，&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#TEST_LINER_STRUCT是自定义变量，使用SET给其赋值&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;SET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;TEST_LINER_STRUCT &lt;span class=&#34;token punctuation&#34;&gt;${&lt;/span&gt;DIR_SRCS&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;#增加编译选项&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#判断是否为gcc编译器，如果是，增加编译选项&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#c99是c语言的标准，常用的还有c++标准c++11&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#下面的命令判断是否编译器是gcc&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#message命令是输出信息,例如下面的输出“optional:-std=c99”&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;CMAKE_COMPILER_IS_GNUCXX&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;ADD_COMPILE_OPTIONS&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;-std=c99&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;STATUS &lt;span class=&#34;token string&#34;&gt;&#34;optional:-std=c99&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;endif&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;CMAKE_COMPILER_IS_GNUCXX&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;#配置生成文件&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#${PROJECT_NAME}是cmake自带变量，其值和PROJECT()命令指定的一样&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#${TEST_LINER_STRUCT}是自定义变量，上文赋值的&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;ADD_EXECUTABLE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;PROJECT_NAME&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;${&lt;/span&gt;TEST_LINER_STRUCT&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;7-if-else语句&#34;&gt;7.&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://cmake.org/cmake/help/v3.0/command/if.html&#34;&gt;if-else&lt;/a&gt; 语句&lt;/h2&gt;
&lt;p&gt;cmake 中的 if-else 语句&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-cmake&#34; data-language=&#34;cmake&#34;&gt;&lt;code class=&#34;language-cmake&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;exp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
     cmdA
     cmdB
&lt;span class=&#34;token keyword&#34;&gt;elseif&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;exp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
      cmdC
&lt;span class=&#34;token keyword&#34;&gt;endif&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;exp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最简单得到一个应用&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-cmake&#34; data-language=&#34;cmake&#34;&gt;&lt;code class=&#34;language-cmake&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ARM&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;token comment&#34;&gt;#ARM平台&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;#非ARM平台 &lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;endif&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用 cmake -DARM=1 .. 时编译 ARM 代码，使用 cmake -DAMR=0 .. 编译非 ARM 代码&lt;/p&gt;
&lt;h2 id=&#34;8-与平台编译器的结合&#34;&gt;8. 与平台编译器的结合&lt;/h2&gt;
&lt;h3 id=&#34;8-1windows&#34;&gt;8.1windows&lt;/h3&gt;
&lt;p&gt;在 windows 上运行 cmake 可以生成对应的 VS 的工程文件，然后使用相应的 VS 打开工程就可以进行编译。要注意的是如果使用 VS2010 及其以前的版本，C 不支持 C99，也就是变量的命名必须放在函数或者域的最前面，不能放在中间，特别麻烦。VS2015 在安装后可能还需要打开 VS，新建工程时选择 VC&lt;ins&gt; 可能相关组件还没有安装，如果这时候使用 cmake 会提示找不到 C、C&lt;/ins&gt; 编译器（类似 yuNo CMAKE_CXX_COMPILER could be found）的错误。安装了相关的组件后 cmake 即不会有错误。&lt;/p&gt;
&lt;h3 id=&#34;8-2-为VS2015生成的项目&#34;&gt;8.2 为 VS2015 生成的项目&lt;/h3&gt;
&lt;p&gt;打开工程文件后可以看到有 3 个项目，其中只有一个和我们有直接关系，就是我们在 CMakeLists.txt 里面定义的 PROJECT_NAME, 剩下的两个是 ALL_BUILD 和 ZERO_CHECK.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ZERO_CHECK&lt;/strong&gt;&lt;br&gt;
该目标会检查生成工程的 CMake 配置文件（ CMakeLists.txt ）是否更新。如更新，将运行 CMake 重新生成工程文件。&lt;/p&gt;
&lt;p&gt;如果确信 CMakeLists.txt 不会被更新，或者希望手工运行 CMake 重新生成工程文件，可以在 CMakeLists.txt 配置文件中添加 set (CMAKE_SUPPRESS_REGENERATION FALSE) 命令， ZERO_CHECK 目标将不会生成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ALL_BUILD&lt;/strong&gt;&lt;br&gt;
该目标会导致工程中所有项目被构建，类似 Visual Studio 的 Build All 或者 make 的 make all 命令。&lt;/p&gt;
&lt;p&gt;转载 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://lightzhan.xyz/index.php/2020/03/11/cmake-quick-tutorial/&#34;&gt;CMake 快速入门教程&lt;/a&gt;&lt;/p&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/bilicard.css&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="linux" />
        <category term="cmake" />
        <category term="develop" />
        <updated>2021-10-12T04:25:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.17lai.site/posts/e6d40157/</id>
        <title>如何使用 tinyMediaManager 刮削电影和电视剧，动画，并自动下载字幕</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/e6d40157/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;注意使用 V3 版本，V4 版本收费！&lt;/p&gt;
&lt;p&gt;所以升级 V3 版本即可，不要升级到 V4 版本！不要升级到 V4 版本！不要升级到 V4 版本！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Plex&lt;/strong&gt; 是一款很好用的个人媒体中心软件，但是因为国内网络的原因，使用默认的 TMDB 刮削器挂出来的效果并不好，要么就是影片信息不正确，要么就是海报不正常显示，实在让人头疼。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tinyMediaManager&lt;/strong&gt; 是一款电影信息刮削和整理的软件，正好可以和 plex 配合，完美的解决这一问题。tinyMediaManager 在刮削影片的过程中会把影片的海报、演员表、背景图片等等都保存到影片所在文件夹，自动生成电影的 nfo 信息文件，并对文件和文件夹进行重新命名的操作。在 plex 设置刮削代理的时候，需要用一款插件可以直接读取 nfo 的信息，完成刮削，下面把使用方法分享给大家，&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;下载和安装tinyMediaManager&#34;&gt;&lt;strong&gt;下载和安装 tinyMediaManager&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;官网下载地址：&lt;a href=&#34;www.tinymediamanager.org/download/&#34;&gt;https://www.tinymediamanager.org/download/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181048.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;tmm下载&#34;&gt;tmm 下载&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;下载后直接解压文件夹&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;客户端需要 java 支持，先在电脑安装 java&lt;/p&gt;
&lt;p&gt;客户端下载后是一个压缩包，解压之后就可以用&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181054.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解压之后打开 tinyMediaManager.exe&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181101.png&#34; alt=&#34;tmm目录&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;TMM设置&#34;&gt;TMM 设置&lt;/h2&gt;
&lt;h3 id=&#34;TMM代理设置&#34;&gt;TMM 代理设置&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;重要：很多源都需要代理才能访问。这里正确的配置才能正确的刮削！&lt;/p&gt;
&lt;p&gt;可以调整这里使用的内存，大内存可以极大加速刮削速度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011211402.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;电影刮削设置&#34;&gt;电影刮削设置&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;进行相关设置。Tmm 可以对电影和电视剧的刮削进行分别设置，打开设置后选择电影选项，可以选择分级标准、自动重命名等选项。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181337.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;电影信息选项&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;点击侧边栏媒体库目录，添加电影目录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;刮削器设置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181107.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;选择电影刮削器&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181107.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;刮削器选项&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181114.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;nfo 选项，建议选择生成两种命名放视的 nfo&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图片刮削器选择全选，图片文件名建议两边都选上，会分别生成两组命名格式不同的图片，为了保证 plex 能读取&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181331.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图片命名选项&lt;/p&gt;
&lt;p&gt;Tmm 还可以自动下载预告片，字幕。字幕下载时可以输入 opensubtitles 账户&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181115.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;字幕下载选项&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重命名规则&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里重点讲一下重命名规则，刮削完后可以选择对电影文件和文件夹进行重命名，可能对于 pt 用户重命名可能会影响资源上传，可以不进行重命名操作。&lt;/p&gt;
&lt;p&gt;一般情况下电影刮削出来的信息，title 是电影的中文标题名称，originaltitle 是电影的原标题名称，一般是英文名称。软件默认的设置是文件和文件夹都命名成 title，也就是中文标题，但是我发现这样在后期使用的时候有弊端。英文电影在检索字幕时会用文件名来检索，而用中文名称很多情况下检索不出来，所以这里把文件的命名规则改一下，改成 originaltitle，并去掉年份信息的括号，中间连接符改成点，文件名设置成&lt;img src=&#34;https://math.now.sh?inline=%7Boriginaltitle%7D&#34; style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;&#34;&gt;{- ,edition,}.&lt;img src=&#34;https://math.now.sh?inline=%7Byear%7D.&#34; style=&#34;filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;&#34;&gt;{videoFormat}.${audioCodec} 的格式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181121.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;电影文件重命名选项&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181127.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;刮削完的文件夹内文件信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181323.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;刮削完的电影文件夹目录&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;电视节目刮削设置类似，如果挂不出来可以用 the tvdb 来刮削。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tmm 有时候会出现网络不稳定，刮不到的情况，可以修改 host 解决&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;改 host 在 host 文件最后加一行 13.224.161.90 &lt;a href=&#34;https://link.zhihu.com/?target=http%3A//api.themoviedb.org&#34;&gt;http://api.themoviedb.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;退出设置，开始刮削&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181317.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;更新电影源&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181128.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;选中要刮削的电影自动匹配&lt;/p&gt;
&lt;h3 id=&#34;电影手动刮削&#34;&gt;电影手动刮削&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011183942.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011184131.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;电视剧-动画手动刮削&#34;&gt;电视剧 &amp;amp; 动画手动刮削&lt;/h2&gt;
&lt;h3 id=&#34;电视剧元数据刮削&#34;&gt;电视剧元数据刮削&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011184909.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011185747.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;季和集元数据刮削前整理&#34;&gt;季和集元数据刮削前整理&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011185049.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;刮削季元素&#34;&gt;刮削季元素&lt;/h3&gt;
&lt;p&gt;整理好正确的季和集之后，才能正确的刮削季元素&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011185146.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;TMM整理完效果&#34;&gt;TMM 整理完效果&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这里用海贼王做展示，一个季和集都特别多的剧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011185448.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;TMM目录重命名整理&#34;&gt;TMM 目录重命名整理&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;刮削完后，可以重命名视频文件，并进行目录整理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;方法 1&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181133.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;方法 2&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011184315.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;等所有电影的信息刮削完后，选择重命名和清理，这样就完成了刮削的操作。以后下载了新电影，直接打开 tmm, 更新源之后直接选择搜索未刮削过的电影完成刮削。刮削出来的信息 kodi，emby 等软件也都能用。&lt;/p&gt;
&lt;h2 id=&#34;Plex设置&#34;&gt;Plex 设置&lt;/h2&gt;
&lt;h3 id=&#34;plex插件的安装和设置&#34;&gt;&lt;strong&gt;plex 插件的安装和设置&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;下载 plex 的插件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;插件 XBMCnfoMoviesImporter 和 XBMCnfoTVImporter 分别是刮削电影和电视剧的插件&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&#34;https%3A//github.com/gboudreau/XBMCnfoMoviesImporter.bundle&#34;&gt;https://github.com/gboudreau/XBMCnfoMoviesImporter.bundle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果不能下载的话可以联系我获取，还有几个很好用的 plex 插件&lt;/p&gt;
&lt;p&gt;下载完插件后就需要把插件解压到 plex 的插件目录：C:\Users\ 用户名 \AppData\Local\Plex Media Server\Plug-ins&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181134.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;plex 插件目录&lt;/p&gt;
&lt;p&gt;注意解压后要把文件夹名后边的 master 去掉。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;plex 代理设置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Plex 的代理设置就是选择刮削电影所用的刮削器及优先级。&lt;/p&gt;
&lt;p&gt;装好插件后重启 plex，进行 plex 的设置。在代理设置中选择 XBMCnfoMoviesImporter，把它的优先级调到最高，第二个可以设置成字幕插件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181140.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设置电影资料库的刮削器代理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;点击设置界面下方管理里边的资料库，选择电影资料夹的高级设置，设置如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181140.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181146.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;plex 代理设置&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181152.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;刷新电影源数据资料&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设置完成后就可以在 plex 主页对电影文件夹刷新元数据了。等待刷新完后就可以载入所有的电影信息了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181152.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;管理资料库 - 刷新电影元数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181153.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;更新后的电影信息&lt;/p&gt;
&lt;p&gt;采用类似的设置，电视剧信息也能刮削。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181159.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;电视剧更新后的信息&lt;/p&gt;
&lt;h2 id=&#34;Emby设置&#34;&gt;Emby 设置&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Emby 内置刮削工具，但是速度较慢。下面设置基于外部刮削工具 TMM，所以没有勾选 Emby 刮削源！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最终效果演示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011190035.png&#34; alt=&#34;最终效果&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011190347.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;开始设置&#34;&gt;开始设置&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011181946.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;新增媒体库&#34;&gt;新增媒体库&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011182142.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;已有媒体库属性设置&#34;&gt;已有媒体库属性设置&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011182244.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011182350.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011183115.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011183157.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011183336.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Emby字幕设置&#34;&gt;Emby 字幕设置&lt;/h3&gt;
&lt;p&gt;字幕下载设置，字幕下载工具见后面的 [字幕下载] 章节&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011182554.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;字幕下载-2&#34;&gt;&lt;strong&gt;字幕下载&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;想要较好的自动下载字幕，最好用前面介绍的 tmm 刮削改名之后再使用下面工具。&lt;/p&gt;
&lt;h3 id=&#34;subfinder-自动下载字幕-2&#34;&gt;subfinder 自动下载字幕&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Docker： &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://hub.docker.com/r/superng6/subfinder&#34;&gt;superng6/subfinder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下载完成，刮削后的目录，挂载到 subfinder 的 media 目录，就会自动下载字幕。&lt;/p&gt;
&lt;p&gt;字幕下载对电影，英文剧集支持较好。对于一些 tv，动画手动下载字幕会更好一些。&lt;/p&gt;
&lt;p&gt;注意：官方的配置文件有问题，时效问题。修改 URL 到最新即可。&lt;/p&gt;
&lt;h3 id=&#34;chinesesubfinder-2&#34;&gt;chinesesubfinder&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Docker： &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://hub.docker.com/r/allanpk716/chinesesubfinder&#34;&gt;allanpk716/chinesesubfinder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; 新开发的中文字幕查找工具，上面那个很久没更新了，这个刚出来。使用 nfo 里面刮削出来的文件名来匹配字幕。所以就原理来说，这个字幕匹配更准确。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bazarr-2&#34;&gt;bazarr&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Docker：&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://hub.docker.com/r/linuxserver/bazarr&#34;&gt;linuxserver/bazarr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; 字幕下载管理，配合 sonarr, radarr 使用效果更好。对于英文剧集命名规范的支持较好，比如 &lt;code&gt;[name]S01E01&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://zhuanlan.zhihu.com/p/112167546?from_voters_page=true&#34;&gt;利用 tinyMediaManager 刮削影片，解决家用 nas 软件 plex 电影墙的问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/bilicard.css&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="刮削" />
        <category term="tmm" />
        <category term="字幕" />
        <category term="emby" />
        <category term="plex" />
        <updated>2021-10-11T11:25:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.17lai.site/posts/3847ad58/</id>
        <title>如何使用 media Go,MusicBrainz,Mp3tag 工具刮削音乐 整理音乐资料库</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/3847ad58/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;动画、电影、剧集可使用 TinyMediaManager 生成 nfo 元数据文件，多媒体软件解析生成海报墙展示丰富的影片信息。&lt;/p&gt;
&lt;p&gt;而音乐文件则是将歌名、歌手、专辑、发行时间、歌词、封面图等信息写入文件标签，称为 ID3 Tag 。桌面软件、多媒体管理软件（Foobar2000/Plex/Emby/Jellyfin 等）都能解析展现歌曲信息。ID3 标签是 MP3 音乐档案中的歌曲附加讯息，它能够在 MP3 中附加曲子的演出者、作者以及其它类别资讯，方便众多乐曲的管理。缺少 ID3 标签并不会影响 MP3 的播放，但若没有的话，管理音乐文件也会相当的麻烦。&lt;/p&gt;
&lt;h2 id=&#34;刮削效果&#34;&gt;刮削效果&lt;/h2&gt;
&lt;h3 id=&#34;Foobar2000读取效果：&#34;&gt;Foobar2000 读取效果：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011173843.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Jellyfin读取效果：&#34;&gt;Jellyfin 读取效果：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011173846.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Mp3tag&#34;&gt;Mp3tag&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;纯手工修改，开源工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011174402.png&#34; alt=&#34;Mp3tag&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Media-Go&#34;&gt;Media Go&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;不要使用最新版！老版本才有我们最需要的功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011174641.png&#34; alt=&#34;Media Go&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;添加媒体库&#34;&gt;添加媒体库&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011175356.png&#34; alt=&#34;Media Go&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011175429.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;自动获取属性&#34;&gt;自动获取属性&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011175852.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;歌曲属性修改&#34;&gt;歌曲属性修改&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011175602.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;MusicBrainz&#34;&gt;MusicBrainz&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;MusicBrainz 官网：&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://musicbrainz.org/&#34;&gt;https://musicbrainz.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MusicBrainz Picard 下载地址：&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://picard.musicbrainz.org/&#34;&gt;https://picard.musicbrainz.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011173854.jpeg&#34; alt=&#34;MusicBrainz&#34;&gt;&lt;br&gt;
MusicBrainz Picard 可以修改音乐的 Tag 标签信息，根据标签重命名文件。它的数据来源于非营利互联网音乐专辑数据库 MusicBrainz 项目，歌曲资源非常丰富。尤其它能根据声纹（音频指纹）识别 Mp3 文件进行匹配取信息，匹配率极高。不管是英文、中文歌曲，还是录音室版本、演唱会版本，都能很好地匹配出来。&lt;br&gt;
支持 MP3、FLAC、OGG、M4A、WMA、WAV 等主流的音频格式，wav,ape 格式不支持，需要要转换成支持的格式。&lt;br&gt;
写入前后对比：&lt;br&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011173901.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MusicBrainz Picard 使用教程：&lt;/strong&gt;&lt;br&gt;
将音乐文件 / 文件夹拖入左侧窗口，点上方 “查询 “按钮，在 MusicBrainz 数据库里搜索对应音乐。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011173901.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;
如果搜索不到，点击” 扫描 “，使用声纹匹配，准确度更高。&lt;br&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011173907.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;
如果以上两种方法都搜索不到，或者添加的文件名变成乱码，右击” 查找相似的音轨 “&lt;br&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011173942.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;
手动输入歌曲名字，搜索，选择正确的歌曲信息，载入 Picard。&lt;br&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011173914.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;右侧窗口载入专辑信息。展开列表，绿色方块的就是匹配成功的音乐。底部窗口展示文件原始标签信息和 MusicBrainz 网站上的信息对照。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011173948.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;
如果匹配的不是正确的专辑信息，右击” 查找相似的音轨 “，选择正确的专辑信息载入 Picard。&lt;br&gt;
如果搜索出了多张专辑，可点击错误的专辑拖动到目标专辑上完成匹配，省的一个一个文件的修改。&lt;br&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011173955.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后点 “保存”，将标签信息写入音乐文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011174018.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何重命名文件：&lt;/strong&gt;&lt;br&gt;
菜单栏 - 选项 - 勾选 “重命名文件”，保存的时候会同时写入信息 + 重命名。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011174002.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;
默认设置是：序号 歌名.mp3，适合一个专辑一个文件夹使用。&lt;br&gt;
如果是单文件的话要去创建命名规则，选项 - 正在重命名文件 - 保存时重命名文件，填写命名规则。&lt;br&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/1120211011173929.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考：&#34;&gt;参考：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;http://www.92nas.com/forum.php?mod=viewthread&amp;amp;tid=115&#34;&gt;使用 MusicBrainz Picard 刮削音乐 整理音乐资料库&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/bilicard.css&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="music" />
        <category term="刮削" />
        <category term="MusicBrainz" />
        <category term="mp3tag" />
        <updated>2021-10-11T01:25:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.17lai.site/posts/80906b88/</id>
        <title>http 错误代码表</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/80906b88/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;所有 HTTP 状态代码及其定义。&lt;br&gt;
　代码&amp;nbsp;&amp;nbsp;指示&amp;nbsp;&amp;nbsp;&lt;br&gt;
2xx&amp;nbsp;&amp;nbsp;成功&amp;nbsp;&amp;nbsp;&lt;br&gt;
200&amp;nbsp;&amp;nbsp;正常；请求已完成。&amp;nbsp;&amp;nbsp;&lt;br&gt;
201&amp;nbsp;&amp;nbsp;正常；紧接 POST 命令。&amp;nbsp;&amp;nbsp;&lt;br&gt;
202&amp;nbsp;&amp;nbsp;正常；已接受用于处理，但处理尚未完成。&amp;nbsp;&amp;nbsp;&lt;br&gt;
203&amp;nbsp;&amp;nbsp;正常；部分信息 — 返回的信息只是一部分。&amp;nbsp;&amp;nbsp;&lt;br&gt;
204&amp;nbsp;&amp;nbsp;正常；无响应 — 已接收请求，但不存在要回送的信息。&amp;nbsp;&amp;nbsp;&lt;br&gt;
3xx&amp;nbsp;&amp;nbsp;重定向&amp;nbsp;&amp;nbsp;&lt;br&gt;
301&amp;nbsp;&amp;nbsp;已移动 — 请求的数据具有新的位置且更改是永久的。&amp;nbsp;&amp;nbsp;&lt;br&gt;
302&amp;nbsp;&amp;nbsp;已找到 — 请求的数据临时具有不同 URI。&amp;nbsp;&amp;nbsp;&lt;br&gt;
303&amp;nbsp;&amp;nbsp;请参阅其它 — 可在另一 URI 下找到对请求的响应，且应使用 GET 方法检索此响应。&amp;nbsp;&amp;nbsp;&lt;br&gt;
304&amp;nbsp;&amp;nbsp;未修改 — 未按预期修改文档。&amp;nbsp;&amp;nbsp;&lt;br&gt;
305&amp;nbsp;&amp;nbsp;使用代理 — 必须通过位置字段中提供的代理来访问请求的资源。&amp;nbsp;&amp;nbsp;&lt;br&gt;
306&amp;nbsp;&amp;nbsp;未使用 — 不再使用；保留此代码以便将来使用。&amp;nbsp;&amp;nbsp;&lt;br&gt;
4xx&amp;nbsp;&amp;nbsp;客户机中出现的错误&amp;nbsp;&amp;nbsp;&lt;br&gt;
400&amp;nbsp;&amp;nbsp;错误请求 — 请求中有语法问题，或不能满足请求。&amp;nbsp;&amp;nbsp;&lt;br&gt;
401&amp;nbsp;&amp;nbsp;未授权 — 未授权客户机访问数据。&amp;nbsp;&amp;nbsp;&lt;br&gt;
402&amp;nbsp;&amp;nbsp;需要付款 — 表示计费系统已有效。&amp;nbsp;&amp;nbsp;&lt;br&gt;
403&amp;nbsp;&amp;nbsp;禁止 — 即使有授权也不需要访问。&amp;nbsp;&amp;nbsp;&lt;br&gt;
404&amp;nbsp;&amp;nbsp;找不到 — 服务器找不到给定的资源；文档不存在。&amp;nbsp;&amp;nbsp;&lt;br&gt;
407&amp;nbsp;&amp;nbsp;代理认证请求 — 客户机首先必须使用代理认证自身。&amp;nbsp;&amp;nbsp;&lt;br&gt;
415&amp;nbsp;&amp;nbsp;介质类型不受支持 — 服务器拒绝服务请求，因为不支持请求实体的格式。&amp;nbsp;&amp;nbsp;&lt;br&gt;
5xx&amp;nbsp;&amp;nbsp;服务器中出现的错误&amp;nbsp;&amp;nbsp;&lt;br&gt;
500&amp;nbsp;&amp;nbsp;内部错误 — 因为意外情况，服务器不能完成请求。&amp;nbsp;&amp;nbsp;&lt;br&gt;
501&amp;nbsp;&amp;nbsp;未执行 — 服务器不支持请求的工具。&amp;nbsp;&amp;nbsp;&lt;br&gt;
502&amp;nbsp;&amp;nbsp;错误网关 — 服务器接收到来自上游服务器的无效响应。&amp;nbsp;&amp;nbsp;&lt;br&gt;
503&amp;nbsp;&amp;nbsp;无法获得服务 — 由于临时过载或维护，服务器无法处理请求。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;HTTP&amp;nbsp;400&amp;nbsp;-&amp;nbsp;请求无效&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;401.1&amp;nbsp;-&amp;nbsp;未授权：登录失败&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;401.2&amp;nbsp;-&amp;nbsp;未授权：服务器配置问题导致登录失败&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;401.3&amp;nbsp;-&amp;nbsp;ACL&amp;nbsp;禁止访问资源&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;401.4&amp;nbsp;-&amp;nbsp;未授权：授权被筛选器拒绝&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;401.5&amp;nbsp;-&amp;nbsp;未授权：ISAPI&amp;nbsp;或&amp;nbsp;CGI&amp;nbsp;授权失败&amp;nbsp;&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;403&amp;nbsp;-&amp;nbsp;禁止访问&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;403&amp;nbsp;-&amp;nbsp;对&amp;nbsp;Internet&amp;nbsp;服务管理器&amp;nbsp;(HTML)&amp;nbsp;的访问仅限于&amp;nbsp;Localhost&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;403.1&amp;nbsp;禁止访问：禁止可执行访问&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;403.2&amp;nbsp;-&amp;nbsp;禁止访问：禁止读访问&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;403.3&amp;nbsp;-&amp;nbsp;禁止访问：禁止写访问&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;403.4&amp;nbsp;-&amp;nbsp;禁止访问：要求&amp;nbsp;SSL&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;403.5&amp;nbsp;-&amp;nbsp;禁止访问：要求&amp;nbsp;SSL&amp;nbsp;128&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;403.6&amp;nbsp;-&amp;nbsp;禁止访问：IP&amp;nbsp;地址被拒绝&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;403.7&amp;nbsp;-&amp;nbsp;禁止访问：要求客户证书&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;403.8&amp;nbsp;-&amp;nbsp;禁止访问：禁止站点访问&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;403.9&amp;nbsp;-&amp;nbsp;禁止访问：连接的用户过多&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;403.10&amp;nbsp;-&amp;nbsp;禁止访问：配置无效&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;403.11&amp;nbsp;-&amp;nbsp;禁止访问：密码更改&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;403.12&amp;nbsp;-&amp;nbsp;禁止访问：映射器拒绝访问&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;403.13&amp;nbsp;-&amp;nbsp;禁止访问：客户证书已被吊销&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;403.15&amp;nbsp;-&amp;nbsp;禁止访问：客户访问许可过多&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;403.16&amp;nbsp;-&amp;nbsp;禁止访问：客户证书不可信或者无效&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;403.17&amp;nbsp;-&amp;nbsp;禁止访问：客户证书已经到期或者尚未生效&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;404.1&amp;nbsp;-&amp;nbsp;无法找到&amp;nbsp;Web&amp;nbsp;站点&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;404&amp;nbsp;-&amp;nbsp;无法找到文件&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;405&amp;nbsp;-&amp;nbsp;资源被禁止&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;406&amp;nbsp;-&amp;nbsp;无法接受&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;407&amp;nbsp;-&amp;nbsp;要求代理身份验证&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;410&amp;nbsp;-&amp;nbsp;永远不可用&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;412&amp;nbsp;-&amp;nbsp;先决条件失败&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;414&amp;nbsp;-&amp;nbsp;请求&amp;nbsp;-&amp;nbsp;URI&amp;nbsp;太长&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;500&amp;nbsp;-&amp;nbsp;内部服务器错误&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;500.100&amp;nbsp;-&amp;nbsp;内部服务器错误&amp;nbsp;-&amp;nbsp;ASP&amp;nbsp;错误&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;500-11&amp;nbsp;服务器关闭&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;500-12&amp;nbsp;应用程序重新启动&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;500-13&amp;nbsp;-&amp;nbsp;服务器太忙&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;500-14&amp;nbsp;-&amp;nbsp;应用程序无效&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;500-15&amp;nbsp;-&amp;nbsp;不允许请求&amp;nbsp;global.asa&amp;nbsp;&lt;br&gt;
Error&amp;nbsp;501&amp;nbsp;-&amp;nbsp;未实现&amp;nbsp;&lt;br&gt;
HTTP&amp;nbsp;502&amp;nbsp;-&amp;nbsp;网关错误&lt;/p&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/bilicard.css&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="web" />
        <category term="http" />
        <updated>2021-10-06T11:25:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.17lai.site/posts/c945eae1/</id>
        <title>解决 Thinkpad 笔记本喇叭破音问题！</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/c945eae1/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;
&lt;p&gt;主力笔记本笔记本播放音乐再次出现破音，换了几首音乐后问题依旧，前后对比强烈。&lt;/p&gt;
&lt;h2 id=&#34;分析&#34;&gt;分析&lt;/h2&gt;
&lt;p&gt;从几年前上一次维修经验来看，应该是喇叭老化破裂了！拆机查看，发现的确事喇叭破裂。&lt;/p&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;如是，网购了一个新喇叭，拆机，换上，完美解决问题！&lt;/p&gt;
&lt;p&gt;喇叭施压后，能明显看到断裂痕迹。这样的喇叭音色就会出现明显的破音！如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/0520211005175831.jpg&#34; alt=&#34;喇叭破裂施压图&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/10/0520211005175843.jpg&#34; alt=&#34;喇叭破裂未施压图&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这已经是这台笔记本第二次出现喇叭破裂问题了！  感觉喇叭材料或者工艺有问题。&lt;/p&gt;
&lt;p&gt;型号：Thinkpad T4X0S&lt;/p&gt;
&lt;/blockquote&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/bilicard.css&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="thinkpad" />
        <category term="sound" />
        <category term="speaker" />
        <updated>2021-10-05T01:25:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.17lai.site/posts/cb623532/</id>
        <title>从文学的角度，分析韩红的《天亮了》</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/cb623532/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;现场MV&#34;&gt;现场 MV&lt;/h2&gt;
&lt;style&gt;.bbplayer{width: 100%; max-width: 850px; margin: auto}&lt;/style&gt;&lt;div class=&#34;bbplayer&#34;&gt;&lt;iframe class=&#34;bbplayer&#34; id=&#34;mmedia-EqQwpDkbkkhVZWFk&#34; src=&#34;https://player.bilibili.com/player.html?bvid=BV1B7411p7aD&amp;amp;page=1&amp;amp;high_quality=1&amp;amp;danmaku=true&#34; allowfullscreen=&#34;allowfullscreen&#34; scrolling=&#34;no&#34; border=&#34;0&#34; frameborder=&#34;0&#34; framespacing=&#34;0&#34; sandbox=&#34;allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups&#34;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;script&gt; document.getElementById(&#34;mmedia-EqQwpDkbkkhVZWFk&#34;).style.height=document.getElementById(&#34;mmedia-EqQwpDkbkkhVZWFk&#34;).scrollWidth*0.76+&#34;px&#34;;
    window.onresize = function(){
      document.getElementById(&#34;mmedia-EqQwpDkbkkhVZWFk&#34;).style.height=document.getElementById(&#34;mmedia-EqQwpDkbkkhVZWFk&#34;).scrollWidth*0.76+&#34;px&#34;;
    }; &lt;/script&gt;
&lt;blockquote&gt;
&lt;p&gt;精品分析： 原作：石晶兰 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://tieba.baidu.com/p/5313070309?red_tag=2537504175&#34;&gt;短文吧&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;再做个传送门： &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.baidu.com/s?ie=UTF-8&amp;amp;wd=%E9%9F%A9%E7%BA%A2%20%E5%A4%A9%E4%BA%AE%E4%BA%86&#34;&gt;天亮了&lt;/a&gt;，听歌时，关灯，准备纸巾。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;先分析结构。&#34;&gt;先分析结构。&lt;/h2&gt;
&lt;p&gt;看歌词。&lt;/p&gt;
&lt;p&gt;那是一个秋天，风儿那么缠绵，&lt;br&gt;
让我想起他们那双无助的眼。&lt;br&gt;
就在那美丽风景相伴的地方，&lt;br&gt;
我听到一声巨响震彻山谷。&lt;br&gt;
就是那个秋天，再看不到爸爸的脸。&lt;br&gt;
他用他的双肩，托起我重生的起点。&lt;br&gt;
黑暗中泪水沾满了双眼，&lt;br&gt;
不要离开不要伤害。&lt;/p&gt;
&lt;p&gt;共八行，等于两个四行。&lt;br&gt;
两个四行一一对应，前三行，旋律基本是相同的。只有最后一行，为了与后面衔接，所以不同。&lt;br&gt;
两个四行的布置，等于是一种重复。&lt;br&gt;
这样的重要，在文学结构上，常见于起承。&lt;br&gt;
但歌，相当于诗。囿于篇幅，在结构上，通常会有所缺失。起承两者，一般缺失的，都是起。那样的做法，也就是直接叙事，存在让受众猝不及防的弊病。&lt;br&gt;
然后，《天亮了》并不是。&lt;br&gt;
“那是一个秋天，风儿那么缠绵” 和 “就是那个秋天” 分明是起。&lt;br&gt;
所以，《天亮了》并没有进行文学结构上的省略。&lt;br&gt;
“那是一个秋天，风儿那么缠绵” 是起，接紧着的三行歌词，自然就是承了。&lt;br&gt;
那么，第五行 “就是那个秋天” 怎么又来一个起呢？&lt;br&gt;
自然是因为篇幅太短，叙事不够（前面承得不够），所以，还需要再承一下。&lt;br&gt;
不能够不要第五行的起，直接往下写吗？&lt;br&gt;
真要说的话，其实也能。不过，再加四行承，真的就能把事情说清楚吗？&lt;br&gt;
显然，韩红想要表达的东西很多，她认为，不能。&lt;br&gt;
仅靠精练语言，明显是不够的，还需要换角度陈述。&lt;br&gt;
第五行的再起，实际上，就是为后面的换角度承，打基础的。&lt;br&gt;
这种写法，也是有先例的。请看邓丽君《相见在明天》歌词：&lt;br&gt;
记得我俩初相见，&lt;br&gt;
风吹花儿飞满天。&lt;br&gt;
你说我的笑容像花朵，&lt;br&gt;
比那花儿更娇艳。&lt;br&gt;
我还记得那一天，&lt;br&gt;
送你送到小河边。&lt;br&gt;
手牵着手呀心里有千言，&lt;br&gt;
相对却无言。&lt;br&gt;
跟《天亮了》一样，《相见在明天》也是两个四行，也是起承起承。&lt;br&gt;
并且，两起两承，还跟诗词的押韵一样，其重复，不仅有加深印象的作用，更有共鸣回旋的作用，正是唐陈子昂所说的 “音情顿挫” 的顿挫，极大的提升了作品的美感，让受众的接受度大大提高，&lt;/p&gt;
&lt;h2 id=&#34;继续看《天亮了》歌词：&#34;&gt;继续看《天亮了》歌词：&lt;/h2&gt;
&lt;p&gt;我看到爸爸妈妈就这么走远，&lt;br&gt;
留下我在这陌生的人世间。&lt;br&gt;
不知道未来还会有什么风险。&lt;br&gt;
我想要紧紧抓住他的手。&lt;br&gt;
妈妈告诉我希望还会有。&lt;br&gt;
看到太阳出来妈妈笑了。&lt;br&gt;
天亮了。&lt;/p&gt;
&lt;p&gt;六行都是转。具体在这里，自然不是转折，而是高那个潮。&lt;/p&gt;
&lt;p&gt;此处值得一说的是合，只有三个字 “天亮了”。&lt;br&gt;
这三个字，正好也是这首歌的歌名。&lt;br&gt;
但是这三个字表达的，到底是什么意思、什么情感呢？&lt;/p&gt;
&lt;p&gt;题都城南庄 / 唐 / 崔护&lt;br&gt;
去年今日此门中，人面桃花相映红。&lt;br&gt;
人面不知何处去，桃花依旧笑春风。&lt;/p&gt;
&lt;p&gt;不难看出，最后一句 “桃花依旧笑春风” 跟前面三句的叙述，是接不上的。&lt;br&gt;
去年这儿，有人面有桃花。今年这儿人面没有了，接下来说的通常是：还真是让人怀念啊。&lt;br&gt;
俗吗？的确俗。并且，还不仅仅是俗，还存在因为什么而怀念那个姑娘的严重问题。&lt;br&gt;
动机不纯的话，写出来就会玷污那个姑娘。动机纯粹，只是单纯的对美好事物的欣赏，写出来的话，又有自夸之嫌。&lt;br&gt;
还真是不好写啊。&lt;br&gt;
不好写，干脆就不写，另起一笔：“桃花依旧笑春风”。究竟表达的是什么样的滋味，让受众自己去想。&lt;/p&gt;
&lt;p&gt;《天亮了》末尾的合 “天亮了”，就是 “桃花依旧笑春风” 这种表现手法。太多的感情，千言万语，加总在一起，实在难以挽上疙瘩。于是，就另起一行，来了句看似关系不大的 “天亮了”，让一切，尽在无言中。&lt;br&gt;
不同的受众，会有不同的感受。因而这种让受众自己去想的结尾，总是余味无穷。&lt;/p&gt;
&lt;p&gt;文学结构分析，就到这儿。第二段的结构跟第一段相同，就不讲了。&lt;/p&gt;
&lt;h2 id=&#34;下面进行逐句评讲。&#34;&gt;下面进行逐句评讲。&lt;/h2&gt;
&lt;p&gt;“那是一个秋天，风儿那么缠绵，” 没毛病。“那是” 开头，虽然不出彩，但是很自然，容易被人接受，接着往下听。&lt;br&gt;
“让我想起他们那双无助的眼。” 这里，“他们” 是两个人；“那双” 眼睛虽然是复数，但落实到人，却是单数。因此，这是一个小错误。&lt;br&gt;
很显然，用相同性质的词语直接替换是不行的，譬如 “四只”。四，数量较多，会分散受众的注意力，让受众去思考为什么是四。因而，如果硬要改的话，只能用其它性质的词语去替换，譬如 “彷徨”。&lt;br&gt;
但 “彷徨无助”，又稍显生僻，会影响听者的接受速度，形成不怎么大的接受障碍。而如果也用 “无” 的话，无什么呢？无神？听上去，岂不是比 “彷徨无助” 更不容易分辨。&lt;br&gt;
所以，实在要改，就只能把 “他们” 二字挪到这儿。&lt;br&gt;
那样一来，“让我想起” 就要掺进两个水字了，譬如 “风儿让我想起”。&lt;br&gt;
是不是太水了？&lt;br&gt;
于是，我最终感觉，还是不改为好。&lt;br&gt;
小错误嘛，存在也无妨。这就像文豪写书法一样，多一点少一点，多一笔少一笑，根本不算错误，关键是，那个字不能被错认为是别的字。&lt;br&gt;
“那双无助的眼” 也一样，虽然存在小错误，但由于不影响表达内容，听者一听，就知道是怎么回事。由于没有影响信息传递，所以不改也是行的。&lt;/p&gt;
&lt;p&gt;“就在那美丽风景相伴的地方，我听到一声巨响震彻山谷。” 这两小句，没有基础毛病。&lt;br&gt;
值得注意的是，这两小句，存在一个对比：一个美丽的地方，一件悲惨的事。颇有一种把美好的事情撕烂了给读者看的悲剧色彩。&lt;/p&gt;
&lt;p&gt;“就是那个秋天，再看不到爸爸的脸。”&lt;br&gt;
为什么提到爸爸没提到妈妈？爸爸妈妈，可以一起提，也可以先后提。这里，实际上是先后提。先提爸爸，后面会提到妈妈。&lt;br&gt;
先提爸爸，又比先提妈妈要好。这是因为，时至今日，最不令人怀疑的，是父女情。虽然背景事件中，那是个儿子，但韩红是女的，唱出来的声音又带有明显的女性特征。女声，提到爸爸，无形中，就相当于女儿提到爸爸。其中的感情，就往父女情的方向靠近了那么一点，让听者一下就能接受，丝毫没有怀疑。&lt;br&gt;
“他用他的双肩，托起我重生的起点。”&lt;br&gt;
背景事件的具体经过，可能生还的当事人都已经记不清楚了。这一句，属于带有归纳性、比拟性的描述。因而不需要因为 “用”“双肩托起”，去询问是不是父亲从洪水中救起了儿子那样的细节。&lt;br&gt;
“黑暗中泪水沾满了双眼，”&lt;br&gt;
“黑暗中” 很妙。只描述了环境，没有指明时间。那其实表达的是，若干个 “黑暗中”。包括当时，也包括事后。并且，“黑暗” 有天然的，也有人为的。天然的，譬如天黑加停电；人为的，譬如钻进被窝里。这些，都被包括了进去。&lt;br&gt;
“不要离开、不要伤害。” 这句，就有些难度了。&lt;br&gt;
“不要离开” 好理解。可以是儿子对父母的呼唤。但 “不要伤害” 呢？&lt;br&gt;
“不要伤害”，到底是谁对谁发出的呐喊，后面再讲。&lt;/p&gt;
&lt;p&gt;“我看到爸爸妈妈就这么走远，留下我在这陌生的人世间。不知道未来还会有什么风险。”&lt;br&gt;
三小句，基础上没毛病。直接看上去，字面意思表达能力似乎稍弱。真是不是，后面再说。&lt;br&gt;
“我想要紧紧抓住他的手” 中的 “他”，指父亲，也可以指母亲。&lt;br&gt;
“妈妈告诉我希望还会有。看到太阳出来妈妈笑了。” 这是绝望中的回忆。这一家人，以前也是经受过苦难的。在曾经难熬的岁月中，妈妈曾经多次鼓励过儿子。鼓励的时候，有直述 “告诉我希望还会有”，也有以身作则 “看到太阳出来，妈妈笑了”。&lt;/p&gt;
&lt;p&gt;“天亮了。” 尽在不言中，就不再讲了。&lt;/p&gt;
&lt;p&gt;“这是一个夜晚天上宿星点点，我在梦里看见我的妈妈。”&lt;br&gt;
继 “那是” 之后，此处出现了 “这是”。表示已经是事后，灾难之后。&lt;br&gt;
“一个人在世上要学会坚强”，很明显，这不是儿子对父母能够说出的话。&lt;br&gt;
结合前一小句 “我在梦里看见我的妈妈”，可以发现，这是妈妈对儿子说的话。并且还是死去之后的妈妈对儿子所说的话。&lt;br&gt;
“我在梦里看见我的妈妈。一个人在世上要学会坚强” 紧接着的两句，主语变了。前一句是 “我”，后一句是 “妈妈”。同时，又因为死去的人继续说话这一违反科学常理的设定，使得后一句主语 “妈妈” 变得有些难以理解。&lt;br&gt;
其实，受众的心，也是强大的。多听两遍，也还是能够理解的。&lt;br&gt;
这两句主语的变化，从玄学的角度看，简单。但从文学的角度看，跳跃就非常大了。&lt;/p&gt;
&lt;p&gt;唐 / 李白有句：“千里江陵一日还”。“千里江陵” 说的是千里之外的江陵。站在什么地方能够说出此话，自然是白帝城。“还”，指回来，站在什么地方能够说 “还”，当然只能是江陵。就这么一句，视角就从白帝城跳到了江陵。&lt;br&gt;
《天亮了》中，这两句紧挨着的歌词的主语跳跃，其实跟 “千里江陵一日还” 的视角跳跃，是相似的类型。&lt;/p&gt;
&lt;p&gt;“你不要离开不要伤害” 上一段出现过，就不讲了。&lt;/p&gt;
&lt;p&gt;“我看到爸爸妈妈就这么走远，留下我在这陌生的人世间。我愿为他建造一个美丽的花园。”&lt;br&gt;
比较上一段，区别的，是第三小句。此处的第三小句，从陈述中跳脱出来了，相当于插入了一个事后的心愿。&lt;/p&gt;
&lt;p&gt;“我想要紧紧抓住他的手。妈妈告诉我希望还会有，看到太阳出来、天亮了。”&lt;br&gt;
比较上一段，区别的仍然是第三小句。“妈妈笑了” 变成 “天亮了”。但此处的 “天亮了”，跟前面不一样，并不是起承转合的合，不是收尾，而就是一个简单的陈述，其实质，就相当于 “妈妈笑了”。&lt;/p&gt;
&lt;p&gt;“我看到爸爸妈妈就这么走远，留下我在这陌生的人世间。我愿为他建造一个美丽的花园。&lt;br&gt;
“我想要紧紧抓住他的手。妈妈告诉我希望还会有。看到太阳出来，他们笑了。”&lt;br&gt;
重复，强调，加倍。略有不同的，就是 “妈妈笑了” 变成 “他们笑了”。由 “妈妈” 变成 “他们”，实际上也在告诉受众，马上就要收尾了。&lt;br&gt;
以什么收尾，收到哪里呢？依然还是 “天亮了”，尽在不言中，让受众自己去想，&lt;/p&gt;
&lt;p&gt;不知道是哪年哪天了，无意中，我就这么偶然听到了这首歌。&lt;br&gt;
一听，就感受很好听。&lt;br&gt;
一听，就听出来了，里面讲述了一场事故。因为有 “我听到一声巨响震彻山谷”、“再看不到爸爸的脸”。&lt;br&gt;
另外，还听出了事故中，父母对孩子的救助。因为有 “他用他的双肩托起我重生的起点”。&lt;br&gt;
很明显，事故是悲惨的，事故中的父母是可歌可泣的，事故之后的儿子或女儿（从歌词中听不出孩子的性别）是可怜的。&lt;br&gt;
但是，就这么算了么？&lt;br&gt;
这么好听的歌，最后一句 “天亮了” 到底表述的是怎样的感情？&lt;br&gt;
没弄清楚，怎么能算完。&lt;/p&gt;
&lt;p&gt;生活中，有各种各样的事故。最常见的，恐怕应该是车祸。&lt;br&gt;
车祸事故，几乎每天都能够在地方新闻上看到。&lt;br&gt;
看到车祸事故的新闻，心中有什么感受？&lt;br&gt;
悲伤么？自然没有。&lt;br&gt;
一般来说，亲人，才会悲伤。陌生人，通常只是略带同情、怜悯。&lt;br&gt;
此处说的是，同样的事，因为自身角度的不同，感受大不相同。&lt;br&gt;
那么，《天亮了》应该站在什么样的角度去欣赏呢？&lt;/p&gt;
&lt;p&gt;最容易想到的角度，有两个。&lt;br&gt;
一是生还的儿子或女儿。但是，站在这个角度欣赏，“我看到爸爸妈妈就这么走远，留下我在这陌生的人世间，不知道未来还会有什么风险。” 真的弱爆了。&lt;br&gt;
另一个角度，则是富有同情心的旁观善良人士。这个角度的存在，是因为韩红。因为，就这么看过去，韩红，对于此次事故，似乎就是富有同情心的旁观善良人士。&lt;br&gt;
但这个角度还是不行。“黑暗中泪水沾满了双眼”，没什么感觉。&lt;br&gt;
于是乎，就剩下了不常见的角度 —— 死去父母的角度！&lt;br&gt;
我试着想象了这样的角度，再听《天亮了》，眼泪一下子就出来了。&lt;br&gt;
我是在这之后，才搜索得知了《天亮了》的创作背景。&lt;/p&gt;
&lt;p&gt;是的，韩红，把自己当作那个孩子的父母，并且还把自己当作了孩子死去的父母。《天亮了》这首歌，表达的是死者对生者的寄托！&lt;br&gt;
重新再看歌词。“黑暗中泪水沾满了双眼”，所指的，就不仅仅是事后孩子多次在被窝里痛哭，并且还指死去的父母在地狱中带泪含悲。&lt;br&gt;
“不要离开”，只是孩子对父母的呼唤么？已然不是。以父母为参照物，生存的孩子，又何尝不是一种离开。&lt;br&gt;
当然不是说想要孩子一起死，否则就不会用双肩托起重生的起点了。&lt;br&gt;
“不要伤害” 的答案，此时就出来了。那就是死去的父母发出的呐喊。呐喊的对象是天地 —— 老天爷，不要伤害我们的孩子！&lt;br&gt;
“一个人在世上要学会坚强” 不再是父母对自己的叮嘱，而是自己，对自己幸存的子女的叮嘱。&lt;br&gt;
于是乎，最后一句合中的 “天亮了”，就表达了深深的无奈。&lt;br&gt;
天亮了，通常指清晨，代表的是希望。但是，对于死者来说，天亮了，就代表魂魄状态的死者必须离开。&lt;br&gt;
这是自然规律，死者必须离开。不想离开，也必须离开。因为 —— 天亮了。&lt;br&gt;
难怪韩红唱这三个字的时候，泣不成声。&lt;/p&gt;
&lt;p&gt;题外话又冒出来了。&lt;br&gt;
我曾经进行过无数次评论。有那么一个人，曾经对于我的少部分评论非常不服。那就是，关于李白的诗的评论。&lt;br&gt;
他认为，一件事物，可以从好坏两方面去说。他认为，李白的诗，就像打油诗，水平并不高。只是因为我的评论，才变得水平绝高了。&lt;br&gt;
具体的说法就是，我先假定李诗水平绝高，然后往去往绝高的方向分析。&lt;br&gt;
我的确也是这样做的。&lt;br&gt;
但是，别人的诗，也可以假定为水平绝高啊，难道说真的就能分析出水平绝高来吗？&lt;br&gt;
譬如杜甫的 “三顾频烦天下计”。“顾频烦” 三字的 “页” 旁，看不见吗？不擅书法，才会视而不见，所以杜甫不擅书法。是 “频烦天下计” 么？明明就只烦了一次。次数相对较多的，反而是 “顾”，顾了三次。于是这句应该读成 “三顾频、烦天下计”。这水平还怎么绝高呢？&lt;br&gt;
相似的例子还有很多。无论是谁的作品，都能事先假定为水平绝高。但只有李白的诗，才会真的分析出水平绝高的答案出来。&lt;br&gt;
所以，李诗的水平，是真的绝高。&lt;/p&gt;
&lt;p&gt;这番题外话，表达的是，前面关于《天亮了》的评论，或许韩红自己并没那么想，或者韩红没想那么多，或许《天亮了》就仅仅是韩红的偶然之得。&lt;br&gt;
我要说的是，《天亮了》既然已经成为作品，那么它就脱离了作者韩红，变成了一种独立的存在。不能因为韩红的文学水平不够高，而去否认《天亮了》的文学成就。&lt;br&gt;
我的确是抱着欣赏的态度，先假定《天亮了》文学水平很高，然后真往极高文学水平的方向去分析的。但是很幸运，我得出了《天亮了》文学水平果然很高的结论。&lt;br&gt;
换首别的歌，行吗？&lt;br&gt;
谁说行，谁上。&lt;/p&gt;
&lt;p&gt;最后，我还要说的是，文学水平，所指的，并不仅仅是文字方面的能力。&lt;br&gt;
在打基础的时候，在斟酌字词句，在训练表达力、说服力的阶段，的确单指文字方面。&lt;br&gt;
但是，在跨入感染力阶段之后，就不是了。&lt;br&gt;
更多的，是提高心性。&lt;br&gt;
心性高了，视角就不同了，感受也随之不同了，不管是写出来的作品，还是唱出来的歌，那都是不同的。&lt;br&gt;
很多人说邓丽君的演唱水平并不高，那是不对的。应该说，邓丽君的演唱水平，其实很多人都达到过。个别的，譬如韩红，偶尔还超越过。&lt;br&gt;
但是，为什么邓丽君流传下来的歌曲就那么多呢？其他歌者流传下来的歌就那么少呢？&lt;br&gt;
就是因为心性。&lt;br&gt;
心性与感染力关系，最容易明白的例子，就是翻唱。&lt;br&gt;
《何日君在来》、《船歌》在邓丽君翻唱之前，并不好听，结果邓丽君一唱，就化腐朽为神奇了。&lt;br&gt;
恰好，韩红也有过化腐朽为神奇的表现，譬如《妹妹找哥泪花流》、《天之大》（可搜）。&lt;br&gt;
心性如此之高的韩红，偶得《天亮了》极高文学水准的作品，就是正常的了。&lt;/p&gt;
&lt;p&gt;（全文完）&lt;/p&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/bilicard.css&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="music" />
        <category term="韩红" />
        <updated>2021-10-02T16:25:00.000Z</updated>
    </entry>
</feed>
