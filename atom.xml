<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夜法之书</title>
  
  <subtitle>做一个深度思考的人</subtitle>
  <link href="https://blog.17lai.fun/atom.xml" rel="self"/>
  
  <link href="https://blog.17lai.fun/"/>
  <updated>2021-09-13T07:04:27.281Z</updated>
  <id>https://blog.17lai.fun/</id>
  
  <author>
    <name>夜法之书</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在浏览器输入 URL 回车之后发生了什么</title>
    <link href="https://blog.17lai.fun/web/2021-09-13-what-happened-when-you-click-http/"/>
    <id>https://blog.17lai.fun/web/2021-09-13-what-happened-when-you-click-http/</id>
    <published>2021-09-13T01:25:00.000Z</published>
    <updated>2021-09-13T07:04:27.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p>这个问题已经是老生常谈了，更是经常被作为面试的压轴题出现，网上也有很多文章，但最近闲的无聊，然后就自己做了一篇笔记，感觉比之前理解更透彻了。</p><p>这篇笔记是我这两天看了数十篇文章总结出来的，所以相对全面一点，但由于我是做前端的，所以会比较重点分析浏览器渲染页面那一部分，至于其他部分我会罗列出关键词，感兴趣的可以自行查阅，</p><p>**注意：**本文的步骤是建立在，请求的是一个简单的 HTTP 请求，没有 HTTPS、HTTP2、最简单的 DNS、没有代理、并且服务器没有任何问题的基础上，尽管这是不切实际的。</p><h2 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h2><ol><li> URL 解析</li><li> DNS 查询</li><li> TCP 连接</li><li> 处理请求</li><li> 接受响应</li><li> 渲染页面</li></ol><h2 id="一、URL-解析"><a href="#一、URL-解析" class="headerlink" title="一、URL 解析"></a>一、URL 解析</h2><p><strong>地址解析：</strong></p><p>首先判断你输入的是一个合法的 URL 还是一个待搜索的关键词，并且根据你输入的内容进行自动完成、字符编码等操作。</p><p><strong>HSTS</strong></p><p>由于安全隐患，会使用 HSTS 强制客户端使用 HTTPS 访问页面。详见：<a href="https://www.barretlee.com/blog/2015/10/22/hsts-intro/">你所不知道的 HSTS (opens new window)</a>。</p><p><strong>其他操作</strong></p><p>浏览器还会进行一些额外的操作，比如安全检查、访问限制（之前国产浏览器限制 996.icu）。</p><p><strong>检查缓存</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913094301.png"></p><h2 id="二、DNS-查询"><a href="#二、DNS-查询" class="headerlink" title="二、DNS 查询"></a>二、DNS 查询</h2><p><strong>基本步骤</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913094305.png"></p><p><strong>1. 浏览器缓存</strong></p><p>浏览器会先检查是否在缓存中，没有则调用系统库函数进行查询。</p><p><strong>2. 操作系统缓存</strong></p><p>操作系统也有自己的 DNS 缓存，但在这之前，会向检查域名是否存在本地的 Hosts 文件里，没有则向 DNS 服务器发送查询请求。</p><p><strong>3. 路由器缓存</strong></p><p>路由器也有自己的缓存。</p><p><strong>4. ISP DNS 缓存</strong></p><p>ISP DNS 就是在客户端电脑上设置的首选 DNS 服务器，它们在大多数情况下都会有缓存。</p><p><strong>根域名服务器查询</strong></p><p>在前面所有步骤没有缓存的情况下，本地 DNS 服务器会将请求转发到互联网上的根域，下面这个图很好的诠释了整个流程：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913094311.png"></p><blockquote><p>根域名服务器：<a href="https://zh.wikipedia.org/wiki/%E6%A0%B9%E7%B6%B2%E5%9F%9F%E5%90%8D%E7%A8%B1%E4%BC%BA%E6%9C%8D%E5%99%A8">维基百科 (opens new window)</a></p></blockquote><p><strong>需要注意的点</strong></p><ol><li> 递归方式：一路查下去中间不返回，得到最终结果才返回信息（浏览器到本地 DNS 服务器的过程）</li><li> 迭代方式，就是本地 DNS 服务器到根域名服务器查询的方式。</li><li> 什么是 DNS 劫持</li><li> 前端 dns-prefetch 优化</li></ol><h2 id="三、TCP-连接"><a href="#三、TCP-连接" class="headerlink" title=" 三、TCP 连接"></a> 三、TCP 连接</h2><p>TCP/IP 分为四层，在发送数据时，每层都要对数据进行封装：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913094325.png"></p><p> <strong>1. 应用层：发送 HTTP 请求</strong></p><p>在前面的步骤我们已经得到服务器的 IP 地址，浏览器会开始构造一个 HTTP 报文，其中包括：</p><ul><li>  请求报头（Request Header）：请求方法、目标地址、遵循的协议等等</li><li>  请求主体（其他参数）</li></ul><p>其中需要注意的点：</p><ul><li><p>  浏览器只能发送 GET、POST 方法，而打开网页使用的是 GET 方法</p></li><li><p><em>2. 传输层：TCP 传输报文</em>*</p></li></ul><p>传输层会发起一条到达服务器的 TCP 连接，为了方便传输，会对数据进行分割（以报文段为单位），并标记编号，方便服务器接受时能够准确地还原报文信息。</p><p>在建立连接前，会先进行 TCP 三次握手。</p><blockquote><p>关于 TCP/IP 三次握手，网上已经有很多段子和图片生动地描述了。</p><p>相关知识点：</p><ol><li> SYN 泛洪攻击</li></ol></blockquote><p> <strong>3. 网络层：IP 协议查询 Mac 地址</strong></p><p>将数据段打包，并加入源及目标的 IP 地址，并且负责寻找传输路线。</p><p>判断目标地址是否与当前地址处于同一网络中，是的话直接根据 Mac 地址发送，否则使用路由表查找下一跳地址，以及使用 ARP 协议查询它的 Mac 地址。</p><blockquote><p>注意：在 OSI 参考模型中 ARP 协议位于链路层，但在 TCP/IP 中，它位于网络层。</p></blockquote><p><strong>4. 链路层：以太网协议</strong></p><p><strong>以太网协议</strong></p><p>根据以太网协议将数据分为以“帧”为单位的数据包，每一帧分为两个部分：</p><ul><li>  标头：数据包的发送者、接受者、数据类型</li><li>  数据：数据包具体内容</li></ul><p><strong>Mac 地址</strong></p><p>以太网规定了连入网络的所有设备都必须具备“网卡”接口，数据包都是从一块网卡传递到另一块网卡，网卡的地址就是 Mac 地址。每一个 Mac 地址都是独一无二的，具备了一对一的能力。</p><p><strong>广播</strong></p><p>发送数据的方法很原始，直接把数据通过 ARP 协议，向本网络的所有机器发送，接收方根据标头信息与自身 Mac 地址比较，一致就接受，否则丢弃。</p><p><strong>注意</strong>：接收方回应是单播。</p><blockquote><p>相关知识点：</p><ol><li> ARP 攻击</li></ol></blockquote><p> <strong>服务器接受请求</strong></p><p>接受过程就是把以上步骤逆转过来，参见上图。</p><h2 id="四、服务器处理请求"><a href="#四、服务器处理请求" class="headerlink" title=" 四、服务器处理请求"></a> 四、服务器处理请求</h2><p><strong>大致流程</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913094339.png"></p><p><strong>HTTPD</strong></p><p>最常见的 HTTPD 有 Linux 上常用的 Apache 和 Nginx，以及 Windows 上的 IIS。</p><p>它会监听得到的请求，然后开启一个子进程去处理这个请求。</p><p><strong>处理请求</strong></p><p>接受 TCP 报文后，会对连接进行处理，对 HTTP 协议进行解析（请求方法、域名、路径等），并且进行一些验证：</p><ul><li>  验证是否配置虚拟主机</li><li>  验证虚拟主机是否接受此方法</li><li>  验证该用户可以使用该方法（根据 IP 地址、身份信息等）</li></ul><p><strong>重定向</strong></p><p>假如服务器配置了 HTTP 重定向，就会返回一个 <code>301</code>永久重定向响应，浏览器就会根据响应，重新发送 HTTP 请求（重新执行上面的过程）。</p><blockquote><p>关于更多：<a href="https://www.cnblogs.com/workest/p/3891321.html">详见这篇文章 (opens new window)</a></p></blockquote><p><strong>URL 重写</strong></p><p>然后会查看 URL 重写规则，如果请求的文件是真实存在的，比如图片、html、css、js 文件等，则会直接把这个文件返回。</p><p>否则服务器会按照规则把请求重写到 一个 REST 风格的 URL 上。</p><p>然后根据动态语言的脚本，来决定调用什么类型的动态文件解释器来处理这个请求。</p><p>以 PHP 语言的 MVC 框架举例，它首先会初始化一些环境的参数，根据 URL 由上到下地去匹配路由，然后让路由所定义的方法去处理请求。</p><h2 id="五、浏览器接受响应"><a href="#五、浏览器接受响应" class="headerlink" title="五、浏览器接受响应"></a>五、浏览器接受响应</h2><p>浏览器接收到来自服务器的响应资源后，会对资源进行分析。</p><p>首先查看 Response header，根据不同状态码做不同的事（比如上面提到的重定向）。</p><p>如果响应资源进行了压缩（比如 gzip），还需要进行解压。</p><p>然后，对响应资源做缓存。</p><p>接下来，根据响应资源里的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MIME (opens new window)</a> 类型去解析响应内容（比如 HTML、Image 各有不同的解析方式）。</p><h2 id="六、渲染页面"><a href="#六、渲染页面" class="headerlink" title="六、渲染页面"></a>六、渲染页面</h2><p><strong>浏览器内核</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913094432.png"></p><p>不同的浏览器内核，渲染过程也不完全相同，但大致流程都差不多。</p><p><strong>基本流程</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913094347.png"></p><h3 id="1-HTML-解析"><a href="#1-HTML-解析" class="headerlink" title="# 1.HTML 解析"></a><a href="#_1-html-%E8%A7%A3%E6%9E%90">#</a> <strong>1.HTML 解析</strong></h3><p>首先要知道浏览器解析是从上往下一行一行地解析的。</p><p>解析的过程可以分为四个步骤：</p><p><strong>1. 解码（encoding）</strong></p><p>传输回来的其实都是一些二进制字节数据，浏览器需要根据文件指定编码（例如 UTF-8）转换成字符串，也就是 HTML 代码。</p><p><strong>2. 预解析（pre-parsing）</strong></p><p>预解析做的事情是提前加载资源，减少处理时间，它会识别一些会请求资源的属性，比如<code>img</code>标签的<code>src</code>属性，并将这个请求加到请求队列中。</p><p><strong>3. 符号化（Tokenization）</strong></p><p>符号化是词法分析的过程，将输入解析成符号，HTML 符号包括，开始标签、结束标签、属性名和属性值。</p><p>它通过一个状态机去识别符号的状态，比如遇到<code>&lt;</code>，<code>&gt;</code>状态都会产生变化。</p><p><strong>4. 构建树（tree construction）</strong></p><blockquote><p>注意：符号化和构建树是并行操作的，也就是说只要解析到一个开始标签，就会创建一个 DOM 节点。</p></blockquote><p>在上一步符号化中，解析器获得这些标记，然后以合适的方法创建<code>DOM</code>对象并把这些符号插入到<code>DOM</code>对象中。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913094354.png"></p><p><strong>浏览器容错进制</strong></p><p>你从来没有在浏览器看过类似”语法无效”的错误，这是因为浏览器去纠正错误的语法，然后继续工作。</p><p><strong>事件</strong></p><p>当整个解析的过程完成以后，浏览器会通过<code>DOMContentLoaded</code>事件来通知<code>DOM</code>解析完成。</p><ol start="2"><li>CSS 解析</li></ol><p>一旦浏览器下载了 CSS，CSS 解析器就会处理它遇到的任何 CSS，根据<a href="https://drafts.csswg.org/css-syntax-3/">语法规范 (opens new window)</a>解析出所有的 CSS 并进行标记化，然后我们得到一个规则表。</p><p><strong>CSS 匹配规则</strong></p><p>在匹配一个节点对应的 CSS 规则时，是按照从右到左的顺序的，例如：<code>div p { font-size :14px }</code>会先寻找所有的<code>p</code>标签然后判断它的父元素是否为<code>div</code>。</p><p>所以我们写 CSS 时，尽量用 id 和 class，千万不要过度层叠。</p><h3 id="3-渲染树"><a href="#3-渲染树" class="headerlink" title="# 3. 渲染树"></a><a href="#_3-%E6%B8%B2%E6%9F%93%E6%A0%91">#</a> 3. 渲染树</h3><p>其实这就是一个 DOM 树和 CSS 规则树合并的过程。</p><blockquote><p>注意：渲染树会忽略那些不需要渲染的节点，比如设置了<code>display:none</code>的节点。</p></blockquote><p><strong>计算</strong></p><p>通过计算让任何尺寸值都减少到三个可能之一：<code>auto</code>、百分比、px，比如把<code>rem</code>转化为<code>px</code>。</p><p><strong>级联</strong></p><p>浏览器需要一种方法来确定哪些样式才真正需要应用到对应元素，所以它使用一个叫做<code>specificity</code>的公式，这个公式会通过：</p><ol><li> 标签名、class、id</li><li> 是否内联样式</li><li> <code>!important</code></li></ol><p>然后得出一个权重值，取最高的那个。</p><p><strong>渲染阻塞</strong></p><p>当遇到一个<code>script</code>标签时，DOM 构建会被暂停，直至脚本完成执行，然后继续构建 DOM 树。</p><p>但如果 JS 依赖 CSS 样式，而它还没有被下载和构建时，浏览器就会延迟脚本执行，直至 CSS Rules 被构建。</p><p>所有我们知道：</p><ul><li>  CSS 会阻塞 JS 执行</li><li>  JS 会阻塞后面的 DOM 解析</li></ul><p>为了避免这种情况，应该以下原则：</p><ul><li>  CSS 资源排在 JavaScript 资源前面</li><li>  JS 放在 HTML 最底部，也就是 <code>&lt;/body&gt;</code>前</li></ul><p>另外，如果要改变阻塞模式，可以使用 defer 与 async，详见：<a href="https://github.com/xiaoyu2er/blog/issues/8">这篇文章 (opens new window)</a></p><ol start="4"><li>布局与绘制</li></ol><p>确定渲染树种所有节点的几何属性，比如：位置、大小等等，最后输入一个盒子模型，它能精准地捕获到每个元素在屏幕内的准确位置与大小。</p><p>然后遍历渲染树，调用渲染器的 paint() 方法在屏幕上显示其内容。</p><p><strong>5. 合并渲染层</strong></p><p>把以上绘制的所有图片合并，最终输出一张图片。</p><p><strong>6. 回流与重绘</strong></p><p><strong>回流(reflow)</strong></p><p>当浏览器发现某个部分发现变化影响了布局时，需要倒回去重新渲染，会从<code>html</code>标签开始递归往下，重新计算位置和大小。</p><p>reflow 基本是无法避免的，因为当你滑动一下鼠标、resize 窗口，页面就会产生变化。</p><p><strong>重绘(repaint)</strong></p><p>改变了某个元素的背景色、文字颜色等等不会影响周围元素的位置变化时，就会发生重绘。</p><p>每次重绘后，浏览器还需要合并渲染层并输出到屏幕上。</p><p>回流的成本要比重绘高很多，所以我们应该尽量避免产生回流。</p><p>比如：</p><ul><li>  <code>display:none</code> 会触发回流，而 <code>visibility:hidden</code> 只会触发重绘。</li></ul><ol start="7"><li>JavaScript 编译执行</li></ol><p><strong>大致流程</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913094359.png"></p><p>可以分为三个阶段：</p><p><strong>1. 词法分析</strong></p><p>JS 脚本加载完毕后，会首先进入语法分析阶段，它首先会分析代码块的语法是否正确，不正确则抛出“语法错误”，停止执行。</p><p>几个步骤：</p><ul><li>  分词，例如将<code>var a = 2</code>，，分成<code>var</code>、<code>a</code>、<code>=</code>、<code>2</code>这样的词法单元。</li><li>  解析，将词法单元转换成抽象语法树（AST）。</li><li>  代码生成，将抽象语法树转换成机器指令。</li></ul><p><strong>2. 预编译</strong></p><p>JS 有三种运行环境：</p><ul><li>  全局环境</li><li>  函数环境</li><li>  eval</li></ul><p>每进入一个不同的运行环境都会创建一个对应的执行上下文，根据不同的上下文环境，形成一个函数调用栈，栈底永远是全局执行上下文，栈顶则永远是当前执行上下文。</p><p><strong>创建执行上下文</strong></p><p>创建执行上下文的过程中，主要做了以下三件事：</p><ul><li>创建变量对象<ul><li>  参数、函数、变量</li></ul></li><li>建立作用域链<ul><li>  确认当前执行环境是否能访问变量</li></ul></li><li>  确定 This 指向</li></ul><p><strong>3. 执行</strong></p><p><strong>JS 线程</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913094406.png"></p><p>虽然 JS 是单线程的，但实际上参与工作的线程一共有四个：</p><blockquote><p>其中三个只是协助，只有 JS 引擎线程是真正执行的</p></blockquote><ul><li>  JS 引擎线程：也叫 JS 内核，负责解析执行 JS 脚本程序的主线程，例如 V8 引擎</li><li>  事件触发线程：属于浏览器内核线程，主要用于控制事件，例如鼠标、键盘等，当事件被触发时，就会把事件的处理函数推进事件队列，等待 JS 引擎线程执行</li><li>  定时器触发线程：主要控制<code>setInterval</code>和<code>setTimeout</code>，用来计时，计时完毕后，则把定时器的处理函数推进事件队列中，等待 JS 引擎线程。</li><li>  HTTP 异步请求线程：通过 XMLHttpRequest 连接后，通过浏览器新开的一个线程，监控 readyState 状态变更时，如果设置了该状态的回调函数，则将该状态的处理函数推进事件队列中，等待 JS 引擎线程执行。</li></ul><p><strong>注：浏览器对同一域名的并发连接数是有限的，通常为 6 个。</strong></p><p><strong>宏任务</strong></p><p>分为：</p><ul><li>  同步任务：按照顺序执行，只有前一个任务完成后，才能执行后一个任务</li><li>  异步任务：不直接执行，只有满足触发条件时，相关的线程将该异步任务推进任务队列中，等待 JS 引擎主线程上的任务执行完毕时才开始执行，例如异步 Ajax、DOM 事件，setTimeout 等。</li></ul><p><strong>微任务</strong></p><p>微任务是 ES6 和 Node 环境下的，主要 API 有：<code>Promise</code>，<code>process.nextTick</code>。</p><p>微任务的执行在宏任务的同步任务之后，在异步任务之前。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913094407.png"></p><p><strong>代码例子</strong></p><p>以上代码输出顺序为：1,3,5,4,2</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li>  <a href="https://github.com/skyline75489/what-happens-when-zh_CN">what-happens-when-zh_CN (opens new window)</a></li><li>  <a href="https://alistapart.com/article/tags-to-dom/">Tags to DOM (opens new window)</a></li><li>  <a href="https://heyingye.github.io/2018/04/16/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/">彻底理解浏览器的缓存机制 (opens new window)</a></li><li>  <a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The_rendering_engine">浏览器的工作原理：新式网络浏览器幕后揭秘 (opens new window)</a></li><li>  <a href="https://blog.fundebug.com/2019/01/03/understand-browser-rendering/">深入浅出浏览器渲染原理 (opens new window)</a></li><li>  <a href="https://heyingye.github.io/2018/03/19/js%E5%BC%95%E6%93%8E%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/#%E9%A2%84%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5">js 引擎的执行过程（一） (opens new window)</a></li><li>  还有一些找不到了。。。。。</li></ul><p>From: <a href="https://4ark.me/post/b6c7c0a2.html">4ark.me</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;这个问题已经是老生常谈了，更是经常被作为面试的压轴题出现，网上也有很多文章，但最近闲的无聊，然后就自己做了一篇笔记，感觉比之前理解</summary>
      
    
    
    
    <category term="web" scheme="https://blog.17lai.fun/categories/web/"/>
    
    
    <category term="web" scheme="https://blog.17lai.fun/tags/web/"/>
    
    <category term="http" scheme="https://blog.17lai.fun/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Joplin 插件使用推荐</title>
    <link href="https://blog.17lai.fun/tools/joplin/2021-09-10-the-joplin-plugin-recommend/"/>
    <id>https://blog.17lai.fun/tools/joplin/2021-09-10-the-joplin-plugin-recommend/</id>
    <published>2021-09-10T14:25:00.000Z</published>
    <updated>2021-09-11T11:04:21.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Joplin插件推荐"><a href="#Joplin插件推荐" class="headerlink" title="Joplin插件推荐"></a>Joplin插件推荐</h2><blockquote><p>Gif图片加载较慢，请耐心等待！</p></blockquote><h2 id="persistent-text-folding-in-editor"><a href="#persistent-text-folding-in-editor" class="headerlink" title="persistent-text-folding-in-editor"></a><a href="https://github.com/ambrt/joplin-plugin-fold-cm/releases/">persistent-text-folding-in-editor</a></h2><p><img src="https://aws1.discourse-cdn.com/standard14/uploads/cozic/original/2X/3/371b2bfa2825255462241d6390400e0ed4dcf55b.gif" alt="persistent-text-folding-in-editor 演示"></p><ul><li>Ctrl(or Cmd) + Alt + F to fold all</li><li>Ctrl(or Cmd) + Alt + U to unfold all</li></ul><h2 id="Plugin-Conflict-Resolution"><a href="#Plugin-Conflict-Resolution" class="headerlink" title="Plugin: Conflict Resolution"></a><a href="https://discourse.joplinapp.org/t/plugin-conflict-resolution/19204">Plugin: Conflict Resolution</a></h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910084450.png" alt="plugin-conflict-resolution演示"></p><h2 id="Joplin-Kanban-Plugin"><a href="#Joplin-Kanban-Plugin" class="headerlink" title="Joplin Kanban Plugin"></a><a href="https://github.com/joplin/plugin-kanban/wiki">Joplin Kanban Plugin</a></h2><p><img src="https://images.weserv.nl/?url=https://github.com/joplin/plugin-kanban/wiki/images/kanban-screenshot.png" alt="img"></p><p><strong>Usage</strong></p><p>To get started, you’ll need a notebook which will contain all tasks that you want to see on the board. The plugin will only show tasks in a single notebook and it’s sub-notebooks.</p><p>A kanban board is defined by a special type of note, which contains all of its configuration. Create a new note, and paste in the following:</p><pre class="line-numbers language-none"><code class="language-none">```kanbancolumns:  - name: Backlog    backlog: true  - name: Work in progress    tag: wip  - name: Finished    tag: done```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It is important that the confiuration is surrounded by a code block (<code>kanban ... </code>), otherwise it won’t be detected.</p><h2 id="joplin-plugin-nlr"><a href="#joplin-plugin-nlr" class="headerlink" title="joplin_plugin_nlr"></a><a href="https://github.com/fengqiaozhu/joplin_plugin_nlr">joplin_plugin_nlr</a></h2><ol><li> 插件安装后会在工具菜单添加一项：<strong>NLR</strong></li></ol><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910101315.png" alt="1.png"></p><ol start="2"><li>点击 <strong>NLR</strong> 打开新的panel，即可在输入框输入书名或作者名称搜索小说</li></ol><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910101332.png" alt="2.png"></p><ol start="3"><li> 点击卡片右上方 <strong>INFO</strong> 打开新的小说目录，章节卡片右上checkbox选中即代表下载此chapter，选中后，点击上方<strong>DOWNLOAD</strong>开始下载，在笔记列表中即可看到小说文本了。</li></ol><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910101414.png" alt="3.png"></p><h2 id="joplin-outline"><a href="#joplin-outline" class="headerlink" title="joplin-outline"></a><a href="https://github.com/cqroot/joplin-outline">joplin-outline</a></h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910105707.png" alt="image-20210910105705248"></p><h2 id="joplin-persistent-layout"><a href="#joplin-persistent-layout" class="headerlink" title="joplin-persistent-layout"></a><a href="https://github.com/benji300/joplin-persistent-layout">joplin-persistent-layout</a></h2><p>Save editor layout (editor/split view/viewer/rich text) for each note separately.</p><p>To persist the layout for a note follow these steps:</p><ol><li><p>Specify the tags for which a specific layout should be used.</p><ul><li><p>To do this, go to the plugin’s settings/options page and add the tags to the settings.</p></li><li><p>An example configuration could like this:</p><p><a href="https://github.com/benji300/joplin-persistent-layout/blob/master/assets/tags-config.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910105956.png" alt="layout-tags-config"></a></p></li></ul></li><li><p>Make sure that the correct value is selected in <code>View &gt; Layout button sequence</code>.</p><ul><li>To be able to use the layout switching correctly, this setting must be set accordingly. Otherwise the editor layout might not be switched to the expected one.</li><li>For example: If a tag is specified in option <code>Tags for editor layout mode: Rendered Markdown viewer</code> and least one note uses it, the setting must also contain <code>Viewer</code>.</li></ul></li><li><p>Add the appropriate tags to the notes. If not already done.</p><ul><li>When the selected note is changed, the editor layout is switched.</li><li>If none of the selected note’s tags matches a specified layout tag, the default layout from the option <code>Default editor layout</code> is used.<ul><li>If nothing is selected as default editor layout, the currently active editor layout will be kept.</li></ul></li><li>If more than one tag is specified for a note, the first matching one is used.</li></ul></li></ol><h2 id="Plugin-inline-tags"><a href="#Plugin-inline-tags" class="headerlink" title="Plugin: inline tags"></a><a href="https://github.com/roman-r-m/joplin-inline-tags-plugin">Plugin: inline tags</a></h2><p><img src="https://aws1.discourse-cdn.com/standard14/uploads/cozic/original/2X/0/0065618a26a81a8f01a1dc440bbbd1e216266e2f.gif" alt="ezgif.com-gif-maker"></p><h2 id="joplin-plugin-note-overview"><a href="#joplin-plugin-note-overview" class="headerlink" title="joplin-plugin-note-overview"></a><a href="https://github.com/JackGruber/joplin-plugin-note-overview">joplin-plugin-note-overview</a></h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910111844.png" alt="image-20210910111842613"></p><p>Create one or more notes with the following content:</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- note-overview-pluginsearch: -tag:*fields: updated_time, titlealias: updated_time AS Last edit, title AS Titlesort: title DESC--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Several of these blocks can be included in one note, also between text.</p><p>The note content is updated every x minutes (depending on your setting) or manualy by <code>Tools &gt; Create Note overview</code>.</p><h2 id="joplin-plugin-embed-search"><a href="#joplin-plugin-embed-search" class="headerlink" title="joplin-plugin-embed-search"></a><a href="https://github.com/ambrt/joplin-plugin-embed-search">joplin-plugin-embed-search</a></h2><pre class="line-numbers language-none"><code class="language-none">```searchyour search query```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://aws1.discourse-cdn.com/standard14/uploads/cozic/original/2X/9/9dfb27924c8fd373c5db8178e1cda27c74a4e50c.gif" alt="Peek 2021-01-26 19-22"></p><p><strong>Additional features</strong></p><ul><li>you can paste <code>sort:asc</code> or <code>sort:desc</code> to sort notes by title ascending or descending</li><li>A shorthand <code>notebook:this</code>, that narrows search to current notebook only.</li><li>Basic content embedding <code>content:true</code> (beta):</li></ul><p><img src="https://aws1.discourse-cdn.com/standard14/uploads/cozic/original/2X/0/06aa9cff292ac6a5f5f3c3a2acc35d13c0fb65c9.png"></p><h2 id="Spoilers"><a href="#Spoilers" class="headerlink" title="Spoilers"></a>Spoilers</h2><ul><li><ul><li><p>可使用%%遮盖部分文字。</p></li><li><ul><li><p>格式：</p></li><li><ul><li><code>%%扰流板、遮挡板%%</code></li></ul></li><li><p>软件内呈现：</p></li></ul></li></ul></li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910174557.png" alt="点击前">点击前</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910174618.png" alt="点击后">点击后</p><ul><li><ul><li>以及一个类似闪卡的可折叠块</li><li>格式：</li></ul></li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">:[测试，标题测试，内容]:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><ul><li>软件内呈现：</li></ul></li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910174638.png" alt="点击前">点击前</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910180108.png" alt="点击后">点击后</p><h2 id="Notes-statistics"><a href="#Notes-statistics" class="headerlink" title="Notes statistics"></a>Notes statistics</h2><ul><li><ul><li>笔记内部的数据统计。</li></ul></li></ul><h2 id="Note-tabs"><a href="#Note-tabs" class="headerlink" title="Note tabs"></a><a href="https://github.com/benji300/joplin-note-tabs">Note tabs</a></h2><ul><li><ul><li>像浏览器一样浏览文档，支持多个打开放置。</li></ul></li><li><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/benji300/joplin-note-tabs/master/assets/screencast.gif"></p></li></ul><h2 id="Quick-links"><a href="#Quick-links" class="headerlink" title="Quick links"></a>Quick links</h2><ul><li><ul><li>使用<code>@@</code>快速链接笔记文件。</li></ul></li><li><p><img src="https://aws1.discourse-cdn.com/standard14/uploads/cozic/original/2X/9/98abc7c6beb7551c1a8d375d358707143305ef58.gif"></p></li></ul><p><a href="https://github.com/marc0l92/joplin-plugin-jira-issue">Jira Issue</a></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/marc0l92/joplin-plugin-jira-issue/main/doc/usage_example.gif"></p><h2 id="Homenotes"><a href="#Homenotes" class="headerlink" title="Homenotes"></a>Homenotes</h2><ul><li>选择一个笔记作为每次打开软件时的首个笔记，可以把这个功能当作书签用。</li></ul><h2 id="Admonition"><a href="#Admonition" class="headerlink" title="Admonition"></a><a href="https://github.com/maxnegro/joplin-plugin-admonition">Admonition</a></h2><pre class="line-numbers language-none"><code class="language-none">!!! note This is the admonition titleThis is the admonition body!!!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910185118.png" alt="image-20210910185116920"></p><p>The following admonition types, supported by Docarys, are recognized by this plugin:</p><table><thead><tr><th>Type</th></tr></thead><tbody><tr><td>note</td></tr><tr><td>abstract</td></tr><tr><td>info</td></tr><tr><td>tip</td></tr><tr><td>success</td></tr><tr><td>question</td></tr><tr><td>warning</td></tr><tr><td>failure</td></tr><tr><td>danger</td></tr><tr><td>bug</td></tr><tr><td>example</td></tr><tr><td>quote</td></tr></tbody></table><h2 id="Encrypted-notes"><a href="#Encrypted-notes" class="headerlink" title="Encrypted notes"></a>Encrypted notes</h2><ul><li>字面意义，加密笔记，记住密码不得找回。</li></ul><h2 id="Favorites"><a href="#Favorites" class="headerlink" title="Favorites"></a><a href="https://github.com/benji300/joplin-favorites">Favorites</a></h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910225438.png" alt="image-20210910225437074"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910225056.png" alt="img"></p><ul><li><p>收藏夹，支持笔记、标签笔记本的收纳（随取随用）</p></li><li><ul><li>更改收藏夹中的笔记名不会更改原始笔记。</li></ul></li></ul><h2 id="Highlight"><a href="#Highlight" class="headerlink" title="Highlight"></a>Highlight</h2><ul><li>打出<code>[h:colour:scope]</code>后，插件会自动识别成代码。</li></ul><table><thead><tr><th>颜色</th><th>范围（自动选择的）</th></tr></thead><tbody><tr><td>m = mark</td><td>e = empty</td></tr><tr><td>r = red</td><td>w = word</td></tr><tr><td>g = green</td><td>s = sentence</td></tr><tr><td>b = blue</td><td>l = line</td></tr><tr><td>y = yellow</td><td></td></tr></tbody></table><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910225117.png" alt="img"></p><p>其他插件：</p><p><a href="https://github.com/joplin/plugins/blob/master/README.md#plugins">官方插件下载地址及其介绍</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Joplin插件推荐&quot;&gt;&lt;a href=&quot;#Joplin插件推荐&quot; class=&quot;headerlink&quot; title=&quot;Joplin插件推荐&quot;&gt;&lt;/a&gt;Joplin插件推荐&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Gif图片加载较慢，请耐心等待！&lt;/p&gt;
&lt;/bl</summary>
      
    
    
    
    <category term="Tools" scheme="https://blog.17lai.fun/categories/Tools/"/>
    
    <category term="Joplin" scheme="https://blog.17lai.fun/categories/Tools/Joplin/"/>
    
    
    <category term="Joplin" scheme="https://blog.17lai.fun/tags/Joplin/"/>
    
    <category term="MarkDown" scheme="https://blog.17lai.fun/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>基于Hexo的matery主题搭建博客并深度优化</title>
    <link href="https://blog.17lai.fun/blog/2021-09-10-use-hexo-and-matery-to-make-a-perfect-blog/"/>
    <id>https://blog.17lai.fun/blog/2021-09-10-use-hexo-and-matery-to-make-a-perfect-blog/</id>
    <published>2021-09-10T14:25:00.000Z</published>
    <updated>2021-09-13T11:37:34.033Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-版-hexo-matery"><a href="#Docker-版-hexo-matery" class="headerlink" title="Docker 版 hexo + matery"></a>Docker 版 hexo + matery</h2><p><a href="https://hub.docker.com/r/bloodstar/hexo">docker-hub</a></p><p><a href="https://github.com/appotry/docker-hexo">Github-hexo</a></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">docker create <span class="token punctuation">-</span><span class="token punctuation">-</span>name=blog.17lai.fun \<span class="token punctuation">-</span>e HEXO_SERVER_PORT=4000 \<span class="token punctuation">-</span>e GIT_USER="17lai" \<span class="token punctuation">-</span>e GIT_EMAIL="17lai@domain.tld" \<span class="token punctuation">-</span>v /mnt/blog.17lai.fun<span class="token punctuation">:</span>/app \<span class="token punctuation">-</span>p 4000<span class="token punctuation">:</span>4000 \bloodstar/hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h2><p><a href="https://hexo.io/zh-cn/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li><li><a href="https://www.npmjs.com/">nmp</a></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装以后，可以使用以下两种方式执行 Hexo：</p><ol><li><code>npx hexo</code></li><li>将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用： <code>hexo</code></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'PATH="$PATH:./node_modules/.bin"'</span> <span class="token operator">&gt;&gt;</span> ~/.profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装淘宝镜像，-加NPM"><a href="#安装淘宝镜像，-加NPM" class="headerlink" title="安装淘宝镜像， 加NPM"></a>安装淘宝镜像， 加NPM</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装CNPM"><a href="#安装CNPM" class="headerlink" title="安装CNPM"></a>安装CNPM</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>后期需要升级的化，进入 blog 目录，先检查更新:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> outdatedPackage                  Current  Wanted  Latest  Locationhexo                       <span class="token number">3.9</span>.0   <span class="token number">3.9</span>.0   <span class="token number">4.2</span>.0  hexo-sitehexo-deployer-git          <span class="token number">1.0</span>.0   <span class="token number">1.0</span>.0   <span class="token number">2.1</span>.0  hexo-sitehexo-generator-archive     <span class="token number">0.1</span>.5   <span class="token number">0.1</span>.5   <span class="token number">1.0</span>.0  hexo-sitehexo-generator-category    <span class="token number">0.1</span>.3   <span class="token number">0.1</span>.3   <span class="token number">1.0</span>.0  hexo-sitehexo-generator-feed        <span class="token number">1.2</span>.2   <span class="token number">1.2</span>.2   <span class="token number">2.2</span>.0  hexo-sitehexo-generator-index       <span class="token number">0.2</span>.1   <span class="token number">0.2</span>.1   <span class="token number">1.0</span>.0  hexo-sitehexo-generator-tag         <span class="token number">0.2</span>.0   <span class="token number">0.2</span>.0   <span class="token number">1.0</span>.0  hexo-sitehexo-renderer-ejs          <span class="token number">0.3</span>.1   <span class="token number">0.3</span>.1   <span class="token number">1.0</span>.0  hexo-sitehexo-renderer-marked       <span class="token number">0.3</span>.2   <span class="token number">0.3</span>.2   <span class="token number">2.0</span>.0  hexo-sitehexo-renderer-stylus       <span class="token number">0.3</span>.3   <span class="token number">0.3</span>.3   <span class="token number">1.1</span>.0  hexo-sitehexo-server                <span class="token number">0.3</span>.3   <span class="token number">0.3</span>.3   <span class="token number">1.0</span>.0  hexo-site<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 <code>package.json</code> 文件，基于 <code>Latest</code> 列内容更新版本号，然后更新并检查版本号：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> --save<span class="token comment"># 检查版本号</span>$ hexo -vhexo: <span class="token number">4.2</span>.0hexo-cli: <span class="token number">3.1</span>.0<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span><span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>此时，通过 <code>hexo s</code> 命令即可在本地启动您的博客站点了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo sINFO  Start processingINFO  Hexo is running at http://localhost:4000 <span class="token builtin class-name">.</span> Press Ctrl+C to stop.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来将安装主题，配置博客托管平台，实现一键发布并刷新 CDN 缓存。</p><h2 id="目录结构说明"><a href="#目录结构说明" class="headerlink" title="目录结构说明"></a>目录结构说明</h2><p>在执行过<code>Hexo deploy</code>命令之后，目录结构新增了<code>.deploy_git</code>，<code>public</code>，<code>.gitignore</code>，如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> $ tree -L <span class="token number">2</span><span class="token builtin class-name">.</span>├── .deploy_git├── node_modules├── public├── scaffolds│   ├── draft.md│   ├── page.md│   └── post.md├── <span class="token builtin class-name">source</span>│   ├── _posts│   ├── _drafts├── themes├── _config.yml├── db.json├── package.json└── package-lock.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>用来配置博客相关的参数，初始化时自动创建。具体参数设置，可参照 <a href="https://hexo.io/zh-cn/docs/configuration">Hexo 配置</a> 文档。</p><h3 id="node-modules-和-package-json"><a href="#node-modules-和-package-json" class="headerlink" title="node_modules 和 package.json"></a>node_modules 和 package.json</h3><p>都是在初始化时自动创建。</p><p><code>node_modules</code>用来存储已安装的各类依赖包。<br><code>package.json</code>用来查看 Hexo 的版本以及相关依赖包的版本。</p><p>Hexo 会默认安装：</p><ul><li>hexo：主程序</li><li>hexo-deployer-git：实现 git 部署方式</li><li>hexo-generator-archive：存档页面生成器</li><li>hexo-generator-category：分类页面生成器</li><li>hexo-generator-index：index 生成器</li><li>hexo-generator-tag：标签页面生成器</li><li>hexo-renderer-ejs：支持 EJS 渲染</li><li>hexo-renderer-marked：Markdown 引擎</li><li>hexo-renderer-stylus：支持 stylus 渲染</li><li>hexo-server：支持本地预览，默认地址 localhost:4000</li></ul><p>新安装的依赖包，也会保存在<code>node_module</code>文件夹下。</p><h3 id="scaffold"><a href="#scaffold" class="headerlink" title="scaffold"></a>scaffold</h3><p>模板文件夹，初始化时自动创建。包含<code>page</code>，<code>post</code>，<code>draft</code>三种模板，分别对应 页面、要发布的文章、草稿。</p><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p>主题文件夹，初始化时自动创建。每一个主题，都有一个单独的文件夹。默认主题为 <a href="https://github.com/hexojs/hexo-theme-landscape">landscape</a>。</p><h3 id="source-，-public-和-deploy-git"><a href="#source-，-public-和-deploy-git" class="headerlink" title="source ， public 和 .deploy_git"></a>source ， public 和 .deploy_git</h3><ul><li>source：资源文件夹。用来存放图片、Markdown 文档（文章、草稿）、各种页面（分类、关于页面等）。</li><li>public：将 source 文件夹里的 Markdown 文档，转换成 index.html。再结合主题进行渲染，就是我们最终看到的博客。</li><li>.deploy_git：将 public 文件夹的内容提交到 Github 后生成，内容与 public 文件夹基本一致。</li></ul><p>这三者的关系大致是：source -&gt; public -&gt; .deploy_git</p><p>执行<code>hexo generate</code>，根据 source，更新 public。<br>执行<code>hexo deploy</code>，根据 public，更新 .deploy_git。</p><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p><a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a> 是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题，点击 <a href="https://www.lixl.cn/">这里</a> 可以查看示例效果。点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到 Hexo 的 <code>themes</code> 文件夹中即可。</p><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议"></a><code>_config.yml</code> 文件的其它修改建议</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建404页"><a href="#新建404页" class="headerlink" title="新建404页"></a>新建404页</h3><p> 新建一个404.md文件</p><p>  在hexo的souce文件夹下创建一个404.md，之后输入如下内容：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token font-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-11-23 21:10:10</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span></span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913191101.png" alt="新建404.md"></p><p>然后<code>hexo g</code>生成页面中就有404。只是页面较丑。</p><h3 id="404页面美化"><a href="#404页面美化" class="headerlink" title="404页面美化"></a>404页面美化</h3><blockquote><p>下载404特效</p><p>点击下载代码:<a href="https://www.lanrenzhijia.com/js/4285.html">点我去代码出处</a></p></blockquote><h4 id="移植"><a href="#移植" class="headerlink" title="移植"></a>移植</h4><h5 id="放入js文件到主题中"><a href="#放入js文件到主题中" class="headerlink" title="放入js文件到主题中"></a>放入js文件到主题中</h5><p>  将下载的压缩包解压，会发现里面有两个js文件和一个html页面，重要的就是js文件，将文件移植到主题的source文件的libs文件夹下，需要自己创建一个文件夹，我给文件夹取的名字叫做404。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913191716.png"></p><h5 id="导入404-js"><a href="#导入404-js" class="headerlink" title="导入404 js"></a>导入404 js</h5><p>因为该主题的js文件都是写_config.yml文件里面的，为了规范，也需要将文件的路径写到该文件夹下</p><p>如下，之后导入js文件的时候就可以使用404bodymovin和404data来代替了</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1320210913192151.png" alt="修改主题_config.yml文件"></p><h5 id="编辑404-esj"><a href="#编辑404-esj" class="headerlink" title="编辑404.esj"></a>编辑404.esj</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token comment">/* don't remove. */</span>    <span class="token selector">.page404-cover</span> <span class="token punctuation">{</span>        <span class="token comment">/* height: 75vh; */</span>        <span class="token property">height</span><span class="token punctuation">:</span> 88vh<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token selector">#svgContainer</span> <span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%- theme.libs.js.my404bodymovin %&gt;<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%- theme.libs.js.my404data %&gt;<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-cover pd-header page404-cover<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>svgContainer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">var</span> svgContainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'svgContainer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> animItem <span class="token operator">=</span> bodymovin<span class="token punctuation">.</span><span class="token function">loadAnimation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          wrapper<span class="token operator">:</span> svgContainer<span class="token punctuation">,</span>          animType<span class="token operator">:</span> <span class="token string">'svg'</span><span class="token punctuation">,</span>          loop<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          animationData<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>animationData<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在就移植成功了，使用下面命令上传，之后输入一个错误的页面就可以查看到了</p><pre class="line-numbers language-none"><code class="language-none">hexo cl &amp;&amp; hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Tips: 不要再本地试验，本地的时候输入错误的页面不会显示404页面的。</p></blockquote><h3 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://www.lixl.cn/medias/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"悟尘记"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"人生就是一场修行，上善若水，厚德载物。"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.lixl.cn/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去参观"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://wiki.hyperledger.org/download/attachments/2392069/fabric?version=1&amp;modificationDate=1540928132000&amp;api=v2"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Fabric"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"A Blockchain Platform for the Enterprise"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://hyperledger-fabric.readthedocs.io/en/master/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://www.bootcdn.cn/assets/img/maoyun.svg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"BootCDN"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"稳定、快速、免费的前端开源项目 CDN 加速服务。"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.bootcdn.cn/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去加速"</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">"preprocess"</span> <span class="token comment"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">"tomorrow"</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># default false</span>  custom_css<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱的配置，可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com/blinkfox<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span>  <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span>  <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span>  <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span>  <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-github<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供参考：</p><ul><li>Facebook: <code>fa-facebook</code></li><li>Twitter: <code>fa-twitter</code></li><li>Google-plus: <code>fa-google-plus</code></li><li>Linkedin: <code>fa-linkedin</code></li><li>Tumblr: <code>fa-tumblr</code></li><li>Medium: <code>fa-medium</code></li><li>Slack: <code>fa-slack</code></li><li>新浪微博: <code>fa-weibo</code></li><li>微信: <code>fa-wechat</code></li><li>QQ: <code>fa-qq</code></li></ul><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置文章基本信息"><a href="#配置文章基本信息" class="headerlink" title="配置文章基本信息"></a>配置文章基本信息</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">new_post_name</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>title.md   <span class="token comment"># 新文章的文件名称</span><span class="token key atrule">default_layout</span><span class="token punctuation">:</span> post       <span class="token comment"># 预设布局</span><span class="token key atrule">auto_spacing</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>        <span class="token comment"># 在中文和英文之间加入空格</span><span class="token key atrule">titlecase</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>           <span class="token comment"># 把标题转换为 title case</span><span class="token key atrule">external_link</span><span class="token punctuation">:</span>             <span class="token comment"># 在新标签中打开链接</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>             <span class="token comment"># 在新标签中打开链接</span>  <span class="token key atrule">field</span><span class="token punctuation">:</span>                   <span class="token comment"># 对整个网站（site）生效或仅对文章（post）生效</span>  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>                 <span class="token comment"># 需要排除的域名。主域名和子域名如 www 需分别配置[]</span><span class="token key atrule">filename_case</span><span class="token punctuation">:</span> <span class="token number">0</span>           <span class="token comment"># 把文件名称转换为 (1) 小写或 (2) 大写</span><span class="token key atrule">render_drafts</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>       <span class="token comment"># 显示草稿，默认为：false</span><span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 启动 Asset 文件夹</span><span class="token key atrule">relative_link</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>       <span class="token comment"># 把链接改为与根目录的相对位址</span><span class="token key atrule">future</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>               <span class="token comment"># 显示未来的文章</span><span class="token key atrule">highlight</span><span class="token punctuation">:</span>                 <span class="token comment"># 代码块的设置</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>            <span class="token comment"># 开启代码块高亮</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>       <span class="token comment"># 显示行数</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>       <span class="token comment"># 如果未指定语言，则启用自动检测</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span>             <span class="token comment"># 用 n 个空格替换 tabs；如果值为空，则不会替换 tabs</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置代码高亮及样式"><a href="#配置代码高亮及样式" class="headerlink" title="配置代码高亮及样式"></a>配置代码高亮及样式</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>                      <span class="token comment"># 代码块的设置</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>                 <span class="token comment"># 开启代码块高亮</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>             <span class="token comment"># 显示行数</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>            <span class="token comment"># 如果未指定语言，则启用自动检测</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>               <span class="token comment"># 用 n 个空格替换 tabs；如果值为空，则不会替换 tabs</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置代码的样式</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">code</span><span class="token punctuation">:</span>  <span class="token key atrule">lang</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>     <span class="token comment"># 代码块是否显示名称</span>  <span class="token key atrule">copy</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>     <span class="token comment"># 代码块是否可复制</span>  <span class="token key atrule">shrink</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 代码块是否可以收缩</span>  <span class="token key atrule">break</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># 代码是否折行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置是否启用转载限制模块"><a href="#配置是否启用转载限制模块" class="headerlink" title="配置是否启用转载限制模块"></a>配置是否启用转载限制模块</h3><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">reprint:  enable: false   #是否启用“转载规则限定模块”  default: cc_by<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>文章转载规则，可以是 <code>cc_by</code>, <code>cc_by_nd</code>, <code>cc_by_sa</code>, <code>cc_by_nc</code>, <code>cc_by_nc_nd</code>, <code>cc_by_nc_sa</code>, <code>cc0</code>, <code>noreprint</code> 或 <code>pay</code> 中的一个</p><h3 id="配置文章阅读密码功能"><a href="#配置文章阅读密码功能" class="headerlink" title="配置文章阅读密码功能"></a>配置文章阅读密码功能</h3><p>阅读文章的密码验证功能，如要使用此功能请激活该配置项，并在对应文章的 <code>Front-matter</code> 中写上 <code>password</code> 的键和加密后的密文即可。</p><blockquote><p>请注意：为了保证密码原文不会被泄露到网页中，文章的密码必须是通过 <code>SHA256</code> 加密的，这样就不会被破解。</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">verifyPassword</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">promptMessage</span><span class="token punctuation">:</span> 请输入访问本文章的密码  <span class="token key atrule">errorMessage</span><span class="token punctuation">:</span>  密码错误，将返回主页！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h3><p>通过 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a> 插件可以实现一键将博客同时部署到多个 git 仓库中。如同时发布到 github 及 gitee 提供的 pages 服务。安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改 Hexo 根目录下的 <code>_config.yml</code> 文件中的如下内容:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">## Docs: https://hexo.io/docs/deployment.html</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/lxl80/blog.git    <span class="token key atrule">branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages    <span class="token key atrule">ignore_hidden</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/lxl80/lxl80.git    <span class="token key atrule">branch</span><span class="token punctuation">:</span> master    <span class="token key atrule">ignore_hidden</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>也可以如本站一样，采用 <a href="https://github.com/75k/hexo-deployer-cos-enhanced">hexo-deployer-cos-enhanced</a> 插件将静态内容部署到腾讯云对象存储服务中，在 DNS 配置中将境内线路解析到腾讯云 CDN 地址，实现加速。部署完成后会自动刷新被更新文件的 CDN 缓存。</p></blockquote><p>安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-cos-enhanced --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>_config.yml</code> 配置如下:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/lxl80/blog.git    <span class="token key atrule">branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages    <span class="token key atrule">ignore_hidden</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> cos    <span class="token key atrule">bucket</span><span class="token punctuation">:</span> lxl80<span class="token punctuation">-</span>130<span class="token important">****</span>    <span class="token key atrule">region</span><span class="token punctuation">:</span> ap<span class="token punctuation">-</span>beijing    <span class="token key atrule">secretId</span><span class="token punctuation">:</span> AKIDh9<span class="token important">****F8FvL</span>    <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> Z3IGiur<span class="token important">****QZR3PgjXmlVg</span>    <span class="token key atrule">cdnConfig</span><span class="token punctuation">:</span>      <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">cdnUrl</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//static.lixl.cn      <span class="token key atrule">bucket</span><span class="token punctuation">:</span> static<span class="token punctuation">-</span>130<span class="token important">****</span>      <span class="token key atrule">region</span><span class="token punctuation">:</span> ap<span class="token punctuation">-</span>beijing      <span class="token key atrule">folder</span><span class="token punctuation">:</span> static      <span class="token key atrule">secretId</span><span class="token punctuation">:</span> AKIDh9<span class="token important">****F8FvL</span>      <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> Z3IGiur<span class="token important">****QZR3PgjXmlVg</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后通过 <code>hexo g -d</code> 即可实现一键发布，并更新 CDN 缓存。</p><h3 id="文章链接转静态短地址（建议安装）"><a href="#文章链接转静态短地址（建议安装）" class="headerlink" title="文章链接转静态短地址（建议安装）"></a>文章链接转静态短地址（建议安装）</h3><p>如果文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件生成文章时生成中文拼音的永久链接，或者用<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 生成静态文章链接。以下结合 hexo-abbrlink 生成类似 <code>/yyyy/mmdd+随机数.html</code> 的文章链接地址。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，修改 <code>permalink:</code> ，并在文件末尾新增 <code>abbrlink:</code>配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>year/<span class="token punctuation">:</span>month<span class="token punctuation">:</span>day<span class="token punctuation">:</span>abbrlink.html<span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>  <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc16 <span class="token comment">#算法选项：crc16丨crc32</span>  <span class="token key atrule">rep</span><span class="token punctuation">:</span> dec <span class="token comment">#输出进制：dec为十进制，hex为十六进制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CND-加速（建议启用）"><a href="#CND-加速（建议启用）" class="headerlink" title="CND 加速（建议启用）"></a>CND 加速（建议启用）</h3><p>放在 Github 的资源在国内加载速度比较慢，因此需要使用 CDN 加速来优化网站打开速度，<a href="https://www.jsdelivr.com/">jsDelivr</a> + Github 便是免费且好用的 CDN，非常适合博客网站使用。也可以选择主流云服务商提供的对象存储+CDN 来获得更快速及稳定的访问效果，费用低到几乎可忽略。</p><p><strong>用法：</strong></p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">https:</span>//cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>例如：</strong></p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">https:</span>//cdn.jsdelivr.net/gh/lxl80/blog@gh-pages/medias/banner/1.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源。</p><blockquote><p>还可以配合 <a href="https://github.com/Molunerfinn/PicGo">PicGo</a>图床上传工具的<strong>自定义域名前缀</strong>来上传图片，使用极其方便。具体使用方法可参见我的另一篇文章: <a href="https://www.lixl.cn/2019/120114500.html">使用 Typora+iPic/PicGo 图床+CDN 实现高效 Markdown 创作</a></p></blockquote><h3 id="Cloudflare-CDN"><a href="#Cloudflare-CDN" class="headerlink" title="Cloudflare CDN"></a>Cloudflare CDN</h3><blockquote><p>配置最简单的CDN方式了。在github  raw链接地址前面加<code>https://images.weserv.nl/?url=</code>, 就会自动使用cloudflare cdn来加速图片访问。使用发现无法加速gif。</p></blockquote><p>本blog主要使用这个方法，如下所示。</p><ul><li>未加速图片地址</li></ul><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">https:</span>//raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910231815.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Cloudflare加速图片地址</li></ul><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">https:</span>//images.weserv.nl?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910231815.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="文章字数统计插件（可选的）"><a href="#文章字数统计插件（可选的）" class="headerlink" title="文章字数统计插件（可选的）"></a>文章字数统计插件（可选的）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">wordCount</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 将这个值设置为 true 即可.</span>  <span class="token key atrule">postWordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">" "</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明已经安装成功了。</p><h3 id="增加百度统计功能"><a href="#增加百度统计功能" class="headerlink" title="增加百度统计功能"></a>增加百度统计功能</h3><p>首先注册<a href="https://tongji.baidu.com/"><strong>百度统计站长版</strong></a>，登陆后点击 新增网站，然后直接输入你的博客地址例如： <a href="https://blog.17lai.fun,网站域名/">https://blog.17lai.fun，网站域名</a> 和 网站首页 都写这个，网站名称 可以填 我的博客，<br>行业类别： 博客—空间周边。</p><p>然后点击左侧菜单的 代码获取，找到</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">hm<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"https://hm.baidu.com/hm.js?……"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>问号后的这一段十六进制代码<br>复制下来，粘贴到 主题配置文件 中的baidu_analytics:后面，注意冒号和值之间要有一个空格，然后将该字段前面的#号删除代表启用此功能。保存后即可</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Add baidu analytics configuration</span><span class="token comment"># 添加 baidu Analytics 配置</span><span class="token key atrule">baiduAnalytics</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> f614xxxxxxxxxxxxxxxx05d25e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Leancloud-Valine打造Hexo个人博客极简评论系统"><a href="#Leancloud-Valine打造Hexo个人博客极简评论系统" class="headerlink" title="Leancloud+Valine打造Hexo个人博客极简评论系统"></a><a href="https://www.cnblogs.com/Timesi/p/9556236.html">Leancloud+Valine打造Hexo个人博客极简评论系统</a></h3><h4 id="Leancloud配置"><a href="#Leancloud配置" class="headerlink" title="Leancloud配置"></a>Leancloud配置</h4><p>首先访问Leancloud官网<code>https://leancloud.cn/</code><br>有Github账号的小伙伴可以用Github账号进行登陆然后绑定邮箱就可以啦！<br>进入之后点击创建应用<br><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1120210911134958.png" alt="img"><br>这样我们就创建好啦！<br><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1120210911135007.png" alt="img"><br>接着点击应用右上角的设置进入设置界面<br><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1120210911135013.png" alt="img"><br>选择应用key，这样就可以看到我们接下来需要使用到的key<br><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1120210911135020.png" alt="img"><br>接着进入应用中心绑定你的个人博客域名<br><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1120210911135027.png" alt="img"></p><h4 id="Valine配置"><a href="#Valine配置" class="headerlink" title="Valine配置"></a>Valine配置</h4><p>然后我们去主题配置文件中进行修改<br>主题配置文件路径：<code>matery\_config.yml</code><br>找到以下参数进行修改</p><pre class="line-numbers language-none"><code class="language-none"># Valine.# You can get your appid and appkey from https://leancloud.cn# more info please open https://valine.js.orgvaline:  enable: true //打开valine评论功能  appid: 你的leancloud appid   appkey: 你的leancloud appkey   notify: false //邮件提醒  verify: true //评论时是否有验证码，需要在Leancloud 设置-&gt;安全中心 中打开  placeholder: 说点什么吧！ //评论框默认显示  avatar: hide //评论者的头像,我这里设置的不显示  guest_info: nick # custom comment header  pageSize: 10 # pagination size<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PS：评论者头像可以进行如下设置<br><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1120210911135034.png" alt="img"></p><p>到此，一个极简评论系统就完成啦！</p><h3 id="添加博客看板娘-动漫人物挂件"><a href="#添加博客看板娘-动漫人物挂件" class="headerlink" title="添加博客看板娘    动漫人物挂件"></a>添加博客看板娘    动漫人物挂件</h3><p>方法：</p><p>获取模型：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装喜欢的模型：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> packagename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将packagename换成模型名字，如我使用的模型：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> live2d-widget-model-shizuku<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后打开博客根目录下的 _config.yml文件，添加如下代码：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Live2D</span><span class="token comment">## https://github.com/EYHN/hexo-helper-live2d</span><span class="token key atrule">live2d</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># enable: false</span>  <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/ <span class="token comment"># Root path of plugin to be on the site (Relative)</span>  <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/ <span class="token comment"># JavaScript path related to plugin's root (Relative)</span>  <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/ <span class="token comment"># Relative model path related to plugin's root (Relative)</span>  <span class="token key atrule">scriptFrom</span><span class="token punctuation">:</span> local <span class="token comment"># Default</span>  <span class="token comment"># scriptFrom: jsdelivr # jsdelivr CDN</span>  <span class="token comment"># scriptFrom: unpkg # unpkg CDN</span>  <span class="token comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # Your custom url</span>  <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># Whether only to replace live2d tag instead of inject to all pages</span>  <span class="token key atrule">log</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># Whether to show logs in console</span>  <span class="token key atrule">model</span><span class="token punctuation">:</span>    <span class="token comment">#use: live2d-widget-model-lwet # npm-module package name</span>    <span class="token comment"># use: wanko # folder name in (hexo base dir)/live2d_models/</span>    <span class="token comment"># use: ./wives/wanko # folder path relative to hexo base dir</span>    <span class="token comment"># 模型：https://huaji8.top/post/live2d-plugin-2.0/</span>    <span class="token key atrule">use</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>wanko@1.0.5/assets/wanko.model.json <span class="token comment"># Your custom url</span>  <span class="token key atrule">display</span><span class="token punctuation">:</span>    <span class="token key atrule">position</span><span class="token punctuation">:</span> left    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">300</span>    <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">400</span>    <span class="token key atrule">hOffset</span><span class="token punctuation">:</span> <span class="token number">50</span>    <span class="token key atrule">vOffset</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">mobile</span><span class="token punctuation">:</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果见本blog左下角</p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p>如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector">.bg-color</span> <span class="token punctuation">{</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #4cbf30 0%<span class="token punctuation">,</span> #0f9d58 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>  <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>  <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>可以直接在 <code>/source/medias/banner</code> 文件夹中更换喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果会 <code>JavaScript</code> 代码，可以修改成自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".bg-cover"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-image"</span><span class="token punctuation">,</span> <span class="token string">"url(/medias/banner/"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".jpg)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 基于Hexo的hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery主题搭建博客并优化<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-10-03 14:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 基于Hexo的hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery主题搭建博客并优化<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-12-30 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 17lai.fun<span class="token key atrule">img</span><span class="token punctuation">:</span> /medias/cover/hexo.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /medias/cover/hexo.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Hexo<span class="token key atrule">keywords</span><span class="token punctuation">:</span> Hexo GitHub blog<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Hexo  <span class="token punctuation">-</span> Blog  <span class="token punctuation">-</span> GitHub<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SEO-优化"><a href="#SEO-优化" class="headerlink" title="SEO 优化"></a>SEO 优化</h2><blockquote><p>搜索引擎优化，又称为 SEO，即 Search Engine Optimization，它是一种通过分析搜索引擎的排名规律，了解各种搜索引擎怎样进行搜索、怎样抓取互联网页面、怎样确定特定关键词的搜索结果排名的技术。Google 自动收录效果还不错，百度就差得远了（<code>GitHub</code>不允许百度的<code>Spider</code>爬取<code>GitHub</code>上的内容）。</p></blockquote><h3 id="网域提交方式"><a href="#网域提交方式" class="headerlink" title="网域提交方式"></a>网域提交方式</h3><ol><li><p>自动提交</p><p>（分三种）</p><ul><li>主动推送</li><li>自动推送</li><li>sitemap（站点地图）</li></ul></li><li><p>手动提交</p><ul><li>即手动地将链接一次性提交给百度</li></ul></li></ol><p>一般自动提交比手动提交效果好一点，自动提交又从效率上来说：</p><p><strong>主动推送&gt;自动推送&gt;sitemap</strong></p><p><strong>自动提交的三种方式</strong>：</p><ol><li><code>主动推送</code>：最为快速的提交方式。将站点当天新产出链接通过此方式推送给百度，以保证新链接可以及时被百度收录。</li><li><code>自动推送</code>：最为便捷的提交方式。将自动推送的JS代码部署在站点的每一个页面源代码中，当部署代码的页面在每次被浏览时，链接就会被自动推送给百度。可以与主动推送配合使用。</li><li><code>sitemap</code>：您可以定期将网站链接放到<code>sitemap文件</code>中，然后将<code>sitemap文件</code>提交给百度。百度会周期性的抓取检查您提交的<code>sitemap</code>，对其中的链接进行处理，但收录速度慢于主动推送。</li></ol><h3 id="使用sitemap方式推送"><a href="#使用sitemap方式推送" class="headerlink" title="使用sitemap方式推送"></a>使用sitemap方式推送</h3><p>安装 sitemap 插件生成站点地图文件:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap --save<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-baidu-sitemap --save  <span class="token comment">#百度专用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装后直接执行 <code>hexo cl&amp;&amp;hexo g -d</code> 命令，就会在网站根目录生成 <code>sitemap.xml</code> 及 <code>baidusitemap.xml</code> 文件。</p><ul><li>在博客目录的_config.yml中添加如下代码</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 通用站点地图</span><span class="token key atrule">sitemap</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> sitemap.xml<span class="token comment"># 百度站点地图</span><span class="token key atrule">baidusitemap</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> baidusitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="百度优化"><a href="#百度优化" class="headerlink" title="百度优化"></a>百度优化</h4><p>登录<a href="https://ziyuan.baidu.com/">百度搜索资源平台</a>， 登录成功之后在 用户中心 –&gt; 站点管理 页面中点击<a href="https://ziyuan.baidu.com/site/siteadd">添加网站</a>，按提示操作。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910231752.png" alt="添加网站"></p><p><strong>添加网站</strong></p><blockquote><p>提示：由于百度的 spider 是爬取不到 GitHub 的内容的，所以在第三步验证网站的时候，建议选择<code>CNAME验证</code>的方式。</p></blockquote><p>经过以上步骤，百度已经知道有我们网站的存在了，但是百度还不知道我们的网站上有什么内容，所以要向百度推送我们的内容。点击 网站支持 –&gt; 数据引入 –&gt; 链接提交菜单，提交站点地图：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910231758.png" alt="提交站点地图"></p><p><strong>提交站点地图</strong></p><p>另外，<code>hexo-theme-matery</code>主题已经内置了 <code>自动推送</code> 的功能， 检查 <code>themes/hexo-theme-matery/_config.yml</code> 文件中如下配置:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 百度搜索资源平台提交链接</span><span class="token key atrule">baiduPush</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>自动推送的 JS 代码部署在站点的每一个页面源代码中，当页面在每次被浏览时，链接就会被自动推送给百度。</p><h4 id="谷歌优化"><a href="#谷歌优化" class="headerlink" title="谷歌优化"></a>谷歌优化</h4><p>登录 <a href="https://search.google.com/search-console?hl=zh-CN">Google Search Console</a>，点击添加资源，输入自己的域名，按提示操作。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910231807.png" alt="添加资源"></p><p><strong>添加资源</strong></p><blockquote><p>提示：需要进行 DNS 验证，进入 DNS 域名解析设置页面，按提示增加 TXT 记录，如下图:</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910231808.png" alt="DNS验证内容填写示例"></p><p><strong>DNS验证内容填写示例</strong></p></blockquote><p>验证成功后，需要提交站点地图。参照下图提交，然后等待收录。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910231815.png" alt="提交站点地图"></p><p><strong>提交站点地图</strong></p><blockquote><p>注意：hexo 配置文件中的 url 一定要输入正确的域名，插件是根据 url 生成站点地图的。</p></blockquote><h3 id="自动推送方式"><a href="#自动推送方式" class="headerlink" title="自动推送方式"></a>自动推送方式</h3><p>只要每个需要被百度爬取的HTML页面中加入一段JS代码即可：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> bp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> curProtocol <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>curProtocol <span class="token operator">===</span> <span class="token string">'https'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        bp<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'https://zz.bdstatic.com/linksubmit/push.js'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        bp<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://push.zhanzhang.baidu.com/push.js'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>bp<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我所使用的matery主题可以自动给每个页面加上这段代码，只需在主题配置文件中配置：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># 百度搜索资源平台提交链接</span><span class="token key atrule">baiduPush</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>即可！</p><p>其他主题一般都有这个功能的实现，如果没有的话，想办法在每个页面加入以上JS代码即可，原理是一样。</p><h3 id="主动推送方式"><a href="#主动推送方式" class="headerlink" title="主动推送方式"></a>主动推送方式</h3><p>安装主动推送插件：<a href="https://github.com/huiwang/hexo-baidu-url-submit">hexo-baidu-url-submit</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-baidu-url-submit --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后打开<code>hexo配置文件</code>，在末尾加入以下配置：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># hexo-baidu-url-submit  百度主动推送</span><span class="token key atrule">baidu_url_submit</span><span class="token punctuation">:</span>  <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token number">80</span> <span class="token comment"># 提交最新的一个链接</span>  <span class="token key atrule">host</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//blog.17lai.fun <span class="token comment"># 在百度站长平台中注册的域名</span>  <span class="token key atrule">token</span><span class="token punctuation">:</span> xxxxxxx <span class="token comment"># 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> baidu_urls.txt <span class="token comment"># 文本文档的地址， 新链接会保存在此文本文档里</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>密匙的获取是在百度的自动提交的主动推送那里。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1120210911153349.png" alt="img"></p><p>再加入新的<code>deploy</code>：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> baidu_url_submitter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如图：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1120210911153357.png" alt="img"></p><p>这样每次执行 <code>hexo d</code> 的时候，新的链接就会被推送了。<br>推送成功时,会有如下终端提示!</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1120210911153404.png" alt="img"></p><p>各种不同的推送反馈字段说明<a href="https://ziyuan.baidu.com/college/courseinfo?id=267&amp;page=2#h2_article_title12">点我</a>查看，一般来说，推送失败基本都是地址不相符造成的，我们只需对比<code>baidu_url_submit</code>在<code>public</code>中生成的<code>baidu_urls.txt</code>的地址,与自己填写在<code>host</code>字段中的地址对比看是否一样即可。</p><h3 id="提交-robots-txt"><a href="#提交-robots-txt" class="headerlink" title="提交 robots.txt"></a>提交 robots.txt</h3><h4 id="robots-txt是干嘛的？"><a href="#robots-txt是干嘛的？" class="headerlink" title="robots.txt是干嘛的？"></a>robots.txt是干嘛的？</h4><blockquote><p><code>robots.txt</code> 是一种存放于网站根目录下的 <code>ASCII</code> 编码的文本文件，它的作用是告诉搜索引擎此网站中哪些内容是可以被爬取的，哪些是禁止爬取的。<br><code>robots.txt</code> 要放在 <code>Hexo根目录</code> 下的 <code>source</code> 文件夹中。</p></blockquote><p>每个人站点目录可能不太一样，可以参考下我的 <code>robots.txt</code> 文件，内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">User-agent</span><span class="token punctuation">:</span> *<span class="token key atrule">Allow</span><span class="token punctuation">:</span> /<span class="token key atrule">Allow</span><span class="token punctuation">:</span> /posts/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /about/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /archives/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /js/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /css/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /contact/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /fonts/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /friends/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /libs/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /medias/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /page/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /tags/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /categories/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多关于 <code>robots.txt</code> 的写法参见 <a href="https://blog.csdn.net/fanghua_vip/article/details/79535639">https://blog.csdn.net/fanghua_vip/article/details/79535639</a></p><p>编写完以上内容再重新部署一下，然后到百度资源平台的<code>数据监控</code>-&gt;<code>Robots</code>点击<code>检测并更新</code> 看能不能检测到。</p><h3 id="配置-Nofollow"><a href="#配置-Nofollow" class="headerlink" title="配置 Nofollow"></a>配置 Nofollow</h3><ul><li>nofollow 是HTML页面中 <code>a标签</code> 的 属性值。</li><li>这个属性的作用是：告诉搜索引擎的爬虫不要追踪该链接，为了对抗博客垃圾留言信息</li></ul><h3 id="URL优化"><a href="#URL优化" class="headerlink" title="URL优化"></a>URL优化</h3><p>一般来说，SEO搜索引擎优化认为，网站的最佳结构是 <strong>用户从首页点击三次就可以到达任何一个页面</strong>，但是我们使用<code>Hexo</code>编译的站点结构的<code>URL</code>是：<code>域名/年/月/日/文章标题</code>四层的结构，这样的<code>URL</code>结构很不利于<code>SEO</code>，爬虫就会经常爬不到我们的文章，于是，我们需要优化一下网站文章的<code>URL</code></p><p><strong>方案一</strong>：</p><p>直接改成<code>域名/文章标题</code>的形式，在<code>Hexo配置文件</code>中修改<code>permalink</code>如下：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># URL</span><span class="token comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//blog.sky03.cn<span class="token key atrule">root</span><span class="token punctuation">:</span> /<span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>title.htmlpermalink_defaults<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这个方式有个不好的地方：</strong></p><p>直接以<code>文章的标题</code>作为URL，而我们所写的文章的标题一般都是中文，但是URL只能用字母数字和标点符号表示，所以中文的URL只能被转义成一堆符号，而且还特别长。</p><p><strong>方案二</strong>：</p><p>安装固定链接插件：<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a></p><p>插件作用：自动为每篇文章生成一串数字作每篇文章的URI地址。每篇文章的<code>Front-matter</code>中会自动增加一个配置项：<code>abbrlink: xxxxx</code>，该项的值就是当前文章的URI地址。</p><ol><li><p>Hexo根目录执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>Hexo配置文件</code>末尾加入以下配置：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># hexo-abbrlink config 、固定文章地址插件</span><span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>  <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc16  <span class="token comment">#算法选项：crc16、crc32，区别见之前的文章，这里默认为crc16丨crc32比crc16复杂一点，长一点</span>  <span class="token key atrule">rep</span><span class="token punctuation">:</span> dec    <span class="token comment">#输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Hexo配置文件</code>中修改<code>permalink</code>如下：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># URL</span><span class="token comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//blog.17lai.fun<span class="token key atrule">root</span><span class="token punctuation">:</span> /<span class="token key atrule">permalink</span><span class="token punctuation">:</span> posts/<span class="token punctuation">:</span>abbrlink.htmlpermalink_defaults<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>这样站点结构就变成了：<code>域名/posts/xxx.html</code></p><h2 id="优化小技巧"><a href="#优化小技巧" class="headerlink" title="优化小技巧"></a>优化小技巧</h2><h3 id="异步加载JS"><a href="#异步加载JS" class="headerlink" title="异步加载JS"></a>异步加载JS</h3><p><strong>方法</strong>：将JS文件的引入，放到HTML的body结束标签的上方</p><p><strong>例</strong>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>        xxxxx....        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xx/xx.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原理</strong>：首先要明白，HTML的加载是从上往下一行一行解释执行的，把js文件的引入放到下面，这样就会先把HTML页面展示出来，然后再加载js。这样看起来的效果就是，大体的页面先出来，而js让它慢慢加载执行，如果你把js放到网页的上方，效果就是必须要加载完js才能继续展示网页，体验极差。</p><p><strong>注意</strong>：原主题的js文件尽量不要动，我们只需将自己增加的一些js按照异步加载的方式做即可，比如一些音乐js插件、实时在线聊天js插件等放到最后即可！因为这些文件要加载的东西很多。</p><h3 id="字蛛"><a href="#字蛛" class="headerlink" title="字蛛"></a>字蛛</h3><p><a href="http://font-spider.org/">官网</a> <a href="https://github.com/aui/font-spider">GitHub</a></p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>你的网站中需要自定义字体（额外添加一些普通电脑中没有的字体），但是一般字体是包含很多字符的，这就导致字体文件的体积很大</p><h4 id="字蛛作用"><a href="#字蛛作用" class="headerlink" title="字蛛作用"></a>字蛛作用</h4><p>字蛛就是自动检测网站的 CSS 与 HTML 文件中的自定义字体（额外加的字体），并将网站中<strong>用到的文字</strong>重新打包成一个新的字体文件，并自动引入；</p><p>而<strong>没用到的文字</strong>就会删除，从而达到压缩字体文件体积的作用。</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm install font-spider -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="在-CSS-中使用-WebFont："><a href="#在-CSS-中使用-WebFont：" class="headerlink" title="在 CSS 中使用 WebFont："></a>在 CSS 中使用 WebFont：</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*声明 WebFont*/</span><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'pinghei'</span><span class="token punctuation">;</span>  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../font/pinghei.eot'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>  <span class="token property">src</span><span class="token punctuation">:</span>    <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../font/pinghei.eot?#font-spider'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../font/pinghei.woff'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../font/pinghei.ttf'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../font/pinghei.svg'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*使用选择器指定字体*/</span><span class="token selector">.home h1, .demo &gt; .test</span> <span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'pinghei'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li>@font-face 中的 src 定义的 .ttf 文件必须存在，其余的格式将由工具自动生成</li><li>开发阶段请使用相对路径的 CSS 与 WebFont</li></ol></blockquote><h4 id="运行-font-spider-命令："><a href="#运行-font-spider-命令：" class="headerlink" title="运行 font-spider 命令："></a>运行 font-spider 命令：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">font-spider ./demo/*.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>页面依赖的字体将会自动压缩好，原 .ttf 字体会备份</p></blockquote><h3 id="将Hexo部署到vps，实现自动发布"><a href="#将Hexo部署到vps，实现自动发布" class="headerlink" title="将Hexo部署到vps，实现自动发布"></a><a href="https://www.cnblogs.com/luoshuitianyi/p/10333928.html" title="Hexo搭建(VPS)">将Hexo部署到vps，实现自动发布</a></h3><h4 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h4><ol><li> 服务器环境配置，安装Git、Nginx配置、创建git用户</li><li> 本地hexo初始化</li><li> 使用Git自动部署并发布博客</li></ol><h4 id="服务器环境搭建"><a href="#服务器环境搭建" class="headerlink" title="服务器环境搭建"></a>服务器环境搭建</h4><ul><li>  <strong>安装Git和NodeJS(Centos环境)</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token function">git</span><span class="token comment"># 安装NodeJS </span><span class="token function">curl</span> --silent --location https://rpm.nodesource.com/setup_5.x <span class="token operator">|</span> <span class="token function">bash</span> -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>  <strong>创建git账号</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adduser <span class="token function">git</span><span class="token function">chmod</span> <span class="token number">740</span> /etc/sudoers<span class="token function">vim</span> /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>添加内容<br>  找到</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## Allow root to run any commands anywhere</span>root    <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>     ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>  添加以下内容</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span>     <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>     ALL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>  保存退出并改回权限</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">400</span> /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>  设置git账号密码</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>  使用<code>su git</code>切换到git用户，再执行下列操作：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换到git用户目录</span><span class="token builtin class-name">cd</span> /home/git<span class="token comment"># 创建.ssh文件夹</span><span class="token function">mkdir</span> ~/.ssh<span class="token comment"># 创建authorized_keys文件并编辑</span><span class="token function">vim</span> ~/.ssh/authorized_keys<span class="token comment"># 如果你还没有生成公钥，那么首先在本地电脑中执行 cat ~/.ssh/id_rsa.pub | pbcopy生成公钥</span><span class="token comment"># 再将公钥复制粘贴到authorized_keys</span><span class="token comment"># 保存关闭authorized_keys后，修改相应权限</span><span class="token function">chmod</span> <span class="token number">600</span> ~/.ssh/authorized_keys<span class="token function">chmod</span> <span class="token number">700</span> ~/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>  然后可以通过本地Git Bash执行ssh命令测试是否可以免密登录</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -v git@服务器ip地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样git用户就添加好了。</p><blockquote><p>Tips: 将公钥拷贝到服务器的~/.ssh/authorized_keys文件中方法有如下几种：</p><ol><li>将公钥通过scp拷贝到服务器上，然后追加到<del>/.ssh/authorized_keys文件中，这种方式比较麻烦。scp -P 22 ~/.ssh/id_rsa.pub user@host:</del>/。</li><li>通过ssh-copy-id程序，就是我演示的方法，ssh-copyid user@host即可</li><li>可以通过cat ~/.ssh/id_rsa.pub | ssh -p 22 user@host ‘cat &gt;&gt; ~/.ssh/authorized_keys’，这个也是比较常用的方法，因为可以更改端口号。 </li></ol></blockquote><ul><li>  <strong>安装Nginx</strong></li><li>准备工作<br>  首先由于nginx的一些模块依赖一些lib库，所以在安装nginx之前，必须先安装这些lib库，这些依赖库主要有g++、gcc、openssl-devel、pcre-devel和zlib-devel 所以执行如下命令安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> gcc-c++yum <span class="token function">install</span> pcre pcre-develyum <span class="token function">install</span> zlib zlib-develyum <span class="token function">install</span> openssl openssl--devel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Ubuntu系统安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libpcre3 libpcre3-dev<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> zlib1g-dev<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openssl libssl-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>安装Nginx<br>  安装之前，最好检查一下是否已经安装有nginx</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> -name nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果系统已经安装了nginx，那么就先卸载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum remove nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后开始安装<br>首先进入<code>/usr/local</code>目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从官网下载最新版的nginx</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -c https://nginx.org/download/nginx-1.14.2.tar.gz <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（注：版本号可更改，去官网查看最新版本号修改即可）</p><p>解压nginx压缩包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf nginx-1.14.2.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会产生一个nginx-1.14.2 目录，这时进入nginx-1.14.2 目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span>  nginx-1.14.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来安装，使用–prefix参数指定nginx安装的目录,make、make install安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（默认安装在/usr/local/nginx，推荐使用默认设置）</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912163925.png"></p><pre class="line-numbers language-none"><code class="language-none">make<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912163918.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912163522.png"></p><p>如果没有报错，顺利完成后，最好看一下nginx的安装目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">whereis</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（where和is要连这些，中间没有空格）</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912163515.png"></p><ul><li>  启动和停止nginx</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/nginx/sbin/./nginx ./nginx -s stop./nginx -s quit./nginx -s reload./nginx -s quit: 此方式停止步骤是待nginx进程处理任务完毕进行停止。./nginx -s stop: 此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询nginx进程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912163454.png"></p><ul><li>  重启 nginx</li></ul><ol><li>先停止再启动（推荐）：<br> 对 nginx 进行重启相当于先停止再启动，即先执行停止命令再执行启动命令。如下：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./nginx -s quit./nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>重新加载配置文件：<br> 当 nginx 的配置文件 nginx.conf 修改后，要想让配置生效需要重启 nginx，使用 -s reload 不用先停止 nginx 再启动 nginx 即可将配置信息在 nginx 中生效，如下：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动成功后，在浏览器可以看到如下页面：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912163437.png"></p><ul><li>  开机自启动</li></ul><p>即在rc.local增加启动代码就可以了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/rc.local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>增加一行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/nginx/sbin/nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到这里，nginx安装完毕，启动、停止、重启操作也都完成。</p><h4 id="建立git裸库"><a href="#建立git裸库" class="headerlink" title="建立git裸库"></a>建立git裸库</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 回到git目录</span><span class="token builtin class-name">cd</span> /home/git<span class="token comment"># 使用git用户创建git裸仓库，以blog.git为例</span><span class="token function">git</span> init --bare blog.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="检查用户组权限"><a href="#检查用户组权限" class="headerlink" title="检查用户组权限"></a>检查用户组权限</h4><p>我们的git裸仓库已经建立好了，离成功又近了一步。为了以防万一，我们要检查一下之前的blog.git、.ssh、blog目录的用户组权限是否都为<code>git:git</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 还记得/var/www/吗？这是之前配置nginx时，我们自己选定的网站根目录，请依据你自己的设置更改，如果没有的话自己</span>ll -a /www/wwwroot/hexoll -a /home/git/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果有哪个不是，执行下面相应的命令后再查看</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chown</span> -R git:git /www/wwwroot/hexo<span class="token function">sudo</span> <span class="token function">chmod</span> -R <span class="token number">755</span> /www/wwwroot/hexo<span class="token function">sudo</span> <span class="token function">chown</span> git:git -R /home/git/blog.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="使用git-hooks同步网站根目录"><a href="#使用git-hooks同步网站根目录" class="headerlink" title="使用git-hooks同步网站根目录"></a>使用git-hooks同步网站根目录</h4><p>简单来说，我们使用一个钩子文件：post-receive，每当git仓库接收到内容的时候，就会自动调用这个钩子，把内容同步到网站根目录。<br> 在git用户下执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 新建一个post-receive文件并编辑</span><span class="token function">vim</span> ~/blog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在里面输入以下内容，注意修改为自己的设置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">set</span> -e<span class="token assign-left variable">GIT_REPO</span><span class="token operator">=</span>/home/git/blog.git<span class="token assign-left variable">TMP_GIT_CLONE</span><span class="token operator">=</span>/tmp/blog<span class="token assign-left variable">PUBLIC_WWW</span><span class="token operator">=</span>/www/wwwroot/hexo<span class="token function">rm</span> -rf <span class="token variable">${TMP_GIT_CLONE}</span><span class="token function">git</span> clone <span class="token variable">$GIT_REPO</span> <span class="token variable">$TMP_GIT_CLONE</span><span class="token builtin class-name">cd</span> <span class="token variable">$TMP_GIT_CLONE</span><span class="token keyword">for</span> <span class="token for-or-select variable">b</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">git</span> branch -r <span class="token operator">|</span> <span class="token function">grep</span> -v -- <span class="token string">'-&gt;'</span><span class="token variable">`</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">git</span> branch --track <span class="token variable">${b<span class="token operator">##</span>origin<span class="token operator">/</span>}</span> <span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token keyword">done</span><span class="token function">git</span> checkout main<span class="token function">rm</span> -rf <span class="token variable">${PUBLIC_WWW}</span>/*<span class="token function">cp</span> -rf <span class="token variable">${TMP_GIT_CLONE}</span>/* <span class="token variable">${PUBLIC_WWW}</span><span class="token function">ls</span> <span class="token variable">${PUBLIC_WWW}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存退出后，执行以下赋予这个文件可执行权限。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> -R git:git ~/blog.git/hooks/post-receive<span class="token function">chmod</span> +x ~/blog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>好了，以上就是服务器端需要配置的内容。我们还差最后一步就可以完成整个部署了！</p><h4 id="修改配置文件nginx-conf"><a href="#修改配置文件nginx-conf" class="headerlink" title="修改配置文件nginx.conf"></a>修改配置文件nginx.conf</h4><p>修改上面的配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /usr/local/nginx/conf/nginx_config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="然后修改其中两个部分，如下所示："><a href="#然后修改其中两个部分，如下所示：" class="headerlink" title="然后修改其中两个部分，如下所示："></a>然后修改其中两个部分，如下所示：</h4><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1220210912163900.jpeg"></p><p>然后<code>重启nginx</code>，方法见<code>nginx安装</code>部分。</p><h4 id="配置本地Hexo的-config-yml"><a href="#配置本地Hexo的-config-yml" class="headerlink" title="配置本地Hexo的_config.yml"></a>配置本地Hexo的_config.yml</h4><p>非常简单，只需要找到本地Hexo博客的站点配置文件_config.yml，找到以下内容并修改：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>   <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@你的服务器IP<span class="token punctuation">:</span>/home/git/blog.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>保存后，剩下的就是Hexo的日常操作了，这里就不赘述了，写完文章后，在你的本地博客根目录执行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo c <span class="token operator">&amp;&amp;</span> hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就可以实现线上博客的自动更新了！一切搞定！</p><h3 id="Rsync同步部署静态文件方法"><a href="#Rsync同步部署静态文件方法" class="headerlink" title="Rsync同步部署静态文件方法"></a>Rsync同步部署静态文件方法</h3><blockquote><p>使用rsync同步</p></blockquote><p>本地生成静态文件后rsync同步到vps网页目录，lnap使用宝塔配置，这里只需要一个nginx。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># rsync [options] from_dir to_dir</span><span class="token comment"># 替换这里的ip为你的服务器ip</span><span class="token function">rsync</span> -avzP  /home/17lai.blog  root@8.8.8.8:/www/wwwroot/hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Hexo-自动部署"><a href="#Hexo-自动部署" class="headerlink" title="Hexo 自动部署"></a>Hexo 自动部署</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol><li><code>Hexo</code> 博客源码的仓库，在 <code>GitHub</code> 上。</li><li><code>ssh</code> 密钥，参考文章：<a href="https://sitoi.cn/posts/43508.html">Windows 下利用 Git 生成 SSH KEY 并配置到 GitHub</a></li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>为需要部署的平台添加密钥</li><li>修改 <code>_config.yml</code> 中的 <code>deploy</code> 配置</li><li>在 GitHub 上设置 <code>Secrets</code></li><li>创建 GitHub Action</li></ol><h3 id="为需要部署的平台添加密钥"><a href="#为需要部署的平台添加密钥" class="headerlink" title="为需要部署的平台添加密钥"></a>为需要部署的平台添加密钥</h3><p>按照之前的教程，只要你之前成功将 Hexo 的博客部署到 GitHub 上，那你电脑在 <code>~/.ssh</code> 目录下一定有以下三个文件：</p><ul><li><code>id_rsa</code>：私钥</li><li><code>id_rsa.pub</code>：公钥</li><li><code>known_hosts</code>：记录对所有用户都可信赖的远程主机的公钥</li></ul><p>将 <code>id_rsa.pub</code>（公钥）添加到不同平台中即可，参考文章：<a href="https://sitoi.cn/posts/43508.html#%E6%9F%A5%E7%9C%8B-SSH-KEY">Windows 下利用 Git 生成 SSH KEY 并配置到 GitHub</a></p><p>下面是不同平台添加的地址：</p><ul><li><a href="https://github.com/settings/ssh/new">GitHub</a></li><li><a href="https://gitlab.com/profile/keys">GitLab</a></li><li><a href="https://e.coding.net/">Coding</a></li><li><a href="https://gitee.com/profile/sshkeys">Gitee</a></li></ul><h3 id="修改-config-yml-中的-deploy-配置"><a href="#修改-config-yml-中的-deploy-配置" class="headerlink" title="修改 _config.yml 中的 deploy 配置"></a>修改 <code>_config.yml</code> 中的 <code>deploy</code> 配置</h3><p>请使用 <code>ssh</code> (即以 <code>git@</code> 开头的 <code>clone</code> 链接) 的连接方式，根据直接的实际地址填写。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span>      <span class="token key atrule">github</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>Sitoi/Sitoi.github.io.git      <span class="token key atrule">coding</span><span class="token punctuation">:</span> git@e.coding.net<span class="token punctuation">:</span>Sitoi/Sitoi.git      <span class="token key atrule">gitee</span><span class="token punctuation">:</span> git@gitee.com<span class="token punctuation">:</span>sitoi/sitoi.git      <span class="token key atrule">gitlab</span><span class="token punctuation">:</span> git@gitlab.com<span class="token punctuation">:</span>Sitoi/sitoi.gitlab.io.git    <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在-GitHub-上设置-Secrets"><a href="#在-GitHub-上设置-Secrets" class="headerlink" title="在 GitHub 上设置 Secrets"></a>在 GitHub 上设置 <code>Secrets</code></h3><ol><li><p>进入到你在 <code>GitHub</code> 上面的源码仓库</p></li><li><p>点击右上角的 <code>Settings</code></p><p><a href="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/repos_settings.png"><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/repos_settings.png" alt="Settings"></a></p><p>Settings</p></li><li><p>点击左侧的 <code>Secrets</code></p></li><li><p>点击右上角的 <code>New secret</code></p><p><a href="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/secrets.png"><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/secrets.png" alt="New secret"></a></p><p>New secret</p></li><li><p>在 <code>Name</code> 中输入 <code>HEXO_DEPLOY_PRI</code>，在 <code>Value</code> 中填入 <code>id_rsa</code>（私钥）的全部内容</p><p><a href="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/add_secret.png"><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/add_secret.png" alt="Add secret"></a></p><p>Add secret</p></li></ol><h3 id="创建-GitHub-Action"><a href="#创建-GitHub-Action" class="headerlink" title="创建 GitHub Action"></a>创建 GitHub Action</h3><ol><li><p>点击项目上方的 <code>Action</code> 按钮</p><p><a href="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/action.png"><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/action.png" alt="Action"></a></p><p>Action</p></li><li><p>点击 <code>set up a workflow yourself</code> 创建 <code>Workflow</code></p><p><a href="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/workflow.png"><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/workflow.png" alt="Workflow"></a></p><p>Workflow</p></li><li><p>修改 <code>main.yaml</code> 的内容</p><p><a href="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/create_workflow.png"><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/create_workflow.png" alt="Create Workflow"></a></p><p>Create Workflow</p><blockquote><p>根据实际情况修改成你自己的内容</p></blockquote><ul><li>Git 推送使用的用户名：git config –global user.name ‘sitoi’：</li><li>Git 推送使用的邮箱：git config –global user.email ‘<a href="mailto:133397418@qq.com">133397418@qq.com</a>‘</li><li>Hexo 的版本：npm i <a href="mailto:hexo@4.1.1">hexo@4.1.1</a> -g</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo CI<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> butterfly<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">butterfly-build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">strategy</span><span class="token punctuation">:</span>      <span class="token key atrule">matrix</span><span class="token punctuation">:</span>        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>10.x<span class="token punctuation">]</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v1      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Use Node.js 10.x        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v1        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">'10.x'</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> env prepare        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token key atrule">HEXO_DEPLOY_PRI</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.HEXO_DEPLOY_PRI <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          mkdir -p ~/.ssh/          echo "$HEXO_DEPLOY_PRI" &gt; ~/.ssh/id_rsa          chmod 600 ~/.ssh/id_rsa          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts          ssh-keyscan gitlab.com &gt;&gt; ~/.ssh/known_hosts          ssh-keyscan e.coding.net &gt;&gt; ~/.ssh/known_hosts          ssh-keyscan gitee.com &gt;&gt; ~/.ssh/known_hosts          git config --global user.name 'sito'          git config --global user.email '133397418@qq.com'          npm i          npm i hexo@4.1.1 -g</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> gen        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          hexo clean          hexo generate          hexo deploy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将你的源码推送到 <code>GitHub</code> 上，你的博客一会就会自动更新了。</p></li></ol><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="指令说明"><a href="#指令说明" class="headerlink" title="指令说明"></a>指令说明</h3><ul><li><p><code>hexo server</code> #启动本地服务器，用于预览主题。Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</p></li><li><p><code>hexo server -s</code> #以静态模式启动</p></li><li><p><code>hexo server -p 5000</code> #更改访问端口 (默认端口为 4000，’ctrl + c’关闭 server)</p></li><li><p><code>hexo server -i IP地址</code> #自定义 IP</p></li><li><p><code>hexo clean</code> #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的 public 文件夹</p></li><li><p><code>hexo g</code> #生成静态网页 (执行 $ <code>hexo g</code>后会在站点根目录下生成 public 文件夹, hexo 会将”/blog/source/“ 下面的.md 后缀的文件编译为.html 后缀的文件,存放在”/blog/public/ “ 路径下)</p></li><li><p><code>hexo d</code> #自动生成网站静态文件，并将本地数据部署到设定的仓库(如 github)</p></li><li><p><code>hexo init</code> 文件夹名称 #初始化 XX 文件夹名称</p></li><li><p><code>npm update hexo -g</code>#升级</p></li><li><p><code>npm install hexo -g</code> #安装</p></li><li><p><code>node-v</code> #查看 node.js 版本号</p></li><li><p><code>npm -v</code> #查看 npm 版本号</p></li><li><p><code>git --version</code> #查看 git 版本号</p></li><li><p><code>hexo -v</code> #查看 hexo 版本号</p></li></ul><h3 id="简写指令"><a href="#简写指令" class="headerlink" title="简写指令"></a>简写指令</h3><pre class="line-numbers language-none"><code class="language-none">hexo n "我的第一篇文章"` 等价于 `hexo new "我的第一篇文章"` 还等价于 `hexo new post "我的第一篇文章"hexo p` 等价于 `hexo publishhexo g` 等价于 `hexo generatehexo s`等价于 `hexo serverhexo d` 等价于 `hexo deployhexo g -d`等价于`hexo generate --deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注: <code>hexo clean</code> 没有 简写, <code>git --version</code> 没有简写</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h4 id="通过hexo-g-d部署时报Error-Spawn-failed错误"><a href="#通过hexo-g-d部署时报Error-Spawn-failed错误" class="headerlink" title="** 通过hexo g -d部署时报Error: Spawn failed错误:**"></a>** 通过<code>hexo g -d</code>部署时报<code>Error: Spawn failed</code>错误:**</h4><blockquote><p>这是由于 git 本地记录的提交版本号与 github 上不一致导致的，通过<code>git reset --hard commitCode</code>即可解决。</p></blockquote><ul><li>检查本地最近提交记录，获取最后一次提交记录的更新时间及标识，如<code>280a7fdd46fcfd7d34e652aec15523dcd247fac8</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> .deploy_git<span class="token function">cat</span> .git/logs/HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>获取 github pages 服务所关联分支的最近一次提交记录，获取更新时间及标识。地址一般为：<code>https://github.com/用户名/仓库名/commits/分支名</code>，如<code>https://github.com/lxl80/blog/commits/gh-pages</code></li><li>如果发现提交最新的提交时间/标识不一致，通过以下命令即可解决:</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --hard f085038efdf79546c09641d37b2a2429c1ae8e60 <span class="token comment">#github上最新的提交标识</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="关于百度无法爬取GitHub内容解决方案"><a href="#关于百度无法爬取GitHub内容解决方案" class="headerlink" title="关于百度无法爬取GitHub内容解决方案"></a>关于百度无法爬取GitHub内容解决方案</h4><p>既然百度无法爬取GitHub，那么我们只需要找个可以被百度爬取到的代码托管平台即可（并且还提供pages服务），基本只有国内的平台了：<code>Gitee</code>和<code>Coding</code>！Gitee自定义域名要花钱（九十多，都可以买服务器了），而Coding是可以免费自定义域名的。这里推介大家使用企业版的Coding，因为企业版的Coding仓库服务器是在香港的，而普通版的服务器是在新加坡。地理原因，理论上企业版的更快一些！</p><ol><li><p>将博客同时部署到两个仓库：GitHub和Coding</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>xxx/xxx.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@e.coding.net<span class="token punctuation">:</span>xxx/xxx.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在域名那里，配置两个解析</p><blockquote><p>线路类型作用：如果该值填“国内”，国内的IP就会去访问此项对应的<code>记录值地址</code></p><p>同理，如果该值填写“国外”，国外的IP就会去访问“国外”对应的<code>记录值地址</code></p></blockquote><ol><li><code>线路类型</code>为<code>百度</code>或者<code>国内</code>，记录值为<code>Coding仓库的地址</code></li><li><code>线路类型</code>为<code>默认</code>或者<code>国外</code>，记录值为<code>GitHub仓库地址</code></li></ol><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1120210911170615.png" alt="img"></p></li><li><p>这样来自<code>百度的spider</code>就会去爬<code>国内Coding</code>的地址，而两个仓库的内容又都是一样的，如果请求IP来自国外，它又会去访问<code>国外的GitHub</code>，这样还有利于外国华侨和那些科学上网的用户访问，一石二鸟！（我真他妈天才！）</p></li><li><p>如果你只用Coding仓库，那就不需要这么麻烦了</p></li><li><p>测试百度Spider能不能爬你的域名</p><ol><li><p>在任意目录下执行以下命令（将“你的域名”换成你的域名）</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">curl -A "Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)" -o example.html 你的域名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行完命令，在该目录下会生成一个文件：<code>example.html</code>，打开它，如果显示</p><ul><li><p><code>Moved Permanently</code>，说明301，被重定向了</p></li><li><p><code>Found</code>，也就是爬到了</p></li><li><p>如果打开是你的首页，说明爬取到的内容就是你的首页HTML内容。</p></li><li><p>如果显示：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1120210911170621.png" alt="img"></p><p>说明域名是解析到GitHub的，403Forbidden访问禁止。</p></li></ul></li></ol></li></ol><h4 id="busuanzi不蒜子计数显示异常，一闪就没"><a href="#busuanzi不蒜子计数显示异常，一闪就没" class="headerlink" title="busuanzi不蒜子计数显示异常，一闪就没"></a>busuanzi不蒜子计数显示异常，一闪就没</h4><blockquote><ol><li><p>原因可能有两种live2d看板娘和busuanzi不蒜子计数冲突</p></li><li><p>busuanzi不蒜子网络访问异常。</p></li></ol><blockquote><ol><li><p>不在leancloud安全名单</p></li><li><p>不是正常域名访问</p></li><li><p>各种网络访问错误等等</p></li></ol></blockquote></blockquote><p>近日安装了live2d看板娘插件，<a href="https://github.com/EYHN/hexo-helper-live2d">github项目地址</a>，安装后却意外发现busuanzi不蒜子计数失效了,在页面中不显示，但强制刷新后出现，再刷新又消失。经排查，未发现问题，但事实是网站源码出现了变化。</p><blockquote><p><em>正常时</em></p></blockquote><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id="busuanzi_container_page_pv" class="info-break-policy" style="display: inline;"&gt;    &lt;i class="far fa-eye fa-fw"&gt;&lt;/i&gt;阅读次数:&amp;nbsp;&amp;nbsp;    &lt;span id="busuanzi_value_page_pv"&gt;433&lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><em>异常时</em></p></blockquote><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id="busuanzi_container_page_pv" class="info-break-policy" style="display: none;"&gt;    &lt;i class="far fa-eye fa-fw"&gt;&lt;/i&gt;阅读次数:&amp;nbsp;&amp;nbsp;    &lt;span id="busuanzi_value_page_pv"&gt;434&lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对比发现出现了多余的<code>style="display: none;</code>。<br>经过搜索主题源码，发现这个文件<code>themes\matery\source\libs\others\busuanzi.pure.mini.js</code>控制显示。</p><p>可以直接下载下面这个地址的js替换，来自个人blog的js   <a href="https://blog.17lai.fun/libs/others/busuanzi.pure.mini.js">busuanzi.pure.mini.js</a>，直接下载这个js替换即可。下面源码经过了展开美化，原始文件是压缩去空格版本的。<br><strong>注意</strong>： 这是一种破坏性修复，没有解决根本问题，临时修复方案。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> bszCaller<span class="token punctuation">,</span> bszTag<span class="token punctuation">;</span><span class="token operator">!</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span>        b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function-variable function">ready</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">||</span> <span class="token string">"interactive"</span> <span class="token operator">===</span> document<span class="token punctuation">.</span>readyState <span class="token operator">||</span> <span class="token string">"complete"</span> <span class="token operator">===</span> document<span class="token punctuation">.</span>readyState <span class="token operator">?</span> <span class="token function">c</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span> <span class="token operator">:</span>            b<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">c</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> c <span class="token operator">=</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span> c <span class="token operator">&gt;</span> a<span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function-variable function">e</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        a <span class="token operator">||</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">d</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span>removeEventListener <span class="token operator">?</span> document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>            <span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> document<span class="token punctuation">.</span>attachEvent <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">"onreadystatechange"</span><span class="token punctuation">,</span>            e<span class="token punctuation">)</span><span class="token punctuation">,</span> window <span class="token operator">==</span> window<span class="token punctuation">.</span>top <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span>addEventListener <span class="token operator">?</span> document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> document<span class="token punctuation">.</span>attachEvent <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>        document<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"onreadystatechange"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">loaded|complete</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> window <span class="token operator">==</span> window<span class="token punctuation">.</span>top <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                a <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">doScroll</span><span class="token punctuation">(</span><span class="token string">"left"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>            <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bszCaller <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function-variable function">fetch</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token string">"BusuanziCallback_"</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">1099511627776</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">evalCall</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"=BusuanziCallback"</span><span class="token punctuation">,</span> <span class="token string">"="</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span> scriptTag <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>                <span class="token string">"SCRIPT"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> scriptTag<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"text/javascript"</span><span class="token punctuation">,</span> scriptTag<span class="token punctuation">.</span>defer <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span> scriptTag<span class="token punctuation">.</span>src <span class="token operator">=</span> a<span class="token punctuation">,</span>            document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"HEAD"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>scriptTag<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">evalCall</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">a</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> scriptTag<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>scriptTag<span class="token punctuation">)</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    bszTag<span class="token punctuation">.</span><span class="token function">hides</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> bszCaller<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    bszTag<span class="token punctuation">.</span><span class="token function">texts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> bszTag<span class="token punctuation">.</span><span class="token function">shows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bszTag <span class="token operator">=</span> <span class="token punctuation">{</span>    bszs<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"site_pv"</span><span class="token punctuation">,</span> <span class="token string">"page_pv"</span><span class="token punctuation">,</span> <span class="token string">"site_uv"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token function-variable function">texts</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> c <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_value_"</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">hides</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> b <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_"</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>            b <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">shows</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> b <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_"</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>            b <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"inline"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>替换的人请操作其实就是把其中的<code>b.style.display="none"</code>中<code>none</code>去掉。</p><h2 id="参照"><a href="#参照" class="headerlink" title="参照"></a>参照</h2><ul><li><a href="https://www.lixl.cn/2019/092856736.html">基于Hexo的matery主题搭建博客并深度优化-悟尘记</a></li><li><a href="https://hexo.io/zh-cn/docs/">hexo 官方文档</a></li><li><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">闪烁之狐</a></li><li><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo-theme-matery</a></li><li><a href="https://blog.sky03.cn/posts/42790.html#toc-heading-1">Hexo 进阶之各种优化</a></li><li><a href="https://www.cnblogs.com/Timesi/p/9556236.html">Leancloud+Valine打造Hexo个人博客极简评论系统</a></li><li><a href="https://blog.sky03.cn/posts/42790.html">Hexo进阶之各种优化</a></li><li><a href="https://sitoi.cn/posts/15908.html">自动部署篇</a></li><li><a href="https://www.cnblogs.com/luoshuitianyi/p/10333928.html">Hexo搭建(VPS)</a></li><li><a href="https://boyinthesun.cn/post/error-live2d-busuanzi/">解决live2d看板娘和busuanzi不蒜子计数冲突</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker-版-hexo-matery&quot;&gt;&lt;a href=&quot;#Docker-版-hexo-matery&quot; class=&quot;headerlink&quot; title=&quot;Docker 版 hexo + matery&quot;&gt;&lt;/a&gt;Docker 版 hexo + matery&lt;/</summary>
      
    
    
    
    <category term="blog" scheme="https://blog.17lai.fun/categories/blog/"/>
    
    
    <category term="Github" scheme="https://blog.17lai.fun/tags/Github/"/>
    
    <category term="blog" scheme="https://blog.17lai.fun/tags/blog/"/>
    
    <category term="hexo" scheme="https://blog.17lai.fun/tags/hexo/"/>
    
    <category term="matery" scheme="https://blog.17lai.fun/tags/matery/"/>
    
    <category term="cdn" scheme="https://blog.17lai.fun/tags/cdn/"/>
    
  </entry>
  
  <entry>
    <title>Joplin 插件以及其Markdown语法。All in One!</title>
    <link href="https://blog.17lai.fun/tools/joplin/2021-09-09-the-joplin-plugin-and-its-markdown-syntax./"/>
    <id>https://blog.17lai.fun/tools/joplin/2021-09-09-the-joplin-plugin-and-its-markdown-syntax./</id>
    <published>2021-09-09T14:25:00.000Z</published>
    <updated>2021-09-11T10:40:11.206Z</updated>
    
    <content type="html"><![CDATA[<p>Joplin是一个以Markdown为主要语法的笔记程序，发展到今天增加了许多插件，这些插件也大大增强了它的功能，今天我们就讲讲Joplin的各个插件的作用和使用方法。</p><p>首先我们打开Joplin，依次点击<strong>工具-&gt;选项</strong>设置页面，然后点击<strong>Markdown</strong>选项卡，我们就可以看到如下界面</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/1020210910083827.png" alt="Joplin插件选择配置界面"></p><p>下面我们一个一个讲解一下每个插件的大概作用和用法，某些插件的详细使用方法可能需要我独立写一篇文章来介绍，这里我就先抛砖引玉大致介绍一下。</p><h2 id="启动软中断插件"><a href="#启动软中断插件" class="headerlink" title="启动软中断插件"></a>启动软中断插件</h2><p>Joplin默认使用的是硬中断方式，那么什么是软中断什么是硬中断呢？如果你刚开始使用Markdown撰写自己的笔记你可能会非常的不习惯，因为标准的Markdown语法里面换行需要两个回车符号，但是像word之类的编辑器都是一个回车，普通人会感觉很不习惯，所以Joplin默认采用了硬中断方式，这样你可以使用一个回车符实现换行。但是当我们启用软中断插件之后，我们就需要两个回车符来实现换行（准确说应该是分段），使用两个空格加一个回车来实现换行，前者的间距会比后者的大。启用软中断其实对于普通人来说不是很好用，很难适应，所以我不建议大家开启该插件！</p><h2 id="启用typographer支持"><a href="#启用typographer支持" class="headerlink" title="启用typographer支持"></a>启用typographer支持</h2><p>这个插件的作用是用来申明我们的版权的，因为有时候我们可能需要将我们的笔记分享给别人，但是想要声明文章是我们写的，我们就可以启用该插件来声明我们的著作权，而且该插件会给我们渲染成指定的版权声明格式，讲讲怎么用：</p><p>我们启用插件之后，在我们想要声明著作权的地方键入：</p><pre class="line-numbers language-none"><code class="language-none">(c)著作权所有人<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后Joplin就会给我们渲染为：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909174240.png" alt="typographer插件语法渲染结果"></p><p>是不是很熟悉，很多网页的底部都会有这个声明！</p><h2 id="启用数学表达式"><a href="#启用数学表达式" class="headerlink" title="启用数学表达式"></a>启用数学表达式</h2><p>这个是Markdown自带语法，Joplin使用插件来实现的，其实就是大家在<a href="http://lightzhan.xyz/index.php/2020/02/28/markdowntutorial/">Markdown语法</a>里面看到的行内公式使用$…$，行间公式使用$$…$$。需要说明的是Joplin使用的是Katex来解析数学符号，它的语法和Latex的数学公式写法差不多，我到现在还没有碰到很大的不同的地方！</p><h2 id="启用高亮-Mark-句法"><a href="#启用高亮-Mark-句法" class="headerlink" title="启用高亮==Mark==句法"></a>启用高亮<code>==Mark==</code>句法</h2><p>这个其实就是一个语句高亮插件，中间的语句会被高亮显示，有助于我们对重要的内容进行强调，自己一试就一目了然了。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909174304.png" alt="Joplin Mark插件示例"></p><h2 id="启用脚注"><a href="#启用脚注" class="headerlink" title="启用脚注"></a>启用脚注</h2><p>脚注的功能就是对文中的某一个特定的术语等进行解释补充说明，有点像是论文的参考文献，下面是一个简单的示例，相信大家一看就懂</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909174326.png" alt="Joplin 启用脚注插件示例图"></p><p>根据图片你可能明白了脚注的使用方法：在我们想要使用脚注的地方使用[^唯一标识符]注明，然后在文章的最后使用响应的标识符进行说明即可，比如例子中的</p><pre class="line-numbers language-none"><code class="language-none">[^lightzhan]:知乎搜索light zhan即可找到我了<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意那个冒号一定要是英文冒号，中文冒号可能无法被成功解析</strong>。</p><h2 id="启用目录扩展"><a href="#启用目录扩展" class="headerlink" title="启用目录扩展"></a>启用目录扩展</h2><p>启用该扩展，我们就可以使用相应的语法在某个位置插入我们文章的目录，具体的语法为</p><pre class="line-numbers language-none"><code class="language-none">[toc]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意着是一个固定的符号，不需要改变什么，只需要在我们想要插入目录的地方放上**[toc]**即可，例如</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909174350.png" alt="Joplin toc目录生成插件示例图"></p><p>上图最重要的就是坐上脚的[toc]指令，该指令自动生成了右边的整个目录！</p><h2 id="启用下标-sub-和上标-sup-句法"><a href="#启用下标-sub-和上标-sup-句法" class="headerlink" title="启用下标~sub~和上标^sup^句法"></a>启用下标<code>~sub~</code>和上标<code>^sup^</code>句法</h2><p>一看到<del>sub</del>如果不小心就会认为这个是删除线，大错特错了，一定要明白两者的区别，删除线是左右都是两个波浪线，而这个只有一个波浪线，一定要搞清楚这个。下面我们看看这个插件的作用和用法。</p><p>这两个插件的作用其实很简单，就是下标和上标，看例子应该就明白的</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909174420.png" alt="img"></p><h2 id="启用术语表插件"><a href="#启用术语表插件" class="headerlink" title="启用术语表插件"></a>启用术语表插件</h2><p>对于这个插件得先知道什么是术语表。所谓的术语表其实可以理解为一个定义的列表，很多专业的书籍的前面都会有术语表，因为它需要给出书中所用术语的定义和解释。还不懂？我们在Joplin中启用该插件，然后新建一个笔记，输入如下文字：</p><pre class="line-numbers language-none"><code class="language-none">Qdown:   Qdown是由lightzhan开发的全功能软件下载程序，这里是程序的介绍页哦:http://lightzhan.xyz/index.php/qdown/ LightZhan:   计算机爱好一名，爱折腾哎生活，*欢迎知乎关注lightzhan哦*        可以嵌入一些代码    定义第三段 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些文字会被解析显示为：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909174558.png" alt="Joplin术语表插件示例"></p><p>对比一下发现了什么没有？术语表的每一项由两个部分组成，第一部分是术语，第二部分是该术语的解释，多个术语及其解释组合在一起就组成了表，这就是术语表！需要特别注意的是术语表的书写格式是固定的，如果你想要快速上手，建议你拷贝上面我提供的示例进行修改，修改两下你就懂格式到底是怎么回事了！</p><h2 id="启用缩写句法"><a href="#启用缩写句法" class="headerlink" title="启用缩写句法"></a>启用缩写句法</h2><p>这个插件很有意思，也很有用。你是否记得有些程序的按钮，当你把鼠标放上去的时候它会显示按钮的作用。不记得了？不存在，我们也使用例子来说明。下面我们启用缩写句法插件，然后新建笔记，在笔记里面输入：</p><pre class="line-numbers language-none"><code class="language-none">*[Qdown]: 由lightzhan开发*[LightZhan]:  欢迎知乎关注我哦Qdown 是由 LightZhan 开发的一款全协议下载器.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>该文本会被Joplin显示为</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909174619.png" alt="Markdown Joplin 缩写表插件示例图"></p><p>这可能并不能完全显示出该插件的作用，因为截图的原因截不到，当我们把鼠标放在Qdown上面的时候，鼠标所在的位置处会弹出“由lightzhan”开发的提示。不理解的可以拷贝上面的代码到Joplin感受一下，记得要开启该插件哦！需要注意的是该句中对应的<strong>缩写词前后都要有空格</strong>，负责你可能看不到上面的效果。</p><h2 id="启用Markdown-emoji"><a href="#启用Markdown-emoji" class="headerlink" title="启用Markdown emoji"></a>启用Markdown emoji</h2><p>该插件是用于在我们的笔记中插入表情的，这是一个简单的示例截图</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909174639.png" alt="Joplin表情插件示例"></p><p>详细的表情和表情的代码，可以参考<a href="https://github.com/zhouie/markdown-emoji">这里</a>。</p><h2 id="启用-insert-句法"><a href="#启用-insert-句法" class="headerlink" title="启用++insert++句法"></a>启用<code>++insert++</code>句法</h2><p>这个插件很好理解，一试便知道作用和用法了</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909174656.png" alt="Joplin insert插件示例"></p><p>说了那么多，就是在对应的文字下面显示一个下划线！</p><p>Markdown是非常好用的笔记书写规范，记着，Markdown不是某一个软件，而是一个通用的笔记书写规范，通过使用该规范进行写作，解析器会按照规定的样式将其渲染显示出来，说得直白点就是用于文字排版的。</p><h2 id="Markdown的排版语法"><a href="#Markdown的排版语法" class="headerlink" title="Markdown的排版语法"></a>Markdown的排版语法</h2><p>这里的讲解如果有不懂的可以参见下一节的示例：</p><ol><li>标题。markdown的标题使用“#”符号开头，一级标题一个”#”，二级标题两个“#”（也就是“##”），以此类推三级标题四级标题…….，不同级的标题会被渲染为不同的大小和样式（根据各个软件和相应的主题而定）；</li><li>粗体。markdown的粗体字使用两个“<strong>”包裹即可，比如 “</strong>你好**”解析后变为“你好”；</li><li>斜体。markdown的斜体使用“<em>”或者“_”包裹，比如“</em>你好*”解析显示为“你好”；</li><li>引用。markdown的引用使用“&gt;”开头，大部分软件要求“&gt;”要和引用内容之间有一个空格；</li><li>代码。对于程序员来说可能想要在文中插入代码，markdown是支持插入代码的，行间代码使用一个”`“符号包裹，注意这个符号是键盘左上角Esc下面的那个键，不是我们所谓的英文上一撇；</li><li>数学公式。markdown的数学解析一般使用latex语法，行内公式使用一个<code>$</code>包裹即可，行间公式使用两个<code>$</code>包裹；</li><li>markdown的列表分为有序列表和无序列表。有序列表就是有序号，无序列表就是 无序号，有序列表就是在数字后面一个点，然后空一格写正文，比如：<code>1. xxxxxxx</code>，第二点需要新起一行<code>2. xxxxxx</code>。无序列表是使用“*”或者“-”开始，后面跟一个空格写上正文。</li><li>markdown的勾选框。markdown的勾选框使用<code>- [ ]</code>，注意字符之间都是有空格的。比如：第一行<code>- [ ] A</code>,第二行<code>- [ ] B</code>。这样对应的渲染结果就是勾选框和对应的选项。注意字符之间的空格！</li><li>表格。markdown的表格非常易于理解，请看下面的示例。</li></ol><h2 id="示例代码和渲染结果"><a href="#示例代码和渲染结果" class="headerlink" title="示例代码和渲染结果"></a>示例代码和渲染结果</h2><p>下面的示例左边是书写文字，右边是渲染结果，<strong>注意书写文字里面的标识符和内容之间的空格</strong>：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909175337.png" alt="image-20210909175335986"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909175353.png" alt="image-20210909175352352"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909175417.png" alt="image-20210909175416439"></p><p>需要说明的是上面的粗体显示为了橘红色的字体，这是我自己设置的格式，这个等大家熟悉了后可以使用CSS设计自己喜欢的样式。下面是表格的渲染结果 （其中左边的源代码不用那样对齐 ，横线的个数一处最少3个就行 ，右边是解析后的显示结果） ：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909175444.png" alt="img"></p><p>额~，左边左下角那个是鼠标光标，不是文字内容哈。需要说明的是不同的软件的不同的主题可能显示的结果会不一样，但是书写的语法是不变的。</p><h2 id="启用-multimarkdown-表格扩展"><a href="#启用-multimarkdown-表格扩展" class="headerlink" title="启用 multimarkdown 表格扩展"></a>启用 multimarkdown 表格扩展</h2><p>这个插件说高深也不高深，看名字应该就能知道这是一个增强Markdown表格功能的插件，大家记得Markdown的表格是怎么使用的吗？如果忘记的话赶紧看看<a href="http://lightzhan.xyz/index.php/2020/02/28/markdowntutorial/">这篇文章</a>回顾一下，不然下面的内容可能体会不会那么深！</p><p>好啦，我这里假设读者知道markdown的表格是怎么用的，然后我们开始讲解multimarkdown扩展。Markdown自带的表格功能是非常有限的，如果你使用过的话就会发现它能做出来的表格一定是规整的，行和列一定是划分均匀整齐的，但是有时候我们需要的表格可能是这样的：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909175608.png" alt="img"></p><p>这种表格使用Markdown的表格是不可能做出来的，因为分组的效果和占用两个格子的效果是做不出来的，但是如果你启用了MultiMarkdown插件，你就可以使用下面的代码渲染出来：</p><pre class="line-numbers language-none"><code class="language-none">|             |          分组                 ||第一个表头     | 第二个表头     | 第三个表头      | ------------ | :-----------: | -----------:   |内容          |          占用两个格子           ||内容          |   **内容**     |         内容    |新的一部分     |     更多       |         更多    |更多          | 带有一个跳过的 '\|'              ||[LightZhan制作]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以把上面的代码拷贝进Joplin编辑器研究一番就能理解MultiMardown表格扩展的用法了，下面我详细讲解一下。</p><p>MultiMarkdown的表格扩展支持下面的功能：</p><ul><li>使得元素占据多个列（上面的示例中有）</li><li>使得元素占据多个行</li><li>在表格上面或者下面对表头进行分组（上面的例子中有）</li><li>在表格的上面或者下面标注表格标题（上面的例子中有）</li><li>在表格中包含分块元素（列表、代码、段落等等）</li><li>表格不需要表头</li></ul><p>上面标注了“上面的例子中有”的我这里就不在讲了，因为代码一研究或者修改修改就知道咋回事的，下面我们主要讲讲上面的例子中没有涉及到的。</p><p><strong>1.使得表格占据多行</strong>。这个其实很好用，但是有两种情况。第一种情况是一个项目占据两格。这种情况要占据多行的话，在我们对应列的起始行写上内容，然后接下来要合并的行直接写“^^”。不明白不存在，我们来一个例子：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909175656.png" alt="MultiMarkdown表格扩展内容占据多行示例图"></p><p>上面对应的代码是什么呢？看下面：</p><pre class="line-numbers language-none"><code class="language-none">作者| 信息  | 信息 |----:| --------------:         | ---------:         |LightZhan| ligthzhan.xyz ||^^| 更多Joplin教程           | Qdown下载器         |[LightZhan制作，允许规范转载]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把上面的代码拷贝进编辑器改改试试，很容易明白里面的玄机的！</p><p>第二种情况是我们添加块，看下面一点。</p><p>2.<strong>在表格中添加块元素。</strong>这个不用多说，直接在表格的格子里面用Markdown语法写作，渲染成对应的Markdown格式！比如加粗、斜体、代码块等等。下面来一个简单的例子，需要注意的是下面的例子当中我们的内容有几行！</p><pre class="line-numbers language-none"><code class="language-none">|   Markdown   | 渲染结果       ||--------------|---------------||    *斜体*    | *斜体*         | \|              |               ||    - 项目1   | - 项目1        | \|    - 项目2   | - 项目2        ||    ```python | ```python       \|    .1 + .2   | .1 + .2         \|    ```       | ```           |[LightZhan制作，允许规范转载]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意代码后面的”\”，这个符号是指定换行的，如果项目占据多行一定要写上。上面的代码复制黏贴进编辑器可以看到下面的渲染结果</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909175924.png" alt="Joplin多行和内容块的示例图"></p><p>**3.表格不需要表头。**这个也很简单，直接不写表头即可。拷贝下面的代码进编辑器</p><pre class="line-numbers language-none"><code class="language-none">----:| --------------: | ---------: |LightZhan| lightzhan.xyz         ||^^| 更多Joplin教程  | Qdown下载器 |[LightZhan制作，允许规范转载]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后你就可以看到惊喜</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909180209.png" alt="Joplin表格扩展没有表头的表格示例图"></p><h2 id="启用Fountain语法支持"><a href="#启用Fountain语法支持" class="headerlink" title="启用Fountain语法支持"></a>启用Fountain语法支持</h2><p>这个插件的目标人群非常少，Fountain语法是用来写电影剧本的，而且要是要细讲的话估计又是一篇文章，因为使用的人非常少，所以我这里就不讲这个了。</p><h2 id="Mermaid插件的作用"><a href="#Mermaid插件的作用" class="headerlink" title="Mermaid插件的作用"></a>Mermaid插件的作用</h2><p>Mermaid是一个用于画流程图、时序图、类图、状态图、甘特图、饼图的Markdown扩展，其中状态图是最新8.4版本的新功能。如果你不知道这些图是干什么的，不存在，下面的教程里面我会每个都给出例子。</p><h2 id="在Joplin里面使用Mermaid"><a href="#在Joplin里面使用Mermaid" class="headerlink" title="在Joplin里面使用Mermaid"></a>在Joplin里面使用Mermaid</h2><p>在Joplin里面如果想要使用Mermaid，那么你需要使用代码块，并且代码的类型填写mermaid，详细的格式如下：</p><pre class="line-numbers language-none"><code class="language-none">```mermaidgraph TD    Start --&gt; Stop```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在渲染区我们就能得到如下的结果</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909180438.png" alt="Mermid绘图渲染示例"></p><h2 id="Mermaid流程图"><a href="#Mermaid流程图" class="headerlink" title="Mermaid流程图"></a>Mermaid流程图</h2><p>下面我们讲解在Mermaid里面画流程图。上一节的示例便是流程图，我们把上一节的代码拿出来分析一下。首先我们看代码的第一行：graph TD，这一行代码有两个作用，graph表示我们图的类型，graph表示流程图，而第二个TD表示图的方向，可能的方向有如下几个</p><ul><li>TB：自顶向下</li><li>BT：自底向上</li><li>RL：从右到左</li><li>LR：从左到右</li><li>TD：和TB一样</li></ul><p>上面我们的例子使用的是TD，如果你对其它的方向不明白，可以把代码拷贝到编辑器里面修改方向参数就可以理解各个方向的意义了。</p><p>上面的代码非常基础，因为如果要实现比较复杂的流程图，我们就需要使用一些比较高级的语法，比如定义节点。所谓的节点，你可以简单的理解为上面图片中的方框，但是如果我们要使用其它形状的节点怎么办呢？在上面的例子中我使用了默认的节点定义方法，也就是直接使用文本,这种方式定义节点的话id和显示文本是一样的，而且形状是固定的矩形。如果要定义不同的节点形状，或者使得id和显示文本不一样，可以使用下面的语法</p><ul><li>定义矩形形状的节点：id[text]</li><li>定义圆角矩形的节点：id(text)</li><li>定义椭圆形的节点：id([text])</li><li>定义圆柱形的节点：id[(text)]</li><li>定义圆形的节点：id((text))</li><li>定义非对称图形的节点：id&gt;text]</li><li>定义菱形的节点：id{text}</li><li>定义六角形的节点：id</li><li>定义平行四边形的节点(两个方向)：id[/text/]或者[\text]</li><li>定义梯形的节点(两个方向)：id[/text] 或者 di[\text/]</li></ul><p>注意上面的id和text是需要我们自己定义替换的，如果同一个id有多个text，取最后一次的定义值！</p><p>有了节点我们还需要将节点连接起来，也就是我们要使用线条或者箭头来进行节点的连接，Mermaid支持下面的方式：</p><ul><li>实线箭头：A–&gt;B</li><li>实线无箭头：A–B</li><li>无箭头实线上带文本：A–text–B</li><li>实线箭头带文本：A–&gt;|text|B 或者 A–text–&gt;B</li><li>虚线箭头：A-.-&gt;B</li><li>虚线箭头带文本：A-.text.-&gt;B</li><li>粗线箭头：A==&gt;B</li><li>粗线箭头带箭头：A==text==&gt;B</li></ul><p>最好的办法就是把上面的代码拷贝进编辑器看看，一看你应该就能理解各个图形的形状！</p><p>上面我们讲解了节点和连线，下面我们说说图形的绘制。上面我使用的例子非常基础，下面来一个复杂点的例子供大家修改和研究</p><pre class="line-numbers language-none"><code class="language-none">```mermaidgraph TD    light[LightZhan]    url[lightzhan.xyz]    QdownUrl[访问LightZhan博客Qdown页面]    Qdown((Qdown))    function[功能]    Qdown--&gt;|作者|light     light--个人主页--&gt;url    Qdown--&gt;function    Qdown--&gt;QdownUrl    function1[极速下载]    function2[磁链/BT下载]    function3[迅雷下载]    function5[下载体验]    function4[Http/Https/FTP/SFTP]    function-.功能1.-&gt;function1    function-.功能2.-&gt;function2    function-.功能3.-&gt;function3    function-.功能4.-&gt;function4    function-.更多功能.-&gt;function5    annocement[本文首发于lightzhan.xyz,允许规范转载]```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码的渲染结果如下：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909181150.png" alt="Mermaid流程图示例代码渲染结果"></p><p>如果不清楚，可以把上面的代码拷贝到编辑器进行修改和摸索！</p><h2 id="Mermaid时序图"><a href="#Mermaid时序图" class="headerlink" title="Mermaid时序图"></a>Mermaid时序图</h2><p>时序图是用于展示过程的方式和顺序的。举例来说，两个人之间的对话:</p><p>A先问B：Qdown是啥？B回答：Qdown是全功能的下载软件！A又问：哪里可以下载呀？B回答： <a href="http://lightzhan.xyz/index.php/qdown/">http://lightzhan.xyz/index.php/qdown/</a> 。我们使用mermaid绘制时序图来展示上面的对话过程：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909181418.png" alt="mermaid时序图示例图"></p><p>这样是不是看上去清晰了很多了呢？希望通过这个例子能让你深切地感受到时序图是干什么用的！好了，放上上面的时序图的代码供大家研究：</p><pre class="line-numbers language-none"><code class="language-none">```mermaidsequenceDiagramA-&gt;&gt;B:Qdown是啥？B--&gt;&gt;A:Qdown是全功能的下载软件！A-&gt;&gt;B:哪里可以下载呀？B--&gt;&gt;A:http://lightzhan.xyz/index.php/qdown/```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们来简单分析一下上面的代码。你可能注意到了第一行的sequenceDiagram，这个就是告诉mermaid我们在这里绘制时序图，然后下面有箭头，在时序图里面，mermaid支持下面类型的箭头和线段：</p><ul><li>实线并且没有箭头：A-&gt;B:text</li><li>虚线没有箭头：A–&gt;B:text</li><li>实线带箭头：A-&gt;&gt;B:text</li><li>虚线带箭头：A–&gt;&gt;B:text</li><li>实线并且在终点带一个x：A-xB:text</li><li>虚线并且在终点带一个x：A–xB:text</li></ul><p>上面的text就是要显示在箭头或线段上的文本，在mermaid的时序图里面被称为消息，线段或箭头类型如果有不清楚的可以拷贝到编辑器里面看看，一目了然！</p><p>还记得上面我们在流程图里面的节点吗？在时序图里面不是定义节点，而是定义参与者，也就是上面的A和B。上面的代码中我们定义参与者的方式采用的是默认方式，也就是不显示定义，有时候我们的参与者的名字太长的话可以使用显示定义来定义别名：</p><pre class="line-numbers language-none"><code class="language-none">participant Johnparticipant Aliceparticipant A as Aliceparticipant J as John<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码的第一二行仅仅是显式定义我们的参与者，第三四行给我们的参与者定义别名，定义了别名后我们在下面的使用中就可以直接使用A代替Alice，使用J代替John了，这样输入会方便很多！</p><p>好了，时序图差不多就讲到这里，接下来的一些高级用法大部分我们都用不到，或者要使用的话不如使用专业的绘图软件使用插图的方式导入。</p><h2 id="使用Mermaid绘制类图"><a href="#使用Mermaid绘制类图" class="headerlink" title="使用Mermaid绘制类图"></a>使用Mermaid绘制类图</h2><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><p>在讲解如何绘制类图之前我们先了解一下什么是类图！如果你是计算机专业或者会计算机编程的话应该就懂面向对象编程，对象是类的实例，而这里要绘制的类图就和面向对象编程里面的类相关。</p><p>对于编程人员来说，函数具有参数和返回值，属性具有变量类型，我们举一个例子来说一下：</p><pre class="line-numbers language-none"><code class="language-none">class BankAccount{  +String owner  +BigDecimal balance  +deposit(amount) bool  +withdrawl(amount)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码的渲染结果为：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909182000.png" alt="BankAccount类图"></p><p>上面的代码是我直接从官方借鉴的，可以直观地看出对于银行账户（BankAccount），一共有两个属性和两个方法，属性都是具有对应的变量类型，而对于函数具有参数（amount），并且deposit函数还具有bool类型的返回值。你或许看到了前面的+号，这个是对应变量或属性的可见性，分别有：</p><ul><li>+ public</li><li>– private</li><li># protected</li><li><code>~</code> Package/Internal</li></ul><p>如果我们想要定义的函数是抽象函数咋办呢？在括号的后面添加*即可：</p><pre class="line-numbers language-none"><code class="language-none">someAbstractMethod()*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在渲染过后抽象函数会使用斜体进行显示，这里就不截图展示了。对于静态函数，将后面的*换为$即可，在显示时静态函数会具有下划线。</p><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><p>在编程中我们常常会用到的关系：</p><table><thead><tr><th>&lt;|–</th><th>继承（Inheritance）</th></tr></thead><tbody><tr><td>*–</td><td>组成（Composition）</td></tr><tr><td>o–</td><td>聚集（Aggregation）</td></tr><tr><td>–&gt;</td><td>关联（Association）</td></tr><tr><td>—</td><td>实线（Link (Solid)）</td></tr><tr><td>…&gt;</td><td>依赖（Dependency）</td></tr><tr><td>…|&gt;</td><td>实现（Realization）</td></tr><tr><td>…</td><td>虚线（Link (Dashed)）</td></tr></tbody></table><p>下面我们举一个例子：“狗”继承自“动物”类别</p><pre class="line-numbers language-none"><code class="language-none">```mermaidclassDiagram    class 动物{        特点1：能动        特点2：能叫    }    class 狗{        特点1：4条腿        特点2：会汪汪叫        特点3：可爱至极        汪汪叫(陌生人)    }    动物 &lt;|-- 狗```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染结果为：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909182019.png" alt="继承关系展示"></p><p>结合代码和展示结果应该很好理解，这就是一个狗继承自动物的简单例子，我们还可以对关系结果打标签：</p><pre class="line-numbers language-none"><code class="language-none">```mermaidclassDiagram    class 动物{        特点1：能动        特点2：能叫    }    class 狗{        特点1：4条腿        特点2：会汪汪叫        特点3：可爱至极        汪汪叫(陌生人)    }    动物 &lt;|-- 狗:属于（继承）```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在关系指示后面加上冒号，然后后面加上关系说明，这样在渲染结果当中我们就可以看到箭头上出现了我们需要的标签说明：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909182129.png" alt="给关系加上说明标签"></p><p>好了，使用mermaid绘制类图就讲到这里，还有一些用法不是很常用，我就不讲了。</p><h2 id="使用mermaid绘制饼图"><a href="#使用mermaid绘制饼图" class="headerlink" title="使用mermaid绘制饼图"></a>使用mermaid绘制饼图</h2><p>绘制饼图的需求比较多，很多数据展示需要我们绘制饼图，幸运的是mermaid给我们提供了绘制饼图的功能，使用方法极其简单：</p><pre class="line-numbers language-none"><code class="language-none">```mermaidpie    title LightZhan创作，允许规范转载（http://lightzhan.xyz）    "Joplin" : 42.96    "Qdown" : 50.05    " 黑科技" : 10.01    "其它" :  5```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，pie关键字指定我们要绘制饼图，然后tiltile指定我们的标题，后面是数据分布，注意，mermaid会将我们输入的数据进行计算，上面的数据加起来并不是100，所以我们看到在下面的渲染结果中数据对应不上。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909182237.png" alt="img"></p><p>Joplin插件非常丰富，你能找到各种各样的功能，这里推荐一些插件使用，见下面这篇文章， <a href="https://blog.17lai.fun/tools/joplin/2021-09-10-the-joplin-plugin-recommend/">Joplin插件推荐</a>。</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul><li><a href="https://lightzhan.xyz/index.php/category/software-installation-and-use/joplin/">lightzhan.xyz</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Joplin是一个以Markdown为主要语法的笔记程序，发展到今天增加了许多插件，这些插件也大大增强了它的功能，今天我们就讲讲Joplin的各个插件的作用和使用方法。&lt;/p&gt;
&lt;p&gt;首先我们打开Joplin，依次点击&lt;strong&gt;工具-&amp;gt;选项&lt;/strong&gt;设置</summary>
      
    
    
    
    <category term="Tools" scheme="https://blog.17lai.fun/categories/Tools/"/>
    
    <category term="Joplin" scheme="https://blog.17lai.fun/categories/Tools/Joplin/"/>
    
    
    <category term="note" scheme="https://blog.17lai.fun/tags/note/"/>
    
    <category term="Joplin" scheme="https://blog.17lai.fun/tags/Joplin/"/>
    
    <category term="MarkDown" scheme="https://blog.17lai.fun/tags/MarkDown/"/>
    
    <category term="Mermaid" scheme="https://blog.17lai.fun/tags/Mermaid/"/>
    
  </entry>
  
  <entry>
    <title>替代Evernote免费开源笔记Joplin-网盘同步笔记历史版本Markdown可视化</title>
    <link href="https://blog.17lai.fun/tools/joplin/2021-09-09-start-to-use-joplin/"/>
    <id>https://blog.17lai.fun/tools/joplin/2021-09-09-start-to-use-joplin/</id>
    <published>2021-09-09T13:25:00.000Z</published>
    <updated>2021-09-11T10:37:34.673Z</updated>
    
    <content type="html"><![CDATA[<p>Evernote笔记是我们常用的一个笔记服务，国内叫印象笔记，免费版本的Evernote笔记其实已经足够我们使用了，但是对于重度的笔记用户，Evernote某些功能可能需要付费升级才可以使用，而且你的笔记是存放在Evernote的服务器上。</p><p>有些同学可能觉得放在Evernote服务器上的笔记会不安全，况且有些隐私性很强的笔记确实不适合放在公共的服务器上。此时，你需要一个可以保护个人隐私同时还可以与Evernote笔记功能相媲美的免费笔记服务：Joplin，它是一款免费开源的笔记软件。</p><p>Joplin跨平台支持，包括PC桌面端，移动端，甚至提供了命令行版本，原生支持 markdown 格式，搜索速度快，可以通过其他第三方同步工具 (Dropbox/NextCloud/OneDrive/WebDAV/etc) 进行备份以及同步 ，支持浏览器Web clipper即网页剪贴。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_00.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135705.png"></a></p><p>Evernote笔记该有的功能Joplin都有了，如果你不想掏钱购买Evernote付费版本，Joplin将是最佳的替代品。更多的自建服务还有：</p><ol><li> <a href="https://wzfou.com/chevereto/">Chevereto免费相册程序安装与使用-免费自建图床和公共图片相册</a></li><li> <a href="https://wzfou.com/tt-rss/">自建RSS阅读器Tiny Tiny RSS安装和配置自动更新,全文RSS,更换主题,手机RSS登录</a></li><li> <a href="https://wzfou.com/bitwarden-rs/">放弃付费1Password改用免费开源的bitwarden_rs自建密码管理系统-安装,使用和备份</a></li></ol><p><strong>PS：更新记录</strong></p><blockquote><p>1、平时经常要校对文本，以及有大量的文件需要在电脑和移动硬盘同步，可以试试这些免费的同步对比工具：<a href="https://wzfou.com/files-sync-softs/">八大免费的文件对比同步工具-免费文件对比分析与复制同步备份软件</a>。2021.3.24</p><p>2、对于1Password这类的密码管理软件重度依赖，但是苦于囊中羞涩的话，不防自建密码管理平台：<a href="https://wzfou.com/bitwarden-mima/">Bitwarden自建密码存储系统图文教程-开源免费的bitwarden_rs安装与使用</a>。2020.10.10</p></blockquote><h2 id="一、Joplin安装和使用"><a href="#一、Joplin安装和使用" class="headerlink" title="一、Joplin安装和使用"></a>一、Joplin安装和使用</h2><p>网站：</p><ol><li> <a href="https://joplinapp.org/">https://joplinapp.org/</a></li></ol><p>直接到官网下载Joplin安装包，安装好了就可以启动Joplin了，以下是Joplin的软件界面，分成三栏，和我们平时熟悉的笔记软件是一样的。（点击放大）</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_01.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135716.png"></a></p><p>这是Joplin的编辑器，支持 MarkDown，图片、数学公式、复选框等 MarkDown 语法。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_02.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135813.png"></a></p><p>不习惯MarkDown，直接切换为可视编辑即可。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_03.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135820.png"></a></p><p>在Joplin的设置选项中还提供了非常多的MarkDown的插件，对于MarkDown深度用户来是一个福音。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_05.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135723.png"></a></p><h2 id="二、Joplin的特色功能"><a href="#二、Joplin的特色功能" class="headerlink" title="二、Joplin的特色功能"></a>二、Joplin的特色功能</h2><h3 id="2-1-笔记历史版本"><a href="#2-1-笔记历史版本" class="headerlink" title="2.1 笔记历史版本"></a>2.1 笔记历史版本</h3><p>Joplin提供了笔记历史版本，让你轻松地恢复任意时间的笔记版本。在“工具” &gt; “选项” &gt; “笔记历史”中启用，以及设置保留的笔记历史天数。要查看笔记的历史版本，点击编辑器上方的笔记属性图标，然后选择恢复：</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_12.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135828.png"></a></p><h3 id="2-2-E2EE安全加密"><a href="#2-2-E2EE安全加密" class="headerlink" title="2.2 E2EE安全加密"></a>2.2 E2EE安全加密</h3><p>在同步过程中，笔记本、笔记、标签等均以纯文本文件的方式同步，如果你还觉得不安全，你可以开启端到端加密（E2EE），把文件加密后同步到云端。由于 Joplin 的去中心化，密码必须手动在每个终端设置。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_19.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135736.png"></a></p><p><strong>注意：不要在多个设备上同时启用加密，否则可能会造成加密密钥问题。特别提醒：****加密之前，先将笔记导出JEX备份一份，以防万一。</strong></p><h3 id="2-3-Joplin手机APP"><a href="#2-3-Joplin手机APP" class="headerlink" title="2.3 Joplin手机APP"></a>2.3 Joplin手机APP</h3><p>Joplin可以直接在各大应用市场上下载，使用起来也很方便。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_15.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135835.png"></a></p><h3 id="2-4-外部编辑器"><a href="#2-4-外部编辑器" class="headerlink" title="2.4 外部编辑器"></a>2.4 外部编辑器</h3><p>Joplin自带的编辑已经非常强大的，如果你想要使用自己的编辑器来编辑笔记也是可以的，包括 文本编辑器（如 Notepad++）、 Markdown 编辑器（如 Typora）等。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_22.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135928.png"></a></p><p>通过 Ctrl+E，或 Joplin 编辑器上方的图标（如下图）从外部编辑器打开笔记，从外部编辑器打开后，Joplin 将持续监控该文件，当你从外部编辑机保存后，Joplin 将自动同步最新变动。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_21.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135841.png"></a></p><p>你可以在“工具” &gt; “选项” &gt; “通用选项”中指定编辑器的路径。</p><h2 id="三、Joplin同步与备份"><a href="#三、Joplin同步与备份" class="headerlink" title="三、Joplin同步与备份"></a>三、Joplin同步与备份</h2><p>Joplin与其它的笔记软件很大的不同就是没有存储功能，你需要将Joplin的笔记放在自己的主机或者网盘里，幸运的是Joplin支持多种方式的云同步：Nextcloud / Dropbox / OneDrive / File system / WebDAV。</p><h3 id="3-1-Joplin免费网盘同步"><a href="#3-1-Joplin免费网盘同步" class="headerlink" title="3.1 Joplin免费网盘同步"></a>3.1 Joplin免费网盘同步</h3><p>目前，Joplin支持Dropbox 、OneDrive 网盘同步，在同步选项中选择OneDrive，然后就会打开认证。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_06.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135739.png"></a></p><p>同意验证。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_07.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135848.png"></a></p><p>与 OneDrive 同步时，Joplin 会在 OneDrive 中创建一个子目录：<code>/Apps/Joplin</code>，Joplin 仅有此目录的读写权限。如下图：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135746.png"></p><h3 id="3-2-Joplin使用WebDAV同步"><a href="#3-2-Joplin使用WebDAV同步" class="headerlink" title="3.2 Joplin使用WebDAV同步"></a>3.2 Joplin使用WebDAV同步</h3><p>WebDAV 可以自建，或使用支持 WebDAV 的云盘，另外 NAS（如群晖）通常也支持 WebDAV。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_13.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135855.png"></a></p><p>**Nextcloud：**Nextcloud是一个开源的免费的自建个人云存储方案，要启用 Nextcloud 同步，你需要在 Nextcloud 中创建一个目录（比如：Joplin），在左下角的“设置”中获取 WebDAV 的 URL，在 Joplin 同步设置中，填入 WebDAV URL、用户名和密码。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_20.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135902.png"></a></p><p>有关于Nextcloud安装与使用教程，请参考：<a href="https://wzfou.com/nextcloud-lixian/">Oneinstack安装NextCloud以及使用Aria2离线下载和ocDownloader插件配置</a>。</p><p><strong>坚果云：</strong>首次同步时会因为 WebDAV 短时间内的大量请求被坚果云临时限制，坚果云提示为“Too many requests”，这个封锁会持续大约6小时。同步之前，在 Joplin 的“工具” &gt; “选项” &gt; “同步” &gt; “高级选项”中，将“最大并发连接数”改为1可以有效避免。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_14.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135753.png"></a></p><p>关于坚果云的使用方法，请参考：<a href="https://wzfou.com/upyun-jianguoyun/">巧用又拍云FTP和坚果云WebDAV-打造个人文件备份和数据云存储</a>。</p><h2 id="四、Joplin导入与导出"><a href="#四、Joplin导入与导出" class="headerlink" title="四、Joplin导入与导出"></a>四、Joplin导入与导出</h2><p>Joplin可以很方便地支持从Evernote（印象笔记）导入，方法如下：</p><p>从 Evernote（印象笔记）导入：</p><blockquote><p>打开 Evernote，右击要导出的笔记本，选择“导出笔记“，导出 .enex 格式文件。</p><p>在 Joplin 中，选择“文件” &gt; “导入” &gt; “ENEX – Evernote导出文件（Markdown）”即可导入。</p></blockquote><p>从 Markdown 文件导入：</p><blockquote><p>使用 Joplin 可以轻松导入 Markdown 文件或整个目录，选择“文件” &gt; “导入” &gt; “MD – Markdown（文件/目录）”导入即可。</p></blockquote><p>从其他应用程序导入：</p><blockquote><p>通常，很多应用程序都支持导入到 Evernote 中，所以从其他应用程序导入的思路是先导入 Evernote，再导出 .enex 文件，最后导入 Joplin 中。</p></blockquote><p>如下图：</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_09.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135909.png"></a></p><p>如果哪天你不想使用Joplin了，也可以很方便地导出。Joplin 支持多种导出格式，导出格式均为标准格式，可以在不依赖 Joplin 的情况下查看、编辑，部分格式支持无损/有损重新导入：</p><blockquote><p>JEX：Joplin 的无损导出格式，包含所有的元数据如标签、更新时间等。JEX是实际上是一个tar文件，可以直接解压出 MarkDown 文件。这种格式常用于备份，<strong>可以无损重新导入</strong>。</p><p>RAW：同 JEX 格式相似，只是数据会保存为目录，并且每个笔记都会导出为一个单独的文件。<strong>可以无损重新导入</strong>。</p><p>JSON：导出为 JSON 格式的文件。不支持重新导入。</p><p>MD：按照笔记本的分级结构导出为目录，每条笔记在对应的目录中导出为 Markdown 格式的文件，目录名和文件名与原笔记本对应，此种格式易于读取，但是导出的文件将丢失元数据。可以有损导入（丢失元数据）。</p><p>HTML：导出为网页文件，将 Markdown 格式转为 html 标签，带有样式。不支持导入。</p><p>PDF：将单个笔记导出为 PDF 格式的文件。不支持导入。</p></blockquote><p>如下图：</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_10.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135801.png"></a></p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>免费开源的笔记Joplin无论在功能上还是使用体验上基本上与Evernote印象笔记无异了，在隐私保护方面做得非常好，特别适合那些想要保存个人信息笔记的用户。</p><p>使用免费开源的笔记Joplin最大的问题就是找好同步的网盘或者云存储，另外强烈建议大家在对Joplin的设置进行调整时先备份一个，以免同步后删除了所有的笔记。</p><p>编辑整理 From：<a href="https://wzfou.com/joplin/">挖站否</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Evernote笔记是我们常用的一个笔记服务，国内叫印象笔记，免费版本的Evernote笔记其实已经足够我们使用了，但是对于重度的笔记用户，Evernote某些功能可能需要付费升级才可以使用，而且你的笔记是存放在Evernote的服务器上。&lt;/p&gt;
&lt;p&gt;有些同学可能觉得放</summary>
      
    
    
    
    <category term="Tools" scheme="https://blog.17lai.fun/categories/Tools/"/>
    
    <category term="Joplin" scheme="https://blog.17lai.fun/categories/Tools/Joplin/"/>
    
    
    <category term="Linux" scheme="https://blog.17lai.fun/tags/Linux/"/>
    
    <category term="note" scheme="https://blog.17lai.fun/tags/note/"/>
    
    <category term="Docker" scheme="https://blog.17lai.fun/tags/Docker/"/>
    
    <category term="Nas" scheme="https://blog.17lai.fun/tags/Nas/"/>
    
    <category term="Webdav" scheme="https://blog.17lai.fun/tags/Webdav/"/>
    
    <category term="Joplinr" scheme="https://blog.17lai.fun/tags/Joplinr/"/>
    
  </entry>
  
  <entry>
    <title>Joplin 入门指南&amp;实践方案</title>
    <link href="https://blog.17lai.fun/tools/note/2021-09-09-play-with-joplin/"/>
    <id>https://blog.17lai.fun/tools/note/2021-09-09-play-with-joplin/</id>
    <published>2021-09-09T03:25:00.000Z</published>
    <updated>2021-09-11T10:38:05.113Z</updated>
    
    <content type="html"><![CDATA[<p>Evernote笔记是我们常用的一个笔记服务，国内叫印象笔记，免费版本的Evernote笔记其实已经足够我们使用了，但是对于重度的笔记用户，Evernote某些功能可能需要付费升级才可以使用，而且你的笔记是存放在Evernote的服务器上。</p><p>有些同学可能觉得放在Evernote服务器上的笔记会不安全，况且有些隐私性很强的笔记确实不适合放在公共的服务器上。此时，你需要一个可以保护个人隐私同时还可以与Evernote笔记功能相媲美的免费笔记服务：Joplin，它是一款免费开源的笔记软件。</p><p>Joplin跨平台支持，包括PC桌面端，移动端，甚至提供了命令行版本，原生支持 markdown 格式，搜索速度快，可以通过其他第三方同步工具 (Dropbox/NextCloud/OneDrive/WebDAV/etc) 进行备份以及同步 ，支持浏览器Web clipper即网页剪贴。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_00.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135705.png"></a></p><p>Evernote笔记该有的功能Joplin都有了，如果你不想掏钱购买Evernote付费版本，Joplin将是最佳的替代品。更多的自建服务还有：</p><ol><li> <a href="https://wzfou.com/chevereto/">Chevereto免费相册程序安装与使用-免费自建图床和公共图片相册</a></li><li> <a href="https://wzfou.com/tt-rss/">自建RSS阅读器Tiny Tiny RSS安装和配置自动更新,全文RSS,更换主题,手机RSS登录</a></li><li> <a href="https://wzfou.com/bitwarden-rs/">放弃付费1Password改用免费开源的bitwarden_rs自建密码管理系统-安装,使用和备份</a></li></ol><p><strong>PS：更新记录</strong></p><blockquote><p>1、平时经常要校对文本，以及有大量的文件需要在电脑和移动硬盘同步，可以试试这些免费的同步对比工具：<a href="https://wzfou.com/files-sync-softs/">八大免费的文件对比同步工具-免费文件对比分析与复制同步备份软件</a>。2021.3.24</p><p>2、对于1Password这类的密码管理软件重度依赖，但是苦于囊中羞涩的话，不防自建密码管理平台：<a href="https://wzfou.com/bitwarden-mima/">Bitwarden自建密码存储系统图文教程-开源免费的bitwarden_rs安装与使用</a>。2020.10.10</p></blockquote><h2 id="一、Joplin安装和使用"><a href="#一、Joplin安装和使用" class="headerlink" title="一、Joplin安装和使用"></a>一、Joplin安装和使用</h2><p>网站：</p><ol><li> <a href="https://joplinapp.org/">https://joplinapp.org/</a></li></ol><p>直接到官网下载Joplin安装包，安装好了就可以启动Joplin了，以下是Joplin的软件界面，分成三栏，和我们平时熟悉的笔记软件是一样的。（点击放大）</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_01.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135716.png"></a></p><p>这是Joplin的编辑器，支持 MarkDown，图片、数学公式、复选框等 MarkDown 语法。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_02.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135813.png"></a></p><p>不习惯MarkDown，直接切换为可视编辑即可。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_03.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135820.png"></a></p><p>在Joplin的设置选项中还提供了非常多的MarkDown的插件，对于MarkDown深度用户来是一个福音。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_05.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135723.png"></a></p><h2 id="二、Joplin的特色功能"><a href="#二、Joplin的特色功能" class="headerlink" title="二、Joplin的特色功能"></a>二、Joplin的特色功能</h2><h3 id="2-1-笔记历史版本"><a href="#2-1-笔记历史版本" class="headerlink" title="2.1 笔记历史版本"></a>2.1 笔记历史版本</h3><p>Joplin提供了笔记历史版本，让你轻松地恢复任意时间的笔记版本。在“工具” &gt; “选项” &gt; “笔记历史”中启用，以及设置保留的笔记历史天数。要查看笔记的历史版本，点击编辑器上方的笔记属性图标，然后选择恢复：</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_12.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135828.png"></a></p><h3 id="2-2-E2EE安全加密"><a href="#2-2-E2EE安全加密" class="headerlink" title="2.2 E2EE安全加密"></a>2.2 E2EE安全加密</h3><p>在同步过程中，笔记本、笔记、标签等均以纯文本文件的方式同步，如果你还觉得不安全，你可以开启端到端加密（E2EE），把文件加密后同步到云端。由于 Joplin 的去中心化，密码必须手动在每个终端设置。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_19.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135736.png"></a></p><p><strong>注意：不要在多个设备上同时启用加密，否则可能会造成加密密钥问题。特别提醒：****加密之前，先将笔记导出JEX备份一份，以防万一。</strong></p><h3 id="2-3-Joplin手机APP"><a href="#2-3-Joplin手机APP" class="headerlink" title="2.3 Joplin手机APP"></a>2.3 Joplin手机APP</h3><p>Joplin可以直接在各大应用市场上下载，使用起来也很方便。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_15.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135835.png"></a></p><h3 id="2-4-外部编辑器"><a href="#2-4-外部编辑器" class="headerlink" title="2.4 外部编辑器"></a>2.4 外部编辑器</h3><p>Joplin自带的编辑已经非常强大的，如果你想要使用自己的编辑器来编辑笔记也是可以的，包括 文本编辑器（如 Notepad++）、 Markdown 编辑器（如 Typora）等。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_22.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135928.png"></a></p><p>通过 Ctrl+E，或 Joplin 编辑器上方的图标（如下图）从外部编辑器打开笔记，从外部编辑器打开后，Joplin 将持续监控该文件，当你从外部编辑机保存后，Joplin 将自动同步最新变动。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_21.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135841.png"></a></p><p>你可以在“工具” &gt; “选项” &gt; “通用选项”中指定编辑器的路径。</p><h2 id="三、Joplin同步与备份"><a href="#三、Joplin同步与备份" class="headerlink" title="三、Joplin同步与备份"></a>三、Joplin同步与备份</h2><p>Joplin与其它的笔记软件很大的不同就是没有存储功能，你需要将Joplin的笔记放在自己的主机或者网盘里，幸运的是Joplin支持多种方式的云同步：Nextcloud / Dropbox / OneDrive / File system / WebDAV。</p><h3 id="3-1-Joplin免费网盘同步"><a href="#3-1-Joplin免费网盘同步" class="headerlink" title="3.1 Joplin免费网盘同步"></a>3.1 Joplin免费网盘同步</h3><p>目前，Joplin支持Dropbox 、OneDrive 网盘同步，在同步选项中选择OneDrive，然后就会打开认证。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_06.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135739.png"></a></p><p>同意验证。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_07.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135848.png"></a></p><p>与 OneDrive 同步时，Joplin 会在 OneDrive 中创建一个子目录：<code>/Apps/Joplin</code>，Joplin 仅有此目录的读写权限。如下图：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135746.png"></p><h3 id="3-2-Joplin使用WebDAV同步"><a href="#3-2-Joplin使用WebDAV同步" class="headerlink" title="3.2 Joplin使用WebDAV同步"></a>3.2 Joplin使用WebDAV同步</h3><p>WebDAV 可以自建，或使用支持 WebDAV 的云盘，另外 NAS（如群晖）通常也支持 WebDAV。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_13.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135855.png"></a></p><p>**Nextcloud：**Nextcloud是一个开源的免费的自建个人云存储方案，要启用 Nextcloud 同步，你需要在 Nextcloud 中创建一个目录（比如：Joplin），在左下角的“设置”中获取 WebDAV 的 URL，在 Joplin 同步设置中，填入 WebDAV URL、用户名和密码。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_20.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135902.png"></a></p><p>有关于Nextcloud安装与使用教程，请参考：<a href="https://wzfou.com/nextcloud-lixian/">Oneinstack安装NextCloud以及使用Aria2离线下载和ocDownloader插件配置</a>。</p><p><strong>坚果云：</strong>首次同步时会因为 WebDAV 短时间内的大量请求被坚果云临时限制，坚果云提示为“Too many requests”，这个封锁会持续大约6小时。同步之前，在 Joplin 的“工具” &gt; “选项” &gt; “同步” &gt; “高级选项”中，将“最大并发连接数”改为1可以有效避免。</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_14.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135753.png"></a></p><p>关于坚果云的使用方法，请参考：<a href="https://wzfou.com/upyun-jianguoyun/">巧用又拍云FTP和坚果云WebDAV-打造个人文件备份和数据云存储</a>。</p><h2 id="四、Joplin导入与导出"><a href="#四、Joplin导入与导出" class="headerlink" title="四、Joplin导入与导出"></a>四、Joplin导入与导出</h2><p>Joplin可以很方便地支持从Evernote（印象笔记）导入，方法如下：</p><p>从 Evernote（印象笔记）导入：</p><blockquote><p>打开 Evernote，右击要导出的笔记本，选择“导出笔记“，导出 .enex 格式文件。</p><p>在 Joplin 中，选择“文件” &gt; “导入” &gt; “ENEX – Evernote导出文件（Markdown）”即可导入。</p></blockquote><p>从 Markdown 文件导入：</p><blockquote><p>使用 Joplin 可以轻松导入 Markdown 文件或整个目录，选择“文件” &gt; “导入” &gt; “MD – Markdown（文件/目录）”导入即可。</p></blockquote><p>从其他应用程序导入：</p><blockquote><p>通常，很多应用程序都支持导入到 Evernote 中，所以从其他应用程序导入的思路是先导入 Evernote，再导出 .enex 文件，最后导入 Joplin 中。</p></blockquote><p>如下图：</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_09.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135909.png"></a></p><p>如果哪天你不想使用Joplin了，也可以很方便地导出。Joplin 支持多种导出格式，导出格式均为标准格式，可以在不依赖 Joplin 的情况下查看、编辑，部分格式支持无损/有损重新导入：</p><blockquote><p>JEX：Joplin 的无损导出格式，包含所有的元数据如标签、更新时间等。JEX是实际上是一个tar文件，可以直接解压出 MarkDown 文件。这种格式常用于备份，<strong>可以无损重新导入</strong>。</p><p>RAW：同 JEX 格式相似，只是数据会保存为目录，并且每个笔记都会导出为一个单独的文件。<strong>可以无损重新导入</strong>。</p><p>JSON：导出为 JSON 格式的文件。不支持重新导入。</p><p>MD：按照笔记本的分级结构导出为目录，每条笔记在对应的目录中导出为 Markdown 格式的文件，目录名和文件名与原笔记本对应，此种格式易于读取，但是导出的文件将丢失元数据。可以有损导入（丢失元数据）。</p><p>HTML：导出为网页文件，将 Markdown 格式转为 html 标签，带有样式。不支持导入。</p><p>PDF：将单个笔记导出为 PDF 格式的文件。不支持导入。</p></blockquote><p>如下图：</p><p><a href="https://wzfou.cdn.bcebos.com/wp-content/uploads/2020/09/joplin_10.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909135801.png"></a></p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>免费开源的笔记Joplin无论在功能上还是使用体验上基本上与Evernote印象笔记无异了，在隐私保护方面做得非常好，特别适合那些想要保存个人信息笔记的用户。</p><p>使用免费开源的笔记Joplin最大的问题就是找好同步的网盘或者云存储，另外强烈建议大家在对Joplin的设置进行调整时先备份一个，以免同步后删除了所有的笔记。</p><p>编辑整理 From：<a href="https://wzfou.com/joplin/">挖站否</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Evernote笔记是我们常用的一个笔记服务，国内叫印象笔记，免费版本的Evernote笔记其实已经足够我们使用了，但是对于重度的笔记用户，Evernote某些功能可能需要付费升级才可以使用，而且你的笔记是存放在Evernote的服务器上。&lt;/p&gt;
&lt;p&gt;有些同学可能觉得放</summary>
      
    
    
    
    <category term="Tools" scheme="https://blog.17lai.fun/categories/Tools/"/>
    
    <category term="Note" scheme="https://blog.17lai.fun/categories/Tools/Note/"/>
    
    
    <category term="Linux" scheme="https://blog.17lai.fun/tags/Linux/"/>
    
    <category term="note" scheme="https://blog.17lai.fun/tags/note/"/>
    
    <category term="Joplin" scheme="https://blog.17lai.fun/tags/Joplin/"/>
    
    <category term="Docker" scheme="https://blog.17lai.fun/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>为知笔记私有化Docker部署</title>
    <link href="https://blog.17lai.fun/tools/note/2021-09-09-deploy-wiznote-docker-on-nas/"/>
    <id>https://blog.17lai.fun/tools/note/2021-09-09-deploy-wiznote-docker-on-nas/</id>
    <published>2021-09-09T01:25:00.000Z</published>
    <updated>2021-09-11T10:41:00.240Z</updated>
    
    <content type="html"><![CDATA[<p>登陆NAS，打开套件中心，搜索docker，并安装。</p><p>搜索wiznote，找到wiznote/wizserver，双击下载</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114640.png"></p><p>在NAS中创建共享目录，用于存放笔记数据</p><ol><li>启动File Station</li><li>在docker目录下创建文件夹： wiz</li><li>在wiz文件夹下创建文件夹：data <img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114704.png"></li><li>双击创建容器，启用资源限制，设置为内存限制4096MB，官方介绍说需要4G内存 <img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114710.jpeg"></li><li>高级设置，启动自动重新启动</li><li>卷设置，使用刚才我们创建的data目录进行配置，装载路径<code>/wiz/storage</code>，<code>docker/wiz/config</code>装载路径<code>/wiz/app/wizserver/config</code> <img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114724.png"></li><li>网络设置不动，端口设置添加映射：8888映射80端口（8888可以随便设置，跟访问地址有关）</li></ol><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114731.png"></p><ol start="8"><li>设置环境变量 <img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114732.png"> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">SEARCH</span><span class="token operator">=</span>true <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>直接应用，启动docker，然后就静静的等待吧，可以看看镜像的日志，看到这些基本上就差不多启动好了（最新的镜像在NAS上首次启动非常慢，本人等了一个多小时才完全启动完毕，在本地安装速度非常快）<img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114738.jpeg"></li><li>通过 <code>http://NAS的IP:8888</code>，进行访问，就可以看到已经启动完成 <img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114744.jpeg" alt="为知笔记启动界面"></li></ol><blockquote><p>默认管理员账号：<a href="mailto:admin@wiz.cn">admin@wiz.cn</a>，密码：123456</p><p>管理后台登陆地址：<a href="http://IP地址:端口/wapp/pages/admin">http://IP地址:端口/wapp/pages/admin</a></p></blockquote><h2 id="NAS开启SSH"><a href="#NAS开启SSH" class="headerlink" title="NAS开启SSH"></a>NAS开启SSH</h2><p>首先在NAS上启动SSH</p><p>登陆NAS，打开<code>控制面板-终端机和SNMP</code>，在<code>启动SSH功能</code>前打上勾</p><p>打开命令行，输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> NAS管理员账号@NAS的IP地址 ssh端口号默认是22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到提示符，输入账号的密码，输入时不可见，输入完成按回车，看到命令行提示符变了，登陆成功。</p><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><p>在命令行中输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> docker <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能提示输入密码，就输入NAS管理员的密码即可，显示列表，查看到如下列表，找到其中运行了为知笔记的一行</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114805.png"></p><p>复制为知笔记的<code>CONTAINER ID</code>，然后再输入如下命令并回车：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> docker <span class="token builtin class-name">exec</span> -it 粘贴刚复制好的ID号 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>至此进入到容器中</p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>输入如下命令打开配置文件进行编辑：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /wiz/app/wizserver/config/default.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>vi命令的具体使用方法请自行百度，保存好后退出，重启容器生效。</p><p>进入docker，修改文件/wiz/wizserver/app/config/default.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"as"</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token property">"admin"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"admin@wiz.cn"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token property">"share"</span><span class="token operator">:</span> <span class="token punctuation">{</span>       <span class="token property">"admin"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"admin@wiz.cn"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token property">"enableHttps"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>       <span class="token property">"enableSubDomain"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>       <span class="token property">"appShareUrl"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1:5001"</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>127.0.0.1:5001</code>修改为自己的服务器访问地址，可以给docker做个端口映射（因为群晖NAS占用了5001端口），譬如映射8889端口到容器的5001端口，则设置为<code>xxx.xxx.xxx.xxx:8889</code>，分享后的链接即为该链接。</p><p>在NAS上可以用反向代理来解决二级域名的问题。</p><p>分享功能需要用户绑定手机，并完成认证，在docker中登陆数据库，并修改数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入密码，密码在docker中<code>/wiz/wizserver/app/config/default.json</code>中查看</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"mysql"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"as"</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token property">"host"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>   <span class="token property">"user"</span><span class="token operator">:</span> <span class="token string">"root"</span><span class="token punctuation">,</span>   <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"******************"</span><span class="token punctuation">,</span>   <span class="token property">"database"</span><span class="token operator">:</span> <span class="token string">"wizasent"</span><span class="token punctuation">,</span>   <span class="token property">"connectionLimit"</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>   <span class="token property">"connectTimeout"</span><span class="token operator">:</span> <span class="token number">60000</span><span class="token punctuation">,</span>   <span class="token property">"aquireTimeout"</span><span class="token operator">:</span> <span class="token number">60000</span><span class="token punctuation">,</span>   <span class="token property">"waitForConnections"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>password</code>就是密码，进入mysql控制台后，执行以下命令：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> wizasent<span class="token punctuation">;</span><span class="token keyword">update</span> wiz_user <span class="token keyword">set</span> MOBILE<span class="token operator">=</span><span class="token string">'你的手机号'</span><span class="token punctuation">,</span> MOBILE_VERIFY<span class="token operator">=</span><span class="token string">'1'</span> <span class="token keyword">where</span> ID<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>web端登陆为知笔记，并修改默认账号后，修改后的账号无法登陆管理后台，需要做以下配置，修改文件<code>/wiz/wizserver/app/config/default.json</code>，找到以下代码：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"as"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"admin"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"admin@wiz.cn"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"share"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"admin"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"admin@wiz.cn"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"enableHttps"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"enableSubDomain"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"appShareUrl"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1:5001"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>admin@wiz.cn</code>修改为修改后的账号。</p><p>登陆NAS，打开<code>控制面板-应用程序门户-反向代理</code></p><p>点击新增，然后输入如下：</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114813.png"></p><p>实际测试来源协议选择https时只有网页端可以登陆，客户端无法登陆，暂时还是选择http为好，也可以网页端通过https登陆，客户端通过http登陆，配置两个不同的端口（记得要在路由上配置端口映射）。</p><p>修改<code>default.json</code></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"debug"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"enableHttps"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"storage"</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token property">"__comments"</span><span class="token operator">:</span> <span class="token string">"oss|local|s3|cos"</span><span class="token punctuation">,</span>     <span class="token property">"use"</span><span class="token operator">:</span> <span class="token string">"local"</span><span class="token punctuation">,</span>     <span class="token property">"oss"</span><span class="token operator">:</span> <span class="token punctuation">{</span>       <span class="token property">"bucket"</span><span class="token operator">:</span> <span class="token string">"data_root"</span><span class="token punctuation">,</span>       <span class="token property">"region"</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>       <span class="token property">"accessKeyId"</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>       <span class="token property">"accessKeySecret"</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>       <span class="token property">"internal"</span><span class="token operator">:</span> <span class="token boolean">false</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>enableHttps</code>配置成<code>true</code></p><p>重启服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /wiz/app/wizserverpm2 restart all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>删除<code>/wiz/storage/index/.search</code>文件和<code>/wiz/storage/index/nodes</code>目录</p><p>重启容器</p><p>链接数据库，执行下列SQL</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> wizksent<span class="token punctuation">.</span>wiz_kb_stat <span class="token keyword">set</span> index_new_status<span class="token operator">=</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入容器，执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /wiz/app/wizserverpm2 start app.js --name<span class="token operator">=</span><span class="token string">"index2"</span>  -f -- -c <span class="token number">1</span> -i <span class="token number">1</span> -t <span class="token number">2</span> -s indexpm2 start app.js --name<span class="token operator">=</span><span class="token string">"index2"</span>  -f --  -s copy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pm2 logs index2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载官方插件，并安装到Chrome中</p><p><a href="http://www.wiz.cn/downloads-webclipperchrome.html">http://www.wiz.cn/downloads-webclipperchrome.html</a></p><p>在浏览器中输入<code>chrome://extensions/</code>打开插件列表，开启开发者模式</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114820.png"></p><p>看ID号，在浏览器中输入<code>chrome://inspect/#extensions</code>在打开的列表中找到<code>WizClipper</code>，点击<code>inspect</code>，开启调试窗口。</p><p>选择<code>Sources</code>标签，并打开文件<code>Scripts\wiz\WizConstant.js</code></p><p>在代码中查看<code>note.wiz.cn</code>和<code>api.wiz.cn</code>的网址全部替换成自己私有云的地址，实测，登陆没问题，保存失败。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0920210909114826.jpeg"></p><h2 id="管理功能"><a href="#管理功能" class="headerlink" title="管理功能"></a>管理功能</h2><ol><li>增加重建索引功能，以备不时之需</li><li>增加备份与恢复功能</li><li>增加markdown语法扩展： flow（流程图）、sequence（时序图）、mermaid（流程图、时序图、甘特图）、LaTeX（公式）</li><li>增加手动配置分享链接</li><li>支持社交绑定的配置</li><li>支持对象存储或webdav存储</li></ol><h2 id="Web-amp-Mac客户端"><a href="#Web-amp-Mac客户端" class="headerlink" title="Web&amp;Mac客户端"></a>Web&amp;Mac客户端</h2><ol><li>增加自定义模板</li><li>增加偏好设置，自定义快捷键（主要是编辑和预览切换的快捷键非常不适应）</li><li>增加同步预览模式，可以参考下Typora，Bear都不错</li><li>增加https访问方式</li><li>支持导出jpg、png、docx格式</li></ol><h2 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h2><ol><li>增加支持私有云登陆</li></ol><p>【部署环境】<br>群晖DS1517+（DSM6.2.2）<br>容器分配内存4G，CPU*2核</p><p>【出现的问题】</p><ol><li>网页版上提示，自动保存失败，网络错误，请尽快保存（最后发现是时区不通道导致的，第8点解决了此问题）</li><li>所有社交平台账号无法绑定</li><li>mywiz邮箱不可修改</li><li>绑定手机无法收到验证码，即无法绑定手机（通过修改数据库搞定）</li><li>存储设置功能多余（因为已经本地化部署了），改成数据备份/恢复就好了</li><li>支付信息是支付到为知去的，这个功能容易产生误解（如果多人使用的话）</li><li> docker容器的时区与宿主机时区不同，添加环境变量解决，TZ=Asia/Shanghai</li></ol><p>编辑整理 From： <a href="https://mp.weixin.qq.com/s/JQBUqdq1YNsGqolQ0jjfNg">大大木头 [为知社区]</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;登陆NAS，打开套件中心，搜索docker，并安装。&lt;/p&gt;
&lt;p&gt;搜索wiznote，找到wiznote/wizserver，双击下载&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.weserv.nl/?url=https://raw.githubuse</summary>
      
    
    
    
    <category term="Tools" scheme="https://blog.17lai.fun/categories/Tools/"/>
    
    <category term="Note" scheme="https://blog.17lai.fun/categories/Tools/Note/"/>
    
    
    <category term="note" scheme="https://blog.17lai.fun/tags/note/"/>
    
    <category term="wiz" scheme="https://blog.17lai.fun/tags/wiz/"/>
    
    <category term="Docker" scheme="https://blog.17lai.fun/tags/Docker/"/>
    
    <category term="linux" scheme="https://blog.17lai.fun/tags/linux/"/>
    
    <category term="Nas" scheme="https://blog.17lai.fun/tags/Nas/"/>
    
    <category term="群晖" scheme="https://blog.17lai.fun/tags/%E7%BE%A4%E6%99%96/"/>
    
  </entry>
  
  <entry>
    <title>Mariadb/Mysql命令行常用命令</title>
    <link href="https://blog.17lai.fun/mysql/ji-qiao/2021-09-08-mariadb-and-mysql-command/"/>
    <id>https://blog.17lai.fun/mysql/ji-qiao/2021-09-08-mariadb-and-mysql-command/</id>
    <published>2021-09-08T01:25:00.000Z</published>
    <updated>2021-09-11T10:41:47.732Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、初始化等"><a href="#一、初始化等" class="headerlink" title="一、初始化等"></a>一、初始化等</h2><h3 id="1、登陆数据库方法"><a href="#1、登陆数据库方法" class="headerlink" title="1、登陆数据库方法"></a><strong>1、登陆数据库方法</strong></h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql <span class="token operator">-</span>u用户名 <span class="token operator">-</span>p用户密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、修改root及用户密码"><a href="#2、修改root及用户密码" class="headerlink" title="2、修改root及用户密码"></a>2、修改root及用户密码</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> password<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'11111111'</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span> <span class="token operator">and</span> host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">MariaDB <span class="token punctuation">[</span>mysql<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> password<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'11111111'</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span> <span class="token operator">and</span> host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span> MariaDB <span class="token punctuation">[</span>mysql<span class="token punctuation">]</span><span class="token operator">&gt;</span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span>mysql<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、创建用户"><a href="#3、创建用户" class="headerlink" title="3、创建用户"></a><strong>3、创建用户</strong></h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">,</span>password<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4、删除用户"><a href="#4、删除用户" class="headerlink" title="4、删除用户"></a>4、删除用户</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> <span class="token keyword">User</span><span class="token operator">=</span><span class="token string">"test"</span> <span class="token operator">and</span> Host<span class="token operator">=</span><span class="token string">"localhost"</span><span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>　　<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5、删除用户的数据库"><a href="#5、删除用户的数据库" class="headerlink" title="5、删除用户的数据库"></a>5、删除用户的数据库</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">database</span> test1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6、交互模式初始化"><a href="#6、交互模式初始化" class="headerlink" title="6、交互模式初始化"></a>6、交互模式初始化</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql_secure_installation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、-常用操作"><a href="#二、-常用操作" class="headerlink" title="二、 常用操作"></a>二、 常用操作</h2><h3 id="1、显示数据库列表"><a href="#1、显示数据库列表" class="headerlink" title="1、显示数据库列表"></a><strong>1、显示数据库列表</strong></h3><p>　　　　<code>show databases;</code>:查看所有的数据库</p><h3 id="2、创建数据库"><a href="#2、创建数据库" class="headerlink" title="2、创建数据库"></a>2、创建数据库</h3><p>　　　　<code>create database zxg;</code>：创建名尾zxg的数据库</p><h3 id="3、进入数据库"><a href="#3、进入数据库" class="headerlink" title="3、进入数据库"></a>3、进入数据库</h3><p>　　　　<code>use zxg;</code>:进入zxg的数据库</p><h3 id="4、显示库中的数据表"><a href="#4、显示库中的数据表" class="headerlink" title="4、显示库中的数据表"></a>4、显示库中的数据表</h3><p>　　　　<code>show tables;</code>：查看数据库里有多少张表</p><h3 id="5、创建数据表"><a href="#5、创建数据表" class="headerlink" title="5、创建数据表"></a>5、创建数据表</h3><p>　　　　<code>create table t1 (id varchar(20),name varchar(20));</code>:创建名为t1表，并创建两两个字段，id、name，varchar表示设置数据长度，用字符来定义长度单位，其</p><h3 id="6、插入数据"><a href="#6、插入数据" class="headerlink" title="6、插入数据"></a>6、插入数据</h3><p>　　　　<code>insert into t1 values（"1"，"zxg"）;</code>:向表中插入数据</p><h3 id="7、查看数据表"><a href="#7、查看数据表" class="headerlink" title="7、查看数据表"></a>7、查看数据表</h3><p>　　　　<code>select * from t1;</code> ：查看t1表数据内容</p><h3 id="8、多条件查询"><a href="#8、多条件查询" class="headerlink" title="8、多条件查询"></a>8、多条件查询</h3><p>　　　　<code>select * from t1 where id=1 and age = 'zxg ' ;</code>: id、age 多个条件查询</p><h3 id="9、查看字段内容"><a href="#9、查看字段内容" class="headerlink" title="9、查看字段内容"></a>9、查看字段内容</h3><p>　　　　<code>desc t1;</code>:查看t1 表字段内容</p><h3 id="10、修改字段长度"><a href="#10、修改字段长度" class="headerlink" title="10、修改字段长度"></a>10、修改字段长度</h3><p>　　　　<code>alter table t1 modify column name varchar(20);</code>:修改name字段的长度</p><h3 id="11、修改该字段内容"><a href="#11、修改该字段内容" class="headerlink" title="11、修改该字段内容"></a>11、修改该字段内容</h3><p>　　　　<code>update t1 set name='zxg.net' where id=1;</code>：修改name字段的内容</p><h3 id="12、权限刷新"><a href="#12、权限刷新" class="headerlink" title="12、权限刷新"></a><strong>12、权限刷新</strong></h3><p>　　　　<code>flush privileges;</code> :刷新权限</p><h3 id="13、清空表单"><a href="#13、清空表单" class="headerlink" title="13、清空表单"></a>13、清空表单</h3><p>　　　　delete from t1;` :清空表内容</p><h3 id="14、删除数据表"><a href="#14、删除数据表" class="headerlink" title="14、删除数据表"></a>14、删除数据表</h3><p>　　　　`drop table t1:删除表</p><h3 id="15、删除数据库"><a href="#15、删除数据库" class="headerlink" title="15、删除数据库"></a>15、删除数据库</h3><p>　　　　<code>drop database zxg;</code>：删除zxg数据库</p><h3 id="16、查看数据库字符集"><a href="#16、查看数据库字符集" class="headerlink" title="16、查看数据库字符集"></a>16、查看数据库字符集</h3><p>　　　　<code>show variables like '%char%';</code>:查看数据库字符集</p><h3 id="17、查看存储引擎"><a href="#17、查看存储引擎" class="headerlink" title="17、查看存储引擎"></a>17、查看存储引擎</h3><p>　　　　<code>show engines;</code>:查看MySQL存储引擎。</p><h3 id="18、查看默认存储引擎"><a href="#18、查看默认存储引擎" class="headerlink" title="18、查看默认存储引擎"></a>18、查看默认存储引擎</h3><p>　　　　<code>show variables like '%storage_engine%';</code>:查看MySQL默认的存储引擎</p><h3 id="19、修改存储引擎"><a href="#19、修改存储引擎" class="headerlink" title="19、修改存储引擎"></a>19、修改存储引擎</h3><p>　　　　<code>alter table t1 engine=innodb;</code>:修改MySQL t1表存储引擎</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>root<span class="token variable">@web2</span> <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment"># mysql</span>Welcome <span class="token keyword">to</span> the MariaDB monitor<span class="token punctuation">.</span>  Commands <span class="token keyword">end</span> <span class="token keyword">with</span> <span class="token punctuation">;</span> <span class="token operator">or</span> \g<span class="token punctuation">.</span>Your MariaDB connection id <span class="token operator">is</span> <span class="token number">2</span>Server version: <span class="token number">5.5</span><span class="token number">.60</span><span class="token operator">-</span>MariaDB MariaDB Server Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2018</span><span class="token punctuation">,</span> Oracle<span class="token punctuation">,</span> MariaDB Corporation Ab <span class="token operator">and</span> others<span class="token punctuation">.</span> <span class="token keyword">Type</span> <span class="token string">'help;'</span> <span class="token operator">or</span> <span class="token string">'\h'</span> <span class="token keyword">for</span> help<span class="token punctuation">.</span> <span class="token keyword">Type</span> <span class="token string">'\c'</span> <span class="token keyword">to</span> clear the <span class="token keyword">current</span> input statement<span class="token punctuation">.</span> MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------------+</span><span class="token operator">|</span> <span class="token keyword">Database</span>           <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+</span><span class="token operator">|</span> information_schema <span class="token operator">|</span><span class="token operator">|</span> mysql              <span class="token operator">|</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span><span class="token operator">|</span> test               <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+</span><span class="token number">4</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>  <span class="token keyword">create</span> <span class="token keyword">database</span> zxg<span class="token punctuation">;</span>                 Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">use</span> zxg<span class="token punctuation">;</span><span class="token keyword">Database</span> changedMariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>Empty <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> t1<span class="token punctuation">(</span>id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+</span><span class="token operator">|</span> Tables_in_zxg <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+</span><span class="token operator">|</span> t1            <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">MariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> t1 <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"zxg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> t1<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> zxg <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> t1 <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> zxg <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> t1 <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> name<span class="token operator">=</span><span class="token string">'zxg'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> zxg <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">desc</span> t1<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span> <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES <span class="token operator">|</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> name <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES <span class="token operator">|</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-------------+------+-----+---------+-------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">alter</span> <span class="token keyword">table</span> t1 <span class="token keyword">modify</span> <span class="token keyword">column</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>Records: <span class="token number">0</span> Duplicates: <span class="token number">0</span> <span class="token keyword">Warnings</span>: <span class="token number">0</span> MariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">update</span> t1 <span class="token keyword">set</span> name<span class="token operator">=</span><span class="token string">'zxg.net'</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span> Changed: <span class="token number">1</span> <span class="token keyword">Warnings</span>: <span class="token number">0</span>MariaDB <span class="token punctuation">[</span>zxg<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、mysql-数据库字符集设置"><a href="#三、mysql-数据库字符集设置" class="headerlink" title="三、mysql 数据库字符集设置"></a>三、mysql 数据库字符集设置</h2><p>　mysql数据库存储数据时，默认编码为latinl，存储中文字符时，在调用时会显示为乱码，为了解决该乱码问题，需修改该mysql默认字符集为UTE-8　　</p><p>　　 装mariadb的是时候看已经默认为ute-8</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%char%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------------------+----------------------------+</span><span class="token operator">|</span> Variable_name            <span class="token operator">|</span> <span class="token keyword">Value</span>                      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------------+----------------------------+</span><span class="token operator">|</span> character_set_client     <span class="token operator">|</span> utf8                       <span class="token operator">|</span><span class="token operator">|</span> character_set_connection <span class="token operator">|</span> utf8                       <span class="token operator">|</span><span class="token operator">|</span> character_set_database   <span class="token operator">|</span> latin1                     <span class="token operator">|</span><span class="token operator">|</span> character_set_filesystem <span class="token operator">|</span> <span class="token keyword">binary</span>                     <span class="token operator">|</span><span class="token operator">|</span> character_set_results    <span class="token operator">|</span> utf8                       <span class="token operator">|</span><span class="token operator">|</span> character_set_server     <span class="token operator">|</span> latin1                     <span class="token operator">|</span><span class="token operator">|</span> character_set_system     <span class="token operator">|</span> utf8                       <span class="token operator">|</span><span class="token operator">|</span> character_sets_dir       <span class="token operator">|</span> <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">share</span><span class="token operator">/</span>mysql<span class="token operator">/</span>charsets<span class="token operator">/</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------------+----------------------------+</span><span class="token number">8</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　　　如不是，可以设置</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> character_set_client <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span class="token keyword">SET</span> character_set_results <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span class="token keyword">SET</span> character_set_connection <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="四、mysql-数据库密码管理"><a href="#四、mysql-数据库密码管理" class="headerlink" title="四、mysql 数据库密码管理"></a>四、mysql 数据库密码管理</h2><p>　　设置密码访问，密码破解、密码权限、修改密码；</p><h3 id="1、创建用户及授权"><a href="#1、创建用户及授权" class="headerlink" title="1、创建用户及授权"></a>1、创建用户及授权</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">on</span> zxg<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> test<span class="token variable">@localhost</span> identified <span class="token keyword">by</span> <span class="token string">'pas'</span><span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">update</span><span class="token punctuation">,</span><span class="token keyword">delete</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">to</span> test<span class="token variable">@"%"</span> identified <span class="token keyword">by</span> <span class="token string">'pas'</span><span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">on</span> zxg<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> test<span class="token variable">@`192.168.216.53`</span> identified <span class="token keyword">by</span> <span class="token string">'pas'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2、破解密码方法"><a href="#2、破解密码方法" class="headerlink" title="2、破解密码方法"></a>2、破解密码方法</h3><p>　　　　停止服务—》跳过权限方式启动—》单开一个窗口登陆—》登陆修改密码即可</p><p>　　　　1）systemctl stop mariadb</p><p>　　　　2）mysqld_safe –skip-grant-tables &amp;</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>root<span class="token variable">@web2</span> <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment"># mysqld_safe --skip-grant-tables &amp;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">47542</span><span class="token punctuation">[</span>root<span class="token variable">@web2</span> <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment"># 190520 15:45:22 mysqld_safe Logging to '/var/log/mariadb/mariadb.log'.</span><span class="token number">190520</span> <span class="token number">15</span>:<span class="token number">45</span>:<span class="token number">22</span> mysqld_safe <span class="token keyword">Starting</span> mysqld daemon <span class="token keyword">with</span> <span class="token keyword">databases</span> <span class="token keyword">from</span> <span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>root<span class="token variable">@web2</span> <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment"># mysql</span>Welcome <span class="token keyword">to</span> the MariaDB monitor<span class="token punctuation">.</span>  Commands <span class="token keyword">end</span> <span class="token keyword">with</span> <span class="token punctuation">;</span> <span class="token operator">or</span> \g<span class="token punctuation">.</span>Your MariaDB connection id <span class="token operator">is</span> <span class="token number">1</span>Server version: <span class="token number">5.5</span><span class="token number">.60</span><span class="token operator">-</span>MariaDB MariaDB Server Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2018</span><span class="token punctuation">,</span> Oracle<span class="token punctuation">,</span> MariaDB Corporation Ab <span class="token operator">and</span> others<span class="token punctuation">.</span> <span class="token keyword">Type</span> <span class="token string">'help;'</span> <span class="token operator">or</span> <span class="token string">'\h'</span> <span class="token keyword">for</span> help<span class="token punctuation">.</span> <span class="token keyword">Type</span> <span class="token string">'\c'</span> <span class="token keyword">to</span> clear the <span class="token keyword">current</span> input statement<span class="token punctuation">.</span> MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">use</span> mysql<span class="token punctuation">;</span>Reading <span class="token keyword">table</span> information <span class="token keyword">for</span> completion <span class="token keyword">of</span> <span class="token keyword">table</span> <span class="token operator">and</span> <span class="token keyword">column</span> namesYou can turn <span class="token keyword">off</span> this feature <span class="token keyword">to</span> get a quicker startup <span class="token keyword">with</span> <span class="token operator">-</span>A <span class="token keyword">Database</span> changedMariaDB <span class="token punctuation">[</span>mysql<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> password<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'11111111'</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span> <span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">4</span>  Changed: <span class="token number">3</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span> MariaDB <span class="token punctuation">[</span>mysql<span class="token punctuation">]</span><span class="token operator">&gt;</span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> MariaDB <span class="token punctuation">[</span>mysql<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">exit</span>Bye<span class="token punctuation">[</span>root<span class="token variable">@web2</span> <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　　　然后退出”跳过权限方式“ ctrl+c ，正常启动mysql就可以了</p><h2 id="五、mysql-配置文件详解"><a href="#五、mysql-配置文件详解" class="headerlink" title="五、mysql 配置文件详解"></a>五、mysql 配置文件详解</h2><h3 id="1、参数说明"><a href="#1、参数说明" class="headerlink" title="1、参数说明"></a>1、参数说明</h3><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span>                                                              #服务端配置<span class="token key attr-name">port</span>        <span class="token punctuation">=</span> <span class="token value attr-value">3306                                                    #监听端口</span><span class="token key attr-name">socket</span>      <span class="token punctuation">=</span> <span class="token value attr-value">/tmp/mysql.sock                                         #通信设置</span><span class="token key attr-name">user</span>    <span class="token punctuation">=</span> <span class="token value attr-value">mariadb                                                     #使用mariadb用户启动</span><span class="token key attr-name">basedir</span> <span class="token punctuation">=</span> <span class="token value attr-value">/usr/local/mariadb                                          #安装路径</span><span class="token key attr-name">datadir</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/mysql                                                 #数据目录</span><span class="token key attr-name">log_error</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/mysql/mariadb.err                             　　　 #错误日志</span><span class="token key attr-name">pid-file</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/mysql/mariadb.pid                             　　　　#pid进程文件</span>skip-external-locking                                                 #避免mysql的外部锁定，减少出错几率提高稳定性<span class="token key attr-name">key_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">64M                                                 #缓存存储引擎参数，这个参数可以设置为64M</span><span class="token key attr-name">max_allowed_packet</span> <span class="token punctuation">=</span> <span class="token value attr-value">1M                                               #允许最大接收数据包的大小，防止服务器发送过大的数据包，可以设置为16MB或者更大，但设置太大也可能有危险</span><span class="token key attr-name">table_open_cache</span> <span class="token punctuation">=</span> <span class="token value attr-value">256                                                #mysql每打开一个表，都会读入一些数据到table_open_cache缓存中，当MYSQL在这个缓存中找不到相应的信息时，才会去磁盘读取，默认值64，假设系统有200个并发连接，则需将此参数设置为200*N（N为每个连接所需的文件描述符数目）；当设置为很大时，如果系统处理不了那么多文件描述符，那么就会出现客户端失效，连接不上</span><span class="token key attr-name">sort_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">1M                                                 #在表进行order by和group by 排序操作时，由于排序的字段没有索引，会出现Using filesort，为了提高性能，可用此参数增加每个线程分配的缓存区大小，默认时256k，这个参数不要设置过大，一般128~256k，另外一般出现using filesort的时候，要通过增加索引来解决</span><span class="token key attr-name">net_buffer_length</span> <span class="token punctuation">=</span> <span class="token value attr-value">8K                                                #包消息缓冲区初始化net_buffer_length字节，但需要时可以增长到max_allowed_packet字节</span><span class="token key attr-name">read_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">1M                                                 #该参数用于表的顺序扫描，表示每个线程分配的缓冲区大小，比如在进行全表扫描时，mysql会按照数据的存储顺序一次读取数据块，每次读取的数据块首先会暂存在read_buffer_size中，当buffer空间被写满或者全部数据读取结束后，在将buffer中的数据返回给上层调用者，以提高效率默认128k，也不要设置过大</span><span class="token key attr-name">read_rnd_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">512K                                           #该参数用于表的随机读取，表示每个线程分配的缓冲区大小，比如，按照一个非索引字段做order by排序操作时，就会利用这个缓冲区来暂存读取的数据，默认时256k，也不要设置过大</span><span class="token key attr-name">myisam_sort_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">16M                                         #当myisam表执行repair table或创建索引时，用以缓冲排序索引，设置太小可能会遇到"myisam_sort_buffer_size is to small"</span><span class="token key attr-name">thread_cache_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">32                                                #线程池，线程缓冲。用来缓冲空闲的线程，以至于不被销毁，如果线程缓冲在的空闲线程，需要重新建立新连接，则会优先调用线程池中的缓冲，很快就能相应连接请求，每建立一个连接，都需要一个线程与之匹配。</span><span class="token key attr-name">query_cache_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">32M                                                #缓存select语句和结果集大小的参数。查询缓存会存储一个select查询的文本与被传送到客户端的相应结果。如果之后接收到一个相同的查询，服务器会从查询缓存中检索结果，而不是再次分析和执行这个同样的查询。如果你的环境中写操作很少，读操作频繁，那么打开query_cache_type=1，会对性能有明显提升。如果写操作频繁，则应该关闭它（query_cache_type=0）。</span><span class="token key attr-name">tmp_table_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">64M                                                  #临时HEAP数据表的最大长度(默认设置是32M); 超过这个长度的临时数据表将被转换为MyISAM数据表并存入一个临时文件。</span>                                                                      <span class="token comment">#</span><span class="token key attr-name">explicit_defaults_for_timestamp</span> <span class="token punctuation">=</span> <span class="token value attr-value">true                     　　　　　　 #是否显示默认时间戳</span><span class="token comment">#skip-networking                                                      #</span><span class="token key attr-name">max_connections</span> <span class="token punctuation">=</span> <span class="token value attr-value">500                                                 #该参数用来设置最大连接数，告诉你当前你的服务器允许多少并发连接。默认为100，一般设置为512-1000即可。请记住，太多的连接会导致内存的使用量过高并且会锁住你的 MySQL 服务器。一般小网站需要 100-200 的连接数，而较大可能需要 500-800 甚至更多。这里的值很大程度上取决于你 MySQL/MariaDB 的使用情况。</span><span class="token key attr-name">max_connect_errors</span> <span class="token punctuation">=</span> <span class="token value attr-value">100                                              #如果有时网络抽风，或者应用配置错误，或者其他原因导致客户端短时间内不断的尝试连接，客户端可能会被列入黑名单，然后将无法连接，直到再次刷新主机缓存。这个选项默认值太小了，可以考虑设的足够大（如果你的服务器配置够强大的话）。</span><span class="token key attr-name">open_files_limit</span> <span class="token punctuation">=</span> <span class="token value attr-value">65535                                              #mysql打开最大文件数</span>                                                                      <span class="token comment">#</span><span class="token key attr-name">log-bin</span><span class="token punctuation">=</span><span class="token value attr-value">mysql-bin                                                     #这些路径相对于datadir</span><span class="token key attr-name">binlog_format</span><span class="token punctuation">=</span><span class="token value attr-value">mixed                                                   #日志格式</span><span class="token key attr-name">server-id</span>   <span class="token punctuation">=</span> <span class="token value attr-value">1                                                       #给服务器分配一个独一无二的ID编号; n的取值范围是1~2的32次方启用二进制日志功能。在复制数据同步的时候会用到，Helloweba后面会有文章介绍。</span><span class="token key attr-name">expire_logs_days</span> <span class="token punctuation">=</span> <span class="token value attr-value">10                                                 #启用二进制日志后，保留日志的天数。服务器会自动清理指定天数前的日志文件，如果不设置则会导致服务器空间耗尽。一般设置为7～14天。</span>                                                                       <span class="token comment">#</span><span class="token key attr-name">default_storage_engine</span> <span class="token punctuation">=</span> <span class="token value attr-value">InnoDB                                     　#新数据表的默认存储引擎(默认设置是MyISAM)。这项设置还可以通过–default-table-type选项来设置。</span><span class="token key attr-name">innodb_file_per_table</span> <span class="token punctuation">=</span> <span class="token value attr-value">1                                             #提供了更灵活的方式，它把每个数据库的信息保存在一个 .ibd 数据文件中。每个 .idb 文件代表它自己的表空间。通过这样的方式可以更快地完成类似 “TRUNCATE” 的数据库操作，当删除或截断一个数据库表时，你也可以回收未使用的空间。这样配置的另一个好处是你可以将某些数据库表放在一个单独的存储设备。这可以大大提升你磁盘的 I/O 负载。</span><span class="token key attr-name">innodb_data_home_dir</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/mysql                             　　　　#InnoDB主目录，所有与InnoDB数据表有关的目录或文件路径都相对于这个路径。在默认的情况下，这个主目录就是MySQL的数据目录。</span><span class="token key attr-name">innodb_data_file_path</span> <span class="token punctuation">=</span> <span class="token value attr-value">ibdata1:10M:autoextend     　　　　　　　　　　　#用来容纳InnoDB为数据表的表空间: 可能涉及一个以上的文件; 每一个表空间文件的最大长度都必须以字节(B)、兆字节(MB)或千兆字节(GB)为单位给出; 表空间文件的名字必须以分号隔开; 最后一个表空间文件还可以带一个autoextend属性和一个最大长度(max:n)。</span><span class="token key attr-name">innodb_log_group_home_dir</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/mysql                     　　　　　　#用来存放InnoDB日志文件的目录路径(如ib_logfile0、ib_logfile1等)。在默认的情况下，InnoDB驱动程序将使用 MySQL数据目录作为自己保存日志文件的位置。</span><span class="token key attr-name">innodb_buffer_pool_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">256M                                     　　#这个参数是InnoDB存储引擎的核心参数，默认为128KB，这个参数要设置为物理内存的60%～70%。</span><span class="token key attr-name">innodb_log_file_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">64M                                            #事务日志文件写操作缓存区的最大长度(默认设置是1MB)。</span><span class="token key attr-name">innodb_log_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">8M                                           #事务日志所使用的缓存区。InnoDB在写事务日志的时候，为了提高性能，先将信息写入Innodb Log Buffer中，当满足innodb_flush_log_trx_commit参数所设置的相应条件（或者日志缓冲区写满）时，再将日志写到文件（或者同步到磁盘）中。可以通过innodb_log_buffer_size参数设置其可以使用的最大内存空间。默认是8MB，一般为16～64MB即可。</span><span class="token key attr-name">innodb_flush_log_at_trx_commit</span> <span class="token punctuation">=</span> <span class="token value attr-value">1                             　　　　#这个选项决定着什么时候把日志信息写入日志文件以及什么时候把这些文件物理地写(术语称为”同步”)到硬盘上。设置值0的意思是每隔一秒写一次日 志并进行 同步，这可以减少硬盘写操作次数，但可能造成数据丢失; 设置值1(设置设置)的意思是在每执行完一条COMMIT命令就写一次日志并进行同步，这可以防止数据丢失，但硬盘写操作可能会很频繁; 设置值2是一般折衷的办法，即每执行完一条COMMIT命令写一次日志，每隔一秒进行一次同步。</span><span class="token key attr-name">innodb_lock_wait_timeout</span> <span class="token punctuation">=</span> <span class="token value attr-value">50                                         #如果某个事务在等待n秒(s)后还没有获得所需要的资源，就使用ROLLBACK命令放弃这个事务。这项设置对于发现和处理未能被InnoDB数据表驱动 程序识别出来的死锁条件有着重要的意义。这个选项的默认设置是50s。</span>                                                                      <span class="token comment">#</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">mysqldump</span><span class="token punctuation">]</span></span>                                                           #quick                                                                 #<span class="token key attr-name">max_allowed_packet</span> <span class="token punctuation">=</span> <span class="token value attr-value">16M                                              #</span>                                                                                <span class="token comment">#</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">mysql</span><span class="token punctuation">]</span></span>                                                               #no-auto-rehash                                                        #                                                                      <span class="token comment">#</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">myisamchk</span><span class="token punctuation">]</span></span>                                                           #<span class="token key attr-name">key_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">64M                                                 #</span>  <span class="token key attr-name">sort_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">1M                                                 #</span>  <span class="token key attr-name">read_buffer</span> <span class="token punctuation">=</span> <span class="token value attr-value">2M                                                      #</span><span class="token key attr-name">write_buffer</span> <span class="token punctuation">=</span> <span class="token value attr-value">2M                                                     #</span>                                                                      <span class="token comment">#</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">mysqlhotcopy</span><span class="token punctuation">]</span></span>                                                        #interactive-timeout                                                   #<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、mysql数据库索引案例（百万量级）"><a href="#2、mysql数据库索引案例（百万量级）" class="headerlink" title="2、mysql数据库索引案例（百万量级）"></a>2、mysql数据库索引案例（百万量级）</h3><p> [client]                   </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">port    <span class="token operator">=</span><span class="token number">3306</span>                                  socket    <span class="token operator">=</span><span class="token operator">/</span>tmp<span class="token operator">/</span>mysql<span class="token punctuation">.</span>sock                        <span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>                                                                             port        <span class="token operator">=</span> <span class="token number">3306</span>                                                         socket      <span class="token operator">=</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>mysql<span class="token punctuation">.</span>sock                                   <span class="token keyword">user</span>    <span class="token operator">=</span> mysql  server_id　　<span class="token operator">=</span> <span class="token number">10</span>datadir　　<span class="token operator">=</span> <span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>mysql<span class="token operator">/</span>old_passwords　　<span class="token operator">=</span> <span class="token number">1</span>lower_case_table_names　　<span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">character</span><span class="token operator">-</span><span class="token keyword">set</span><span class="token operator">-</span>server　　<span class="token operator">=</span> utf8<span class="token keyword">default</span><span class="token operator">-</span>storage<span class="token operator">-</span><span class="token keyword">engine</span>　　<span class="token operator">=</span> MYISAMlog<span class="token operator">-</span>bin　　<span class="token operator">=</span> bin<span class="token punctuation">.</span>loglog<span class="token operator">-</span>error　　<span class="token operator">=</span> error<span class="token punctuation">.</span>logpid<span class="token operator">-</span><span class="token keyword">file</span>　　<span class="token operator">=</span> mysql<span class="token punctuation">.</span>pidlong_query_time　　<span class="token operator">=</span> <span class="token number">2</span>slow_query_time　　<span class="token operator">=</span> <span class="token number">2</span>slow_query_log　slow_query_log_file　　<span class="token operator">=</span> slow<span class="token punctuation">.</span>logbinlog_cache_size　　<span class="token operator">=</span> <span class="token number">4</span>MBbinlog_format　　<span class="token operator">=</span> mixedmax_binlog_cache_size　　<span class="token operator">=</span> <span class="token number">16</span>MBmax_binlog_size　　<span class="token operator">=</span> <span class="token number">1</span>GBexpire_logs_days　　<span class="token operator">=</span> <span class="token number">30</span>ft_min_word_len　　<span class="token operator">=</span> <span class="token number">4</span>back_log　　<span class="token operator">=</span> <span class="token number">512</span>max_allowed_packet　　<span class="token operator">=</span> <span class="token number">64</span>MBmax_connections　　<span class="token operator">=</span> <span class="token number">4096</span>max_connect_errors　　<span class="token operator">=</span> <span class="token number">100</span>join_buffer_size　　<span class="token operator">=</span> <span class="token number">2</span>MBread_buffer_size　　<span class="token operator">=</span> <span class="token number">2</span>MBread_rnd_buffer_size　　<span class="token operator">=</span> <span class="token number">2</span>MBsort_buffer_size　　　　<span class="token operator">=</span> <span class="token number">2</span>MBquery_cache_size　　<span class="token operator">=</span> <span class="token number">2</span>MBtable_open_cache　　<span class="token operator">=</span> <span class="token number">10000</span>thread_cache_size　　<span class="token operator">=</span> <span class="token number">256</span>max_heap_table_size　　<span class="token operator">=</span> <span class="token number">64</span>MBtmp_table_size　　<span class="token operator">=</span> <span class="token number">64</span>MBthread_stack　　<span class="token operator">=</span> <span class="token number">192</span>KBthread_concurrency　　<span class="token operator">=</span> <span class="token number">24</span><span class="token keyword">local</span><span class="token operator">-</span><span class="token keyword">infile</span>　　<span class="token operator">=</span> <span class="token number">0</span>skip<span class="token operator">-</span><span class="token keyword">show</span><span class="token operator">-</span><span class="token keyword">database</span>skip<span class="token operator">-</span>name<span class="token operator">-</span>resolveskip<span class="token operator">-</span>external<span class="token operator">-</span>lockingconnect_timeout　　<span class="token operator">=</span> <span class="token number">600</span>interactive_timeout　　<span class="token operator">=</span> <span class="token number">600</span>wait_timeout　　<span class="token operator">=</span> <span class="token number">600</span><span class="token comment">#MyISAM</span>key_buffer_size　　<span class="token operator">=</span> <span class="token number">512</span>MBbulk_insert_buffer_size　　<span class="token operator">=</span> <span class="token number">64</span>MBmysiam_sort_buffer_size　　<span class="token operator">=</span> <span class="token number">64</span>MBmysiam_max_sort_file_size　　<span class="token operator">=</span> <span class="token number">1</span>GBmysiam_repair_threads　　<span class="token operator">=</span> <span class="token number">1</span>concurrent_insert　　<span class="token operator">=</span> <span class="token number">2</span>myisam_recover<span class="token comment">#INNODB</span>innodb_buffer_pool_size　　<span class="token operator">=</span> <span class="token number">64</span>Ginnodb_additional_mem_pool_size　　<span class="token operator">=</span> <span class="token number">32</span>MBinnodb_data_file_path　　<span class="token operator">=</span>　ibdata1:<span class="token number">1</span>G<span class="token punctuation">;</span>ibdata2:<span class="token number">1</span>G:autoextendinnodb_read_io_threads　　<span class="token operator">=</span> <span class="token number">8</span>innodb_write_io_threads 　　<span class="token operator">=</span> <span class="token number">8</span>innodb_file_per_table　　<span class="token operator">=</span> <span class="token number">1</span>innodb_flush_log_at_thx_commit　　<span class="token operator">=</span> <span class="token number">2</span>innodb_lock_wait_timeout　　<span class="token operator">=</span> <span class="token number">120</span>innodb_log_buffer_size　　<span class="token operator">=</span> <span class="token number">8</span>MBinnodb_log_file_size　　<span class="token operator">=</span> <span class="token number">256</span>MBinnodb_log_files_in_group　　<span class="token operator">=</span> <span class="token number">3</span>innodb_max_dirty_pages_pct　　<span class="token operator">=</span> <span class="token number">90</span>innodb_thread_concurrency　　<span class="token operator">=</span> <span class="token number">16</span>innodb_open_files　　<span class="token operator">=</span> <span class="token number">10000</span><span class="token comment">#innodb_force_recovery　　= 4</span><span class="token comment">#replication slave</span><span class="token keyword">read</span><span class="token operator">-</span>only<span class="token comment">#skip-salve-start</span>relay<span class="token operator">-</span>log　　<span class="token operator">=</span> relay<span class="token punctuation">.</span>loglog<span class="token operator">-</span>slave<span class="token operator">-</span>updates<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本文参考：</p><p><a href="https://www.centos.bz/2018/02/mariadb-mysql%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6my-cnf%E8%A7%A3%E8%AF%BB/">mariadb-mysql配置文件my-cnf解读</a></p><p><a href="http://c.biancheng.net/mysql/">MySQL教程</a> </p><p>《曝光：Linux企业运维实战》</p><p>夜法之书 整理编辑 <strong>From:</strong> <a href="https://www.cnblogs.com/zhangxingeng/p/10882845.html">zhangxingeng</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、初始化等&quot;&gt;&lt;a href=&quot;#一、初始化等&quot; class=&quot;headerlink&quot; title=&quot;一、初始化等&quot;&gt;&lt;/a&gt;一、初始化等&lt;/h2&gt;&lt;h3 id=&quot;1、登陆数据库方法&quot;&gt;&lt;a href=&quot;#1、登陆数据库方法&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="MySql" scheme="https://blog.17lai.fun/categories/MySql/"/>
    
    <category term="技巧" scheme="https://blog.17lai.fun/categories/MySql/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Linux" scheme="https://blog.17lai.fun/tags/Linux/"/>
    
    <category term="Docker" scheme="https://blog.17lai.fun/tags/Docker/"/>
    
    <category term="MySql" scheme="https://blog.17lai.fun/tags/MySql/"/>
    
    <category term="Mariadb" scheme="https://blog.17lai.fun/tags/Mariadb/"/>
    
    <category term="技巧" scheme="https://blog.17lai.fun/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>【Gitlab】GitBook+GitLab撰写发布技术文档-Part2:GitLab篇</title>
    <link href="https://blog.17lai.fun/tools/gitbook/2021-09-07-gitbook-gitlab-write-and-publish-technical-documentation-part2-gitlab/"/>
    <id>https://blog.17lai.fun/tools/gitbook/2021-09-07-gitbook-gitlab-write-and-publish-technical-documentation-part2-gitlab/</id>
    <published>2021-09-07T11:25:00.000Z</published>
    <updated>2021-09-11T10:56:35.661Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章介绍了如果用 gitbook 写书，并且我们已经通过 <code>gitbook build</code>命令把书的内容打包成 HTML 格式发布到了<code>_book</code>文件夹中。<br>接下来这篇文章将向大家介绍如何把写好的书发布到 gitlab 上。这里 gitlab 是我们自己搭建在公司内网中的，不过要用到的原理其实都是一样的，就是利用其 CI/CD 功能。<br>关于 CI/CD 网上有很多详细的介绍，这里我就不不再重复啰嗦，如果有想学习的可以参看文末的致谢&amp;引用部分。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>简单来说CI 就类似一个触发器，你可以设定响应触发的条件，比如 master 分支有新的 commit合并进来，或者带有特殊 tag 的合并，亦或者其他指定分支的特殊提交，可以触发指定的指令。<br>一般来说标准的流程是3步，打包(build)、测试(test)和发布(deploy)。也就是我们只需要把源码提交上以后，CI 可以帮我们完成自动化部署工作。<br>考虑到我们在用 gitbook 写书的过程中需要预览时，其实已经在做build 和 test 的工作了，所以我们只需要在代码传到 gitlab 上后，让服务器帮我们执行发布的工作。<br>所以前提是我们搭建好了一个web 服务，然后 CI 帮我们把打包好的内容部署到相应的网站目录中就好了。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>我们就按照原理，来一步一步尝试着完成工作吧。</p><h2 id="CI配置"><a href="#CI配置" class="headerlink" title="CI配置"></a>CI配置</h2><p>还记得我们上一篇文章中最后介绍目录结构时，有提到一个文件： <code>gitlab-ci.yml</code>。 这个文件是用YAML 进行配置，我们来看一下我们要用到的配置文件吧</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">stage</span><span class="token punctuation">:</span> deploy  <span class="token key atrule">script</span><span class="token punctuation">:</span>    <span class="token comment"># make backup</span>    <span class="token punctuation">-</span> sudo rm <span class="token punctuation">-</span>rf /usr/share/nginx/html/TechDocs/example_bak    <span class="token punctuation">-</span> sudo mv /usr/share/nginx/html/TechDocs/example /usr/share/nginx/html/TechDocs/example_bak    <span class="token punctuation">-</span> sudo mkdir /usr/share/nginx/html/TechDocs/example    <span class="token comment"># deploy latest files</span>    <span class="token punctuation">-</span> cd _book    <span class="token punctuation">-</span> sudo cp <span class="token punctuation">-</span>rf . /usr/share/nginx/html/TechDocs/example/  <span class="token key atrule">only</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> master <span class="token comment"># this job will affect only the 'master' branch</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段 yaml 配置就只有deploy 的步骤，我们在 <code>script</code>部分进行了一系列的操作，完成旧文件的备份以及新文件的部署。当我们的代码上传到远端后，就会自动执行 script 里的内容了。让我们尝试下吧。</p><h2 id="查看-CI-任务执行状态"><a href="#查看-CI-任务执行状态" class="headerlink" title="查看 CI 任务执行状态"></a>查看 CI 任务执行状态</h2><p>上传代码到 gitlab 的步骤这里就不介绍了。理论上说，当代码上传到 master 分支后，会自动执行我们设定好的部署任务。我们可以通过访问gitlab对应项目的页面， 在左侧菜单栏点击<code>CI/CD</code>来查看任务的执行情况。<br>但是如果你和我一样是第一次处理 CI 任务，我们会得到下面的提示：</p><p><a href="http://www.microwu.com/MichaelLee/20190116/1.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907192617.png" alt="img"></a></p><p>原因页面上也给出了我们提示<code>This job is waiting to be picked by a runner</code>。</p><h2 id="Runner"><a href="#Runner" class="headerlink" title="Runner"></a>Runner</h2><p>这里就需要引入第2个概念： runner。很容易从字面上理解，runner 就是我们任务的执行者，也很形象，我们提交了一个任务以后，总得有人来执行。这些任务有些是需要shell 脚本执行，有些可能需要登录到远程机器，有些可能需要 docker 的执行权限，所以这些执行者也都有个子的分工，可能有些执行者只负责执行特定项目的任务，有些执行者执行特殊 tag 的。所以接下来我们看看如何才能创建 runner 吧。</p><h3 id="shared-runner"><a href="#shared-runner" class="headerlink" title="shared runner"></a>shared runner</h3><p>前文提到了我们可能需要一些高权限的 runner 来跨项目间来执行任务。因为我们要做的是多个项目的技术文档，所以会有多个 gitbook 的项目，那这些项目的 CI 任务自然是公用1个 runner 就好，这种 runner 就叫做 shared runner。<br>shared runner 的创建需要我们用管理员的帐号登录gitlab 页面，在 admin area 区域，点击 runner 来根据提示创建。</p><p><a href="http://www.microwu.com/MichaelLee/20190116/2.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907192622.png" alt="img"></a></p><p>这个页面会显示当前所有的 runner，包括项目独享的 runner 和共享的 shared runner。 我们看到目前还没有一个可用的 runner，所以之前的任务才会停留在等待 runner 来运行的状态。<br>我们就根据页面的提示来创建 runner 吧。</p><p><a href="http://www.microwu.com/MichaelLee/20190116/3.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907192629.png" alt="img"></a></p><h3 id="安装-gitlab-runner-工具"><a href="#安装-gitlab-runner-工具" class="headerlink" title="安装 gitlab-runner 工具"></a>安装 gitlab-runner 工具</h3><p>第一步是安装工具，可以通过页面上的提示来进行不同主机环境的安装。我们这里用到的是 RHEL/CentOS，其他版本可以参见页面链接。<br>我们登录到自建 gitlab 所在的主机，然后执行以下脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">wget</span> -O /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64$ <span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/gitlab-runner$ <span class="token function">sudo</span> <span class="token function">useradd</span> --comment <span class="token string">'GitLab Runner'</span> --create-home gitlab-runner --shell /bin/bash$ <span class="token function">sudo</span> gitlab-runner <span class="token function">install</span> --user<span class="token operator">=</span>gitlab-runner --working-directory<span class="token operator">=</span>/home/gitlab-runner$ <span class="token function">sudo</span> gitlab-runner start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建-shared-runner"><a href="#新建-shared-runner" class="headerlink" title="新建 shared runner"></a>新建 shared runner</h3><p>工具安装好了之后，我们就可以来创建用户了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gitlab-runner register<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后按照提示，一步一步创建就好了：</p><ol><li>输入URL</li><li>输入token。 URL 和 token 按照页面上给出的提示来创建就好了。token 用来标识创建的 runner 是某个项目特有的，还是 shared runner</li><li>输入 runner 的描述，这个可以随便填写，只要自己能看明白，能区分就好了</li><li>输入特定的 tag。 <strong>注意</strong>，这里最好留空，否则该 runner 仅会执行特定 tag 的提交</li><li>选择执行类型。这里提供了很多常见的执行类型，例如 docker, docker-ssh, shell 等，我们这里输入 shell。</li></ol><p><a href="http://www.microwu.com/MichaelLee/20190116/7.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907192642.png" alt="img"></a></p><p>之后我们就创建好了一个可以执行 shell 命令的 shared runner。再次回到之前的 web 页面上查看我们创建的 runner 信息。</p><p><a href="http://www.microwu.com/MichaelLee/20190116/4.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907192643.png" alt="img"></a></p><p>可以看到页面提示我们已经创建了一个 runner 可以执行<code>all unassigned projects</code>的任务</p><p><a href="http://www.microwu.com/MichaelLee/20190116/5.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907192655.png" alt="img"></a></p><p>我们还可以进入到特定的项目，在设置里面查看 runner 的情况，可以看到已经有一个可用的 shared runner。如果想创建该项目特有的 runner，按照页面上的提示，输入特定的 token 就好了。</p><p><a href="http://www.microwu.com/MichaelLee/20190116/6.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907192654.png" alt="img"></a></p><h3 id="其他细节"><a href="#其他细节" class="headerlink" title="其他细节"></a>其他细节</h3><p>我们重新查看CI任务页面，大多数情况下，你的任务状态会是<code>failed</code>或者<code>pendding</code>。 如果是 failed，我们可以点击查看具体失败的原因，例如我遇到的问题就是 gitlab-runner 用户没有 sudo 权限。<br>如果是 pendding，通常情况下是你的 job 没有合适的 runner 来执行，例如指定了分支或者添加了 tag 导致没有 runner 可用。</p><hr><p>如果一切都设置妥当，我们可以看到 CI 页面任务的最终状态是 passed，也就是成功执行了。这样，gitbook 的内容就成功部署到你的 web 页面上了。</p><h1 id="致谢-amp-引用"><a href="#致谢-amp-引用" class="headerlink" title="致谢&amp;引用"></a>致谢&amp;引用</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/41330476">基于 GitLab 的 CI 实践(https://zhuanlan.zhihu.com/p/41330476)</a></li><li><a href="https://medium.com/@mvpdw06/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-gitlab-ci-ebf0b68ce24b">如何使用 GitLab CI(https://medium.com/@mvpdw06/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-gitlab-ci-ebf0b68ce24b)</a></li><li><a href="https://docs.gitlab.com/ee/ci/runners/">Configuring GitLab Runners(https://docs.gitlab.com/ee/ci/runners/)</a></li><li><a href="https://docs.gitlab.com/runner/register/">Registering Runners(https://docs.gitlab.com/runner/register/)</a></li><li><a href="https://xiaosuiba.github.io/Gitbook-CI-With-Gitlab/">Gitbook CI With Gitlab(https://xiaosuiba.github.io/Gitbook-CI-With-Gitlab/)</a></li><li><a href="https://www.kenming.idv.tw/simple-create-gitbook_at_gitlab_steps/">在 Gitlab 平台簡單創建 GitBook 電子書的步驟(https://www.kenming.idv.tw/simple-create-gitbook_at_gitlab_steps/)</a></li><li><a href="https://getpublii.com/docs/host-static-website-gitlab-pages.html">How to create a static website using GitLab Pages(https://getpublii.com/docs/host-static-website-gitlab-pages.html)</a></li><li><a href="https://docs.gitlab.com/runner/install/linux-manually.html">Install GitLab Runner manually on GNU/Linux(https://docs.gitlab.com/runner/install/linux-manually.html)</a></li></ul><p>From: <a href="http://lipeng1667.github.io/2019/01/15/public-doc-with-gitlab-ci-writing-with-gitbook/">lipeng1667</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上一篇文章介绍了如果用 gitbook 写书，并且我们已经通过 &lt;code&gt;gitbook build&lt;/code&gt;命令把书的内容打包成 HTML 格式发布到了&lt;code&gt;_book&lt;/code&gt;文件夹中。&lt;br&gt;接下来这篇文章将向大家介绍如何把写好的书发布到 gitlab</summary>
      
    
    
    
    <category term="Tools" scheme="https://blog.17lai.fun/categories/Tools/"/>
    
    <category term="GitBook" scheme="https://blog.17lai.fun/categories/Tools/GitBook/"/>
    
    
    <category term="Git" scheme="https://blog.17lai.fun/tags/Git/"/>
    
    <category term="linux" scheme="https://blog.17lai.fun/tags/linux/"/>
    
    <category term="GitBook" scheme="https://blog.17lai.fun/tags/GitBook/"/>
    
  </entry>
  
  <entry>
    <title>【Gitbook】GitBook+GitLab撰写发布技术文档-Part1:GitBook篇</title>
    <link href="https://blog.17lai.fun/tools/gitbook/2021-09-07-gitbook-gitlab-write-and-publish-technical-documents-part1-gitbook-chapter/"/>
    <id>https://blog.17lai.fun/tools/gitbook/2021-09-07-gitbook-gitlab-write-and-publish-technical-documents-part1-gitbook-chapter/</id>
    <published>2021-09-07T01:25:00.000Z</published>
    <updated>2021-09-11T10:56:27.640Z</updated>
    
    <content type="html"><![CDATA[<p>随着工作时间越来越久，项目越做越多，很多时候，手里面的技术文档都是零散的技术点。最近一直在着手把项目的技术开发文档(Technical Document)系统地整理一下。正好看到了非常棒的 GitBook 工具，又顺带研究了如何借助 Gitlab 的 CI/CD 功能实现自动部署。<br>正好开个简短的教程，介绍一下 <code>GitBook</code> + <code>GitLab</code>怎样来撰写并发布文档。<br>第一部分先来介绍一下 GitBook。</p><h1 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h1><p>惯例列出来我们的环境以及用到的工具。</p><ul><li>MacOS 10.12</li><li>Node.js (版本 &gt; 4.0.0)</li><li>Atom/MWebLite</li></ul><p>其实 Gitbook 有官方的编辑器，但是似乎对中文的支持不是很好，而且会有 bug，虽然最新版本做了优化，Mardown 格式的文字有些会自动显示成最终样式，而我个人还是比较喜欢原生的 markdown，所以我个人就没有用官方的编辑器。<br>如果读者注册了 gitbook，并且打算文章都发布到 gitbook 官网上的话，还是建议可以使用官方的编辑器。因为我的目标是发布到公司内网的 gitlab 上，所以这里就用 atom 或者 MWebLite 来编写文档。<br>其实这篇文章过后，大家对 Gitbook 的工作机制就很清楚了，完全可以自由地创作了。</p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装过程非常简单</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> gitbook-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="新建book"><a href="#新建book" class="headerlink" title="新建book"></a>新建book</h2><p>安装成功后，我们就可以开始用gitbook 的命令来进行各种操作了。如果熟悉<code>hexo</code>的同学会发现，其实大同小异，只不过一个用来写blog，一个用来写 book。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> myBook$ <span class="token builtin class-name">cd</span> myBook$ gitbook init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>初始化后，我们能在<code>myBook</code>目录下看到两个 markdown 文f件。这两个文件就是我们写一本书唯二必须要用的文件了。</p><p><a href="http://www.microwu.com/MichaelLee/20190114/1.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907191936.png" alt="img"></a></p><h2 id="预览book"><a href="#预览book" class="headerlink" title="预览book"></a>预览book</h2><p>先不做任何变动，模拟一下我们发布之后的页面的成品吧。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gitbook serve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="http://www.microwu.com/MichaelLee/20190114/2.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907191946.png" alt="img"></a></p><p>我们打开浏览器，在浏览器中输入<code>0.0.0.0:4000</code>就可以在本地预览了。</p><p><a href="http://www.microwu.com/MichaelLee/20190114/3.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907191948.png" alt="img"></a></p><p>可以看到，左侧是我们的菜单栏，自带一个搜索栏，右侧就是我们的 book 的内容了，右上角有默认的诸如 twitter,facebook 等分享快捷方式。基本上和其他人用 gitbook 写出来的页面是一样的。</p><blockquote><p>注：</p><ol><li>gitbook 新版本提供了本地预览功能的热更新，也就是说本地预览的页面会随着我们写书的内容变化而自动更新，这着实是一个很使用的功能。</li><li>在命令行ctrl+c可以关闭本地服务器，即预览页面。</li></ol></blockquote><p>我们可以尝试修改一下书的内容，看一下页面的变化。打开<code>README.md</code>文件，修改成如下内容：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> Introduction</span> Hello World!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再回头看一眼我们的预览页面，是不是自动变成了下面的样子。</p><p><a href="http://www.microwu.com/MichaelLee/20190114/4.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907192001.png" alt="img"></a></p><p>关于 gitbook 自建的 README.md 文件我就不做过多的介绍了，都是一些 Markdown 的基本语法，相信使用 gitbook 的各位一定是对 markdown 语法非常熟悉的了。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>现在我们把注意力放到 gitbook 为我们创建的第二个文件<code>SUMMARY.md</code>上，这个文件决定了我们的目录结构。 一个比较简单的目录结构如下：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> Summary</span> <span class="token list punctuation">*</span> <span class="token url">[<span class="token content">前言</span>](<span class="token url">README.md</span>)</span><span class="token list punctuation">*</span> <span class="token url">[<span class="token content">第一章</span>](<span class="token url">xx.md</span>)</span><span class="token list punctuation">*</span> <span class="token url">[<span class="token content">第二章</span>](<span class="token url">xx.md</span>)</span><span class="token list punctuation">*</span> <span class="token url">[<span class="token content">第三章</span>](<span class="token url">xx.md</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>xx.md</code>就是我们每个章节独立的 markdown 文件，所以用 gitbook 写一本书真的非常方便，一个目录文件，和若干个你的书的内容就好了。</p><p><a href="http://www.microwu.com/MichaelLee/20190114/5.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907192009.png" alt="img"></a></p><h3 id="目录分层"><a href="#目录分层" class="headerlink" title="目录分层"></a>目录分层</h3><p>简单的目录有一个小的问题就是我们目录都只有一级，如果想要分层，比如第一章有1，2，3个小节，该怎么办呢？ 这里有两种方式：</p><h4 id="标题区分"><a href="#标题区分" class="headerlink" title="标题区分"></a>标题区分</h4><p>我们把<code>SUMMARY.md</code>文件修改成如下内容</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> Summary</span> <span class="token title important"><span class="token punctuation">##</span> 前言</span><span class="token list punctuation">*</span> <span class="token url">[<span class="token content">前言</span>](<span class="token url">README.md</span>)</span> <span class="token title important"><span class="token punctuation">##</span> 第一章</span><span class="token list punctuation">*</span> [1.1小节]()<span class="token list punctuation">*</span> [1.2小节]() <span class="token title important"><span class="token punctuation">##</span> 第二章</span><span class="token list punctuation">*</span> [2.1小节]()<span class="token list punctuation">*</span> [2.2小节]() <span class="token title important"><span class="token punctuation">##</span> 第三章</span><span class="token list punctuation">*</span> [3.1小节]()<span class="token list punctuation">*</span> [3.2小节]()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终的样式如下：</p><p><a href="http://www.microwu.com/MichaelLee/20190114/6.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907192025.png" alt="img"></a></p><h4 id="缩进区分"><a href="#缩进区分" class="headerlink" title="缩进区分"></a>缩进区分</h4><p>我们还可以用缩进的方式对目录进行级别的区分</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> Summary</span> <span class="token list punctuation">*</span> <span class="token url">[<span class="token content">前言</span>](<span class="token url">README.md</span>)</span><span class="token list punctuation">*</span> [第一章]()    <span class="token list punctuation">*</span> [1.1小节]()    <span class="token list punctuation">*</span> [1.2小节]()<span class="token list punctuation">*</span> [第二章]()    <span class="token list punctuation">*</span> [2.1小节]()    <span class="token list punctuation">*</span> [2.2小节]()<span class="token list punctuation">*</span> [第三章]()    <span class="token list punctuation">*</span> [3.1小节]()    <span class="token list punctuation">*</span> [3.2小节]()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终的样式如下：</p><p><a href="http://www.microwu.com/MichaelLee/20190114/7.png"><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0720210907192039.png" alt="img"></a></p><p>大家可以根据自己的喜好选择不同的样式，也可以把这两者结合起来一起用，as you wish.</p><h2 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h2><p>通过预览模式，我们可以随时掌握书籍的更新内容。当你完成了部分章节或者全书的编写后，我们需要把写好的内容打包并发布。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gitbook build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行完上面的命令后，我们会发现在根目录下出现了<code>_build</code>文件夹，里面的文件就是我们需要发布的内容，你可以把所有的内容放到你的网站目录下，或者 gitlab/github 的 page页面，就实现了 gitbook 的线上发布了~</p><h1 id="进阶技巧"><a href="#进阶技巧" class="headerlink" title="进阶技巧"></a>进阶技巧</h1><p>看完上面的章节，你已经可以独立完成一本书的编写和发布，接下来的章节，我们提供一些进阶的技巧，你可以安装一些插件、更直观地规划你的目录结构等等。</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>和众多开源的软件一样，gitbook 也有一些插件，这些插件可以让你的书更加完美。这里我仅附上我个人觉得比较有用的几个插件，更多的插件，可以访问<a href="https://plugins.gitbook.com/">社区</a>来获取。<br>插件的引入和修改都是在配置文件中完成的，那我们可以在根目录下创建<code>book.json</code>文件来修改当前书的一些配置，因为是 json 格式的，所以诸如书的标题、作者、内容等都可以在配置文件中完成，我们重点来说插件。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>     <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token string">"-lunr"</span><span class="token punctuation">,</span>          <span class="token string">"-search"</span><span class="token punctuation">,</span>          <span class="token string">"search-plus"</span><span class="token punctuation">,</span>          <span class="token string">"splitter"</span><span class="token punctuation">,</span>          <span class="token string">"copy-code-button"</span><span class="token punctuation">,</span>          <span class="token string">"expandable-chapters-small"</span>     <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上是我的<code>book.json</code>配置文件，只有一个关于插件的配置项，其实总共就4个</p><ul><li>search-plus 让搜索支持中文，注意需要先把默认的两个插件<code>lunr</code>和<code>serach</code>禁用掉，禁用的方式就是在前面加上<code>-</code>号</li><li>spliter 菜单栏宽度可调节</li><li>copy-code-button 代码可以一键 copy</li><li>expandable-chapters-small 菜单栏可以折叠</li></ul><blockquote><p>注：<br>如果引入了新的插件，需要通过<code>gitbook install</code> 命令来安装新的插件，否则在打包发布的时候会提示错误。</p></blockquote><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>一个基本的目录结构是这样的</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">.├── _book/├── book.json├── README.md├── SUMMARY.md├── xx1.md├── xx2.md├── xx3.md├── xx4.md├── ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过为了我们自己方便，个人建议的目录结构如下</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">.├── _book/├── node_modules/├── .gitlab-ci.yml├── book.json├── SUMMARY.md├── content/|   ├── chapter1/|       ├── README.md|       └── something.md|   ├── chapter2/|       ├── README.md|       └── something.md├── res/|   ├── 1.png|   └── 2.jpg|   └── 3.jpeg|   └── ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li><code>_book</code> 目录是我们打包后要发布的文件目录</li><li><code>node_modules</code> 目录是我们安装插件后默认生成的目录</li><li><code>.gitlab-ci.yml</code>这个是 gitlab 要用的 ci 配置文件，下一章节我们马上就会用到</li><li><code>book.json</code> 是我们的配置文件</li><li><code>content</code>目录是我们的书的内容，所有章节都可以分类继续整理，方便自己查看</li><li><code>res</code>目录是我们要用到的一些图片资源文件夹，除了用到床图，我们可以把其他本地图片资源也包含进来</li></ul><h1 id="参考-amp-致谢"><a href="#参考-amp-致谢" class="headerlink" title="参考&amp;致谢"></a>参考&amp;致谢</h1><ul><li><a href="https://gitbook.zhangjikai.com/">Gitbook 简要介绍</a></li><li><a href="https://yangjh.oschina.io/gitbook/">GitBook 学习笔记</a></li></ul><p>From: <a href="http://lipeng1667.github.io/2019/01/15/how-to-write-techdoc-with-gitbook/">lipeng1667</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;随着工作时间越来越久，项目越做越多，很多时候，手里面的技术文档都是零散的技术点。最近一直在着手把项目的技术开发文档(Technical Document)系统地整理一下。正好看到了非常棒的 GitBook 工具，又顺带研究了如何借助 Gitlab 的 CI/CD 功能实现自</summary>
      
    
    
    
    <category term="Tools" scheme="https://blog.17lai.fun/categories/Tools/"/>
    
    <category term="GitBook" scheme="https://blog.17lai.fun/categories/Tools/GitBook/"/>
    
    
    <category term="Git" scheme="https://blog.17lai.fun/tags/Git/"/>
    
    <category term="linux" scheme="https://blog.17lai.fun/tags/linux/"/>
    
    <category term="GitBook" scheme="https://blog.17lai.fun/tags/GitBook/"/>
    
  </entry>
  
  <entry>
    <title>通过宝塔面板实现MySQL性能简单调优</title>
    <link href="https://blog.17lai.fun/mysql/2021-09-06-simple-tuning-of-mysql-performance-through-the-pagoda-panel/"/>
    <id>https://blog.17lai.fun/mysql/2021-09-06-simple-tuning-of-mysql-performance-through-the-pagoda-panel/</id>
    <published>2021-09-06T08:25:00.000Z</published>
    <updated>2021-09-11T13:16:39.040Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>  在PHP+MYSQL架构网站运行过程中，往往会遇到各种性能问题影响，如MySQL、PHP、CPU、磁盘IO、缓存等，其中MySQL瓶颈就是最常见也最难解决的一种影响网站性能的因素；通常，我们会使用redis、memcached等缓存软件来缓存内容，这确实是最优的解决方案之一，但这需要网站程序的支持，然而多数常用网站程序并不支持或者不能完美支持这些缓存软件，今天我们就来谈谈如何通过MySQL自身的配置调整来优化MySQL性能，以缓解MySQL瓶颈问题。</p></blockquote><h2 id="准备："><a href="#准备：" class="headerlink" title="准备："></a><strong>准备：</strong></h2><blockquote><p>​    1、宝塔Linux面板 正式版 5.2.0+ (2017/09/20发布)  测试版5.2.4+ </p><p>​    2、MySQL 5.x</p></blockquote><h3 id="通常MySQL调优我们分以下几部分："><a href="#通常MySQL调优我们分以下几部分：" class="headerlink" title="通常MySQL调优我们分以下几部分："></a><strong>通常MySQL调优我们分以下几部分：</strong></h3><blockquote><p>​    1、MySQL配置参数调优 (需要根据网站运行情况调整) </p><p>​    2、数据表索引调优 (效果明显，但通常优秀的开源程序都不需要调整) </p><p>​    3、SQL语句调优 (这是程序员或DBA干的事)</p></blockquote><p>今天我们主要谈谈如果配合宝塔面板的新功能来进行MySQL配置参数调优，我们先来看两张图片：</p><p>(图1)</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/2720210827205902.png"></p><p>(图2)</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/2720210827205906.png"></p><p>很明显，(图1)显示的是MySQL当前的运行状态，(图2)显示的是MySQL主要配置参数</p><p>下面我们就来解读一下这两张图：</p><h3 id="1、活动-峰值连接数"><a href="#1、活动-峰值连接数" class="headerlink" title="1、活动/峰值连接数"></a><strong>1、活动/峰值连接数</strong></h3><p>​      (图1)中当前活动的连接为1个，自MySQL服务启动以来，最高连接数为54；当最高连接数接近或等于(图2)中的max_connections时，应适当增加max_connections，需要注意的是，不要一下子增加过多，建议每次增加50，观察一段时间，不够再继续增加。</p><h3 id="2、线程缓存命中率"><a href="#2、线程缓存命中率" class="headerlink" title="2、线程缓存命中率"></a><strong>2、线程缓存命中率</strong></h3><p>​      (图1)中线程缓存命中率为99.78%，若这个值小于90%，建议适当增加(图2)中的thread_cache_size，建议每次增加8。</p><h3 id="3、索引命中率"><a href="#3、索引命中率" class="headerlink" title="3、索引命中率"></a><strong>3、索引命中率</strong></h3><p>​      (图1)中索引命中率为99.50%，若这个值小于95%，建议适当增加(图2)中的key_buffer_size，建议每次增加64，需要说明的是，若您的数据库使用的是Innodb引擎，可忽略这个选项</p><p><strong>4、Innodb索引命中率</strong><br>      (图1)中Innodb索引命中率为100%，若这个值小于95%，建议适当增加(图2)中的innodb_buffer_pool_size，建议每次增加64，需要说明的是，若您的数据库没有使用Innodb引擎，可忽略这个选项</p><h3 id="5、查询缓存命中率"><a href="#5、查询缓存命中率" class="headerlink" title="5、查询缓存命中率"></a><strong>5、查询缓存命中率</strong></h3><p>​      MySQL查询缓存是个比较受争议的功能，个人建议当你有在使用redis、memcached等缓存软件时，在(图2)中将query_cache_size设为0可以将其关闭，当你没有使用缓存软件，有多余的内存使用，且数据库瓶颈明显存在时，可以尝试开启查询缓存，这是个非常依赖数据表结构及SQL语句优化的功能，若数据表结构和SQL语句都针对查询缓存进行过优化，它的效果还是很不错的。</p><h3 id="6、创建临时表到磁盘"><a href="#6、创建临时表到磁盘" class="headerlink" title="6、创建临时表到磁盘"></a><strong>6、创建临时表到磁盘</strong></h3><p>​      (图1)中创建临时表到磁盘的比例是0.42%，这说明大部分临时表创建到内存了，不会过多增加磁盘IO的开销，建议，当比例大于2%时适当增加(图1)中的tmp_cache_size，建议每次增加32，当比例大于60%时，放弃吧，有些开源程序并没有专门优化过SQL语句，所以在运行过程中会开启大量临时表，加多少缓存都是不够用的。</p><h3 id="7、已打开的表"><a href="#7、已打开的表" class="headerlink" title="7、已打开的表"></a><strong>7、已打开的表</strong></h3><p>​      当(图1)中的已打开的表接近或等于(图2)中的table_open_cache时，可以适当增加table_open_cache，但若设置过大可能导致您的程序频繁中断MySQL连接，建议在1024以内，最大不要超过2048。</p><h3 id="8、没有使用索引的量、没有使用索引的JOIN量"><a href="#8、没有使用索引的量、没有使用索引的JOIN量" class="headerlink" title="8、没有使用索引的量、没有使用索引的JOIN量"></a><strong>8、没有使用索引的量、没有使用索引的JOIN量</strong></h3><p>​      若不为0，就检查下数据表索引吧，其实只要没有疯涨，比如一天增涨几千，一般可以忽略，必竟优化索引还是程序员或DBA去干比较合适。</p><h3 id="9、排序后的合并次数"><a href="#9、排序后的合并次数" class="headerlink" title="9、排序后的合并次数"></a><strong>9、排序后的合并次数</strong></h3><p>​      如果这个值在缓慢增张，建议适当增加(图2)中的sort_buffer_size，建议每次增加512，但最大不要超过8192，如果这个值一直在疯涨，增加sort_buffer_size也没用，就放弃这个选项吧，这个锅还是给程序开发者背。</p><h3 id="10、锁表次数"><a href="#10、锁表次数" class="headerlink" title="10、锁表次数"></a><strong>10、锁表次数</strong></h3><p>​      如果服务器CPU开销不大的情况下，疯狂锁表，建议你将所有数据表转换成innodb，记得转换前备份哦。</p><h3 id="11、优化方案"><a href="#11、优化方案" class="headerlink" title="11、优化方案"></a><strong>11、优化方案</strong></h3><p>​      这个是我们根据内存大小给的一个推荐优化方案，仅是建议仅用于基础参考值，还是要根据实据情况来调整每一个配置项。</p><p>注意：保存参数配置后不会立即生效，记得要重启MySQL服务。</p><p>写在最后：<br>      因我本人并不是专业DBA，难免有错误或遗漏的地方，还请大家给予指正，另外，可能面板提供的参考数据及调整选项还不够丰富，我们在往后的更新中会根据需要考虑继续增加更多的调整选项，谢谢大家的支持。</p><p>来自网络整理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;  在PHP+MYSQL架构网站运行过程中，往往会遇到各种性能问题影响，如MySQL、PHP、CPU、磁盘IO、缓存等，其中MySQL瓶颈就是最常见也最难解决的一种影响网站性能的因素；通常，我们会使用redis、memcached等缓存软件来缓存内</summary>
      
    
    
    
    <category term="MySQL" scheme="https://blog.17lai.fun/categories/MySQL/"/>
    
    
    <category term="Linux" scheme="https://blog.17lai.fun/tags/Linux/"/>
    
    <category term="MySQL" scheme="https://blog.17lai.fun/tags/MySQL/"/>
    
    <category term="优化" scheme="https://blog.17lai.fun/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>ESNI和加密DNS - 保护信息隐私的最后一块拼图</title>
    <link href="https://blog.17lai.fun/ssl/yin-si/2021-09-06-encrypted-sni-anti-censorship/"/>
    <id>https://blog.17lai.fun/ssl/yin-si/2021-09-06-encrypted-sni-anti-censorship/</id>
    <published>2021-09-06T01:25:00.000Z</published>
    <updated>2021-09-12T17:40:21.901Z</updated>
    
    <content type="html"><![CDATA[<p>随着<a href="https://www.ietf.org/blog/tls13/">TLS1.3</a>的发布，让该协议成为有史以来最安全、也是最复杂的TLS协议。在该协议之中，有很多的对于以往协议安全漏洞的修复，包括废弃RSA启用新的秘钥交换机制PSK等等。而<code>Encrypted SNI</code>作为一个<code>TLS1.3</code>的扩展协议用来防止传统的HTTPS流量受到ISP或者陌生网络环境的窥探以及一些网络审查。在过去，由于<code>HTTPS</code>协议之中<code>Server Name Indication - SNI</code>的使用，我们的HTTPS流量经常被窥探我们所访问站点的域名</p><h3 id="那么什么是SNI？⌗"><a href="#那么什么是SNI？⌗" class="headerlink" title="那么什么是SNI？⌗"></a>那么什么是SNI？<a href="#%E9%82%A3%E4%B9%88%E4%BB%80%E4%B9%88%E6%98%AFsni">⌗</a></h3><blockquote><p>服务器名称指示（英语：Server Name Indication，简称SNI）是一个扩展的TLS计算机联网协议，在该协议下，在握手过程开始时客户端告诉它正在连接的服务器要连接的主机名称。这允许服务器在相同的IP地址和TCP端口号上呈现多个证书，并且因此允许在相同的IP地址上提供多个安全（HTTPS）网站（或其他任何基于TLS的服务），而不需要所有这些站点使用相同的证书。它与HTTP/1.1基于名称的虚拟主机的概念相同，但是用于HTTPS。所需的主机名未加密， 因此窃听者可以查看请求的网站 为了使SNI协议起作用，绝大多数访问者必须使用实现它的Web浏览器。使用未实现SNI浏览器的用户将被提供默认证书，因此很可能会收到证书警告</p></blockquote><ul><li>  SNI协议示意图</li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/2820210828144946.webp"></p><ul><li>  TLS1.3完整握手流程</li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/2820210828144904.webp"></p><h3 id="为了弥补缺陷因应运而生的ESNI⌗"><a href="#为了弥补缺陷因应运而生的ESNI⌗" class="headerlink" title="为了弥补缺陷因应运而生的ESNI⌗"></a>为了弥补缺陷因应运而生的ESNI<a href="#%E4%B8%BA%E4%BA%86%E5%BC%A5%E8%A1%A5%E7%BC%BA%E9%99%B7%E5%9B%A0%E5%BA%94%E8%BF%90%E8%80%8C%E7%94%9F%E7%9A%84esni">⌗</a></h3><p>在上述过程之中，存在的问题就是，在ClientHello环节中，TLS会在这个位置以<strong>明文</strong>的形式讲要请求的Host写在数据包之中，如果在网络路由中有任何的监听节点，那么用户所访问网站的域名将暴露无遗，这将是巨大的用户隐私泄露: <img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/2820210828144907.webp"></p><p>所以在最新的关于<a href="https://tools.ietf.org/html/draft-rescorla-tls-esni-00">ESNI的草案</a>中，<code>IETF</code>重新设计了一种加密的Client Hello机制，从而修复了这个问题: <img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/2820210828144915.webp"></p><p><strong>不过这里问题又来了，之前服务器和客户端并没有事先交换任何数据啊，这个加密的凭证从何而来啊？？？</strong></p><h3 id="依靠安全DNS的ESNI⌗"><a href="#依靠安全DNS的ESNI⌗" class="headerlink" title="依靠安全DNS的ESNI⌗"></a>依靠安全DNS的ESNI<a href="#%E4%BE%9D%E9%9D%A0%E5%AE%89%E5%85%A8dns%E7%9A%84esni">⌗</a></h3><p>上一个问题没有难倒工程师们，他们设计了这样一个办法。首先让网站提供者在DNS提供商上公布一个记录，这个记录包含着一个<code>公钥</code>，这个公钥由网站提供者生成，其<code>私钥</code>存储在Web服务器等待着被Web程序读取。如此，当用户想通过TLS1.3协议访问这个域名的时候，首先读取这个公开的公钥，在用公钥加密其想访问的<code>域名Host</code>，装在<code>Client Hello</code>里面发送给目标服务器，目标服务器再用自己的私钥解密，从而和用户建立HTTPS链接，这样就不会暴露Host信息 这时候有人会想，如果有人某Wall想给你的DNS偷天换日，那会不会很不安全啊,请继续向下看</p><p>在<code>ESNI</code>的实现草案之中，里面要求<code>安全加密的DNS</code><strong>是推荐的</strong>。大家都知道我们的DNS查询一般是<code>TCP</code>报文或者是<code>UDP</code>报文，本身它是不加密的，所以如果有人想在篡改你的DNS是相对简单的，大家可能都知道我们伟大的妨炎蔷会使用DNS污染的方式干扰一些网站的正常访问。正式由于DNS的非加密性，DNS也成为了审查信息的利器。此时加密的DNS势在必行</p><h3 id="DNS-over-TLS-DoT-and-DNS-over-HTTPS-DoH-⌗"><a href="#DNS-over-TLS-DoT-and-DNS-over-HTTPS-DoH-⌗" class="headerlink" title="DNS over TLS (DoT) and DNS over HTTPS (DoH)⌗"></a>DNS over TLS (DoT) and DNS over HTTPS (DoH)<a href="#dns-over-tls-dot-and-dns-over-https-doh">⌗</a></h3><p>于是出现了这两种新型的DNS查询方式</p><ul><li>  DNS over HTTPS (DoH)</li></ul><blockquote><p>DNS Over HTTPS (DOH) 是一个进行安全化的域名解析的方案，当前尚处于实验性阶段。其意义在于以加密的HTTPS协议进行DNS解析请求，避免原始DNS协议中用户的DNS解析请求被窃听或者修改的问题（例如中间人攻击）来达到保护用户隐私的目的。 Google及Mozilla基金会正在测试这一协议，作为其提高网络安全性的努力的一部分。 当前，该方案由IETF支持，其规范文档以 RFC 8484 的名义发布。2018年9月5日发布的Firefox 62正式版加入了这项功能，但需要用户手动开启 DNS Over HTTPS利用HTTP协议的GET命令发出经由JSON等编码的DNS解析请求。较于传统的DNS协议，此处的HTTP协议通信处于具有加密作用的SSL/TLS协议（两者统称作HTTPS）的保护之下。但是，由于其基于HTTPS，而HTTPS本身需要经由多次数据来回传递才能完成协议初始化，其域名解析耗时较原DNS协议会显著增加。 传统的DNS协议形成于互联网早期，直接基于UDP或TCP协议，且彼时未虑及现代安全性的需要，未利用密码学等手段进行加密或验证。因而，其无法抵御现代互联网常见的DNS投毒污染等攻击手段或监听。虽然后来的DNSSEC方案通过电子签名进行验证，强化了DNS的安全性，并能够抵御DNS投毒污染等篡改通信的手段，但其对于中间网络设备进行的监听仍然没有抵御能力（随后，监听者可以通过获取的通信数据知晓用户访问了哪一域名，而域名往往与具体的网站相关系）。此外，DNSSEC的起效要求现有的大量DNS解析服务的提供商（常为互联网服务提供商或第三方大型互联网机构）对已有的DNS服务器进行大范围修改等问题，其推进进程并不理想。而对于DNS Over HTTPS，在正确部署服务端并妥善配置客户端的前提下，互联网服务提供商或其它中间网络设备无法解密（亦即无法获知请求的实际内容）或者篡改已经加密的HTTPS通信，故其能够有效保护互联网用户的安全及隐私；另一方面，其基于已经成熟并已广泛部署的HTTPS协议，客户端进行利用较为方便。</p></blockquote><ul><li>  DNS over TLS (DoT)</li></ul><blockquote><p>DNS over TLS (DoT) 是通过传输层安全协议（TLS）来加密并打包域名系统（DNS）的安全协议。此协议旨在防止中间人攻击与控制DNS数据以保护用户隐私。 RFC 7858及RFC 8310定义了DNS over TLS。 截至2018年，Cloudflare、Quad9与CleanBrowsing均向大众提供支持DNS over TLS的公共DNS解析服务。2018年4月，Google宣布Android P将包含对DNS over TLS的支持。PowerDNS的DNSDist也宣布在其最新的1.3.0版本中添加了对DNS over TLS的支持。BIND用户也可以通过stunnel代理提供DNS over TLS服务。</p></blockquote><h3 id="手动配置⌗"><a href="#手动配置⌗" class="headerlink" title="手动配置⌗"></a>手动配置<a href="#%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE">⌗</a></h3><p>Firefox所在的Mozilla宣布从<code>Firefox 62</code>版本之后开始支持<code>ESNI</code>，默认没有开启，需要用户手动配置打开，那么我们现在试验一下 这里Firefox的解决方案是使用<code>DNS over HTTPS (DoH)</code>和<code>ESNI</code></p><ol><li>安装<code>Firefox Nightly</code>版本，这个版本是预发布版本，使得开发这和即可门可以提前尝鲜到新功能。<a href="https://www.mozilla.org/zh-CN/firefox/nightly/all/">下载地址</a></li><li>在浏览器地址栏输入<code>about:config</code>并回车，打开配置页面，在搜索位置搜索<code>network.trr.mode</code>，这个是打开浏览器对于<code>DoH</code>的支持，将此项的数值修改为3（<code>0</code>对应的是不开启此功能；<code>1</code>对应的是交由浏览器选择<code>DoH</code>与传统方式那种更快；<code>2</code>代表优先使用加密DNS查询，如果失败则回落到普通DNS查询；<code>3</code>代表只使用加密DNS查询；<code>5</code>代表明确的关闭此功能）</li><li>继续搜索<code>network.trr.uri</code>，将此项的值修改为<code>https://mozilla.cloudflare-dns.com/dns-query</code>，这个是默认的<code>DoH</code>查询地址，当然我们也可以使用诸如<code>https://1.1.1.1/dns-query</code>、<code>https://dns.google.com/experimental</code>这样的地址，我们可以事先<code>ping</code>检测一下对比哪个延迟更低来使用</li><li>（可选）搜索<code>network.trr.bootstrapAddress</code>，讲此值修改位第三步的DNS域名的<code>IP</code>。此举是为了避免使用操作系统DNS查询域名受到劫持，一般来说这些DNS的<code>IP</code>是不会变的</li></ol><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/2820210828145006.webp"></p><ol start="5"><li>将<code>network.security.esni.enabled</code>设置为<code>true</code>,此举为了打开浏览器对于ESNI的支持（感谢<a href="https://github.com/chenIshi">chenlshi</a>同学的提醒，在原版的文章中我不小心遗漏了这个关键的步骤）</li><li>完成配置后重启浏览器，再打开<a href="https://encryptedsni.com/">在线验证页面验证</a>来查询你的浏览器是否完全支持<code>ESNI</code>功能，如果出现如图说明配置成功了</li></ol><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/2820210828144924.webp"></p><h3 id="验证⌗"><a href="#验证⌗" class="headerlink" title="验证⌗"></a>验证<a href="#%E9%AA%8C%E8%AF%81">⌗</a></h3><p>为了验证是否真的加密了<code>Client Hello</code>，我们使用<code>Wireshark</code>进行网络抓包 由于这个特性仍在试验阶段，并没有太多站点支持这个特性，<a href="https://cloudflare.com/">CloudFlare</a>是第一个全站支持<code>ESNI</code>的网站，这里我们使用<a href="https://blog.cloudflare.com/">blog.cloudflare.com</a>来做测试：</p><ol><li> 首先打开<code>Wireshark</code>的抓包功能，然后开启<code>Chrome</code>浏览器打开上述网址，页面加载完后停止抓包，在得到的结果中查询协议为<code>TLS1.3</code>和报文为<code>Client Hello</code>的报文，通过观察发现域名的Host果然被以明文形式写在数据包中（参见<code>Server_Name</code>字段）：</li></ol><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/2820210828144932.webp"></p><ol start="2"><li> 然后打开<code>Firefox Nightly</code>浏览器重复上述操作，这次发现在整个数据包中根本找不到<code>Server_Name</code>字段，说明<code>Host</code>已经被加密：</li></ol><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/2820210828144933.webp"></p><p>目前来说，我查阅了相关的关键词，仍然没有任何一篇教程有介绍如何在自己的服务器上支持<code>ESNI</code>，同时我也看到在<code>Nginx</code>的论坛里面有人呼吁尽快支持<code>ESNI</code>，所以我推测这个功能仍然在试验期，还没有被这两个Web软件所支持，起劲为止我也没有查阅到任何的Web软件预计支持此项功能。这项扩展已经进入<code>IETF</code>的草案阶段，可以预见到，在不就的将来，这项技术可以普及开来，为我们的网络隐私保驾护航 目前来说，有了<code>HTTPS</code>+<code>TLS1.3</code>+<code>ESNI</code>+<code>DoH/DoT</code>的加持，我们的网络隐私的到了极大的保障，最后还有一个问题是访问服务器<code>IP</code>的泄露仍然无法被避免，迫于<code>IP协议</code>设计的机制，他目前还不能被解决。不过我相信，随着网技术不断的趋于保护个人隐私和更快速的发展方向，这个问题可以最终被解决</p><p>From: <a href="https://blog.hackerchai.com/post/encrypted-sni-anti-censorship/">hackerchai</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;随着&lt;a href=&quot;https://www.ietf.org/blog/tls13/&quot;&gt;TLS1.3&lt;/a&gt;的发布，让该协议成为有史以来最安全、也是最复杂的TLS协议。在该协议之中，有很多的对于以往协议安全漏洞的修复，包括废弃RSA启用新的秘钥交换机制PSK等等。而&lt;co</summary>
      
    
    
    
    <category term="SSL" scheme="https://blog.17lai.fun/categories/SSL/"/>
    
    <category term="隐私" scheme="https://blog.17lai.fun/categories/SSL/%E9%9A%90%E7%A7%81/"/>
    
    
    <category term="SSL" scheme="https://blog.17lai.fun/tags/SSL/"/>
    
    <category term="TLS" scheme="https://blog.17lai.fun/tags/TLS/"/>
    
    <category term="隐私" scheme="https://blog.17lai.fun/tags/%E9%9A%90%E7%A7%81/"/>
    
    <category term="安全" scheme="https://blog.17lai.fun/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>使用jeckett,sonarr,iyuu,qt,emby打造全自动追剧流程</title>
    <link href="https://blog.17lai.fun/docker/pt/2021-07-09-use-jeckett-sonarr-iyuu-qt-emby-building-automatic-movie-anime-process/"/>
    <id>https://blog.17lai.fun/docker/pt/2021-07-09-use-jeckett-sonarr-iyuu-qt-emby-building-automatic-movie-anime-process/</id>
    <published>2021-09-01T10:25:00.000Z</published>
    <updated>2021-09-11T10:59:06.274Z</updated>
    
    <content type="html"><![CDATA[<p>使用jeckett,sonarr,iyuu,qt,emby打造全自动追剧流程，打造一个完整的HTPC。</p><p>滚动更新： 2021-08-19</p><p>jackett 作为种子源，sonarr剧集管理，bt下载，qbittorrent主力下载，使用iyuu转移辅种，emby，jellyfin做海报墙，sunfinder自动下载字幕。基本算是完美打通全流程自动追剧。bt种子文件命名规则SxxExx的自动识别下载，国内的资源手动查找下载，自动推送到emby刮削好。</p><p>结合本地DNS管理，DNS去广告，Nginx 反向代理去端口访问，形成一个完整解决方案。</p><p>硬链接工具导入到新目录，使用TMM刮削</p><blockquote><p>注意：图床使用github，已经启动CDN加速，如果图片显示问题自己解决。</p></blockquote><h2 id="indexer-种子索引源"><a href="#indexer-种子索引源" class="headerlink" title="indexer 种子索引源"></a><strong>indexer 种子索引源</strong></h2><p>种子索引来源。</p><h2 id="jackett"><a href="#jackett" class="headerlink" title="jackett"></a><strong>jackett</strong></h2><ul><li>docker: linuxserver/jackett:latest</li><li>老牌选手，种子源非常丰富。</li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819002543.png" alt="image-20210819002541295"></p><h2 id="prowlarr"><a href="#prowlarr" class="headerlink" title="prowlarr"></a><strong>prowlarr</strong></h2><ul><li>indexer manager/proxy</li><li>Docker:  <a href="https://hub.docker.com/r/linuxserver/prowlarr">linuxserver/prowlarr:develop</a></li><li>新开发的，和sonarr, lidarr等结合比jackett 配置更简单</li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819002628.png" alt="image-20210819002626939"></p><h2 id="sonarr动画剧集管理"><a href="#sonarr动画剧集管理" class="headerlink" title="sonarr动画剧集管理"></a><strong>sonarr动画剧集管理</strong></h2><p>管理剧集名，查找剧集种子推送到下载工具</p><p>剧集管理示例图片</p><p>管理剧集目录，剧集日历，提醒你那一天哪些节目播放</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001244.png" alt="img"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819211051.png" alt="sonarr 日历提醒"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001328.png" alt="img"></p><p>自动识别下载对英文剧集支持较好，对于中文资源，结合手动识别下载更佳。</p><h3 id="手动识别下载"><a href="#手动识别下载" class="headerlink" title="手动识别下载"></a><strong>手动识别下载</strong></h3><p>示例图片</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001055.png" alt="img"></p><p>电影使用radarr, 音乐使用lidarr，同样可以自动化过程</p><h2 id="emby海报墙，流媒体中心"><a href="#emby海报墙，流媒体中心" class="headerlink" title="emby海报墙，流媒体中心"></a><strong>emby海报墙，流媒体中心</strong></h2><p>emby作为海报墙，元数据查看器，结合tampermonkey js脚本调用外部potplayer播放减少nas服务器压力，并且得到更好解码性能。手机端也有emby客户端。jellyfin，plex也可以</p><p>js脚本: <a href="https://greasyfork.org/scripts/406811-embylaunchpotplayer/code/embyLaunchPotplayer.user.js">embyLaunchPotplayer</a></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001419.png" alt="img"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819000847.png" alt="img"></p><h2 id="jellyfin-开源版本的emby"><a href="#jellyfin-开源版本的emby" class="headerlink" title="jellyfin 开源版本的emby"></a><strong>jellyfin 开源版本的emby</strong></h2><ul><li>jellyfin硬件解码</li><li>jellyfin中文字体显示方块问题</li></ul><p>上面两个问题见下面compose 配置解决方法</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">jellyfin</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> jellyfin/jellyfin    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> jellyfin    <span class="token key atrule">user</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>PUID<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>PGID<span class="token punctuation">}</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> jellyfin    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">devices</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> /dev/dri<span class="token punctuation">:</span>/dev/dri     <span class="token comment">#使jellfin支持硬件解码</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> PUID=$<span class="token punctuation">{</span>PUID<span class="token punctuation">}</span>      <span class="token punctuation">-</span> PGID=$<span class="token punctuation">{</span>PGID<span class="token punctuation">}</span>      <span class="token punctuation">-</span> TZ=$<span class="token punctuation">{</span>TZ<span class="token punctuation">}</span>      <span class="token comment"># 给一些插件做代理</span>      <span class="token punctuation">-</span> http_proxy=http<span class="token punctuation">:</span>//xxx.17lai.fun<span class="token punctuation">:</span>1089/      <span class="token punctuation">-</span> https_proxy=http<span class="token punctuation">:</span>//xxx.17lai.fun<span class="token punctuation">:</span>1089/    <span class="token comment"># ports:    # 使用nginx 反向代理，所以这里就不用开端口了</span>      <span class="token comment"># - 8098:8096</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> $<span class="token punctuation">{</span>USERDIR<span class="token punctuation">}</span>/jellyfin/config<span class="token punctuation">:</span>/config      <span class="token punctuation">-</span> $<span class="token punctuation">{</span>USERDIR<span class="token punctuation">}</span>/jellyfin/cache<span class="token punctuation">:</span>/cache      <span class="token comment"># 把windowsfonts目录下面的字体都复制到`jellyfin/fonts`目录中</span>      <span class="token punctuation">-</span> $<span class="token punctuation">{</span>USERDIR<span class="token punctuation">}</span>/jellyfin/fonts<span class="token punctuation">:</span>/usr/share/fonts    <span class="token comment"># 给jellyfin装载更多字体，使中文显示正确，不再是方块</span>      <span class="token punctuation">-</span> $<span class="token punctuation">{</span>USERDIR<span class="token punctuation">}</span>/nginx/resolv.conf<span class="token punctuation">:</span>/etc/resolv.conf    <span class="token comment"># 定制dns</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>赋予emby，jellyfin访问硬件加速驱动权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">755</span> /dev/dri<span class="token function">chmod</span> <span class="token number">666</span> /dev/dri/renderD128<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="tmm刮削，改名"><a href="#tmm刮削，改名" class="headerlink" title="tmm刮削，改名"></a><strong>tmm刮削，改名</strong></h2><p>一些命名不规范，不能被emby识别的剧集使用tmm刮削改名，配合硬链接工具，可以不影响做种的前提下改名，该目录。大文件硬链接，小文件直接复制方便刮削，推荐一个自己写的硬链接bash shell脚本，PTtool在nas，linux环境使用更方便</p><p>Github: <a href="https://github.com/appotry/PTtool">appotry/PTtool</a></p><p>Gitee: 镜像 <a href="https://gitee.com/bloodwolf/PTtool">bloodwolf/PTtool</a></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001155.png" alt="img"></p><p>注意：使用v3版本，不要升级到v4，v4版本收费。</p><h2 id="硬链接工具"><a href="#硬链接工具" class="headerlink" title="硬链接工具"></a><strong>硬链接工具</strong></h2><p><strong>Github</strong>: <a href="https://github.com/appotry/PTtool"><strong>PTools</strong></a></p><p><strong>使用教程</strong>： <a href="https://blog.17lai.fun/blogging/pt/2021-07-09-linux-pt-hard-link-tools/"><strong>Linux PT硬链接助手使用教程</strong></a></p><blockquote><p>博主编写的脚本，自推一下，在Nas，linux环境使用的Shell 脚本。</p></blockquote><p>PT hard link tools。方便PT用户硬链接文件，在最大可能情况下节约空间，并保持做种。 小于1M的文件直接复制，方便emby，tmm等工具刮削修改nfo等小文件。 大于1M的文件硬链接到目的目录，可以随意修改文件名，但是不能修改文件内容！</p><p>从此，做种，刮削改名两不误！</p><h2 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a><strong>下载工具</strong></h2><h2 id="Transmissoin"><a href="#Transmissoin" class="headerlink" title="Transmissoin"></a><strong>Transmissoin</strong></h2><ul><li> <a href="https://blog.17lai.fun/qnap/ji-qiao/2021-08-18-transmission-parameter-reference-configuration/"><strong>transmission 使用及其配置</strong></a></li></ul><h2 id="qBittorrent"><a href="#qBittorrent" class="headerlink" title="qBittorrent"></a>qBittorrent</h2><ul><li> <a href="https://blog.17lai.fun/pt/ji-qiao/2021-08-18-qbittorrent-parameter-reference-configuration/"><strong>qBittorrent 参数详细设置教程</strong></a></li></ul><p>都分别有docker版本和套件版本。</p><p>虽然下载工具很多，但IYUU只支持这两个辅种工具，开发者的话是这两个工具的RPC调用接口稳定。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819005826.png" alt="image-20210819005824763"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819005858.png" alt="image-20210819005856669"></p><h2 id="辅种工具IYUU"><a href="#辅种工具IYUU" class="headerlink" title="辅种工具IYUU"></a><strong>辅种工具IYUU</strong></h2><p><strong>Doker版本</strong></p><ul><li><p><a href="https://hub.docker.com/r/iyuucn/iyuuautoreseed">iyuucn/iyuuautoreseed</a></p><blockquote><p>命令行版本</p></blockquote></li><li><p><a href="https://hub.docker.com/r/iyuucn/iyuuplus">iyuucn/iyuuplus</a></p><blockquote><p>图形界面版本，更轻松上手。</p></blockquote></li></ul><p>自动辅种，解放双手，更多魔力，更容易养多站。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819010407.png" alt="image-20210819010337086"></p><h2 id="字幕下载"><a href="#字幕下载" class="headerlink" title="字幕下载"></a><strong>字幕下载</strong></h2><p>想要较好的自动下载字幕，最好用前面介绍的tmm刮削改名之后再使用下面工具。</p><h2 id="subfinder-自动下载字幕"><a href="#subfinder-自动下载字幕" class="headerlink" title="subfinder 自动下载字幕"></a>subfinder 自动下载字幕</h2><ul><li>Docker： <a href="https://hub.docker.com/r/superng6/subfinder">superng6/subfinder</a></li></ul><p>下载完成，刮削后的目录，挂载到subfinder的media目录，就会自动下载字幕。</p><p>字幕下载对电影，英文剧集支持较好。对于一些tv，动画手动下载字幕会更好一些。</p><p>注意：官方的配置文件有问题，时效问题。修改URL到最新即可。</p><h2 id="chinesesubfinder"><a href="#chinesesubfinder" class="headerlink" title="chinesesubfinder"></a>chinesesubfinder</h2><ul><li><p>Docker： <a href="https://hub.docker.com/r/allanpk716/chinesesubfinder">allanpk716/chinesesubfinder</a></p></li><li><p>新开发的中文字幕查找工具，上面那个很久没更新了，这个刚出来。使用nfo里面刮削出来的文件名来匹配字幕。所以就原理来说，这个字幕匹配更准确。</p></li></ul><h2 id="bazarr"><a href="#bazarr" class="headerlink" title="bazarr"></a>bazarr</h2><ul><li>Docker：<a href="https://hub.docker.com/r/linuxserver/bazarr">linuxserver/bazarr</a></li><li>字幕下载管理，配合sonarr, radarr 使用效果更好。对于英文剧集命名规范的支持较好，比如<code>[name]S01E01</code></li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819002816.png" alt="image-20210819002815154"></p><hr><h2 id="使用radarr管理电影"><a href="#使用radarr管理电影" class="headerlink" title="使用radarr管理电影"></a><strong>使用radarr管理电影</strong></h2><p>radarr示例图片<img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001114.png" alt="img"></p><h2 id="使用lidarr管理音乐"><a href="#使用lidarr管理音乐" class="headerlink" title="使用lidarr管理音乐"></a><strong>使用lidarr管理音乐</strong></h2><p>lidarr示例图片<br><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001200.png" alt="img"></p><h2 id="使用docker-compose-管理docker配置文件，一键安装，升级"><a href="#使用docker-compose-管理docker配置文件，一键安装，升级" class="headerlink" title="使用docker compose 管理docker配置文件，一键安装，升级"></a>使用docker compose 管理docker配置文件，一键安装，升级</h2><h2 id="使用portainer管理docker"><a href="#使用portainer管理docker" class="headerlink" title="使用portainer管理docker"></a><strong>使用portainer管理docker</strong></h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001116.png" alt="img"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">version: <span class="token string">'3'</span>services:  portainer-ce:    container_name:  portainer-ce    image: portainer/portainer-ce    command: -H unix:///var/run/docker.sock    restart: always    ports:      - <span class="token number">9300</span>:9000      - <span class="token number">9301</span>:8000    environment:      - <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai      - <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8    volumes:      - /var/run/docker.sock:/var/run/docker.sock      - /share/Container/portainer_data:/data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用watchtower自动升级docker"><a href="#使用watchtower自动升级docker" class="headerlink" title="使用watchtower自动升级docker"></a><strong>使用watchtower自动升级docker</strong></h2><p>使所有软件保持最新最佳状态</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001124.png" alt="img"></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">watchtower</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> watchtower    <span class="token key atrule">image</span><span class="token punctuation">:</span> containrrr/watchtower<span class="token punctuation">:</span>latest    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> TZ=Asia/Shanghai      <span class="token punctuation">-</span> WATCHTOWER_CLEANUP=true      <span class="token punctuation">-</span> WATCHTOWER_SCHEDULE=0 0 1 * * *    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">command</span><span class="token punctuation">:</span> nginx redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述配置文件中<code>volumes</code>使用了绝对路径,使这个容器能访问系统<code>docker.sock</code>目录,用于方便监控容器镜像的版本以便更新.其他的一些环境变量,例如时区,清理旧镜像,定时任务都转换为<code>environment</code>,而特殊的<code>command</code>命令则定义了指定监控<code>nginx</code>和<code>redis</code>两个容器。没有command这一行，默认监控升级所有运行中的docker</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 运行一次，更新所有的容器，并清除旧的容器 </span>docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup --run-once<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#只更新nginx和redis</span>docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup --run-once nginx redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="使用muximux来管理多个docker入口"><a href="#使用muximux来管理多个docker入口" class="headerlink" title="使用muximux来管理多个docker入口"></a><strong>使用muximux来管理多个docker入口</strong></h2><p>主页面</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001210.png"></p><p>配置页面</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819001131.png" alt="img"></p><h2 id="更进阶定制本地域名访问"><a href="#更进阶定制本地域名访问" class="headerlink" title="更进阶定制本地域名访问"></a><strong>更进阶定制本地域名访问</strong></h2><h2 id="nginx-管理域名访问"><a href="#nginx-管理域名访问" class="headerlink" title="nginx 管理域名访问"></a><strong>nginx 管理域名访问</strong></h2><ul><li>Docker: <a href="https://hub.docker.com/r/bloodstar/nginx-purge">bloodstar/nginx-purge</a></li><li>Github： <a href="https://github.com/appotry/nginx-purge-docker">nginx</a></li><li>去掉烦人的端口后缀，实现80,443 端口复用。这个docker 是博主定制功能版。</li><li>配置SSL证书访问，密码等敏感数据从此加密传输。并可以使用http2高级特性。</li><li><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819010407.png" alt="image-20210819010337086"></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">version: <span class="token string">'3'</span>services:  nginxweb:    image: bloodstar/nginx-purge    container_name: <span class="token string">"nginxweb"</span>    hostname: nginxweb    ports:      - <span class="token string">"80:80"</span>      - <span class="token string">"443:443"</span>    restart: always    volumes:      <span class="token comment"># 映射主机目录</span>      - <span class="token variable">${USERDIR}</span>/nginx/conf.d:/etc/nginx/conf.d:ro      - <span class="token variable">${USERDIR}</span>/nginxproxy/certs:/etc/nginx/certs:ro      - <span class="token variable">${USERDIR}</span>/nginx/nginx.conf:/etc/nginx/nginx.conf:ro<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 这里推荐博主制作的nginx docker镜像： <a href="https://hub.docker.com/r/bloodstar/nginx-purge">bloodstar/nginx-purge</a></p><blockquote><p>支持ARM64, ARMV7, AMD64 ，增加 CA 证书，防火墙，brotli, Proxy-cache-purge, htpasswd 支持</p></blockquote><h2 id="DNS-域名管理"><a href="#DNS-域名管理" class="headerlink" title="DNS 域名管理"></a><strong>DNS 域名管理</strong></h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819003924.png" alt="image-20210819003922283"></p><ul><li><p>和nginx 配合使用。 简单的可以直接修改<code>/etc/hosts</code>。</p></li><li><p>DNSCrypt Proxy： 作为DNS前端访问DOH的DNS</p></li><li><p>DNSMasq： 作为DNS后端，连接到DNSCrypt Proxy，并配置本地域名。还可以添加DNS去广告功能，浏览器插件去广告非常消耗CPU和内存，但是在DNS前端去广告，资源消耗低，并一次性解决所有的访问终端（pc，手机，平板）广告问题。</p><blockquote><p>配置一个去广告，本地域名管理工具。</p></blockquote></li></ul><h2 id="Xteve-看IPTV"><a href="#Xteve-看IPTV" class="headerlink" title="Xteve 看IPTV"></a><strong>Xteve 看IPTV</strong></h2><p>Docker: <a href="https://hub.docker.com/r/dnsforge/xteve">dnsforge/xteve</a></p><p>结合Emby， jellyfin直接看iptv。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819010804.png" alt="image-20210819010802918"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p>tmm，jackett，sonarr最好配置代理。否则，刮削，图片墙可能工作不正常。</p></li><li><p>docker最好配置镜像加速，提高安装docker速度</p></li><li><p>一些docker初始化安装，运行、更新时需要访问github，最好配置代理。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用jeckett,sonarr,iyuu,qt,emby打造全自动追剧流程，打造一个完整的HTPC。&lt;/p&gt;
&lt;p&gt;滚动更新： 2021-08-19&lt;/p&gt;
&lt;p&gt;jackett 作为种子源，sonarr剧集管理，bt下载，qbittorrent主力下载，使用iyuu转移</summary>
      
    
    
    
    <category term="Docker" scheme="https://blog.17lai.fun/categories/Docker/"/>
    
    <category term="PT" scheme="https://blog.17lai.fun/categories/Docker/PT/"/>
    
    
    <category term="Emby" scheme="https://blog.17lai.fun/tags/Emby/"/>
    
    <category term="Sonarr" scheme="https://blog.17lai.fun/tags/Sonarr/"/>
    
    <category term="Jeckett" scheme="https://blog.17lai.fun/tags/Jeckett/"/>
    
    <category term="Portainer" scheme="https://blog.17lai.fun/tags/Portainer/"/>
    
    <category term="Watchtower" scheme="https://blog.17lai.fun/tags/Watchtower/"/>
    
    <category term="Nginx" scheme="https://blog.17lai.fun/tags/Nginx/"/>
    
    <category term="DNSMasq" scheme="https://blog.17lai.fun/tags/DNSMasq/"/>
    
    <category term="DNSCrypt" scheme="https://blog.17lai.fun/tags/DNSCrypt/"/>
    
  </entry>
  
  <entry>
    <title>QNAP 修改应用启动顺序</title>
    <link href="https://blog.17lai.fun/qnap/ji-qiao/2021-09-01-qnap-change-app-start-sequence/"/>
    <id>https://blog.17lai.fun/qnap/ji-qiao/2021-09-01-qnap-change-app-start-sequence/</id>
    <published>2021-08-31T18:25:00.000Z</published>
    <updated>2021-09-11T10:49:03.504Z</updated>
    
    <content type="html"><![CDATA[<ul><li>关于本blog，<strong>图床</strong>一般使用<strong>github</strong>，已经配置了CDN，如果图片还是未显示请自行代理解决</li></ul><p>有时候，你想修改一下安装的应用启动顺序。该怎么做了？</p><p>在无意中，博主发现了这个技巧。配置方法如下：</p><h2 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0120210901233948.png" alt="image-20210901233946469"></p><h2 id="配置文件内容"><a href="#配置文件内容" class="headerlink" title="配置文件内容"></a>配置文件内容</h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/09/0120210901234357.png" alt="image-20210901234355622"></p><p>RC_Number是qnap配置应用启动顺序，数字越小优先级越高。看着100差不多就是用户程序高优先级上限了。如此，你可以把一些应用调整高优先级启动，例如代理配置v2ray, dns配置DNSCrypt Proxy和DNSMasq，以实现其它应用采用这些服务。把一些应用调整低优先级，如qbittorrent等。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> /etc/config -alhlrwxrwxrwx <span class="token number">1</span> admin administrators <span class="token number">21</span> <span class="token number">2021</span>-08-31 <span class="token number">17</span>:20 /etc/config -<span class="token operator">&gt;</span> /mnt/HDA_ROOT/.config/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="qnap使用init-v系统。"><a href="#qnap使用init-v系统。" class="headerlink" title="qnap使用init v系统。"></a>qnap使用init v系统。</h2><p>如果改为systemd 系统启动，可以加快启动速度。一些应用延迟加载技术看起来也没做好。用户这里修改RC_Number 可以手动实现一些延迟加载功能。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/init.d/QTransmission3.sh start         <span class="token comment">#启动</span>/etc/init.d/QTransmission3.sh stop            <span class="token comment">#停止</span>/etc/init.d/QTransmission3.sh restart        <span class="token comment">#重启</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="原创首发"><a href="#原创首发" class="headerlink" title="原创首发"></a>原创首发</h2><p>可以转载，但必须完整转载，并且带上原始地址链接。</p><hr>]]></content>
    
    
    <summary type="html">QNAP 修改应用启动顺序</summary>
    
    
    
    <category term="QNAP" scheme="https://blog.17lai.fun/categories/QNAP/"/>
    
    <category term="技巧" scheme="https://blog.17lai.fun/categories/QNAP/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="QNAP" scheme="https://blog.17lai.fun/tags/QNAP/"/>
    
    <category term="启动" scheme="https://blog.17lai.fun/tags/%E5%90%AF%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>几种常用管理模型和方法</title>
    <link href="https://blog.17lai.fun/guan-li/mo-xing/2021-08-18-several-common-management-models-and-methods/"/>
    <id>https://blog.17lai.fun/guan-li/mo-xing/2021-08-18-several-common-management-models-and-methods/</id>
    <published>2021-08-18T11:25:00.000Z</published>
    <updated>2021-09-11T11:07:07.954Z</updated>
    
    <content type="html"><![CDATA[<p>这些只是基本的工具，你需要了解。但是，和行业相关的知识更重要。就像做数学题，把一堆错综复杂的线索中归纳总结出来问题，提出解决方法，这中间需要丰富的行业知识，这个没法速成。总结完后，执行阶段，就像数学加减乘除一样，这些是基本的工具和方法。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020449.jpeg"></p><h2 id="PDCA原则意义"><a href="#PDCA原则意义" class="headerlink" title="PDCA原则意义"></a><strong>PDCA原则意义</strong></h2><p>Plan：制定目标与计划；</p><p>Do：任务展开，组织实施；</p><p>Check：对过程中的关键点和最终结果进行检查；</p><p>Action：纠正偏差，对成果进行标准化，并确定新的目标，制定下一轮计划。</p><p>意义：每一项工作，都是一个pdca循环，都需要计划、实施、检查结果，并进一步进行改进，同时进入下一个循环，只有在日积月累的渐进改善中，才可能会有质的飞跃，才可能取得完善每一项工作，完善自己的人生。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020557.jpeg"></p><blockquote><h2 id="PDCA原则的八大步骤"><a href="#PDCA原则的八大步骤" class="headerlink" title="PDCA原则的八大步骤"></a><strong>PDCA原则的八大步骤</strong></h2></blockquote><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020456.jpeg"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020603.jpeg"></p><h2 id="5W2H分析法的意义"><a href="#5W2H分析法的意义" class="headerlink" title="5W2H分析法的意义"></a><strong>5W2H分析法的意义</strong></h2><p>What：工作的内容和达成的目标；</p><p>Why：做这项工作的原因；</p><p>Who：参加这项工作的具体人员，以及负责人；</p><p>When：在什么时间、什么时间段进行工作；</p><p>Where：工作发生的地点 ；</p><p>Which：哪一种方法或途径；</p><p>How：用什么方法进行；</p><p>How much：需要多少成本？</p><p>意义：做任何工作都应该从6W2H来思考，这有助于我们的思路的条理化，杜绝盲目性。我们的汇报也应该用6W2H，能节约写报告及看报告的时间。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020503.jpeg"></p><blockquote><p><strong>5W2H分析法的内容</strong></p></blockquote><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020610.jpeg"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020509.jpeg"></p><h2 id="SMART原则的意义"><a href="#SMART原则的意义" class="headerlink" title="SMART原则的意义"></a><strong>SMART原则的意义</strong></h2><p>Specific 具体的；</p><p>Measurable 可测量的；</p><p>Attainable 可达到的；</p><p>Relevant 相关的；</p><p>Time based 时间的；</p><p>意义：人们在制定工作目标或者任务目标时，考虑一下目标与计划是不是SMART化的。只有具备SMART化的计划才是具有良好可实施性的，也才能指导保证计划得以实现。</p><p>有的又如此解释此原则：</p><p>——S代表具体(Specific)，指绩效考核要切中特定的工作指标，不能笼统；</p><p>——M代表可度量(Measurable)，指绩效指标是数量化或者行为化的，验证这些绩效指标的数据或者信息是可以获得的；</p><p>——A代表可实现(Attainable)，指绩效指标在付出努力的情况下可以实现，避免设立过高或过低的目标；</p><p>——R代表现实性(realistic)，指绩效指标是实实在在的，可以证明和观察；</p><p>——T代表有时限(time bound)，注重完成绩效指标的特定期限。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020516.jpeg"></p><blockquote><p><strong>SMART原则实施要领</strong></p></blockquote><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020517.jpeg"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020523.jpeg"></p><h2 id="STAR法则的意义"><a href="#STAR法则的意义" class="headerlink" title="STAR法则的意义"></a><strong>STAR法则的意义</strong></h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020529.jpeg"></p><blockquote><p><strong>STAR法则的内容</strong></p></blockquote><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020621.jpeg"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020537.jpeg"></p><h2 id="SWOT分析模型的意义"><a href="#SWOT分析模型的意义" class="headerlink" title="SWOT分析模型的意义"></a><strong>SWOT分析模型的意义</strong></h2><p>Strengths：优势</p><p>Weaknesses：劣势</p><p>Opportunities：机会</p><p>Threats：威胁</p><p>意义：帮您清晰地把握全局，分析自己在资源方面的优势与劣势，把握环境提供的机会，防范可能存在的风险与威胁，对我们的成功有非常重要的意义。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020628.jpeg"></p><blockquote><p><strong>SWOT分析模型组合</strong></p></blockquote><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020706.jpeg"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020634.jpeg"></p><h2 id="GROW教练模型的意义"><a href="#GROW教练模型的意义" class="headerlink" title="GROW教练模型的意义"></a><strong>GROW教练模型的意义</strong></h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020544.jpeg"></p><blockquote><p><strong>GROW教练模型的内容</strong></p></blockquote><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819020641.jpeg"></p><h2 id="时间管理-重要与紧急"><a href="#时间管理-重要与紧急" class="headerlink" title="时间管理-重要与紧急"></a><strong>时间管理-重要与紧急</strong></h2><p>A、重要且紧急</p><p>紧急状况</p><p>迫切的问题</p><p>限期完成的工作</p><p>你不做其他人也不能做</p><p>B、重要不紧急</p><p>准备工作</p><p>预防措施</p><p>价值观的澄清</p><p>计划</p><p>人际关系的建立</p><p>真正的再创造</p><p>增进自己的能力</p><p>C、紧急不重要</p><p>造成干扰的事、电话、</p><p>信件、报告</p><p>会议</p><p>许多迫在眉捷的急事</p><p>符合别人期望的事</p><p>D、不重要不紧急</p><p>忙碌琐碎的事</p><p>广告函件</p><p>电话</p><p>逃避性活动</p><p>等待时间</p><p>优先顺序=重要性*紧迫性在进行时间安排时，应权衡各种事情的优先顺序，要学会“弹钢琴”；对工作要有前瞻能力，防患于未然，如果总是在忙于救火，那将使我们的工作永远处理被动之中。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1920210819015812.png" alt="揭秘人生七工具：SWOT、PDCA、6W2H、SMART、WBS、时间管理、OKR"></p><h2 id="任务分解法-WBS"><a href="#任务分解法-WBS" class="headerlink" title="任务分解法[WBS]"></a><strong>任务分解法[WBS]</strong></h2><p>即Work Breakdown Structure，如何进行WBS分解：目标→任务→工作→活动</p><p><strong>WBS分解的原则：</strong></p><p>将主体目标逐步细化分解，最底层的任务活动可直接分派到个人去完成；每个任务原则上要求分解到不能再细分为止。</p><p><strong>WBS分解的方法：</strong></p><p>至上而下与至下而上的充分沟通；</p><p>一对一个别交流；</p><p>小组讨论。</p><p><strong>WBS分解的标准：</strong></p><p>分解后的活动结构清晰；</p><p>逻辑上形成一个大的活动；</p><p>集成了所有的关键因素包含临时的里程碑和监控点；</p><p>所有活动全部定义清楚。</p><p>意义：学会分解任务，只有将任务分解得足够细，您才能心里有数，您才能有条不紊地工作，您才能统筹安排您的时间表。</p><h2 id="OKR，目标与关键结果"><a href="#OKR，目标与关键结果" class="headerlink" title="OKR，目标与关键结果"></a><strong>OKR，目标与关键结果</strong></h2><p>OKR 实施过程中起草制定好目标和关键结果是非常重要的一环，有效的 OKR 制定需要满足 SMART 原则——明确的、可衡量的、可实现的、有相关性和有时限性。</p><p>目标（O）回答的是“我们想做什么”的问题，是定性的，要求能够鼓舞人心，激发团队共鸣。</p><p>关键结果（KR）回答的是“我们如何知道自己是否达成了目标要求”的问题，是定量的，设计 KR 最具挑战的部分是如何把目标中定性的描述抽象为定量的表示。</p><p>最后：只有掌握了正确科学的工作方法，才可能在未来的工作中，做到事半功倍的效果，才能更加从容且有重点的开展工作。好的工作方法，是成功的一半！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这些只是基本的工具，你需要了解。但是，和行业相关的知识更重要。就像做数学题，把一堆错综复杂的线索中归纳总结出来问题，提出解决方法，这中间需要丰富的行业知识，这个没法速成。总结完后，执行阶段，就像数学加减乘除一样，这些是基本的工具和方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;h</summary>
      
    
    
    
    <category term="管理" scheme="https://blog.17lai.fun/categories/%E7%AE%A1%E7%90%86/"/>
    
    <category term="模型" scheme="https://blog.17lai.fun/categories/%E7%AE%A1%E7%90%86/%E6%A8%A1%E5%9E%8B/"/>
    
    
    <category term="管理" scheme="https://blog.17lai.fun/tags/%E7%AE%A1%E7%90%86/"/>
    
    <category term="PDCA" scheme="https://blog.17lai.fun/tags/PDCA/"/>
    
    <category term="5W2H" scheme="https://blog.17lai.fun/tags/5W2H/"/>
    
    <category term="SMART" scheme="https://blog.17lai.fun/tags/SMART/"/>
    
    <category term="SWOT" scheme="https://blog.17lai.fun/tags/SWOT/"/>
    
    <category term="GROW" scheme="https://blog.17lai.fun/tags/GROW/"/>
    
    <category term="OKR" scheme="https://blog.17lai.fun/tags/OKR/"/>
    
    <category term="WBS" scheme="https://blog.17lai.fun/tags/WBS/"/>
    
  </entry>
  
  <entry>
    <title>qBittorrent 参数详细设置教程</title>
    <link href="https://blog.17lai.fun/pt/ji-qiao/2021-08-18-qbittorrent-parameter-reference-configuration/"/>
    <id>https://blog.17lai.fun/pt/ji-qiao/2021-08-18-qbittorrent-parameter-reference-configuration/</id>
    <published>2021-08-18T10:25:00.000Z</published>
    <updated>2021-09-11T10:50:54.926Z</updated>
    
    <content type="html"><![CDATA[<p>全文将以目前的最新版v4.2.1为例，进行参数设置，老版本某些功能不太一致，请知悉。特别鸣谢 原创者：Evine！</p><h2 id="行为参数"><a href="#行为参数" class="headerlink" title="行为参数"></a>行为参数</h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818154449.jpeg" alt="qBittorrent参数详细设置教程"></p><h2 id="下载参数"><a href="#下载参数" class="headerlink" title="下载参数"></a>下载参数</h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818154453.jpeg" alt="qBittorrent参数详细设置教程"></p><h2 id="连接参数"><a href="#连接参数" class="headerlink" title="连接参数"></a>连接参数</h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818154528.jpeg" alt="qBittorrent参数详细设置教程"></p><h2 id="速度参数"><a href="#速度参数" class="headerlink" title="速度参数"></a>速度参数</h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818154500.jpeg" alt="qBittorrent参数详细设置教程"></p><h2 id="BT参数"><a href="#BT参数" class="headerlink" title="BT参数"></a>BT参数</h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818154539.jpeg" alt="qBittorrent参数详细设置教程"></p><h2 id="RSS设置"><a href="#RSS设置" class="headerlink" title="RSS设置"></a>RSS设置</h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818154502.png" alt="qBittorrent参数详细设置教程"></p><h2 id="web参数"><a href="#web参数" class="headerlink" title="web参数"></a>web参数</h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818154508.jpeg" alt="qBittorrent参数详细设置教程"></p><h2 id="高级参数"><a href="#高级参数" class="headerlink" title="高级参数"></a>高级参数</h2><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818154558.jpeg" alt="qBittorrent参数详细设置教程"></p><h3 id="关于磁盘缓存的补充说明："><a href="#关于磁盘缓存的补充说明：" class="headerlink" title="关于磁盘缓存的补充说明："></a><strong>关于磁盘缓存的补充说明：</strong></h3><p>经常有人吐槽qB特别吃内存，个人猜测应该是磁盘缓存设置不正确导致的。磁盘缓存设置过小，磁盘缓存到期间隔过长，先下载的文件块来不及写入硬盘，新的文件块又到了，可能就会导致内存爆掉甚至磁盘I/O错误。个人建议：在进行高速下载时，适当将磁盘缓存调高，磁盘缓存到期间隔调低（下载时间隔越低写入越频繁，自己根据电脑的资源占用情况调整最适合自己的值）。实在不知道怎么调的，就干脆把磁盘缓存设置为-1（自动）好了，还不行，就把磁盘缓存到期间隔再调低一些。举一个例子，比如设置2048MiB磁盘缓存、300s磁盘缓存到期间隔时，当下载速度为50MiB/s的时候，300s的时间总共可以下载15000MiB，早就远远超过2048MiB了，不爆内存、不I/O错误才怪。所以当达到这个下载速度的时候，在磁盘缓存不变的情况下，根据简单的除法（磁盘缓存除以下载速度）可知，磁盘缓存到期间隔就应该设置到40s以下了。</p><p>qB在正常运行后，其占用的内存会比你所设置的磁盘缓存多几百M。所有的参数没有标准答案，一切都得根据你机子的本身属性以及实际的使用场景（比如CPU性能、内存大小、硬盘写入速度、下载速度等）来设置，建议大家多试验。</p><h3 id="关于TCP、UTP的补充说明："><a href="#关于TCP、UTP的补充说明：" class="headerlink" title="关于TCP、UTP的补充说明："></a><strong>关于TCP、UTP的补充说明：</strong></h3><p>TCP是Internet上最常用的协议，是一种面向连接的、可靠的、基于字节流的传输层通信协议。TCP的优势在于双向互动机制兼顾数据传输的完整性、可控制性和可靠性，但复杂的校验与控制机制也使其没有UDP传输效率高。</p><p>UDP协议与TCP协议一样用于处理数据包，是一种无连接的协议。UDP的缺点是不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。UDP优势在于带宽占用小、传输效率和连接成功率高，有益于内网用户（如通过UDP内网穿透UDP Hole Punching连接），但UDP与TCP协议相比也存在无反向确认机制、无流量和序列控制等弊端。</p><p>uTP(Micro Transport Protocol)是一种正在标准化的开放式BT协议，主要功能是提高宽带使用效率、减少网络问题。在减缓网络延迟和拥堵的同时最大化网络吞吐量、克服多数防火墙和NAT的阻碍，增强网络穿透和传输效率，同时增益流量控制，这对BT用户和ISP都是互利的。uTP虽基于UDP协议但有所不同，uTP通过拥堵控制算法（Ledbat）可限制延时，当延时不严重时可最大限度利用带宽，并能通过uTP提供的信息用于选择TCP连接的传输率，即使在不作限速设置的情况下，也能减少网络拥堵产生，当用户端之间都启用uTP时，可见明显的传输速率提升。内网无法实现端口映射的用户启用uTP，可以改善与网外用户的连接。</p><p>使用uTP进行连接的用户，其标志将包含“P”。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;全文将以目前的最新版v4.2.1为例，进行参数设置，老版本某些功能不太一致，请知悉。特别鸣谢 原创者：Evine！&lt;/p&gt;
&lt;h2 id=&quot;行为参数&quot;&gt;&lt;a href=&quot;#行为参数&quot; class=&quot;headerlink&quot; title=&quot;行为参数&quot;&gt;&lt;/a&gt;行为参数&lt;/h2&gt;</summary>
      
    
    
    
    <category term="PT" scheme="https://blog.17lai.fun/categories/PT/"/>
    
    <category term="技巧" scheme="https://blog.17lai.fun/categories/PT/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="QNAP" scheme="https://blog.17lai.fun/tags/QNAP/"/>
    
    <category term="PT" scheme="https://blog.17lai.fun/tags/PT/"/>
    
    <category term="BT" scheme="https://blog.17lai.fun/tags/BT/"/>
    
    <category term="qbittorrent" scheme="https://blog.17lai.fun/tags/qbittorrent/"/>
    
  </entry>
  
  <entry>
    <title>qnap IO 错误消除</title>
    <link href="https://blog.17lai.fun/qnap/ji-qiao/2021-08-18-io-error-correct/"/>
    <id>https://blog.17lai.fun/qnap/ji-qiao/2021-08-18-io-error-correct/</id>
    <published>2021-08-18T09:25:00.000Z</published>
    <updated>2021-09-11T10:48:52.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="处理步骤"><a href="#处理步骤" class="headerlink" title="处理步骤"></a>处理步骤</h2><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>先备份数据，rsync比HBS3好用多了。</p><h2 id="如果没有坏块"><a href="#如果没有坏块" class="headerlink" title="如果没有坏块"></a>如果没有坏块</h2><p>如果没有坏块，就在下图位置扫描坏块，扫描完，自动清除异常标志</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818152952.png" alt="image-20210818152950844"></p><h2 id="如果有坏块"><a href="#如果有坏块" class="headerlink" title="如果有坏块"></a>如果有坏块</h2><h3 id="坏块修复"><a href="#坏块修复" class="headerlink" title="坏块修复"></a>坏块修复</h3><p>如果有坏块，可以使用 “DiskGenius”扫描修复</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818162038.png" alt="image-20210818162036543"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818162057.png" alt="image-20210818162055694"></p><h2 id="强制消除异常标志"><a href="#强制消除异常标志" class="headerlink" title="强制消除异常标志"></a>强制消除异常标志</h2><blockquote><ol><li>開啟SSH</li><li>登入 console</li><li><code># sed -i '/pd_err_wwn_/d' /mnt/HDA_ROOT/.conf</code></li><li>重啟 NAS.</li></ol></blockquote><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>为了安全和稳定性，有坏块后，备份数据，使用DiskGenius修复坏块，（只能修复逻辑坏块，不能修复物理坏块），然后最好全盘格式化再使用。</p><p>SDD可以使用低级格式化，但会全盘减少一次写寿命。尽量少用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;处理步骤&quot;&gt;&lt;a href=&quot;#处理步骤&quot; class=&quot;headerlink&quot; title=&quot;处理步骤&quot;&gt;&lt;/a&gt;处理步骤&lt;/h2&gt;&lt;h2 id=&quot;备份&quot;&gt;&lt;a href=&quot;#备份&quot; class=&quot;headerlink&quot; title=&quot;备份&quot;&gt;&lt;/a&gt;备份&lt;/h</summary>
      
    
    
    
    <category term="QNAP" scheme="https://blog.17lai.fun/categories/QNAP/"/>
    
    <category term="技巧" scheme="https://blog.17lai.fun/categories/QNAP/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="QNAP" scheme="https://blog.17lai.fun/tags/QNAP/"/>
    
    <category term="SSD" scheme="https://blog.17lai.fun/tags/SSD/"/>
    
    <category term="HDD" scheme="https://blog.17lai.fun/tags/HDD/"/>
    
  </entry>
  
  <entry>
    <title>Debian Lenny Laptop安装记录</title>
    <link href="https://blog.17lai.fun/linux/system/2021-08-18-debian-lenny-laptop-installation-records/"/>
    <id>https://blog.17lai.fun/linux/system/2021-08-18-debian-lenny-laptop-installation-records/</id>
    <published>2021-08-18T08:25:00.000Z</published>
    <updated>2021-09-11T10:51:17.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Debian-Lenny-Laptop安装记录"><a href="#Debian-Lenny-Laptop安装记录" class="headerlink" title="Debian Lenny Laptop安装记录"></a>Debian Lenny Laptop安装记录</h2><p>这是一篇非常有历史的文章了，写了十多年了。只在个人google doc中公开共享过。时至今日，参考价值还是非常大的。</p><p>目的是完全采用Linux系统来完成所有工作。</p><p>这篇文章当年我写了一周，每个步骤都是实践后仔细记录的。</p><h2 id="摘-要"><a href="#摘-要" class="headerlink" title="摘 要"></a>摘 要</h2><p>​        在现在电子信息化社会中，网络越来越重要，各种电子商务，网上银行，网络交友，SNS社区等越来越红火，各国政府都在进行电子信息化建设，准备网上办公，无纸化作业。信息化就是现代化的思想已经深入人心，然而信息化建设的基础硬件和软件：</p><p>   硬件：CPU、主板、内存，硬盘等</p><p>   软件：操作系统（Operate System如Linux,Windows,Mac OS等），浏览器(如Firefox，Opera，Maxthon，IE等)，文档处理（OpenOffice,WPS,Word等），媒体播放（Mplayer,Realplayer等），以及其它软件工具。</p><p>则是其中的重中之重，电子信息化社会信息安全最为关键。因为你不知道微软的Windows中给你预留了多少漏洞和后门，你不知道Intel或者AMD在它们生产的硬件中留下了什么缺陷，了解一点软硬件知识的人都知道，软件后门可以使微软进入你的电脑如同自己的电脑一样，微软可以看到所有你的文档，照片，工作生活的数据，你的电脑中的数据对微软而言没有任何秘密而言；硬件缺陷同样可以做后门用，甚至发送一段短码瞬间可以使你的电脑崩溃。可见安全多么重要，那么如何提高安全了？</p><p>​        答案就是使用开源！开源早已经形成了一套完整的套件，上面介绍的软件中每样的地一种都是开源工具，完全免费！而且开放源代码，你可以知道每行代码的作用，后门、间谍将不复存在！你常用的Windows工具每样Linux都有替代品，很多工具甚至本来就是Linux中移植到Windows中来的，如暴风影音，比特精灵，Vim，Emacs等。</p><p>​        本文简单的介绍了开源操作系统Debian的安装和配置，包括操作系统的安装、配置，常用工具的安装等详细过程，下文所叙全部经过测试，稳定运行。通过本文，您可以了解Linux操作系统大体组成结构，并且获得一部完全自己定制的操作系统！</p><p>[TOC]</p><h2 id="一：前言"><a href="#一：前言" class="headerlink" title="一：前言"></a>一：前言</h2><h3 id="从今天开始做个Debianer"><a href="#从今天开始做个Debianer" class="headerlink" title="从今天开始做个Debianer"></a>从今天开始做个Debianer</h3><p>   刚从OpenSuSE 换过来的，感觉Debian非常强大。SuSE的yast2真的非常强大，刚离开yast感觉很痛苦，Novll的yast系统设置几乎在里面实现，它包括了系统硬件，软件设置，网络配置，服务器配置，各种系统设置等等。它把很多底层配置都接管了，使用SuSE的用户会发现SuSE比其他Linux发行版少很多配置文件。SuSE的yast2有命令行和图形界面两种操作方式，还有zypper这种完全命令行包管理工具。不过Debian的apt包管理更加强大，比zypper强大多了。</p><p>   Debian以定制性非常强，运行稳定而著称，是最符合GNU精神的发行版，对各种硬件构架都支持，是世界上唯一一种几乎可以在所有硬件平台运行的操作系统。Ubuntu就是在Debian的基础上发行的衍生版。但是本人使用感觉Ubuntu的感觉不好，Ubuntu就像一个在Debian testing基础上优化过得Debian一样，而且阉割的厉害。不过正由于阉割的厉害，把用户管理的东西Ubuntu都自己设置了，Ubuntu才成为最容易操作的Linux操作系统，而且也是最流行的Linux操作系统。不过Ubuntu限制用户操作非常严，感觉这样很大程度上失去了Linux的自由，可定制等特性。对Linux新人来说一开始使用Debian会非常困难的，强烈建议对Linux包管理，运行结构了解大概后再开始使用Debian。</p><p>推荐的发行版有：</p><p><strong>OpenSuSE</strong>：优点是从Windows转过来几乎马上就可以上手，用户不需要改变多少使用习惯，并且图形界面非常华丽，号称是最华丽的Linux操作系统。默认的就比Windows XP漂亮多了，开启Compiz Fusion后的3D特效比Vista,Win 7都要漂亮。对一般用户家庭使用和办公使用完全可以满足要求。缺点就是国内源很少，官方源在国外比较慢，速度也不保证，升级只能是半夜了，不过采用DVD安装的话就没多大问题。SuSE的中文社区不完善也是一大缺点。</p><p><strong>Fedora</strong>：著名的Redhat公司出品，国内源非常多，中文化非常好，中文社区也非常活跃，很多问题可以直接中文搜出结果。缺点是对习惯Windows的用户来说，一开始就使用Fedora对大家的入门门坎比OpenSuSE高。</p><p><strong>Ubuntu</strong>：最流行的Linux发行版，使用非常简单，中文社区建设的非常好，源很多，缺点就是阉割的太厉害了。感觉这样的版本对深入了解Linux不好，个人看法，不过对非技术型用户使用到是个不错的选择。</p><p><strong>Debian</strong>是最自由，定制性最高的发行版，当然对用户的入门要求就更高了。但是，一经你上手了，那么就再别无他求。Debian的好是谁用谁知道！</p><p>刚用上Debian，总结下，下面可能有错误之处，希望大家指出来。参考了很多人的文章下来的，对他们表示感谢！</p><p>注意：本教程为</p><h2 id="二：安装Debian之前的准备工作"><a href="#二：安装Debian之前的准备工作" class="headerlink" title="二：安装Debian之前的准备工作"></a>二：安装Debian之前的准备工作</h2><p>●   强烈建议新人刚开始装不要按《 Debian etch 简要安装指南》那篇文章来，特别是笔记本用户，除非你对你的硬件非常熟悉。建议大家安装的时候选择图形界面安装。安装的时候选择图形界面，把Base system,Loptop,Desktop都安装上，这样会少很多麻烦的，它装了多余的东西和服务还是等进入桌面后再自己删除比较好。发现这样安装还是非常干净的，比之SuSE，Fedora之类的发行版默认安装东西要少多了。</p><p>●   阵痛了好几天了，这几天重装了好多次Debian了，现在终于差不多了，3d打开了，系统很稳定。</p><p>笔记本是Dell Inspiron6400。</p><p>●   强烈建议大家装机之前看看debian的官方wiki</p><p>例如我，就看下面这个：</p><p><a href="http://wiki.debian.org/InstallingDebianOn/Dell/Inspiron6400/lenny">http://wiki.debian.org/InstallingDebianOn/Dell/Inspiron6400/lenny</a></p><p>●   大家的笔记本其他型号的话到下面网址找对应的型号</p><p><a href="http://wiki.debian.org/InstallingDebianOn/">http://wiki.debian.org/InstallingDebianOn/</a></p><p>上面网址的参考下就可以了，有些问题很多种解决方法的。</p><h2 id="三：开始安装Debian"><a href="#三：开始安装Debian" class="headerlink" title="三：开始安装Debian"></a>三：开始安装Debian</h2><h3 id="3-1：安装前的准备和安装方法选择"><a href="#3-1：安装前的准备和安装方法选择" class="headerlink" title="3.1：安装前的准备和安装方法选择"></a>3.1：安装前的准备和安装方法选择</h3><p>  debian提供了很多安装方法，有网络安装，光盘安装，U盘安装，硬盘安装等多种方法。这里介绍下载光盘安装，这是对大多数人来说最为方便的安装发放，下载第一张光盘CD或者DVD镜像准备刻录安装。</p><p>  注意：先备份好重要的资料！比如copy到移动硬盘，或者其它主机上等以免错误的操作造成不必要的损失。</p><p>  进入Bios中设置光驱第一启动，放入光盘，等加载内核界面过去后，就进入安装界面了。</p><h3 id="3-2：开始安装Debian"><a href="#3-2：开始安装Debian" class="headerlink" title="3.2：开始安装Debian"></a>3.2：开始安装Debian</h3><ol><li><p>   选择安装程序使用的语言，推荐选择English，选中文会装zhcon。</p></li><li><p>   选择国家，首先选择 other ，然后在选择 Asia ，最后选上 China 。</p></li><li><p>   选择键盘，直接默认就好了，也就是 American English ，如果你的不是美式键盘，就选择相应的键盘。</p></li><li><p>   设置网络，如果是 DHCP ，填上主机名和所在的域名就好了，如果是静态 IP ，根据相应的填上就 OK。这里有无线网卡的朋友就有些郁闷了，记得先去下载你的无线驱动的deb包，放到u盘根目录插上usb结构，系统会自动安装你的无线驱动。（但是这里安装好了还是无法dhcp连上无线，我采用有线装的，不知道谁这里无线配成功了。装完系统后再使用＃apt-get install firmware-iwlwifi 也可以。）</p></li><li><p>  磁盘分区，根据个人的情况进行。这里要小心了，如果你有重要的资料的话，推荐手动分区。</p></li><li><p>  对分区进行确认后就开始安装基本的系统，等待一段时间。</p></li><li><p>  然后就是设置 root 账户的密码，以及日常使用的一个账户名称和密码。</p></li><li><p>  账户设置好后对源进行设置，这里推荐手工输入。选择最上面一项。</p></li></ol><p>   ○   输入：debian.cn99.com 或者：mirrors.163.com</p><p>   ○   目录就是/debian/   不需要改动。这两个其实都是一个源，我看到主机ip地址一样。这个应该是国内最快的源了。至少对大部分人来说。</p><ol start="9"><li><p>  根据个人的情况选择安装软件，推荐选择base system,laptop,desktop。</p></li><li><p> 安装中，看网络状况时间不同，等待………。</p></li><li><p> 安装 GRUB ，Yes安装到 MBR。</p></li><li><p>安装完毕，最后 Continue 回车重启进入期待已久的 Debian Lenny GNU/Linux。</p></li></ol><h2 id="四：配置Debia的基本中文操作环境"><a href="#四：配置Debia的基本中文操作环境" class="headerlink" title="四：配置Debia的基本中文操作环境"></a>四：配置Debia的基本中文操作环境</h2><p>他哦难过上面二、三步，到现在你已经获得了一个基本的Debian Lenny操作系统了。但是到现在为止说能够顺手使用还太早，在正是使用之前还有几个事情需要做。</p><p>（注意＃号提示的是root用户权限）</p><h3 id="4-1：中文语言环境"><a href="#4-1：中文语言环境" class="headerlink" title="4.1：中文语言环境"></a>4.1：中文语言环境</h3><h4 id="4-1-1-重新配置locale，添加中文locale"><a href="#4-1-1-重新配置locale，添加中文locale" class="headerlink" title="4.1.1:重新配置locale，添加中文locale"></a>4.1.1:重新配置locale，添加中文locale</h4><p>​        选择以下locale，以下为推荐语言环境，用户可以根据自己语言习惯自由选择：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#dpkg-reconfigure locales</span>en_US ISO-8859-1en_US.UTF-8 UTF-8zh_CN GB2312zh_CN.GB18030 GB18030zh_CN.GBK GBKzh_CN.UTF-8 UTF-8zh_HK BIG5-HKSCSzh_HK.UTF-8 UTF-8zh_TW BIG5zh_TW.EUC-TW EUC-TWzh_TW.UTF-8 UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选择默认的locale为en_US.UTF-8或者 zh_CN.UTF-8。</p><h4 id="4-1-2-安装localepurge"><a href="#4-1-2-安装localepurge" class="headerlink" title="4.1.2:安装localepurge"></a>4.1.2:安装localepurge</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">＃apt-get <span class="token function">install</span> localepurge<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​       在对话框中选择你要保留使用的locale，默认情况下它已经选好了你现前设置的那些locale，不过还是请仔细确认后再回车。当然你也可以使用 dpkg-reconfigure localepurge 来进行详细的配置。</p><p>●   清除你用不着的locale，让他们释放你的磁盘空间</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">＃localepurge<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​       以后你不管安装什么软件，它都将自动帮你清除那些没用的locale。清除完，它会提示你释放了多少磁盘空间。当然你可以配置它让它显示清除了哪些locale。</p><p>​       Linux下面还有其他工具清理,如BleachBit，这是一款专为Linux 设计的系统清理工具。使用BleachBit，你可以清理系统中的缓存、不要的语言文件，历史、临时文件、cookies 等不需要的东西，这样可以释放你空间。推荐，不过Stable的源中没有该包，需要手动下载安装。</p><h3 id="4-2-实现root用户登录自动Tab补全"><a href="#4-2-实现root用户登录自动Tab补全" class="headerlink" title="4.2:实现root用户登录自动Tab补全"></a>4.2:实现root用户登录自动Tab补全</h3><p>修改 .bashrc ，打开bash_completion，让apt-get install 在ROOT 登录的情况下自动补全，其他用户自动设置好了的，不用修改。你可以先用VI打开 /etc/bash.bashrc ,在最下面用命令模式下的V 再按上下左右键老选择，按y键复制，（默认打开VI就处于命令模式。i a o s键插入，编辑模式，ESC返回，：q! 退出。） 然后 vi ~/.bashrc 按p 键粘贴。最后象这样</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> -f /etc/bash_completion <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span><span class="token builtin class-name">.</span> /etc/bash_completion<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当然你也可以用nano ,更简单。要复制功能,那么apt-get install gpm 然后 /etc/init.d/gpm start ，现在动下鼠标。是不是在动了，gpm是一个控制台下的鼠标服务。用鼠标左击拖动选中，右键粘贴。</p><h3 id="4-3：将用户加入到sudoers列表中"><a href="#4-3：将用户加入到sudoers列表中" class="headerlink" title="4.3：将用户加入到sudoers列表中"></a>4.3：将用户加入到sudoers列表中</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#chmod +w /etc/sudoers</span><span class="token comment">#vim /etc/sudoers</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加一行：username ALL=(ALL) ALL</p><p>其中username是你的用户名，保存</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#chmod 0440 /etc/sudoers</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样，您的普通用户可以使用”sudo + [命令]”来执行需要管理员权限的操作</p><h3 id="4-4-配置更新源并更新系统"><a href="#4-4-配置更新源并更新系统" class="headerlink" title="4.4:配置更新源并更新系统"></a>4.4:配置更新源并更新系统</h3><h4 id="4-4-1-备份旧的源"><a href="#4-4-1-备份旧的源" class="headerlink" title="4.4.1:备份旧的源"></a>4.4.1:备份旧的源</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">＃cp /etc/apt/sources.list /etc/apt/sources.list.old<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-4-2-配置新源"><a href="#4-4-2-配置新源" class="headerlink" title="4.4.2:配置新源"></a>4.4.2:配置新源</h4><p>把下面的加进去，应该可以满足绝大多数人的要求了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#gedit /etc/apt/sources.list</span>＃＃＃<span class="token operator">==</span><span class="token operator">==</span>sources.list <span class="token assign-left variable">Begin</span><span class="token operator">==</span><span class="token operator">=</span>＃＃＃<span class="token comment">##cn99</span>deb http://debian.cn99.com/debian/ lenny main non-free contribdeb-src http://debian.cn99.com/debian/ lenny main non-free contribdeb http://debian.cn99.com/debian/ lenny-proposed-updates main non-free contribdeb-src http://debian.cn99.com/debian/ lenny-proposed-updates main non-free contrib deb http://debian.cn99.com/debian-security/ lenny/updates main contrib non-freedeb-src http://debian.cn99.com/debian-security/ lenny/updates main contrib non-freedeb http://debian.cn99.com/debian-backport/ lenny-backports main contrib non-freedeb-src http://debian.cn99.com/debian-backport/ lenny-backports main contrib non-freedeb http://security.debian.org/ lenny/updates main contrib non-freedeb-src http://security.debian.org/ lenny/updates main contrib non-freedeb http://volatile.debian.org/debian-volatile lenny/volatile main contrib non-freedeb-src http://volatile.debian.org/debian-volatile lenny/volatile main contrib non-free deb http://http.us.debian.org/debian/ lenny main contrib non-freedeb-src http://http.us.debian.org/debian/ lenny main contrib non-freedeb http://www.debian-multimedia.org/ lenny maindeb-src http://www.debian-multimedia.org/ lenny main deb http://download.virtualbox.org/virtualbox/debian lenny non-free＃＃＃<span class="token operator">==</span><span class="token operator">=</span>sources.list <span class="token assign-left variable">End</span><span class="token operator">==</span><span class="token operator">=</span>＃＃＃<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：debian-multimedia.org的源需要安装KEY，在<a href="http://debian-multimedia.org/">http://debian-multimedia.org</a> 下载安装debian-multimedia-keyring_2008.10.16_all.deb </p><p>Debian采用严格的GPG认证来保证安装包不被恶意篡改，使您已经安装就是最新最稳定的系统！</p><h4 id="4-4-3-更新源并升级系统"><a href="#4-4-3-更新源并升级系统" class="headerlink" title="4.4.3:更新源并升级系统"></a>4.4.3:更新源并升级系统</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#apt－get update</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里就会提醒你有那些源没有GPG密匙，把错误密匙代号放到 iceweasel的搜索框，回车，就会看到大量的相关问题，随便点开2个就可以看到怎么样取得密匙。这个是偷懒的办法，但是非常有效！建议。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">＃apt-get update <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这次才是真的升级系统。如果通过网络安装，一般安装过程中就会自动选择最新的稳定的最新无漏洞包，一般来说没有更新包。</p><h3 id="四：网卡，声卡及显卡驱动安装"><a href="#四：网卡，声卡及显卡驱动安装" class="headerlink" title="四：网卡，声卡及显卡驱动安装"></a>四：网卡，声卡及显卡驱动安装</h3><h3 id="4-1-配置无线网卡和ADSL来上网"><a href="#4-1-配置无线网卡和ADSL来上网" class="headerlink" title="4.1: 配置无线网卡和ADSL来上网"></a>4.1: 配置无线网卡和ADSL来上网</h3><p>系统默认一般会识别有线的网卡驱动，Linux几乎可以识别现在所有的有线网卡，而无线网卡驱动由于是非</p><h4 id="4-1-1-配置无线网卡"><a href="#4-1-1-配置无线网卡" class="headerlink" title="4.1.1:配置无线网卡"></a>4.1.1:配置无线网卡</h4><p>●   驱动 这个看个文的硬件了</p><p>​                   ＃apt-get install firmware-iwlwifi </p><p>​                        ＃modprobe iwl3945   ＃加载内核模块</p><p>​                   这个我的Dell Inspiron6400的无线网卡是Intel 3945，其他无线网卡型号的用户请自己查找相关驱动包。</p><p>●   安装管理工具</p><p>​                   apt-get install wifi-radar</p><p>●   配置无线</p><p>看大家的无线设置，选择Essid,加密方式，频段等。</p><h4 id="4-1-2-使用PPPOE连接ADSL"><a href="#4-1-2-使用PPPOE连接ADSL" class="headerlink" title="4.1.2:使用PPPOE连接ADSL"></a>4.1.2:使用PPPOE连接ADSL</h4><p>●   使用PPPOE连接Adsl</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#apt-get install pppoeconf</span><span class="token comment">#pppoeconf #设置用户名与密码</span><span class="token comment">#pon dsl-provider #连接</span><span class="token comment">#poff #断开</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-让alsa把你的声卡驱动起来"><a href="#4-2-让alsa把你的声卡驱动起来" class="headerlink" title="4.2:让alsa把你的声卡驱动起来"></a>4.2:让alsa把你的声卡驱动起来</h3><p>#apt-get install alsa-base alsa-utils alsa-oss</p><p><strong>配置声卡：</strong>执行 alsaconf 一路回车。 再执行alsa-mixer 设置音量，M键取消静音，ESC 键退出。保存设置 alsactl store。</p><p><strong>测试 声卡：</strong>cat /dev/urandom &gt; /dev/dsp 你将会听到非常好听的声音，恭喜你，你的声卡工作了。</p><p>ctrl+c 终止它，当然你喜欢它的话，可以不那么做^_^</p><p>到这里，你的X服务器和声卡就安装配置好了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#apt-get install gnome-audio esound</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>esound是gnome下的软件混音器</p><h3 id="4-3-显卡驱动的安装及配置"><a href="#4-3-显卡驱动的安装及配置" class="headerlink" title="4.3:显卡驱动的安装及配置"></a>4.3:显卡驱动的安装及配置</h3><p><a href="http://wiki.cchtml.com/index.php/Ubuntu_Dapper_Installation_Guide">http://wiki.cchtml.com/index.php/Ubuntu_Dapper_Installation_Guide</a></p><p>安装编译驱动所需的环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> module-assistant build-essential<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> fakeroot dh-make debconf libstdc++5 linux-headers-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -r<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建安装包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ./ati-driver-installer-8.x.x.run --buildpkg debian/testing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装这些创建的包b</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg -i xorg-driver-fglrx_8.x.x-1_i386.deb -f<span class="token function">sudo</span> dpkg -i fglrx-kernel-source_8.x.x-1_i386.deb -f<span class="token function">sudo</span> dpkg -i fglrx-control_8.x.x-1_i386.deb -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>删除旧的源码包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> /usr/src/fglrx-kernel*.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译并安装驱动模块</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> module-assistant build fglrx<span class="token function">sudo</span> module-assistant <span class="token function">install</span> fglrx<span class="token function">sudo</span> depmod -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编辑你的/etc/X11/xorg.conf</p><p>在 Section “Module” 中加入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Load <span class="token string">"fglrx"</span>Load <span class="token string">"dri"</span>Load <span class="token string">"glx"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在Section “Device” 中把驱动换成</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Driver <span class="token string">"fglrx"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-3-1-ATI显卡驱动安装"><a href="#4-3-1-ATI显卡驱动安装" class="headerlink" title="4.3.1:ATI显卡驱动安装"></a>4.3.1:ATI显卡驱动安装</h4><p>To build your own .deb packages you will need to install at least the following packages from the apt repositories:</p><p>●   fakeroot</p><p>●   debhelper</p><p>●   build-essential</p><p>●   make</p><p>●   module-assistant</p><h5 id="Installing-from-Debian-non-free"><a href="#Installing-from-Debian-non-free" class="headerlink" title="Installing from Debian non-free"></a>Installing from Debian non-free</h5><p>Note: in lenny, they’ve renamed fglrx-kernel-src to fglrx-source (but the following worked for me with that substitution).</p><h5 id="Install-the-driver"><a href="#Install-the-driver" class="headerlink" title="Install the driver"></a>Install the driver</h5><p>sudo apt-get update</p><p>sudo apt-get install module-assistant fglrx-driver fglrx-kernel-src</p><h5 id="build-and-install-the-module"><a href="#build-and-install-the-module" class="headerlink" title="build and install the module"></a>build and install the module</h5><p>#:sudo module-assistant auto-install fglrx-kernel-src</p><p>After this, you need</p><p>#:sudo aticonfig –initial</p><p>This will update your xorg.conf to use the new driver. Restart for the changes to take effect.</p><p>＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝</p><p><strong>1</strong> <strong>构建相应的系统驱动包：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./ati-driver-installer-8.41.7-x86.x86_64.run --buildpkg Debian/unstable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以用下面的命令来列出所有可以构建的程序包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./ati-driver-installer-8.41.7-x86.x86_64.run --listpkg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以从这个输出中选择适合我们系统的参数来进行构建相应的程序包。</p><p><strong>2</strong> <strong>安装所构建的程序包：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># dpkg -i fglrx*.deb</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3</strong> <strong>安装module-assistant工具：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># apt-get install module-assistant</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>4</strong> <strong>使用m-a安装驱动模块</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># m-a prepare</span><span class="token comment"># m-a a-i fglrx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>驱动模块的安装需要相应的内核头文件，所以我们在进行这一步之前需要安装相应的头文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># apt-get install linux-headers-`uname -r`</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以自动来安装fglrx驱动模块了。</p><p>此时我们可以通过下面的命令来测试fglrx驱动模块是否安装成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># modprobe fglrx </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>5</strong> <strong>配置Xorg.conf</strong></p><p>在配置中我们要做的主要工作就要载入fglrx模块，在”Deveice”部分，将vesa驱动改为fglrx，重新启动X。如果一切正常，我们就可以享受到ATI驱动的带来的视觉效果了。</p><p>我们可以用下面的命令来检测我们的ATI驱动是否安装成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ fglrxinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们应得到下面的输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">display: :0.0 screen: <span class="token number">0</span>OpenGL vendor string: ATI Technologies Inc.OpenGL renderer string: ATI Mobility Radeon HD <span class="token number">2400</span> XTOpenGL version string: <span class="token number">2.1</span>.7059 Release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ glxinfo <span class="token operator">|</span> <span class="token function">grep</span> direct<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们希望的输出结果为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">direct rendering: Yes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而我们在源中也可以找到相应的fglrx程序包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># apt-cache search fglrx</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>个人觉得没有必要非得安装所谓的官方驱动包，因为由所谓的官方驱动包中所解出正是源中的几个程序包，而我在安装了官方的驱动程序包后进行了一下upgrade，居然更新其中的两个包，既然这样，我们还不如直接安装源中的驱动程序包方便：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># apt-get install fglrx* </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用m-a安装驱动模块时，我们也可以使用分步的安装方式，先编译，再安装，而不必一步到位：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># m-a get fglrx</span><span class="token comment"># m-a build fglrx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这 时就会在/usr/src/目录下生成一个fglrx的deb包。编译驱动程序模块时需要安装Linux内核头文件，我的内核是自己编译的2.6.23， 但是在源中却迟迟没有相应的头文件包，真是相当郁闷的说。但是即使是这样，我却依然得到了一个编译生成的fglrx的deb包。我们可以使用dpkg来进 行安装。</p><p>最后需要进行Xorg的配置。最简单的就是将驱动改为fglrx。当然我们也可以使用ati所提供的相应工具来进行配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># aticonfig --initial --input=/etc/X11/xorg.conf</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会进行相应的检测，并且修改xorg.conf文件。</p><h4 id="4-3-2-NVIDIA显卡驱动的安装"><a href="#4-3-2-NVIDIA显卡驱动的安装" class="headerlink" title="4.3.2:NVIDIA显卡驱动的安装"></a>4.3.2:NVIDIA显卡驱动的安装</h4><h2 id="五：常用软件安装及配置"><a href="#五：常用软件安装及配置" class="headerlink" title="五：常用软件安装及配置"></a>五：常用软件安装及配置</h2><p>​            发现Debian 即使是选择了base system,laptop,desktop其实也没有装多少东西，很多还需要自己安装,例如alsa-oss,gnome-audio等默认没有安装（应该没有记错）。下面很多东西可能系统已经安装了，但是这么做没有错的，下面的都是几乎不可缺少的组件。</p><h4 id="5-1-Gnome相关"><a href="#5-1-Gnome相关" class="headerlink" title="5.1:Gnome相关"></a>5.1:Gnome相关</h4><h4 id="5-1-1-Gnome基本系统及基本管理工具"><a href="#5-1-1-Gnome基本系统及基本管理工具" class="headerlink" title="5.1.1:Gnome基本系统及基本管理工具"></a>5.1.1:Gnome基本系统及基本管理工具</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#apt-get install xorg gnome-core gdm gdm-themes gnome-system-tools gconf-editor nautilus-open-terminal gnome-power-manager gnome-screensaver</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>xorg X窗口系统</p><blockquote><p>gnome-core     gnome核型组件</p><p>gdm  #gnome 默认的窗口管理器</p><p>gnome-system-tools     服务、网络等系统工具</p><p>gconf-editor     配置编辑器</p><p>nautilus-open-terminal    在右键菜单中加入终端</p><p>gnome-power-manager   #电源管理，休眠支持</p><p>gnome-screensaver      #锁屏</p><p>gconf-editor     #配置编辑器</p><p>ntfs-3g  #支持NTFS文件格式的读写</p><p>nautilus-gksu #以管理员权限打开目录</p></blockquote><h4 id="5-1-2-安装gnome主题、图标、背景"><a href="#5-1-2-安装gnome主题、图标、背景" class="headerlink" title="5.1.2:安装gnome主题、图标、背景"></a>5.1.2:安装gnome主题、图标、背景</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#apt-get install  gnome-themes gnome-icon-theme-dlg-neu gnome-backgrounds</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-3-常用软件工具安装"><a href="#5-3-常用软件工具安装" class="headerlink" title="5.3:常用软件工具安装"></a>5.3:常用软件工具安装</h3><h4 id="5-3-1-字体安装"><a href="#5-3-1-字体安装" class="headerlink" title="5.3.1:字体安装"></a>5.3.1:字体安装</h4><h5 id="●-使用apt"><a href="#●-使用apt" class="headerlink" title="●   使用apt"></a>●   使用apt</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">＃ <span class="token function">apt-get</span> <span class="token function">install</span> ttf-bitstream-vera ttf-arphic-uming  ttf-freefont <span class="token comment">#ttf-freefont 解决flash菜单可能的乱码，</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>WQY点整字体: apt-get install xfonts-wqy </p><p>ttf-wqy-zenhei #文泉驿正黑字体</p><h5 id="●-手工安装字体"><a href="#●-手工安装字体" class="headerlink" title="●   手工安装字体"></a>●   手工安装字体</h5><p>把字体”.ttf”字体copy到”/usr/share/fonts”下面的某目录中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> mkfontscale<span class="token function">sudo</span> mkfontdir<span class="token function">sudo</span> fc-cache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="●-系统字体优化："><a href="#●-系统字体优化：" class="headerlink" title="●   系统字体优化："></a>●   系统字体优化：</h5><p>1.右击桌面，打开外观管理器中的字体选项卡，将其中的字体全部改成雅黑字体，同时把窗口标题设置为加粗，并选择LCD模式。</p><p>2.在终端里输入指令</p><pre class="line-numbers language-none"><code class="language-none">sudo gedit /etc/fonts/conf.d/49-sansserif.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将其中的字体全部改成雅黑，该操作也可以同时解决flash中出现方框的问题。</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>5.3.2:输入法</p><p>●   安装scim中文输入法，可选其他的如fcitx</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#apt-get install scim scim-pinyin scim-tables-zh im-switch</span><span class="token comment">#im-switch -z en_US -s scim #英文系统下使用SCIM：</span>scim-qtimm <span class="token comment">#scim兼容QT程序</span><span class="token comment">#im-switch -s scim -z default</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>●   光标跟随</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#gedit /etc/X11/xinit/xinput.d/scim</span><span class="token comment">#GTK_IM_MODULE=xim</span><span class="token comment">#QT_IM_MODULE=xim</span><span class="token assign-left variable">GTK_IM_MODULE</span><span class="token operator">=</span>scim<span class="token assign-left variable">QT_IM_MODULE</span><span class="token operator">=</span>scim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>●   或者选择fctix</p><p>不管你是kde还是gnome 安装fcitx就这样：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> fcitx im-switchim-switch -s fcitx -z default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5-3-3-双击安装deb文件"><a href="#5-3-3-双击安装deb文件" class="headerlink" title="5.3.3:双击安装deb文件"></a>5.3.3:双击安装deb文件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#apt-get install gdeb</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-3-4-压缩与解压缩"><a href="#5-3-4-压缩与解压缩" class="headerlink" title="5.3.4:压缩与解压缩"></a>5.3.4:压缩与解压缩</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#apt-get install file-roller p7zip-full cabextract rar unrar  p7zip-rar rar unrar cabextract#7z,rar，cab</span>＃apt-get <span class="token function">install</span> gnochm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="gnochm-CHM阅读，或者chmsee"><a href="#gnochm-CHM阅读，或者chmsee" class="headerlink" title="gnochm #CHM阅读，或者chmsee"></a>gnochm #CHM阅读，或者chmsee</h4><p>5.3.5:安装OpenOffice.org</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#apt-get install openoffice.org-writer openoffice.org-calc openoffice.org-math openoffice.org-impress openoffice.org-gtk openoffice.org-help-en-us</span><span class="token comment">#apt-get install openoffice.org-l10n-zh-cn openoffice.org-help-zh-cn #中文界面和中文帮助</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5-3-6-安装视频播放器"><a href="#5-3-6-安装视频播放器" class="headerlink" title="5.3.6:安装视频播放器"></a>5.3.6:安装视频播放器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#apt-get install mplayer w32codecs smplayer</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>w32codecs #多媒体库</p><h4 id="5-3-7-PDF阅读"><a href="#5-3-7-PDF阅读" class="headerlink" title="5.3.7:PDF阅读"></a>5.3.7:PDF阅读</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#apt-get install evince xpdf xpdf-chinese-simplified xpdf-chinese-traditional poppler-data</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>xpdf-chinese-simplified xpdf-chinese-traditional poppler-data完美中文支持</p><h4 id="5-3-8-图像处理"><a href="#5-3-8-图像处理" class="headerlink" title="5.3.8:图像处理"></a>5.3.8:图像处理</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#apt-get install gimp</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-3-9-网络通讯"><a href="#5-3-9-网络通讯" class="headerlink" title="5.3.9:网络通讯"></a>5.3.9:网络通讯</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#apt-get install pidgin</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="11"><li>编程环境支持</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#apt-get install build-essential libgtk2.0-dev freeglut3-dev libtool autoconf automake subversion</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deb http://apt.jenslody.de/ any maindeb-src http://apt.jenslody.de/ any maindeb http://apt.wxwidgets.org/ etch-wx main<span class="token comment">#KEY：</span><span class="token function">wget</span> -q http://apt.jenslody.de/jens.asc -O- <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span class="token function">wget</span> -q http://apt.wxwidgets.org/key.asc -O- <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>其他安装</li></ol><p>安装Multiget：<a href="https://multiget.sourceforge.net/download.html">http://multiget.sourceforge.net/download.html</a></p><p>安装Opera：<a href="https://www.opera.com/download/">http://www.opera.com/download/</a></p><p>安装RealPlayer：<a href="https://www.real.com/linux">http://www.real.com/linux</a></p><p>安装AdobeReader：<a href="https://www.adobe.com/products/acrobat/readstep2_allversions.html">http://www.adobe.com/products/acrobat/readstep2_allversions.html</a></p><p>安装FlashPlayer：<a href="https://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash&amp;P2_Platform=Linux">http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash&amp;P2_Platform=Linux</a></p><p>编译CodeBlocks的SVN版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">svn checkout svn://svn.berlios.de/codeblocks/trunk ~/Downloads/CodeBlocks<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装CodeBlocks：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> codeblocks<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>alien    a package converter,将rpm,dpkg,stampede slp己slackware tgz档格式间的转换</p><p>pdfedit 修改pdf文件</p><p>linux开发工具： gcc,make,autoconf,diff,patch,rcs,emacs</p><p>mysql-admin,mysql-navigator,mysql-query-browser</p><p>安装版本控制软件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> subversion cvs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装中文输入法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> scim-pinyin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装词典 <a href="http://stardict.sourceforge.net/">http://stardict.sourceforge.net</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> stardict sox<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>/usr/share/stardict/dic/stardict-langdao-ce-gb-2.4.2 (郎道汉英辞典)</p><p>/usr/share/stardict/dic/stardict-langdao-ec-gb-2.4.2 (郎道英汉辞典)</p><p>/usr/share/WyabdcRealPeopleTTS (英文语音词库)</p><p>安装邮件客户端</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> thunderbird<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 win-xchm查看器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> xchm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 msn for linux</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> emesene<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装下载工具 ( bt 工具 transmission 默认已安装 ; amule 对应windows平台的 emule)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gwget amule<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 rss 订阅工具</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> liferea<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>硬件监控工具</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> sensors-applet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>远程桌面管理,RDP默认已安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> xvnc4viewer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装视频/音频解码器</p><p>gnome 平台推荐用 totem+gstreamer*, 直接点击多媒体文件,totem会自动搜索匹配解码器安装</p><p>特殊的rm, rmvb格式文件, RealPlayer 11 for Linux 刚发布 (<a href="http://www.real.com/linux">http://www.real.com/linux</a>) ,效果不错,可以不用 w32codecs 了.</p><p>安装 flash for firefox, 新版多了一个选项”swfdec player”, 推荐, 其对CPU消耗改善了</p><ol><li><p>swfdec player for adobe/macromedia flash</p></li><li><p>adobe flash player</p></li><li><p>gnash swf player</p></li></ol><p>中文编码配置</p><p>sudo vi /var/lib/locales/supported.d/zh</p><p>加入以下编码支持</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zh_CN.GB18030 GB18030zh_CN.GBK GBKzh_CN.GB2312 GB2312zh_HK.BIG5 BIG5zh_TW.BIG5 BIG5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>立即应用更新</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> locale-gen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 vim</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">vim</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置 vim</p><p>sudo vi /etc/vim.local</p><p>加入以下设置(个人喜好)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">syntax on<span class="token builtin class-name">set</span> expandtab<span class="token builtin class-name">set</span> <span class="token assign-left variable">tabstop</span><span class="token operator">=</span><span class="token number">4</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">shiftwidth</span><span class="token operator">=</span><span class="token number">4</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">sts</span><span class="token operator">=</span><span class="token number">4</span><span class="token builtin class-name">set</span> autoindent<span class="token builtin class-name">set</span> smartindent<span class="token builtin class-name">set</span> cindent<span class="token builtin class-name">set</span> number<span class="token builtin class-name">let</span> <span class="token operator">&amp;</span><span class="token assign-left variable">termencoding</span><span class="token operator">=</span><span class="token operator">&amp;</span>encoding<span class="token builtin class-name">set</span> <span class="token assign-left variable">fileencodings</span><span class="token operator">=</span>utf-8,gb18030,gbk,gb2312,big5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置 gedit</p><p>执行 sudo gconf-editor</p><p>选择 apps/gedit-2/preferences/encodings</p><p>找到 auto_detected 编辑，在Values中分别加入 GB18030,GBK,GB2312,BIG5</p><p>界面风格 <a href="http://art.gnome.org/">http://art.gnome.org</a></p><p>Ubuntu 默认的橘黄风格让我”焦躁”,一直偏向用蓝,灰的风格</p><p>窗体用 SimpleBox (2.6 kb, 下载安装)</p><p>图标用 tango ( apt-get install tango-icon-theme )</p><p>Others</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apt-show-source apt-show-versions archmage chmsee aria2 debian-faq-zh-cn fontforge gedit-plugins gtkcookie gupnp-tools htmldoc powersaved tor ttf-bitstream-vera vim-addon-manager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="六：笔记本配置专辑"><a href="#六：笔记本配置专辑" class="headerlink" title="六：笔记本配置专辑"></a>六：笔记本配置专辑</h2><p><strong>Dell Inspiron 6400</strong></p><table><thead><tr><th><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818223005.jpg" alt="img"></th><th>- Video card: Intel Corporation- Mobile 945GM/GMS/940GML Express Integrated Graphics Controller- RAM: 2Go- Hard disk drive: 100Go- Processor: Pentium Dual-core 1.86GHz <em>(T2130)</em>- Ethernet card: Broadcom Corporation BCM4401-B0 100Base-TX- Wifi Card: Intel Corporation PRO/Wireless 3945ABG Network Connection- Optical device: DVD+RW- Screen WSXGA+: resolution=1200x800, size=15,4” wide</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h2 id="Overall-Status"><a href="#Overall-Status" class="headerlink" title="Overall Status"></a>Overall Status</h2><table><thead><tr><th><strong>Core Components</strong></th><th></th><th></th></tr></thead><tbody><tr><td>Boot Standard Kernel:</td><td><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818223057.gif"></td><td></td></tr><tr><td>LAN network card:</td><td><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818223104.gif"></td><td></td></tr><tr><td>Detect CD/DVD:</td><td><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818223104.gif"></td><td></td></tr><tr><td>Detect hard drives:</td><td><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818223119.gif"></td><td></td></tr><tr><td><strong>Extra Features</strong></td><td></td><td></td></tr><tr><td><a href="https://wiki.debian.org/InstallingDebianOn/Dell/Inspiron6400/lenny#cpu">CPU Frequency Scaling</a></td><td><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818223130.gif"></td><td></td></tr><tr><td><a href="https://wiki.debian.org/InstallingDebianOn/Dell/Inspiron6400/lenny#power">Hibernation</a></td><td><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818223136.gif"></td><td></td></tr><tr><td><a href="https://wiki.debian.org/InstallingDebianOn/Dell/Inspiron6400/lenny#power">Sleep / Suspend</a></td><td><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818223136.gif"></td><td></td></tr><tr><td><a href="https://wiki.debian.org/InstallingDebianOn/Dell/Inspiron6400/lenny#display">Xorg</a></td><td><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818223148.gif"></td><td></td></tr><tr><td>- OpenGL</td><td><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818223200.gif"></td><td></td></tr><tr><td>- Resize-and-Rotate(randr)</td><td><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818223209.gif" alt="img"></td><td></td></tr><tr><td>Switch to External Screen</td><td><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818223223.gif"></td><td></td></tr><tr><td>Mouse</td><td></td><td></td></tr><tr><td>- Built-in (Trackpoint)</td><td>[-]</td><td></td></tr><tr><td>- Built-in (Touchpad)</td><td><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818223231.gif"></td><td></td></tr><tr><td>Modem</td><td>[?]</td><td></td></tr><tr><td><a href="https://wiki.debian.org/InstallingDebianOn/Dell/Inspiron6400/lenny#wifi">Wireless/Wifi</a></td><td><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818223237.gif"></td><td></td></tr><tr><td><a href="https://wiki.debian.org/InstallingDebianOn/Dell/Inspiron6400/lenny#keys">Keyboard’s Hotkeys</a></td><td><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818223238.gif"></td><td></td></tr></tbody></table><p>Legend :</p><ul><li><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818223249.gif"> = OK ;</p></li><li><p> <img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818223256.gif"> Unsupported(No Driver) ;</p></li><li><p> <img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818223302.gif"> = Error (Couldn’t get it working); </p></li><li><p>[?] Unknown, Not Test ; </p></li><li><p>[-] Not-applicable</p></li><li><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818223346.gif"> = Configuration Required;</p></li><li><p> <img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818223308.gif"> = Only works with a non-free driver/firmware</p></li></ul><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><h2 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h2><p>You will need to install the 915resolution package:</p><p># apt-get install 915resolution xserver-xorg-video-intel</p><p># 915resolution</p><p>The 915resolution will try to get highest resolution, you can change this at /etc/default/915resolution.</p><p>If you wish to enable DRI, GLX, etc. see <a href="https://wiki.debian.org/InstallingDebianOn/Dell/Inspiron6400/lenny?action=AttachFile&amp;do=view&amp;target=Xorg.conf_Lenny_DellInspiron6400.txt">Xorg.conf_Lenny_DellInspiron6400.txt</a> . My configuration works fine with <a href="https://wiki.debian.org/Compiz">Compiz</a>.</p><p>If using newer “xserver-xorg” (version 7.3 +), do not install “915resolution” as it conflicts with “xserver-xorg-video-all” and “xserver-xorg-video-intel”. Also install “libgl1-mesa-dri” (and this also installs “libgl1-mesa-glx”) for OpenGL support. Use “glxinfo | grep direct” to check for direct rendering. The “glxinfo” util comes with the “mesa-utils” package. (Thanks to enouf and Nemoder on #debian@OFTC)</p><h2 id="Hibernation-and-Sleep-Suspend"><a href="#Hibernation-and-Sleep-Suspend" class="headerlink" title="Hibernation and Sleep/Suspend"></a>Hibernation and Sleep/Suspend</h2><p>Works fine. Install,</p><pre class="line-numbers language-none"><code class="language-none"># apt-get install acpid hal pm-utils uswsusp powermgmt-base<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>We will need to unload the “b44” module before hibernating, add the following to “/etc/pm/config.d/unload_modules”:</p><p>SUSPEND_MODULES=”b44”</p><p>The wireless drivers will be automatically handled by pm-utils. You should then be able to hibernate:</p><pre class="line-numbers language-none"><code class="language-none"># pm-hibernate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>And suspend:</p><pre class="line-numbers language-none"><code class="language-none"># pm-suspend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Note that if you are trying to hibernate/suspend from within GNOME, you will need to be a member of the “ powerdev” group.</p><h2 id="CPU-Power-Scaling"><a href="#CPU-Power-Scaling" class="headerlink" title="CPU Power Scaling"></a>CPU Power Scaling</h2><p>Add a few modules to be loaded, </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># echo "acpi-cpufreq" &gt;&gt; /etc/modules</span><span class="token comment"># echo "speedstep_centrino" &gt;&gt; /etc/modules</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Then, install the “powernowd” daemon:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># apt-get install powernowd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Powenowd’s default settings should be OK for most people.</p><h2 id="Hotkeys"><a href="#Hotkeys" class="headerlink" title="Hotkeys"></a>Hotkeys</h2><p>These are automatically configures by:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># apt-get install hotkey-setup</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="WiFi"><a href="#WiFi" class="headerlink" title="WiFi"></a>WiFi</h2><p>We need to install the firmware:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># apt-get install firmware-iwlwifi</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>And it should work. If you get an error like “Kill switch must be turned off in order for wireless networking to work.” during system boot, you need to press the magic Fn + F2 button.</p><h2 id="七：其他问题"><a href="#七：其他问题" class="headerlink" title="七：其他问题"></a>七：其他问题</h2><h3 id="0-多源混合使用"><a href="#0-多源混合使用" class="headerlink" title="0.多源混合使用"></a>0.多源混合使用</h3><p>安装完稳定版系统，请先为整个系统所有软件包设置 hold on 状态，aptitude 可以很容易的完成此任务。 接着，添加多个版本的源，即由上而下依次为： stable stable-backports （当前是 lenny-backports，<a href="http://wiki.debian.org/Backports%EF%BC%89">http://wiki.debian.org/Backports）</a> testing sid experimental， 然后，请针对特定软件包的特定版本升级，注意一次升级一个包彻底解决一个包，勿贪心。 升级完成，再次设置 hold on 状态，如此反复。</p><p>有时需要人工介入满足特定软件包的依赖关系。 如，为了使用 DRI，给 lenny 安装新版 ati 开源驱动 radeon 软件包， 需要先手工升级 mesalib-7.4.<em>、xorg-server-1.6.</em> 等， 再手工安装 radeon 软件包，而不能直接安装 radeon 软件包的新版本， 混用多个版本的源时，aptitude 自动计算的依赖关系并不总是可靠的。</p><p>如果仍不够新，那就要自己动手配置编译。 如果愿意可以使用 debian 方式编译打包。</p><p>如果升级的软件包依赖一些基本的软件包如 glibc，最终得到的系统将不再是 debian 稳定版。</p><ol><li><h3 id="自动挂载U盘中文文件名乱码问题"><a href="#自动挂载U盘中文文件名乱码问题" class="headerlink" title="自动挂载U盘中文文件名乱码问题"></a>自动挂载U盘中文文件名乱码问题</h3></li></ol><p>解决方法：系统工具-&gt;配置编辑-&gt;/system/storage/default_options/vfat，双击mount_options，”添加”，在“新列表值”中填入“utf8”。</p><ol start="2"><li><h3 id="apt-get与dpkg的基本用法"><a href="#apt-get与dpkg的基本用法" class="headerlink" title="apt-get与dpkg的基本用法"></a>apt-get与dpkg的基本用法</h3></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#apt-get install packagename #安装一个新软件包</span><span class="token comment">#apt-get remove packagename #卸载一个已安装的软件包（保留配置文件）</span><span class="token comment">#apt-get --purge remove packagename #卸载一个已安装的软件包（删除配置文件）</span><span class="token comment">#dpkg --force-all --purge packagename #强制卸载，风险大！</span><span class="token comment">#apt-get upgrade #更新所有已安装的软件包</span><span class="token comment">#apt-get dist-upgrade #将系统升级到新版本</span><span class="token variable">$apt</span>-cache search 正则表达式 <span class="token comment">#在软件包列表中搜索字符串</span><span class="token variable">$dpkg</span> -l 正则表达式 <span class="token comment">#列出所有与模式相匹配的软件包</span><span class="token comment">#apt-get clean #清理所有软件缓存</span><span class="token comment">#apt-get autoclean #清理旧版本的软件缓存</span><span class="token comment">#apt-get autoremove #删除系统不再使用的孤立软件</span><span class="token comment">#apt-cdrom add #增加一个光盘源</span><span class="token variable">$dpkg</span> -l <span class="token operator">|</span><span class="token function">grep</span> ^rc<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print $2}'</span> <span class="token operator">|</span> <span class="token comment">#xargs dpkg -P #清除所有已删除包的残馀配置文件</span><span class="token comment">#auto-apt run ./configure #编译时缺少h文件的自动处理</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><h3 id="安装RealPlay"><a href="#安装RealPlay" class="headerlink" title="安装RealPlay"></a>安装RealPlay</h3></li></ol><p>下载bin包，到realplayer主页上下载 <a href="https://www.real.com/linux">http://www.real.com/linux</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#chmod 755 ./*.bin #或chmod +x ./*.bin</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>#./*.bin #一定要root安装，否则安装后无法启动。</p><ol start="4"><li><h3 id="安装FlashPlayer"><a href="#安装FlashPlayer" class="headerlink" title="安装FlashPlayer"></a>安装FlashPlayer</h3></li></ol><p>在iceweasel提示安装时选择安装，如果安装失败：</p><p>下载install_flash_player_9_linux.tar.gz并解压，进入解压目录，执行</p><p>安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ./flashplayer-installer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若flashplayer菜单有乱码问题的话，执行：sudo mv /etc/fonts/conf.d/49-sansserif.conf /etc/fonts/conf.d/49-sansserif.conf.bak</p><p>安装ttf-freefont字体可解决swf文件中文乱码。</p><ol start="5"><li>编译Code::Blocks的SVN版本</li></ol><p>(a) 下载源码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">svn checkout svn://svn.berlios.de/codeblocks/trunk ~/Sources/CodeBlocks<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(b) 编译</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ACLOCAL_FLAGS</span><span class="token operator">=</span><span class="token string">"-I <span class="token variable"><span class="token variable">`</span>wx-config --prefix<span class="token variable">`</span></span>/share/aclocal"</span>./bootstrap./configure 或 ./configure --with-contrib-plugins<span class="token operator">=</span>all<span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(c) 缷载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">make</span> uninstall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(d) 重新编译</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> clean<span class="token function">make</span> distclean<span class="token function">make</span> clean-bin<span class="token function">make</span> clean-zipfiles<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>详情：<a href="https://wiki.codeblocks.org/index.php?title=Installing_Code::Blocks_from_source_on_Linux">http://wiki.codeblocks.org/index.php…ource_on_Linux</a></p><p>●   关于64位系统使用32位软件额外需求</p><p>64位系统同样能使用32位的软件，只要在终端输入以下命令，安装相应的32位包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ia32-libs ia32-libs-gtk linux32 lib32asound2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="●-MLdonkey-sancho安装"><a href="#●-MLdonkey-sancho安装" class="headerlink" title="●   MLdonkey+sancho安装"></a>●   MLdonkey+sancho安装</h2><p>MLdonkey被誉为<a href="https://forum.ubuntu.org.cn/viewtopic.php?t=42337&amp;highlight=mldonkey">速度最快的电驴</a>，同时支持很多种P2P的下载协议，包括edonkey2000、gnutella、gnutella2、bt、FileTP</p><p>等等。网上有很多安装和设置的文章，但是有点乱，有些也不够完整，今天有空将它整理如下</p><p>下载最新版 <a href="https://sourceforge.net/project/showfiles.php?group_id=156414&amp;package_id=174487">MLdonkey</a> &amp; <a href="https://sancho-gui.sourceforge.net/download.phtml">sancho</a>（左键点击）</p><h3 id="一-安装-mldonkey："><a href="#一-安装-mldonkey：" class="headerlink" title="一.安装 mldonkey："></a>一.安装 mldonkey：</h3><p>解压缩mldonkey源代码并进入其目录，然后</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ocaml$ ./configure$ <span class="token function">make</span>$ <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（使用新版本的mldonkey源代码编译安装后已不会有下载后文件名不支持中文的问题）</p><h3 id="二-安装-sancho："><a href="#二-安装-sancho：" class="headerlink" title="二.安装 sancho："></a>二.安装 sancho：</h3><p>sancho是mldonkey最好用的一个前端，下载回来的sancho只有一个文件，是一个脚本，先右键单击它，找到属性-权限部分，钩上“可执行”，然后在终端中运行之：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./sancho-*-linux-gtk.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后会显示</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Extract to directory <span class="token punctuation">[</span><span class="token operator">&lt;</span>sancho-*-linux-gtk<span class="token operator">&gt;</span><span class="token punctuation">]</span>:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入自定义安装目录，随便你，我安装在/usr/local/sancho</p><p>稍等一会就装好了，在/usr/local/sancho/下有个sancho，双击它就能运行sancho </p><p># 下载 sancho 后用 root权限安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">user@~$ <span class="token function">sudo</span> <span class="token function">sh</span> sancho-0.9.4-59-linux-gtk.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p># 选择安装目录, 这里我安装在 /opt/sancho/</p><p># 修改用户配置文件目录的权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">user@~$ <span class="token function">sudo</span> <span class="token function">chown</span> user:user -R ~/.sancho/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p># 把 user 改成自己的用户名</p><h3 id="三-sancho设置"><a href="#三-sancho设置" class="headerlink" title="三.sancho设置"></a>三.sancho设置</h3><p>先运行mlnet，在/usr/local/bin或/usr/bin下，然后运行sancho，首次运行会有配置向导，需要设置mlnet位置。在sancho里面也可以设置mlnet的运行路径</p><p>在<strong>工具</strong>-&gt;<strong>首选项</strong>-&gt;**sancho:**<strong>主要</strong>-&gt;<strong>可选的可执行core</strong> 那里填上你的mlnet路径。这样以后就可以直接启动sancho。</p><p>设置中文: 在<strong>工具</strong>-&gt;<strong>首选项</strong>-&gt;**sancho:**<strong>主要</strong>-&gt;<strong>使用本地文件</strong> 选择zh-CN,重启sancho后即为中文。</p><p>在<strong>工具</strong>-&gt;<strong>首选项</strong>-&gt;<strong>Main</strong> 设置 <strong>client_name</strong> 推荐设置成[CHN][VeryCD]<strong>yourname</strong>的形式，支持中文。</p><p>在<strong>工具</strong>-&gt;<strong>首选项</strong>-&gt;<strong>Bandwidth</strong> 设置 <strong>max_hard_upload_rate</strong> 和 <strong>max_hard_download_rate</strong> 分别是上传和下载速度，单位是KB</p><p>在<strong>工具</strong>-&gt;<strong>首选项</strong>-&gt;<strong>Networks</strong> 勾选 <strong>enable_overnet</strong> 和 <strong>enable_kademlia</strong></p><p>在<strong>工具</strong>-&gt;<strong>首选项</strong>-&gt;<strong>Networks</strong>-&gt;<strong>Donkey</strong>有这两项：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ED2K-force_client_high_idED2K-force_high_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果你是公网用户，或者你是内网，且设置了端口映射，则勾选它们，如果你打死都是内网低ID用户，就不要选了，否则会很难连上服务器。</p><p>你可以选上试试看，不行再取消。</p><p>在<strong>工具</strong>-&gt;<strong>首选项</strong>-&gt;<strong>Networks</strong>-&gt;<strong>Donkey</strong>-&gt;<strong>ED2K-port</strong> 设置端口，如果你有windows下的emule，最好把他们的端口(tcp的)设成一样，因为有些路由器有记忆功能，导致windows下的端口在重启后仍然保留。一般emule默认端口为4662,但有些宽带运营商会封掉该端口，建议改掉。</p><p>在<strong>工具</strong>-&gt;<strong>首选项</strong>-&gt;<strong>Networks</strong>-&gt;<strong>Donkey</strong>-&gt;<strong>ED2K-max_connected_servers</strong> 设置服务器最大连接数，默认为3，不用太大，大了也没用，一般稳定下来也就三四个左右，我把它设为7</p><p>打开sancho主界面，点击控制台，然后在最下方的命令输入框那里</p><p>用如下命令导入服务器</p><p>servers <a href="http://www.emule.org.cn/server.met">http://www.emule.org.cn/server.met</a></p><p>用ov_load命令导入overnet的node列表，推荐下载<a href="https://download.overnet.org/contact.dat">http://download.overnet.org/contact.dat</a></p><p>用kad_load命令导入kad的node列表，推荐下载<a href="https://www.emule-inside.net/nodes.dat">http://www.emule-inside.net/nodes.dat</a></p><p>或<a href="https://renololo1.free.fr/e/nodes.dat">http://renololo1.free.fr/e/nodes.dat</a>，也可使用eMule的nodes.data</p><p>对于ov_load和kad_load，需要先下载回本地，比如把contact.dat下载到桌面后，输入：</p><p>ov_load /home/xxb/桌面/contact.dat</p><p>路径请修改为适合你自己的。</p><p>修改下载目录和temp目录: 默认目录分别为 <del>/.mldonkey/incoming/files （BT则为</del>/.mldonkey/incoming/directories) 和 ~/.mldonkey/temp</p><p>修改 ~/.mldonkey/downloads.ini，找到“SECTION : Paths”，然后修改第一段和倒数第二段的路径，注意这里是相对路径。下载目录和temp目录最好放在同一个硬盘分区，否则下载完成转移临时文件时，硬 盘灯会狂闪。或者通过建立软链接来更改下载目录也可以（推荐）。</p><p>比如我把下载目录和临时目录都移到/home/xxb/Videos/下，则把~/.mldonkey/下的incoming和temp目录都剪切到/home/xxb/Videos/下，然后建立软链接：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ln</span> -s ~/Videos/incoming ~/.mldonkey/incoming$ <span class="token function">ln</span> -s ~/Videos/temp ~/.mldonkey/temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="四-设置浏览器关联"><a href="#四-设置浏览器关联" class="headerlink" title="四.设置浏览器关联"></a>四.设置浏览器关联</h3><p>这里只说firefox的关联，如果需要设置其它浏览器，请参考<a href="https://forum.ubuntu.org.cn/viewtopic.php?t=47733&amp;highlight=mldonkey+%E5%85%B3%E8%81%94">mldonkey 和浏览器关联的办法,适用 firefox, konqueror</a></p><p>先建立脚本,这里我们把它取名为 submit, 放在 ~/.mldonkey 下面。内容如下: </p><pre class="line-numbers language-none"><code class="language-none">#!/bin/bashecho dllink $*|nc -q 1 127.0.0.1 4000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果系统是ArchLinux，则需安装netcat(gnu-netcat),并改为</p><pre class="line-numbers language-none"><code class="language-none">#!/bin/bashecho dllink $*|nc 127.0.0.1 4000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后右键单击它，找到属性-权限部分，钩上“可执行”</p><p>接下来在firefox地址栏输入 about:config</p><p>新建 字符串(string)</p><pre class="line-numbers language-none"><code class="language-none">network.protocol-handler.app.ed2k<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>值为submit 脚本的位置，比如我的是 /home/xxb/.mldonkey/submit</p><p>也可以安装firefox扩展，以关联ed2k、bt等，解压后的mldoneky-distrib-xxx/ed2k_mozilla/文件夹下 有个 mldonkey_protocol_handler-xx.xpi，把它拖到fx窗口选择安装。重启后就可以双击MLdonkey Protocal Handler这个扩展设置关联了，这个扩展也可以关联到amule。不过扩展当然是能不装就不装，所以推荐使用submit脚本的方法。</p><h3 id="五-WEB界面"><a href="#五-WEB界面" class="headerlink" title="五.WEB界面"></a>五.WEB界面</h3><p>你也可以用浏览器控制和观察mldonkey，地址是 <a href="https://localhost:4080/">http://localhost:4080/</a></p><p>我比较推崇用这个，不占额外资源（不必一直开着sancho，毕竟java的东西会占不少内存和cpu），设置更强，不过是英文的。你还可以编辑~/.mldonkey下的各个文件进行设置，这里不再敖述。</p><h3 id="六-端口映射"><a href="#六-端口映射" class="headerlink" title="六.端口映射"></a>六.端口映射</h3><p>打开 <a href="https://localhost:4080/">http://localhost:4080/</a>后，点击<strong>Help+</strong>-&gt;<strong>Sysinfo</strong> 这里可以查看mldonkey的端口使用情况，除了core那3个，建议其余的都在路由器里设置端口映射，如果有防火墙，还要打开相应端口。</p><p><a href="https://www.emule.org.cn/topic/nat/">点击查看各种主流路由器映射的设置方法</a></p><h3 id="七-其它"><a href="#七-其它" class="headerlink" title="七.其它"></a>七.其它</h3><p>本文基本只涉及电驴部分，如果还需要其它比如BT功能，请自行摸索，附一些主要的配置文件：</p><ul><li><p>~/.mldonkey/downloads.ini 基本的设置( 这个是for edonkey和其他协议的)</p></li><li><p>~/.mldonkey/servers.ini 服务器列表文件</p></li><li><p>~/.mldonkey/files.ini 当前已经完成的和未完成的文件列表</p></li><li><p>~/.mldonkey/friends.ini 好友列表</p></li><li><p>~/.mldonkey_gui.ini 图形前端的配置文件</p></li></ul><p>另外其他的网络协议都有其单独的配置文件，一般都放在~/.mldonkey目录下</p><p>祝骑驴愉快 ^_^</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Debian-Lenny-Laptop安装记录&quot;&gt;&lt;a href=&quot;#Debian-Lenny-Laptop安装记录&quot; class=&quot;headerlink&quot; title=&quot;Debian Lenny Laptop安装记录&quot;&gt;&lt;/a&gt;Debian Lenny Lapt</summary>
      
    
    
    
    <category term="Linux" scheme="https://blog.17lai.fun/categories/Linux/"/>
    
    <category term="system" scheme="https://blog.17lai.fun/categories/Linux/system/"/>
    
    
    <category term="Linux" scheme="https://blog.17lai.fun/tags/Linux/"/>
    
    <category term="Driver" scheme="https://blog.17lai.fun/tags/Driver/"/>
    
    <category term="Debian" scheme="https://blog.17lai.fun/tags/Debian/"/>
    
    <category term="Laptop" scheme="https://blog.17lai.fun/tags/Laptop/"/>
    
    <category term="ED2K" scheme="https://blog.17lai.fun/tags/ED2K/"/>
    
    <category term="ATI" scheme="https://blog.17lai.fun/tags/ATI/"/>
    
    <category term="WIFI" scheme="https://blog.17lai.fun/tags/WIFI/"/>
    
    <category term="Hotkey" scheme="https://blog.17lai.fun/tags/Hotkey/"/>
    
  </entry>
  
  <entry>
    <title>transmission 使用及其配置</title>
    <link href="https://blog.17lai.fun/qnap/ji-qiao/2021-08-18-transmission-parameter-reference-configuration/"/>
    <id>https://blog.17lai.fun/qnap/ji-qiao/2021-08-18-transmission-parameter-reference-configuration/</id>
    <published>2021-08-17T17:25:00.000Z</published>
    <updated>2021-09-11T10:50:17.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="qnapclub"><a href="#qnapclub" class="headerlink" title="qnapclub"></a><strong>qnapclub</strong></h3><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818163248.png" alt="image-20210818163246709"></p><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a><strong>docker</strong></h3><p><a href="https://hub.docker.com/r/linuxserver/transmission">docker hub</a></p><blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"2.1"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">transmission</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> ghcr.io/linuxserver/transmission    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> transmission    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> PUID=1000      <span class="token punctuation">-</span> PGID=1000      <span class="token punctuation">-</span> TZ=Europe/London      <span class="token punctuation">-</span> TRANSMISSION_WEB_HOME=/combustion<span class="token punctuation">-</span>release/ <span class="token comment">#optional</span>      <span class="token punctuation">-</span> USER=username <span class="token comment">#optional</span>      <span class="token punctuation">-</span> PASS=password <span class="token comment">#optional</span>      <span class="token punctuation">-</span> WHITELIST=iplist <span class="token comment">#optional</span>      <span class="token punctuation">-</span> HOST_WHITELIST=dnsnane list <span class="token comment">#optional</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> &lt;path to data<span class="token punctuation">&gt;</span><span class="token punctuation">:</span>/config      <span class="token punctuation">-</span> &lt;path to downloads<span class="token punctuation">&gt;</span><span class="token punctuation">:</span>/downloads      <span class="token punctuation">-</span> &lt;path to watch folder<span class="token punctuation">&gt;</span><span class="token punctuation">:</span>/watch    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 9091<span class="token punctuation">:</span><span class="token number">9091</span>      <span class="token punctuation">-</span> 51413<span class="token punctuation">:</span><span class="token number">51413</span>      <span class="token punctuation">-</span> 51413<span class="token punctuation">:</span>51413/udp    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="控制脚本"><a href="#控制脚本" class="headerlink" title="控制脚本"></a>控制脚本</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/init.d/QTransmission.sh start/etc/init.d/QTransmission.sh stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Transmission-配置详解"><a href="#Transmission-配置详解" class="headerlink" title="Transmission 配置详解"></a>Transmission 配置详解</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /share/CACHEDEV1_DATA/.qpkg/QTransmission/etc/settings.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"alt-speed-up"</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span> # 限速时段上传限速值<span class="token property">"alt-speed-down"</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span> # 限速时段下载限速值<span class="token property">"alt-speed-enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"alt-speed-time-begin"</span><span class="token operator">:</span> <span class="token number">540</span><span class="token punctuation">,</span><span class="token property">"alt-speed-time-day"</span><span class="token operator">:</span> <span class="token number">127</span><span class="token punctuation">,</span> # 时段限速日期（星期几），<span class="token number">127</span> 表示每天，更复杂配置参考官网。用 <span class="token number">7</span> 位二进制数表示，然后转换成十进制数，<span class="token number">0000001</span> 表示周日，<span class="token number">1000000</span> 表示周六，<span class="token number">0000010</span> 表示周一，<span class="token number">0000100</span> 表示周二。如果你只要在周末限速，该数应该 <span class="token number">1000001</span>，转换为十进制就是 <span class="token number">65</span><span class="token property">"alt-speed-time-enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> # 启用限速，为 <span class="token boolean">false</span> 时，以上计划配置则不生效，生效时会自动禁用 alt-speed-enabled 配置，二者只能选一个<span class="token property">"alt-speed-time-end"</span><span class="token operator">:</span> <span class="token number">420</span><span class="token punctuation">,</span> # 限速时段结束时间，这个配置表示的是凌晨零点到开始时间的分钟数，比如 <span class="token number">7</span><span class="token operator">:</span><span class="token number">00</span> 就是 <span class="token number">7</span>*<span class="token number">60</span>=<span class="token number">420</span>。需要注意的是，该时间是用的 GMT 时间，即北京时间 <span class="token number">-8</span> 小时。比如你计划北京时间 <span class="token number">7</span> 点 <span class="token number">30</span> 分开始，这个数字应该是（<span class="token number">7</span><span class="token number">-8</span>+<span class="token number">24</span>）*<span class="token number">60</span>+<span class="token number">30</span>=<span class="token number">1410</span><span class="token property">"bind-address-ipv4"</span><span class="token operator">:</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> # IPv4 地址绑定，一般不要改动<span class="token property">"bind-address-ipv6"</span><span class="token operator">:</span> <span class="token string">"::"</span><span class="token punctuation">,</span> #IPv6 地址绑定，一般不要改动<span class="token property">"blocklist-enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> # 启动白名单，默认不启动，需要启动改为 <span class="token boolean">true</span><span class="token property">"blocklist-updates-enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"blocklist-url"</span><span class="token operator">:</span> <span class="token string">"http://www.example.com/blocklist"</span><span class="token punctuation">,</span><span class="token property">"cache-size-mb"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> #缓存大小，以 MB 为单位，建议设大一些，避免频繁读写硬盘而伤硬盘，建议设为内存大小的 <span class="token number">1</span>/<span class="token number">6</span>～<span class="token number">1</span>/<span class="token number">4</span><span class="token property">"compact-view"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"dht-enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> #关闭 DHT（不通过 tracker 寻找节点）功能，不少 PT 站的要求，但 BT 下载设置为 <span class="token boolean">true</span> 会使得下载更好<span class="token property">"download-dir"</span><span class="token operator">:</span> <span class="token string">"/share/Downloads"</span><span class="token punctuation">,</span> #下载的内容存放的目录<span class="token property">"download-queue-enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  # 下载队列开关<span class="token property">"download-queue-size"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> # 下载队列数量<span class="token property">"encryption"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> # 加密。指定节点的加密模式，默认 <span class="token number">1</span>。<span class="token number">0</span> 表示关闭 <span class="token punctuation">,</span> <span class="token number">0</span>= 不加密，<span class="token number">1</span>= 优先加密，<span class="token number">2</span>= 必须加密<span class="token property">"lazy-bitfield-enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> # 默认为 <span class="token boolean">true</span>，设置为 <span class="token boolean">true</span> 时可以避免某些 ISP 通过查询完整位段来屏蔽 BT，从而破解部分 ISP 对 BT 的封杀，当然不一定完全有效<span class="token property">"idle-seeding-limit"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span><span class="token property">"idle-seeding-limit-enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"incomplete-dir"</span><span class="token operator">:</span> <span class="token string">"/share/Downloads"</span><span class="token punctuation">,</span>  # 临时文件路径<span class="token property">"incomplete-dir-enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"inhibit-desktop-hibernation"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"lpd-enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> #禁用 LDP（本地节点发现，用于在本地网络寻找节点）<span class="token punctuation">,</span> 不少 PT 站的要求<span class="token property">"main-window-height"</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span><span class="token property">"main-window-is-maximized"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"main-window-width"</span><span class="token operator">:</span> <span class="token number">615</span><span class="token punctuation">,</span><span class="token property">"main-window-x"</span><span class="token operator">:</span> <span class="token number">337</span><span class="token punctuation">,</span><span class="token property">"main-window-y"</span><span class="token operator">:</span> <span class="token number">211</span><span class="token punctuation">,</span><span class="token property">"message-level"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token property">"open-dialog-dir"</span><span class="token operator">:</span> <span class="token string">"/share/Download"</span><span class="token punctuation">,</span>  # 网页对话框打开的根目录<span class="token property">"peer-congestion-algorithm"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token property">"peer-limit-global"</span><span class="token operator">:</span> <span class="token number">240</span><span class="token punctuation">,</span> # 全局连接数<span class="token property">"peer-limit-per-torrent"</span><span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span> # 每个种子最多的连接数<span class="token property">"peer-port"</span><span class="token operator">:</span> <span class="token number">51413</span><span class="token punctuation">,</span> # 传入端口，预设的 port 口<span class="token property">"peer-port-random-high"</span><span class="token operator">:</span> <span class="token number">65535</span><span class="token punctuation">,</span> # 传入端口随机值范围上限<span class="token property">"peer-port-random-low"</span><span class="token operator">:</span> <span class="token number">49152</span><span class="token punctuation">,</span> # 传入端口随机值范围下限<span class="token property">"peer-port-random-on-start"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> # 启用随机端口，默认关闭，不建议改为 <span class="token boolean">true</span><span class="token property">"peer-socket-tos"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span><span class="token property">"pex-enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> # 是否启用用户交换，默认为 <span class="token boolean">true</span>，关于 PEX，有兴趣的朋友可参考 http<span class="token operator">:</span><span class="token comment">//en.wikipedia.org/wiki/Peer_exchange，对于只用 PT 的朋友，可以设为 false, 禁用 PEX（节点交换，用于同已与您相连接的节点交换节点名单）, 不少 PT 站的要求</span><span class="token property">"port-forwarding-enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> # 启用端口转发（uPnP），如果路由支持并且也开启了 uPnP，则路由会自动做端口映射，但是需要注意的是如果内网有几台机器同时使用 transmission，就必须更改 peer-port 值为不一样<span class="token property">"preallocation"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> # 预分配文件磁盘空间，<span class="token number">0</span>= 关闭，<span class="token number">1</span>= 快速，<span class="token number">2</span>= 完全。建议取 <span class="token number">1</span> 开启该功能，防止下载大半了才发现磁盘不够。取 <span class="token number">2</span> 时，可以减少磁盘碎片，但速度较慢。<span class="token property">"prefetch-enabled"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"queue-stalled-enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"queue-stalled-minutes"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span><span class="token property">"ratio-limit"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> # 分享率限制<span class="token property">"ratio-limit-enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> # 启用分享率限制，默认不启用<span class="token property">"rename-partial-files"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> #在未完成的文件名后添加后缀.part<span class="token punctuation">,</span><span class="token boolean">false</span>= 禁用<span class="token property">"rpc-authentication-required"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> # 远程控制需要验证，默认为需要<span class="token property">"rpc-bind-address"</span><span class="token operator">:</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> # 远程控制地址绑定，允许 IP 通过 RPC 访问，默认值表示任何地址都可以访问<span class="token property">"rpc-enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> # 启用远程控制，默认启用<span class="token property">"rpc-host-whitelist-enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> # 是否开启主机白名单<span class="token property">"rpc-host-whitelist"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> # 白名单，如果需要远程访问，最好配置<span class="token property">"rpc-password"</span><span class="token operator">:</span> <span class="token string">"{cxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxaE"</span><span class="token punctuation">,</span> #web-ui 的密码，可直接修改，重新运行或者 reload 服务的时候密码会自动 HASH 增加安全性<span class="token property">"rpc-port"</span><span class="token operator">:</span> <span class="token number">9091</span><span class="token punctuation">,</span> # 默认 web-ui 的 port 口，也是远程控制端口，可自行更改<span class="token property">"rpc-url"</span><span class="token operator">:</span> <span class="token string">"/transmission/"</span><span class="token punctuation">,</span><span class="token property">"rpc-username"</span><span class="token operator">:</span> <span class="token string">"transmission"</span><span class="token punctuation">,</span> #默认登入名称，也是远程控制用户名<span class="token property">"rpc-whitelist"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> # 远程控制白名单，默认值为所有地址，支持通配符*，如 <span class="token number">192.168</span>.<span class="token number">2</span>.*<span class="token property">"rpc-whitelist-enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> # 启用远程控制白名单，如果启用，则仅仅上面列出的地址可以远程连接<span class="token property">"scrape-paused-torrents-enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"script-torrent-done-enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"script-torrent-done-filename"</span><span class="token operator">:</span> <span class="token string">"/home/"</span><span class="token punctuation">,</span><span class="token property">"seed-queue-enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"seed-queue-size"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token property">"show-backup-trackers"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"show-extra-peer-details"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"show-filterbar"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"show-notification-area-icon"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"show-options-window"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"show-statusbar"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"show-toolbar"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"show-tracker-scrapes"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"sort-mode"</span><span class="token operator">:</span> <span class="token string">"sort-by-age"</span><span class="token punctuation">,</span><span class="token property">"sort-reversed"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"speed-limit-down"</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span> #平时的下载限速<span class="token property">"speed-limit-down-enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> #启用平时下载限速<span class="token property">"speed-limit-up"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> #平时上传限速<span class="token property">"speed-limit-up-enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> #启用平时上传限速<span class="token property">"start-added-torrents"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"statusbar-stats"</span><span class="token operator">:</span> <span class="token string">"total-ratio"</span><span class="token punctuation">,</span><span class="token property">"torrent-added-notification-enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"torrent-complete-notification-enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"torrent-complete-sound-enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"trash-can-enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"trash-original-torrent-files"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"umask"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token property">"upload-slots-per-torrent"</span><span class="token operator">:</span> <span class="token number">14</span><span class="token property">"utp-enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> #启用μTP 协议<span class="token property">"watch-dir"</span><span class="token operator">:</span> <span class="token string">"/share/bt"</span><span class="token punctuation">,</span>  # 监听文件夹目录<span class="token property">"watch-dir-enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span> # 是否监听文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Q：TR提示FILE-NAME-TOO-LONG"><a href="#Q：TR提示FILE-NAME-TOO-LONG" class="headerlink" title="Q：TR提示FILE NAME TOO LONG"></a>Q：TR提示FILE NAME TOO LONG</h3><p>A：TR最大文件名MAX_PATH ,260个字符<br>方法1：改路径和保存路径的文件夹名字，越短越好，在web control种子上面右键，修改种子文件或目录名称。次选方法，不勾选下载文件名过长的文件</p><p>方法2：遇到个名字特长的，一直下载失败，使用软连接进一步缩短路径名长度</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#cd /</span><span class="token comment">#ln -s  /share/CACHEDEV1_DATA/Download/ DL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>方法3：<br>上面两种还是不行，换QBittorrent吧</p><p>不过，最近有好消息，这个bug我去看了下源代码，找到原来有人试图修复过它，但是并没有合并到最新版本。发个post提醒bug没有修复，居然有回复了。这个bug将在3.0版本修复，见<a href="https://github.com/transmission/transmission/issues/122"><strong>下图</strong></a>。</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/1820210818164746.png" alt="image-20210818164744814"></p><h3 id="Q-transmission-如何修改登陆密码"><a href="#Q-transmission-如何修改登陆密码" class="headerlink" title="Q: transmission 如何修改登陆密码"></a>Q: transmission 如何修改登陆密码</h3><p>A: 第一种方式<br>qnap 中，transmission3.0的配置文件路径如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/share/CACHEDEV1_DATA/.qpkg/QTransmission3/etc/settings.json <span class="token builtin class-name">cd</span> /share/CACHEDEV1_DATA/.qpkg/QTransmission3/etc/settings.json<span class="token function">vim</span> settings.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>找到”rpc-password”:</p><p>后面引号内就是经过加密的密码，不要管他怎么加密的，直接把引号内的内容修改为你的新密码就可以了，比如”rpc-password”:”xxorg.com”</p><p>然后按“ESC”键，输入:wq 保存退出，然后重启tr即可</p><p>第二种方式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、控制台输入，-u后边是用户名，-v后边跟着的是登陆密码</span>transmission-daemon --paused -t -u admin -v <span class="token number">123456</span><span class="token comment"># 将会把生成的密码保存到：~/.config/transmission-daemon/settings.json</span><span class="token comment"># 其实是生成配置文件并保存到当前登陆用户的家目录下</span><span class="token comment"># 2、打开~/.config/transmission-daemon/settings.json并复制加密的密码</span><span class="token comment"># 3、将加密的密码粘贴到/media/AiCard_01/transmission/config/settings.json</span><span class="token comment"># 替换掉内容为：rpc-password 后面的密码</span><span class="token comment"># 4、重启Transmission</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ps:通过ps定位transmission位置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> trans<span class="token comment"># cd /share/CACHEDEV1_DATA/.qpkg/QTransmission3/bin</span><span class="token comment"># ./transmission-daemon --paused -t -u [name] -v [password]</span><span class="token comment"># cd ~/.config/transmission-daemon</span><span class="token punctuation">[</span>~/.config/transmission-daemon<span class="token punctuation">]</span> <span class="token comment"># vi settings.json</span>复制生成的密码到前面的配置文件里面。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Q-为Transmission增加种子目录监控，实现自动下载"><a href="#Q-为Transmission增加种子目录监控，实现自动下载" class="headerlink" title="Q: 为Transmission增加种子目录监控，实现自动下载"></a>Q: 为Transmission增加种子目录监控，实现自动下载</h3><p>/share/CACHEDEV3_DATA/.qpkg/QTransmission3/etc</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">改/var/packages/transmission/target/var/settings.json 在最后面增加<span class="token number">2</span>行。<span class="token property">"upload-slots-per-torrent"</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>（原文件最后一行，注意添加个逗号，不添加transmission好像不能启动） <span class="token property">"watch-dir"</span><span class="token operator">:</span> <span class="token string">"/XXXXX/XXXXX"</span><span class="token punctuation">,</span> （修改成自己nas上的同步目录） <span class="token property">"watch-dir-enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span>（无逗号）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>保存，退出。</p><p>启动Transmission  等待1-2分钟，就好了。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">    <span class="token property">"speed-limit-up-enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"start-added-torrents"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"trash-original-torrent-files"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"umask"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token property">"upload-slots-per-torrent"</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>    <span class="token property">"utp-enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"watch-dir"</span><span class="token operator">:</span> <span class="token string">"/share/Download/Seed/complete"</span><span class="token punctuation">,</span>    <span class="token property">"watch-dir-enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Q-Nas-上面-Transmission-如何做种？"><a href="#Q-Nas-上面-Transmission-如何做种？" class="headerlink" title="Q: Nas 上面 Transmission 如何做种？"></a>Q: Nas 上面 Transmission 如何做种？</h3><p><strong>A:</strong></p><p>注意，此方法仅适用于开启了ssh的机器<br>可以看到可执行文件目录下有这么几个文件，每个人的安装目录都不一样，自行查找，或用<br>我的文件位置是在/volume1/@appstore/transmission/bin，用到的命令是 transmission-create</p><p>方法也很简单，写一个范例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./transmission-create -p -o /volume1/data/WikiLeaks-Year-Zero-2017-v1.torrent -t https://announce.XXXXXXXXXX.cc/announce.php -s <span class="token number">2048</span> /volume1/data/WikiLeaks-Year-Zero-2017-v1.7z <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参数<br>-p 表示这是私用的种子，这个必须要加上<br>-o 生成的种子输出位置，不要忘记把名字打上<br>-t tracker的地址，我用的家园的做范本，大家自行修改<br>-s 每个文件块的大小，单位是KB，我设置的是2M，也就是2048KB<br>最后空一格写源文件的位置，也就是文件的存放位置，可以是一个文件或者一整个目录<br>最后可以空一行加一个&amp;，这样即使关掉窗口也可以在后台运行<br>填完，回车，种子就在制作了</p><p>种子已经躺在这了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>/opt/QTransmission3/bin<span class="token punctuation">]</span> <span class="token comment"># ./transmission-create -p -o /share/CACHEDEV1_DATA/Download/Seed/海贼王\ \(1999\).torrent -t https://announce.XXXXXXXX.video/announce.php -s 2048 /share/CACHEDEV1_DATA/Download/海贼王\ \(1999\)/ &amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;h3 id=&quot;qnapclub&quot;&gt;&lt;a href=&quot;#qnapclub&quot; class=&quot;headerlink&quot; title=&quot;qnapclub&quot;</summary>
      
    
    
    
    <category term="QNAP" scheme="https://blog.17lai.fun/categories/QNAP/"/>
    
    <category term="技巧" scheme="https://blog.17lai.fun/categories/QNAP/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="QNAP" scheme="https://blog.17lai.fun/tags/QNAP/"/>
    
    <category term="PT" scheme="https://blog.17lai.fun/tags/PT/"/>
    
    <category term="BT" scheme="https://blog.17lai.fun/tags/BT/"/>
    
    <category term="transmission" scheme="https://blog.17lai.fun/tags/transmission/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab的安装及使用教程完全版</title>
    <link href="https://blog.17lai.fun/tools/gitlab/2021-08-02-gitlab-installation-and-use-tutorial-complete-version/"/>
    <id>https://blog.17lai.fun/tools/gitlab/2021-08-02-gitlab-installation-and-use-tutorial-complete-version/</id>
    <published>2021-08-02T08:25:00.000Z</published>
    <updated>2021-09-11T10:51:48.637Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Gitlab概述"><a href="#1-Gitlab概述" class="headerlink" title="1. Gitlab概述"></a>1. Gitlab概述</h2><hr><h3 id="1-1-GitLab介绍"><a href="#1-1-GitLab介绍" class="headerlink" title="1.1 GitLab介绍"></a>1.1 GitLab介绍</h3><p>GitLab是利用Ruby on Rails一个开源的版本管理系统，实现一个自托管的Git项目仓库，可通过Web界面进行访问公开的或者私人项目。</p><p>GitLab能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序(Wall)进行交流。</p><p>它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找</p><h3 id="1-2-Gitlab服务构成"><a href="#1-2-Gitlab服务构成" class="headerlink" title="1.2 Gitlab服务构成"></a>1.2 Gitlab服务构成</h3><p>Nginx：静态web服务器。</p><p>gitlab-shell：用于处理Git命令和修改authorized keys列表。</p><p>gitlab-workhorse: 轻量级的反向代理服务器。</p><p>logrotate：日志文件管理工具。</p><p>postgresql：数据库。</p><p>redis：缓存数据库。</p><p>sidekiq：用于在后台执行队列任务（异步执行）。</p><p>unicorn：An HTTP server for Rack applications，GitLab Rails应用是托管在这个服务器上面的。</p><h3 id="1-3-Gitlab工作流程"><a href="#1-3-Gitlab工作流程" class="headerlink" title="1.3 Gitlab工作流程"></a>1.3 Gitlab工作流程</h3><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/05/2820210528222044.png"></p><h3 id="1-4-GitLab-Shell"><a href="#1-4-GitLab-Shell" class="headerlink" title="1.4 GitLab Shell"></a>1.4 GitLab Shell</h3><p>GitLab Shell有两个作用：为GitLab处理Git命令、修改authorized keys列表</p><p>当通过SSH访问GitLab Server时，GitLab Shell会：</p><ul><li>  限制执行预定义好的Git命令（git push，git pull，git annex）</li><li>  调用GitLab Rails API检查权限</li><li>  执行pre-receive钩子（在企业版中叫做Git钩子）</li><li>  执行用户请求的动作，处理GitLab的post-receive动作</li><li>  处理自定义的post-receive动作</li></ul><p>当通过http(s)访问GitLab Server时，工作流程取决于你是从Git仓库拉取(pull)代码还是向git仓库推送(push)代码：</p><p>如果是从Git仓库拉取(pull)代码，GitLab Rails应用会全权负责处理用户鉴权和执行Git命令的工作</p><p>如果是向Git仓库推送(push)代码，GitLab Rails应用既不会进行用户鉴权也不会执行Git命令，它会把以下工作交由GitLab Shell进行处理：</p><ul><li>  调用GitLab Rails API 检查权限</li><li>  执行pre-receive钩子（在GitLab企业版中叫做Git钩子）</li><li>  执行你请求的动作</li><li>  处理GitLab的post-receive动作</li><li>  处理自定义的post-receive动作</li></ul><h3 id="1-5-GitLab-Workhorse"><a href="#1-5-GitLab-Workhorse" class="headerlink" title="1.5 GitLab Workhorse"></a>1.5 GitLab Workhorse</h3><p>GitLab Workhorse是一个敏捷的反向代理。它会处理一些大的HTTP请求，比如文件上传、文件下载、Git push/pull和Git包下载。其它请求会反向代理到GitLab Rails应用，即反向代理给后端的unicorn。</p><h2 id="2-Gitlab的安装部署"><a href="#2-Gitlab的安装部署" class="headerlink" title="2. Gitlab的安装部署"></a>2. Gitlab的安装部署</h2><ul><li>  Gitlab要求服务器内存2G以上</li></ul><h3 id="2-1-方式一-下载gitlab-ce的rpm包"><a href="#2-1-方式一-下载gitlab-ce的rpm包" class="headerlink" title="2.1 方式一:下载gitlab-ce的rpm包"></a>2.1 方式一:下载gitlab-ce的rpm包</h3><ul><li>  <a href="https://packages.gitlab.com/gitlab/gitlab-ce">gitlab官方rpm包下载</a></li><li>  <a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/">清华的源</a></li></ul><p>将对应版本的gitlab-ce下载到本地后，直接yum安装即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 要先将这个rpm包下载到本地</span>yum <span class="token function">install</span> -y gitlab-ce-13.6.1-ce.0.el7.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-2-方式二-配置yum源"><a href="#2-2-方式二-配置yum源" class="headerlink" title="2.2 方式二:配置yum源"></a>2.2 方式二:配置yum源</h3><p>在 /etc/yum.repos.d/ 下新建 gitlab-ce.repo，写入如下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>gitlab-ce<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>gitlab-ce<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/<span class="token assign-left variable">Repo_gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">Enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">Gpgkey</span><span class="token operator">=</span>https://packages.gitlab.com/gpg.key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后创建cache，再直接安装gitlab-ce</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum makecache  <span class="token comment"># 这一步会创建大量的数据</span> <span class="token comment"># 直接安装最新版</span>yum <span class="token function">install</span> -y gitlab-ce <span class="token comment"># 如果要安装指定的版本，在后面填上版本号即可</span>yum <span class="token function">install</span> -y  gitlab-ce-13.6.1 <span class="token comment"># 如果安装时出现gpgkey验证错误，只需在安装时明确指明不进行gpgkey验证</span>yum <span class="token function">install</span> gitlab-ce -y --nogpgcheck<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-1-单服务启动模式"><a href="#2-2-1-单服务启动模式" class="headerlink" title="2.2.1. 单服务启动模式"></a><strong>2.2.1. 单服务启动模式</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d --name gitlab --hostname gitlab.example.com <span class="token punctuation">\</span>-e <span class="token assign-left variable">GITLAB_OMNIBUS_CONFIG</span><span class="token operator">=</span><span class="token string">"    external_url 'https://gitlab.example.com'    gitlab_rails['gitlab_shell_ssh_port'] = 22    nginx['redirect_http_to_https'] = true    nginx['ssl_dhparam'] = '/etc/gitlab/ssl/dhparam.pem'    nginx['ssl_certificate'] = '/etc/gitlab/ssl/domain.crt'    nginx['ssl_certificate_key'] = '/etc/gitlab/ssl/domain.key'    nginx['custom_gitlab_server_config'] = 'location ^~ /.well-known {<span class="token entity" title="\n">\n</span> alias /var/opt/gitlab/letsencrypt/.well-known;<span class="token entity" title="\n">\n</span>}<span class="token entity" title="\n">\n</span>'    high_availability['mountpoint'] = ['/etc/gitlab', '/var/log/gitlab' '/var/opt/gitlab'  # 严格限定gitlab服务启动前，指定文件系统挂完毕"</span> <span class="token punctuation">\</span>-p <span class="token number">22</span>:22 -p <span class="token number">80</span>:80 -p <span class="token number">443</span>:443 <span class="token punctuation">\</span>-v /srv/gitlab/config:/etc/gitlab <span class="token punctuation">\</span>-v /srv/gitlab/logs:/var/log/gitlab <span class="token punctuation">\</span>-v /srv/gitlab/data:/var/opt/gitlab <span class="token punctuation">\</span>-v /etc/certs:/etc/gitlab/ssl <span class="token punctuation">\</span>--restart<span class="token operator">=</span>always gitlab/gitlab-ce:latest <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-1-Compose服务编排模式-推荐方式"><a href="#2-2-1-Compose服务编排模式-推荐方式" class="headerlink" title="2.2.1. Compose服务编排模式(推荐方式)"></a><strong>2.2.1. Compose服务编排模式(推荐方式)</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull gitlab/gitlab-ce:latest <span class="token comment">############################ 多行命令开始 ##########################</span><span class="token function">cat</span> <span class="token operator">&gt;</span> docker-compose.yaml <span class="token operator">&lt;&lt;</span><span class="token string">EOFversion: '2' services:   Gitlab:    image: 'gitlab/gitlab-ce:latest'    container_name: 'gitlab'    hostname: 'gitlab.example.com'    restart: always    ports:      - '22:22'      - '80:80'      - '443:443'    environment:      GITLAB_OMNIBUS_CONFIG: |        # Add any other gitlab.rb configuration here, each on its own line        external_url 'https://gitlab.example.com'        gitlab_rails['gitlab_shell_ssh_port'] = 22        nginx['redirect_http_to_https'] = true        nginx['ssl_dhparam'] = "/etc/gitlab/ssl/dhparam.pem"        nginx['ssl_certificate'] = "/etc/gitlab/ssl/domain.crt"        nginx['ssl_certificate_key'] = "/etc/gitlab/ssl/domain.key"        nginx['custom_gitlab_server_config'] = "location ^~ /.well-known {<span class="token entity" title="\n">\n</span> alias /var/opt/gitlab/letsencrypt/.well-known;<span class="token entity" title="\n">\n</span>}<span class="token entity" title="\n">\n</span>"        high_availability['mountpoint'] = ["/etc/gitlab", "/var/log/gitlab", "/var/opt/gitlab"]  # 严格限定gitlab服务启动前，指定文件系统挂完毕    volumes:      - /srv/gitlab/config:/etc/gitlab      - /srv/gitlab/logs:/var/log/gitlab      - /srv/gitlab/data:/var/opt/gitlab      - /etc/certs:/etc/gitlab/sslEOF</span><span class="token comment">############################ 多行命令结束 ##########################</span> <span class="token comment"># 启动服务</span>docker-compose -f docker-compose.yaml up -d <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-gitlab的配置"><a href="#2-3-gitlab的配置" class="headerlink" title="2.3 gitlab的配置"></a>2.3 gitlab的配置</h3><p>配置文件位置  /etc/gitlab/gitlab.rb</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@centos7 test<span class="token punctuation">]</span><span class="token comment"># vim /etc/gitlab/gitlab.rb</span> <span class="token punctuation">[</span>root@centos7 test<span class="token punctuation">]</span><span class="token comment"># grep "^[a-Z]" /etc/gitlab/gitlab.rb</span> external_url <span class="token string">'http://10.0.0.51'</span>  <span class="token comment"># 这里一定要加上http://</span> <span class="token comment"># 配置邮件服务</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_enable'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_address'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"smtp.qq.com"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_port'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_user_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hgzerowzh@qq.com"</span>  <span class="token comment"># 自己的qq邮箱账号</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"xxx"</span>  <span class="token comment"># 开通smtp时返回的授权码</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_domain'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"qq.com"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_authentication'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"login"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_enable_starttls_auto'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_tls'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'gitlab_email_from'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hgzerowzh@qq.com"</span>  <span class="token comment"># 指定发送邮件的邮箱地址</span>user<span class="token punctuation">[</span><span class="token string">"git_user_email"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"shit@qq.com"</span>   <span class="token comment"># 指定接收邮件的邮箱地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>修改好配置文件后，要使用 gitlab-ctl reconfigure 命令重载一下配置文件，否则不生效。</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gitlab-ctl reconfigure <span class="token comment"># 重载配置文件</span>gitlab-ctl restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="测试邮件服务器"><a href="#测试邮件服务器" class="headerlink" title="测试邮件服务器"></a>测试邮件服务器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gitlab-rails consoleNotify.test_email<span class="token punctuation">(</span><span class="token string">'rollinghell@foxmail.com'</span>,<span class="token string">'testbiaoti'</span>,<span class="token string">'testzhegnwen1'</span><span class="token punctuation">)</span>.deliver_now<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test102 ~<span class="token punctuation">]</span><span class="token comment"># gitlab-rails console</span>-------------------------------------------------------------------------------- GitLab:       <span class="token number">12.5</span>.0 <span class="token punctuation">(</span>1f0ab8978ef<span class="token punctuation">)</span>GitLab Shell: <span class="token number">10.2</span>.0 PostgreSQL:   <span class="token number">10.9</span>--------------------------------------------------------------------------------Loading production environment <span class="token punctuation">(</span>Rails <span class="token number">5.2</span>.3<span class="token punctuation">)</span>irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:001:<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> Notify.test_email<span class="token punctuation">(</span><span class="token string">'andycrusoe@gmail.com'</span>,<span class="token string">'test'</span>,<span class="token string">'test'</span><span class="token punctuation">)</span>.deliver_nowNotify<span class="token comment">#test_email: processed outbound mail in 1.4ms</span>Sent mail to anliven@126.com <span class="token punctuation">(</span><span class="token number">73</span>.0ms<span class="token punctuation">)</span>Date: Wed, <span class="token number">27</span> Nov <span class="token number">2019</span> <span class="token number">15</span>:12:58 +0800From: GitLab <span class="token operator">&lt;</span>gitlab@192.168.16.10<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>Reply-To: GitLab <span class="token operator">&lt;</span>noreply@192.168.16.10<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>To: anliven@126.comMessage-ID: <span class="token operator">&lt;</span>5dde21fa612d4_3a1b3fcb38fcf9c0651b@test102.mail<span class="token operator">&gt;</span>Subject: <span class="token builtin class-name">test</span>Mime-Version: <span class="token number">1.0</span>Content-Type: text/html<span class="token punctuation">;</span><span class="token assign-left variable">charset</span><span class="token operator">=</span>UTF-8Content-Transfer-Encoding: 7bitAuto-Submitted: auto-generatedX-Auto-Response-Suppress: All<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html PUBLIC <span class="token string">"-//W3C//DTD HTML 4.0 Transitional//EN"</span> <span class="token string">"http://www.w3.org/TR/REC-html40/loose.dtd"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>test<span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/html<span class="token operator">&gt;</span><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token comment">#&lt;Mail::Message:70141649239780, Multipart: false, Headers: &lt;Date: Wed, 27 Nov 2019 15:12:58 +0800&gt;, &lt;From: GitLab &lt;gitlab@192.168.16.102&gt;&gt;, &lt;Reply-To: GitLab &lt;noreply@192.168.16.102&gt;&gt;, &lt;To: anliven@126.com&gt;, &lt;Message-ID: &lt;5dde21fa612d4_3a1b3fcb38fcf9c0651b@test102.mail&gt;&gt;, &lt;Subject: test&gt;, &lt;Mime-Version: 1.0&gt;, &lt;Content-Type: text/html; charset=UTF-8&gt;, &lt;Content-Transfer-Encoding: 7bit&gt;, &lt;Auto-Submitted: auto-generated&gt;, &lt;X-Auto-Response-Suppress: All&gt;&gt;</span>irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:002:<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span>irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:003:<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> <span class="token builtin class-name">exit</span><span class="token punctuation">[</span>root@test102 ~<span class="token punctuation">]</span><span class="token comment">#</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置gitlab代理"><a href="#配置gitlab代理" class="headerlink" title="配置gitlab代理"></a>配置gitlab代理</h4><p><a href="https://docs.gitlab.com/omnibus/settings/environment-variables.html">https://docs.gitlab.com/omnibus/settings/environment-variables.html</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gitaly<span class="token punctuation">[</span><span class="token string">'env'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"http_proxy"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">"http://USERNAME:PASSWORD@example.com:8080"</span>,    <span class="token string">"https_proxy"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">"http://USERNAME:PASSWORD@example.com:8080"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-Gitlab常用命令"><a href="#2-4-Gitlab常用命令" class="headerlink" title="2.4 Gitlab常用命令"></a>2.4 Gitlab常用命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gitlab-ctl start         <span class="token comment"># 启动所有 gitlab 组件</span>gitlab-ctl stop          <span class="token comment"># 停止所有 gitlab 组件</span>gitlab-ctl restart       <span class="token comment"># 重启所有 gitlab 组件</span>gitlab-ctl status        <span class="token comment"># 查看服务状态</span> gitlab-ctl reconfigure   <span class="token comment"># 启动服务</span>gitlab-ctl show-config   <span class="token comment"># 验证配置文件</span> gitlab-ctl <span class="token function">tail</span>          <span class="token comment"># 查看日志</span> gitlab-rake gitlab:check <span class="token assign-left variable">SANITIZE</span><span class="token operator">=</span>true --trace    <span class="token comment"># 检查gitlab</span> <span class="token function">vim</span> /etc/gitlab/gitlab.rb <span class="token comment"># 修改默认的配置文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-gitlab-ctl常用命令介绍"><a href="#2-5-gitlab-ctl常用命令介绍" class="headerlink" title="2.5 gitlab-ctl常用命令介绍"></a>2.5 gitlab-ctl常用命令介绍</h3><table><thead><tr><th align="right">命令</th><th>说明</th></tr></thead><tbody><tr><td align="right">check-config</td><td>检查在gitlab中是否有任何配置。在指定版本中删除的rb</td></tr><tr><td align="right">deploy-page</td><td>安装部署页面</td></tr><tr><td align="right">diff-config</td><td>将用户配置与包可用配置进行比较</td></tr><tr><td align="right">remove-accounts</td><td>删除所有用户和组</td></tr><tr><td align="right">upgrade</td><td>升级</td></tr><tr><td align="right">service-list</td><td>查看所有服务</td></tr><tr><td align="right">once</td><td>如果GitLab服务停止了就启动服务，如果已启动就不做任何操作</td></tr><tr><td align="right">restart</td><td>重启GitLab服务</td></tr><tr><td align="right">start</td><td>如果GitLab服务停止了就启动服务，如果已启动就重启服务</td></tr><tr><td align="right">stop</td><td>停止GitLab服务</td></tr><tr><td align="right">status</td><td>查看GitLab服务状态</td></tr><tr><td align="right">reconfigure</td><td>重新配置GitLab并启动</td></tr></tbody></table><h2 id="3-Gitlab的使用"><a href="#3-Gitlab的使用" class="headerlink" title="3. Gitlab的使用"></a>3. Gitlab的使用</h2><ul><li>  Gitlab安装好后，设置密码，管理账户为root</li></ul><h3 id="3-1-创建Group"><a href="#3-1-创建Group" class="headerlink" title="3.1 创建Group"></a><strong>3.1 创建Group</strong></h3><ul><li>  填上组名即可，这里组名为java</li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/05/2820210528222105.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802164637.png"></p><h3 id="3-2-创建User"><a href="#3-2-创建User" class="headerlink" title="3.2 创建User"></a><strong>3.2 创建User</strong></h3><ul><li>  创建四个User：pm、dev1、dev2、dev3</li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/05/2820210528222131.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/05/2820210528222120.png"></p><h3 id="3-3-添加User到Group中并授权"><a href="#3-3-添加User到Group中并授权" class="headerlink" title="3.3 添加User到Group中并授权"></a><strong>3.3 添加User到Group中并授权</strong></h3><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/05/2820210528222140.png"></p><h3 id="3-4-创建Project并配置SSH"><a href="#3-4-创建Project并配置SSH" class="headerlink" title="3.4 创建Project并配置SSH"></a><strong>3.4 创建Project并配置SSH</strong></h3><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/05/2820210528222147.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/05/2820210528222154.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/05/2820210528222201.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/05/2820210528222233.png"></p><h3 id="3-5-在项目中添加成员"><a href="#3-5-在项目中添加成员" class="headerlink" title="3.5 在项目中添加成员"></a><strong>3.5 在项目中添加成员</strong></h3><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802164730.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802164804.png"></p><h3 id="3-6-将本地文件推送到Gitlab"><a href="#3-6-将本地文件推送到Gitlab" class="headerlink" title="3.6 将本地文件推送到Gitlab"></a>3.6 将本地文件推送到Gitlab</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将app01项目克隆下来</span><span class="token function">git</span> clone git@10.0.0.51:java/app01.git <span class="token comment"># 初始化配置</span><span class="token function">git</span> config --global user.name <span class="token string">"hgzero"</span><span class="token function">git</span> config --global user.email <span class="token string">"hgzero@qq.com"</span> <span class="token comment"># 在app01目录下新建一些文件</span> <span class="token comment"># 推送到gitlab</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">"first edition"</span><span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802164823.png"></p><h2 id="4-制定开发计划"><a href="#4-制定开发计划" class="headerlink" title="4. 制定开发计划"></a>4. 制定开发计划</h2><h3 id="4-1-创建开发计划"><a href="#4-1-创建开发计划" class="headerlink" title="4.1 创建开发计划"></a><strong>4.1 创建开发计划</strong></h3><ul><li>  项目：app01</li><li>  版本：v1.0</li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802173643.png" alt="img"></p><h3 id="4-2-创建里程碑Milestones"><a href="#4-2-创建里程碑Milestones" class="headerlink" title="4.2 创建里程碑Milestones"></a><strong>4.2 创建里程碑Milestones</strong></h3><ul><li>  用pm账号登录gitlab后操作（先要在admin中设置pm账号的密码）</li><li>  要根据开发计划来创建Milestones</li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802164839.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802164935.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802164956.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802165053.png"></p><h3 id="4-3-根据开发计划创建issue"><a href="#4-3-根据开发计划创建issue" class="headerlink" title="4.3 根据开发计划创建issue"></a>4.3 根据开发计划创建issue</h3><ul><li>  创建4个issue，分派给dev1和dev2这两个开发人员</li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802165109.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802165138.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802165158.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802165215.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802165238.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802165257.png"></p><h3 id="4-4-开发者登录账号查看分派的任务"><a href="#4-4-开发者登录账号查看分派的任务" class="headerlink" title="**4.4 开发者登录账号查看分派的任务 **"></a>**4.4 开发者登录账号查看分派的任务 **</h3><ul><li>  然后开发dev1登录gitlab，就能看到任务已经分配过来了</li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802165316.png"></p><h3 id="4-5-开发流程"><a href="#4-5-开发流程" class="headerlink" title="4.5 开发流程"></a><strong>4.5 开发流程</strong></h3><ul><li>  公司里的开发开始任务</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 1. 先从仓库把项目拉下来</span><span class="token function">git</span> clone git@10.0.0.51:java/app01.git<span class="token builtin class-name">cd</span> app01/ <span class="token comment"># 2.先创建一个自己的分支，然后进行开发</span><span class="token function">git</span> checkout -b index   <span class="token comment"># 创建一个叫index的分支，并切换到这个分支</span><span class="token function">git</span> status <span class="token comment"># 3. 开始开发首页</span><span class="token builtin class-name">echo</span> <span class="token string">"&lt;h1&gt;welcome to this app&lt;/h1&gt;"</span> <span class="token operator">&gt;</span> index.html  <span class="token comment"># 假设就开发了一个index页面</span> <span class="token comment"># 4. 开发完成后，把项目传到仓库</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">"index"</span><span class="token comment"># 如果写成 git commit -m "close #2" ，则表示merge请求允许且merge成功之后，自动删除编号为#2的issue</span> <span class="token comment"># 传到index分支</span><span class="token function">git</span> push origin index<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-合并分支"><a href="#4-6-合并分支" class="headerlink" title="4.6 合并分支"></a><strong>4.6 合并分支</strong></h3><p><strong>1）开发dev1发送合并分支请求给pm</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802165333.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802165341.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802165350.png"></p><p><strong>2）pm收到开发的Merge请求后进行处理</strong></p><ul><li>   使用pm登录，就可以看到pm已经收到了合并请求merge request</li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802165452.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802165505.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802165423.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802164313.png"></p><p><strong>3）开发dev1确认任务完成</strong></p><ul><li>  退出pm账户，登入dev1账户：</li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802164301.png"></p><ul><li>   或者点进去后，在侧边栏进行标识Done，然后已经完成的issue，可以将其Close</li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802164248.png"></p><ul><li>  这个时候Milestones的进度已经往前进了一些了：</li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802164237.png"></p><h3 id="4-7-开发其他功能"><a href="#4-7-开发其他功能" class="headerlink" title="4.7 开发其他功能"></a>4.7 开发其他功能</h3><ul><li>  然后其他开发者或者自己再次进行开发时，先要把刚刚更新后的内容（master主干）拉回来，然后再进行开发</li></ul><p>git checkout master  # 切换到master<br>git pull             # 从远端仓库拉取数据<br># 然后再进行其他操作</p><h2 id="5-Gitlab备份恢复"><a href="#5-Gitlab备份恢复" class="headerlink" title="5. Gitlab备份恢复"></a>5. Gitlab备份恢复</h2><h3 id="5-1-备份gitlab"><a href="#5-1-备份gitlab" class="headerlink" title="5.1 备份gitlab"></a>5.1 备份gitlab</h3><p><strong>1）修改配置文件</strong></p><ul><li>  <strong>/etc/gitlab/gitlab.rb</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 备份保存的位置，这里是默认位置，可修改成指定的位置</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'backup_path'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"/var/opt/gitlab/backups"</span> <span class="token comment"># 设置备份保存的时间，超过此时间的日志将会被新覆盖</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'backup_keep_time'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">604800</span>  <span class="token comment"># 这里是默认设置，保存7天</span> <span class="token comment"># 特别注意：</span><span class="token comment">#     如果自定义了备份保存位置，则要修改备份目录的权限，比如：</span><span class="token comment">#     chown -R git.git /data/backup/gitlab</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>  配置完成后要重启以使配置生效</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 重读配置文件</span>gitlab-ctl reconfigure <span class="token comment"># 重启gitlab</span>gitlab-ctl restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2）设置定时任务</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 每天凌晨2点定时创建备份</span><span class="token comment"># 将一下内容写入到定时任务中 crontab -e</span><span class="token number">0</span> <span class="token number">2</span> * * * /usr/bin/gitlab-rake gitlab:backup:create <span class="token comment"># 备份策略建议：</span><span class="token comment">#     本地保留3到7天，在异地备份永久保存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3）备份时间的识别</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 备份后的文件类似这样的形式：1494170842_gitlab_backup.tar，可以根据前面的时间戳确认备份生成的时间</span> data  -d  @1494170842<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-2-恢复gitlab"><a href="#5-2-恢复gitlab" class="headerlink" title="5.2 恢复gitlab"></a>5.2 恢复gitlab</h3><h4 id="1）停止停止相关数据连接-数据写入服务"><a href="#1）停止停止相关数据连接-数据写入服务" class="headerlink" title="1）停止停止相关数据连接,数据写入服务"></a><strong>1）停止停止相关数据连接,数据写入服务</strong></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 停止数据写入服务</span>gitlab-ctl stop pumagitlab-ctl stop sidekiq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2）进行数据恢复并重启"><a href="#2）进行数据恢复并重启" class="headerlink" title="2）进行数据恢复并重启"></a><strong>2）进行数据恢复并重启</strong></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进行恢复</span>gitlab-rake gitlab:backup:restore <span class="token assign-left variable">BACKUP</span><span class="token operator">=</span>1627839447_2021_08_01_14.1.1-ee  <span class="token comment"># 这个时间戳就是刚刚备份的文件前面的时间戳</span> <span class="token comment"># 重启</span>gitlab-ctl restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-gitlab邮件通知配置"><a href="#6-gitlab邮件通知配置" class="headerlink" title="6. gitlab邮件通知配置"></a>6. gitlab邮件通知配置</h2><ul><li>  vim  /etc/gitlab/gitlab.rb</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gitlab_rails<span class="token punctuation">[</span><span class="token string">'time_zone'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span> gitlab_rails<span class="token punctuation">[</span><span class="token string">'gitlab_email_enabled'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'gitlab_email_from'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'example@163.com'</span> <span class="token comment"># 填写发件人的邮箱地址</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'gitlab_email_display_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'gitlab'</span> gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_enable'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_address'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"smtp.163.com"</span>  <span class="token comment"># smtp服务器的地址,如网易的地址</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_port'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25</span>                 <span class="token comment"># 要注意如果使用了SSL/TLS的话,端口可能不是25</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_user_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"smtp用户名"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"smtp用户密码"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_domain'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"163.com"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_authentication'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"login"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>启用邮件功能</strong><br>Gitlab 的 Compose 配置 GITLAB_OMNIBUS_CONFIG 节点下增加如下几行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">########## 邮件服务配置 ##########</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_enable'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_address'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"smtp.exmail.qq.com"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_port'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">465</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_tls'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_user_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"账号"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"密码"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_authentication'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"login"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_enable_starttls_auto'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span> gitlab_rails<span class="token punctuation">[</span><span class="token string">'gitlab_email_from'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"发件人邮箱"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-使用SourceTree进行项目开发"><a href="#7-使用SourceTree进行项目开发" class="headerlink" title="7. 使用SourceTree进行项目开发"></a>7. 使用SourceTree进行项目开发</h2><hr><h3 id="7-1-项目拉取"><a href="#7-1-项目拉取" class="headerlink" title="7.1 项目拉取"></a>7.1 项目拉取</h3><ul><li>  先把项目克隆下来</li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802164210.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802164157.png"></p><ul><li>   如果ssh的方式克隆失败，可能是因为SSH Key没找到，可以在这里添加</li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802164146.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802164132.png"></p><h3 id="7-2-创建分支进行功能开发"><a href="#7-2-创建分支进行功能开发" class="headerlink" title="7.2 创建分支进行功能开发"></a>7.2 创建分支进行功能开发</h3><p><strong>1）新建立一个叫“pay”的分支</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802164122.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802164113.png"></p><p><strong>2）进行功能开发</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802164103.png"></p><h3 id="7-3-提交项目"><a href="#7-3-提交项目" class="headerlink" title="7.3 提交项目"></a>7.3 提交项目</h3><p><strong>1）开发pay功能完成后进行提交</strong></p><ul><li>  可以看到SourceTree中已经有“未提交的更改”</li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802164054.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802164042.png"></p><p><strong>2）添加“用户信息”</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802164029.png"></p><p>** 3）进行提交**</p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802164014.png"></p><ul><li>  注释也可以写成  close #3    ，作用是提交完成后关闭3号issue</li></ul><h3 id="7-4-推送到仓库"><a href="#7-4-推送到仓库" class="headerlink" title="7.4 推送到仓库"></a><strong>7.4 推送到仓库</strong></h3><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802164002.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802163947.png"></p><ul><li>   然后就可以在gitlab上进行发送merge请求了，后面就可以进行其他操作了</li></ul><h3 id="7-5-项目上线"><a href="#7-5-项目上线" class="headerlink" title="7.5 项目上线"></a>7.5 项目上线</h3><p><strong>1）当所有工作完成之后，就可以进行上线了</strong></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802163932.png"></p><p><strong>2）打标签</strong></p><ul><li>   上线先打个标签</li></ul><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802163916.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802163907.png"></p><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/05/2820210528225256.png"></p><p>** 3）删除无用分支**</p><ul><li>  然后删除已经合并到主干中的不必要的分支，如index、pay等</li><li>最后一定要注意时间一定要同步，不然会错乱</li></ul><h2 id="8-Gitlab调优"><a href="#8-Gitlab调优" class="headerlink" title="8. Gitlab调优"></a><strong>8. Gitlab调优</strong></h2><p>gitlab对内存资源的消耗比较厉害<br>其中尤以 sidekiq队列 及 unicorn服务 两个组件对内存消耗最多<br>可以再容器启动时对相关参数进行微调：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">unicorn<span class="token punctuation">[</span><span class="token string">'worker_processes'</span><span class="token punctuation">]</span> = 1unicorn<span class="token punctuation">[</span><span class="token string">'worker_memory_limit_min'</span><span class="token punctuation">]</span> = "300 * 1 &lt;&lt; 20"unicorn<span class="token punctuation">[</span><span class="token string">'worker_memory_limit_max'</span><span class="token punctuation">]</span> = "400 * 1 &lt;&lt; 20"unicorn<span class="token punctuation">[</span><span class="token string">'worker_timeout'</span><span class="token punctuation">]</span> = 15sidekiq<span class="token punctuation">[</span><span class="token string">'concurrency'</span><span class="token punctuation">]</span> = 10sidekiq_cluster<span class="token punctuation">[</span><span class="token string">'enable'</span><span class="token punctuation">]</span> = falsesidekiq_cluster<span class="token punctuation">[</span><span class="token string">'ha'</span><span class="token punctuation">]</span> = falseredis<span class="token punctuation">[</span><span class="token string">'maxclients'</span><span class="token punctuation">]</span> = "100"nginx<span class="token punctuation">[</span><span class="token string">'worker_processes'</span><span class="token punctuation">]</span> = 2nginx<span class="token punctuation">[</span><span class="token string">'worker_connections'</span><span class="token punctuation">]</span> = 512nginx<span class="token punctuation">[</span><span class="token string">'keepalive_timeout'</span><span class="token punctuation">]</span> = 300nginx<span class="token punctuation">[</span><span class="token string">'cache_max_size'</span><span class="token punctuation">]</span> = '200m'mattermost<span class="token punctuation">[</span><span class="token string">'enable'</span><span class="token punctuation">]</span> = falsemattermost_nginx<span class="token punctuation">[</span><span class="token string">'enable'</span><span class="token punctuation">]</span> = falsegitlab_pages<span class="token punctuation">[</span><span class="token string">'enable'</span><span class="token punctuation">]</span> = falsepages_nginx<span class="token punctuation">[</span><span class="token string">'enable'</span><span class="token punctuation">]</span> = falsepostgresql<span class="token punctuation">[</span><span class="token string">'shared_buffers'</span><span class="token punctuation">]</span> = "256MB"postgresql<span class="token punctuation">[</span><span class="token string">'max_connections'</span><span class="token punctuation">]</span> = 30postgresql<span class="token punctuation">[</span><span class="token string">'work_mem'</span><span class="token punctuation">]</span> = "8MB"postgresql<span class="token punctuation">[</span><span class="token string">'maintenance_work_mem'</span><span class="token punctuation">]</span> = "16MB"postgresql<span class="token punctuation">[</span><span class="token string">'effective_cache_size'</span><span class="token punctuation">]</span> = "1MB"postgresql<span class="token punctuation">[</span><span class="token string">'checkpoint_timeout'</span><span class="token punctuation">]</span> = "5min"postgresql<span class="token punctuation">[</span><span class="token string">'checkpoint_warning'</span><span class="token punctuation">]</span> = "30s" <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置调整后需要重载一下</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker <span class="token builtin class-name">exec</span> gitlab gitlab-ctl reconfiguredocker-compose downdocker-compose up -d <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="9-Gitlab-启用-ContainerRegistry"><a href="#9-Gitlab-启用-ContainerRegistry" class="headerlink" title="9. Gitlab 启用 ContainerRegistry"></a>9. Gitlab 启用 ContainerRegistry</h2><ul><li>  <code>ContainerRegistry</code>是<code>Gitlab</code>内置的<code>Docker Registry</code>集成组件</li><li>  集成后每个项目可获得私有的 <code>Docker</code> 镜像存储空间</li><li>  <code>ContainerRegistry</code> 可以复用 <code>Gitlab</code> 域名 或者 独立域名</li><li>  这里配置为复用域名（此时<code>ContainerRegistry</code> 将复用 <code>Gitlab</code> 的 <code>TLS</code> 证书）</li></ul><ol><li> <code>docker-compose.yaml</code>中Gitlab服务的 <code>GITLAB_OMNIBUS_CONFIG</code> 节点下增加如下配置：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">registry_external_url <span class="token string">"https://gitlab.example.com:4567"</span>  <span class="token comment"># ContainerRegistry的外部访问地址</span>registry_nginx<span class="token punctuation">[</span><span class="token string">'ssl_certificate'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"/etc/gitlab/ssl/domain.crt"</span>registry_nginx<span class="token punctuation">[</span><span class="token string">'ssl_certificate_key'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"/etc/gitlab/ssl/domain.key"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'registry_host'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"gitlab.example.com"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'registry_port'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"4567"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'registry_api_url'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"http://localhost:5000"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'gitlab_default_projects_features_builds'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'gitlab_default_projects_features_container_registry'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li> 端口开放增加 <code>- 4567:4567</code></li><li> 服务重启 <code>docker-compose restart Gitlab</code></li></ol><p><code>ContainerRegistry</code> 集成后可以通过 <code>Gitlab</code> 账户登录： <code>docker login gitlab.example.com:4567</code></p><hr><h2 id="日常维护命令"><a href="#日常维护命令" class="headerlink" title="日常维护命令"></a>日常维护命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Gitlab维护</span>docker <span class="token builtin class-name">exec</span> gitlab gitlab-ctl status  <span class="token comment"># gitlab各组件服务状态</span>docker <span class="token builtin class-name">exec</span> gitlab gitlab-ctl start/restart/stop <span class="token punctuation">[</span>组件名<span class="token punctuation">]</span>  <span class="token comment"># gitlab所有组件的统一控制（其中Unicorn组件重启完成前GitLab会报502）</span>docker <span class="token builtin class-name">exec</span> gitlab gitlab-ctl <span class="token function">tail</span> <span class="token punctuation">[</span>/var/log/gitlab下的某子目录<span class="token punctuation">]</span>  <span class="token comment"># 实时查看日志</span> docker <span class="token builtin class-name">exec</span> gitlab update-permissions  <span class="token comment"># 修复gitlab版本升级后出现的权限问题</span>docker <span class="token builtin class-name">exec</span> gitlab gitlab-ctl reconfigure  <span class="token comment"># 重载配置</span>docker <span class="token builtin class-name">exec</span> -t gitlab gitlab-rake gitlab:backup:create  <span class="token comment"># 创建备份</span> <span class="token comment"># ContainerRegistry维护</span>docker <span class="token builtin class-name">exec</span> gitlab gitlab-ctl registry-garbage-collect  <span class="token comment"># 垃圾回收，清理废弃layer（registry停机）</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Import-Repository-Repo-By-Url"><a href="#Import-Repository-Repo-By-Url" class="headerlink" title="Import Repository(Repo By Url)"></a>Import Repository(Repo By Url)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 账号密码若存在特殊字符则需要url编码</span>https://username:password@host:port/group/project.git <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="10-GitLab重置用户名密码"><a href="#10-GitLab重置用户名密码" class="headerlink" title="10. GitLab重置用户名密码"></a><strong>10. GitLab重置用户名密码</strong></h2><p>打开终端，访问：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gitlab-rails console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">user <span class="token operator">=</span> User.where<span class="token punctuation">(</span>id: <span class="token number">1</span><span class="token punctuation">)</span>.firstuser.password<span class="token operator">=</span><span class="token string">'123456'</span>user.password_confirmation <span class="token operator">=</span> <span class="token string">'123456'</span>user.save<span class="token operator">!</span> <span class="token comment">#注意加上 “！”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后退出命令行即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">quit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> gitlab-rails console production 命令 开始初始化密码<span class="token comment"># 在irb(main):001:0&gt; 后面通过 u=User.where(id:1).first 来查找与切换账号（User.all 可以查看所有用户）</span><span class="token comment"># 通过u.password='12345678'设置密码为12345678(这里的密码看自己喜欢)：</span><span class="token comment"># 通过u.password_confirmation='12345678' 再次确认密码</span><span class="token comment"># 通过 u.save!进行保存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-HTTPS-SSL-支持"><a href="#11-HTTPS-SSL-支持" class="headerlink" title="11. HTTPS SSL 支持"></a><strong>11. HTTPS SSL 支持</strong></h2><ul><li><p>nginx反向代理方式</p><ul><li> 注意docker 内部没有ca支持， 需要手动添加</li></ul></li><li><p>域名提供商提供的免费证书</p><ul><li>这种证书直接用，如果是自签名证书，需要添加自己的ca root证书到服务器</li></ul></li></ul><h2 id="12-Gitlab恢复数据出现must-be-owner-of解决方法"><a href="#12-Gitlab恢复数据出现must-be-owner-of解决方法" class="headerlink" title="12. Gitlab恢复数据出现must be owner of解决方法"></a>12. Gitlab恢复数据出现must be owner of解决方法</h2><p>按正常Gitlab备份数据gitlab-rake gitlab:backup:create</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">ERROR: must be owner <span class="token keyword">of</span> extension plpgsqlERROR: must be owner <span class="token keyword">of</span> <span class="token keyword">schema</span> <span class="token keyword">public</span>ERROR: <span class="token keyword">schema</span> “<span class="token keyword">public</span>” already <span class="token keyword">exists</span>ERROR: must be owner <span class="token keyword">of</span> <span class="token keyword">schema</span> <span class="token keyword">public</span>ERROR: must be owner <span class="token keyword">of</span> extension plpgsqlWARNING: <span class="token keyword">no</span> <span class="token keyword">privileges</span> could be revoked <span class="token keyword">for</span> “<span class="token keyword">public</span>”WARNING: <span class="token keyword">no</span> <span class="token keyword">privileges</span> could be revoked <span class="token keyword">for</span> “<span class="token keyword">public</span>”WARNING: <span class="token keyword">no</span> <span class="token keyword">privileges</span> were granted <span class="token keyword">for</span> “<span class="token keyword">public</span>”WARNING: <span class="token keyword">no</span> <span class="token keyword">privileges</span> were granted <span class="token keyword">for</span> “<span class="token keyword">public</span>”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决方法：</p><h4 id="1-修改postgresql配置"><a href="#1-修改postgresql配置" class="headerlink" title="**1. 修改postgresql配置 **"></a>**1. 修改postgresql配置 **</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> /var/opt/gitlab/postgresql/data$ <span class="token function">vi</span> /var/opt/gitlab/postgresql/data/postgresql.conflisten_addresses <span class="token operator">=</span> <span class="token string">'*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>找到listen_addresses = ” 改为listen_addresses = ‘*’</p><p>修改 /var/opt/gitlab/postgresql/data/pg_hba.conf<br>在这个文件最后面加入</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">vi</span> /var/opt/gitlab/postgresql/data/pg_hba.conf<span class="token builtin class-name">local</span>   all         all                               trust<span class="token function">host</span>    all         all                               <span class="token number">127.0</span>.0.1/32 trust<span class="token function">host</span>    all         all                               ::1/128 trust    <span class="token comment">#ipv6 可以不配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-重启gitlab生效"><a href="#2-重启gitlab生效" class="headerlink" title="2. 重启gitlab生效"></a><strong>2. 重启gitlab生效</strong></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gitlab-ctl restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-修改gitlab账号为超级用户"><a href="#3-修改gitlab账号为超级用户" class="headerlink" title="3. 修改gitlab账号为超级用户"></a><strong>3. 修改gitlab账号为超级用户</strong></h4><p>进入postgresql命令行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /opt/gitlab/embedded/bin<span class="token function">su</span> gitlab-psql./psql -h <span class="token number">127.0</span>.0.1 gitlabhq_production<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看账户权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">\</span>du<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行修改gitlab用户为超级权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ALTER <span class="token environment constant">USER</span> gitlab WITH SUPERUSER<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>退出</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">\</span>q<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://images.weserv.nl/?url=https://raw.githubusercontent.com/appotry/cloudimg/main/data/2021/08/0220210802135016.png" alt="img"></p><h5 id="4-从1462989681编号备份中恢复"><a href="#4-从1462989681编号备份中恢复" class="headerlink" title="4. 从1462989681编号备份中恢复"></a>4. 从1462989681编号备份中恢复</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gitlab-rake gitlab:backup:restore <span class="token assign-left variable">BACKUP</span><span class="token operator">=</span><span class="token number">1462989681</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样Gitlab恢复数据就不会再报must be owner of extension plpgsql错误。</p><h4 id="4-重启gitlab"><a href="#4-重启gitlab" class="headerlink" title="4. 重启gitlab"></a><strong>4. 重启gitlab</strong></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gitlab-ctl restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本文作者：夜法之书       写作不易，转载请注明来源地址！</p><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><ol><li><a href="https://www.cnblogs.com/hgzero/p/14088215.html">https://www.cnblogs.com/hgzero/p/14088215.html</a></li><li><a href="http://www.51blogs.net/2017/11/10/1110113243.html">http://www.51blogs.net/2017/11/10/1110113243.html</a></li><li><a href="https://my.oschina.net/u/2400083/blog/808097">https://my.oschina.net/u/2400083/blog/808097</a></li></ol><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Gitlab概述&quot;&gt;&lt;a href=&quot;#1-Gitlab概述&quot; class=&quot;headerlink&quot; title=&quot;1. Gitlab概述&quot;&gt;&lt;/a&gt;1. Gitlab概述&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;1-1-GitLab介绍&quot;&gt;&lt;a href=&quot;#1-</summary>
      
    
    
    
    <category term="Tools" scheme="https://blog.17lai.fun/categories/Tools/"/>
    
    <category term="Gitlab" scheme="https://blog.17lai.fun/categories/Tools/Gitlab/"/>
    
    
    <category term="Gitlab" scheme="https://blog.17lai.fun/tags/Gitlab/"/>
    
    <category term="Git" scheme="https://blog.17lai.fun/tags/Git/"/>
    
    <category term="Docker" scheme="https://blog.17lai.fun/tags/Docker/"/>
    
    <category term="Rigistry" scheme="https://blog.17lai.fun/tags/Rigistry/"/>
    
    <category term="教程" scheme="https://blog.17lai.fun/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="email" scheme="https://blog.17lai.fun/tags/email/"/>
    
    <category term="https" scheme="https://blog.17lai.fun/tags/https/"/>
    
    <category term="ssl" scheme="https://blog.17lai.fun/tags/ssl/"/>
    
  </entry>
  
</feed>
