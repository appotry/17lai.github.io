<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.17lai.site</id>
    <title>夜法之书 • Posts by &#34;gitlab&#34; category</title>
    <link href="https://blog.17lai.site" />
    <updated>2021-11-01T11:25:00.000Z</updated>
    <category term="Github" />
    <category term="Jekyll" />
    <category term="blog" />
    <category term="Gitlab" />
    <category term="Git" />
    <category term="Crack" />
    <category term="Linux" />
    <category term="hardlink" />
    <category term="bt" />
    <category term="pt" />
    <category term="note" />
    <category term="markdown" />
    <category term="picgo" />
    <category term="wiz" />
    <category term="Joplin" />
    <category term="Typora" />
    <category term="QNAP" />
    <category term="硬盘" />
    <category term="nas" />
    <category term="embeded" />
    <category term="3G" />
    <category term="4G" />
    <category term="3531a" />
    <category term="移植" />
    <category term="嵌入式" />
    <category term="hisilicon" />
    <category term="Driver" />
    <category term="3798M" />
    <category term="MPP" />
    <category term="UNF" />
    <category term="Kernel" />
    <category term="宝塔" />
    <category term="VPS" />
    <category term="建站" />
    <category term="Nginx" />
    <category term="Apache" />
    <category term="MySQL" />
    <category term="Docker" />
    <category term="LAMP" />
    <category term="PHP" />
    <category term="Tomcat" />
    <category term="JSP" />
    <category term="教程" />
    <category term="Rigistry" />
    <category term="email" />
    <category term="https" />
    <category term="ssl" />
    <category term="Debian" />
    <category term="Laptop" />
    <category term="ED2K" />
    <category term="ATI" />
    <category term="WIFI" />
    <category term="Hotkey" />
    <category term="SSD" />
    <category term="HDD" />
    <category term="管理" />
    <category term="PDCA" />
    <category term="5W2H" />
    <category term="SMART" />
    <category term="SWOT" />
    <category term="GROW" />
    <category term="OKR" />
    <category term="WBS" />
    <category term="PT" />
    <category term="BT" />
    <category term="qbittorrent" />
    <category term="transmission" />
    <category term="Emby" />
    <category term="Sonarr" />
    <category term="Jeckett" />
    <category term="Portainer" />
    <category term="Watchtower" />
    <category term="DNSMasq" />
    <category term="DNSCrypt" />
    <category term="启动" />
    <category term="优化" />
    <category term="SSL" />
    <category term="TLS" />
    <category term="隐私" />
    <category term="安全" />
    <category term="linux" />
    <category term="GitBook" />
    <category term="MySql" />
    <category term="Mariadb" />
    <category term="技巧" />
    <category term="MarkDown" />
    <category term="Mermaid" />
    <category term="Nas" />
    <category term="群晖" />
    <category term="hexo" />
    <category term="matery" />
    <category term="cdn" />
    <category term="seo" />
    <category term="web" />
    <category term="http" />
    <category term="css" />
    <category term="js" />
    <category term="3a" />
    <category term="ae" />
    <category term="image" />
    <category term="ai" />
    <category term="face" />
    <category term="ccs" />
    <category term="vim" />
    <category term="ide" />
    <category term="docker" />
    <category term="music" />
    <category term="韩红" />
    <category term="thinkpad" />
    <category term="sound" />
    <category term="speaker" />
    <category term="刮削" />
    <category term="MusicBrainz" />
    <category term="mp3tag" />
    <category term="tmm" />
    <category term="字幕" />
    <category term="emby" />
    <category term="plex" />
    <category term="qnap" />
    <category term="ipv6" />
    <category term="cmake" />
    <category term="develop" />
    <category term="traefik" />
    <category term="proxy" />
    <category term="swarm" />
    <category term="ubuntu" />
    <category term="vscode" />
    <category term="插件" />
    <category term="编码" />
    <category term="mermaid" />
    <category term="plantuml" />
    <category term="mathjax" />
    <category term="CI/CD" />
    <category term="Earthly" />
    <category term="git" />
    <category term="mstream" />
    <category term="selfhost" />
    <category term="中岛美嘉" />
    <category term="node" />
    <category term="jenkins" />
    <category term="shell" />
    <category term="tools" />
    <category term="winrar" />
    <category term="crack" />
    <category term="emoji" />
    <category term="isp" />
    <category term="awb" />
    <category term="mywork" />
    <entry>
        <id>https://blog.17lai.site/posts/1879721e/</id>
        <title>CI/CD 与 Git Flow 与 GitLab</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/1879721e/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;CI/CD + Git Flow + GitLab 的整体工作流程记录。主要介绍一下 GitLab CI 相关功能，并通过 GitLab CI 实现自动化构建项目。项目中所用的示例项目已经上传到了 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/mritd/GitLabCI-TestProject&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;一、Git-Flow-简介&#34;&gt;一、Git Flow 简介&lt;/h3&gt;
&lt;p&gt;Git Flow 定义了一个围绕项目开发发布的严格 git 分支模型，用于管理多人协作的大型项目中实现高效的协作开发；Git Flow 分支模型最早起源于 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;http://nvie.com/about/&#34;&gt;Vincent Driessen&lt;/a&gt; 的 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;http://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;A successful Git branching model&lt;/a&gt; 文章；随着时间发展，Git Flow 大致分为三种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git Flow: 最原始的 Git Flow 分支模型&lt;/li&gt;
&lt;li&gt; Github Flow: Git Flow 的简化版，专门配合持续发布&lt;/li&gt;
&lt;li&gt; GitLab Flow: Git Flow 与 Github Flow 的结合版&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于三种 Git Flow 区别详情可参考 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.ruanyifeng.com/blog/2015/12/git-workflow.html&#34;&gt;Git 工作流程&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;二、-Git-Flow-流程&#34;&gt;二、 Git Flow 流程&lt;/h3&gt;
&lt;p&gt;Github Flow 和 GitLab Flow 对于持续发布支持比较好，但是原始版本的 Git Flow 对于传统的按照版本发布更加友好一些，所以以下主要说明以下 Git Flow 的工作流程；Git Flow 主要分支模型如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220215.jpg&#34; alt=&#34;git flow&#34;&gt;&lt;/p&gt;
&lt;p&gt;在整个分支模型中 &lt;strong&gt;存在两个长期分支: develop 和 master&lt;/strong&gt;，其中 develop 分支为开发分支，master 为生产分支；&lt;strong&gt;master 代码始终保持随时可以部署到线上的状态；develop 分支用于合并最新提交的功能性代码&lt;/strong&gt;；具体的分支定义如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master: 生产代码，始终保持可以直接部署生产的状态&lt;/li&gt;
&lt;li&gt; develop: 开发分支，每次合并最新功能代码到此分支&lt;/li&gt;
&lt;li&gt; feature: 新功能分支，所有新开发的功能将采用 &lt;code&gt;feature/xxxx&lt;/code&gt; 形式命名分支&lt;/li&gt;
&lt;li&gt; hotfixes: 紧急修复补丁分支，当新功能部署到了线上出现了严重 bug 需要紧急修复时，则创建 &lt;code&gt;hotfixes/xxxx&lt;/code&gt; 形式命名的分支&lt;/li&gt;
&lt;li&gt; release: 稳定版分支，当完成大版本变动后，应该创建 &lt;code&gt;release/xxxx&lt;/code&gt; 分支&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在整个分支模型中，develop 分支为最上游分支，会不断有新的 feature 合并入 develop 分支，当功能开发达到完成所有版本需求时，则从 develop 分支创建 release 分支，release 后如没有发现其他问题，最终 release 会被合并到 master 分支以完成线上部署&lt;/p&gt;
&lt;h3 id=&#34;三、Git-Flow-工具&#34;&gt;三、Git Flow 工具&lt;/h3&gt;
&lt;p&gt;针对于 Git Flow，其手动操作 git 命令可能过于繁琐，所以后来有了 git-flow 工具；git-flow 是一个 git 扩展集，按 Vincent Driessen 的分支模型提供高层次的库操作；使用 git-flow 工具可以以更加简单的命令完成对 Vincent Driessen 分支模型的实践；&lt;br&gt;
git-flow 安装以及使用具体请参考 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html&#34;&gt;git-flow 备忘清单&lt;/a&gt;，该文章详细描述了 git-flow 工具的使用方式&lt;/p&gt;
&lt;p&gt;还有另一个工具是 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/tj/git-extras&#34;&gt;git-extras&lt;/a&gt;，该工具没有 git-flow 那么简单化，不过其提供更加强大的命令支持&lt;/p&gt;
&lt;h3 id=&#34;四、Git-Commit-Message&#34;&gt;四、Git Commit Message&lt;/h3&gt;
&lt;p&gt;在整个 Git Flow 中，commit message 也是必不可少的一部分；一个良好且统一的 commit message 有助于代码审计以及 review 等；目前使用最广泛的写法是 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0&#34;&gt;Angular 社区规范&lt;/a&gt;，该规范大中 commit message 格式大致如下:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-html&#34; data-language=&#34;html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;scope&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;): &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;subject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;BLANK&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;LINE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;BLANK&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;LINE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;footer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总体格式大致分为 3 部分，首行主要 3 个组成部分:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;type: 本次提交类型&lt;/li&gt;
&lt;li&gt; scope: 本次提交影响范围，一般标明影响版本号或者具体的范围如 &lt;code&gt;$browser, $compile, $rootScope, ngHref, ngClick, ngView, etc...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;subject: 本次提交简短说明&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于 type 提交类型，有如下几种值:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;feat：新功能 (feature)&lt;/li&gt;
&lt;li&gt;fix：修补 bug&lt;/li&gt;
&lt;li&gt;docs：文档 (documentation)&lt;/li&gt;
&lt;li&gt;style： 格式 (不影响代码运行的变动)&lt;/li&gt;
&lt;li&gt;refactor：重构 (即不是新增功能，也不是修改 bug 的代码变动)&lt;/li&gt;
&lt;li&gt;test：增加测试&lt;/li&gt;
&lt;li&gt; chore：构建过程或辅助工具的变动&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中间的 body 部分是对本次提交的详细描述信息，底部的 footer 部分一般分为两种情况:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不兼容变动：如果出现不兼容变动，则以 &lt;code&gt;BREAKING CHANGE:&lt;/code&gt; 开头，后面跟上不兼容变动的具体描述和解决办法&lt;/li&gt;
&lt;li&gt;关闭 issue: 如果该 commit 针对某个 issue，并且可以将其关闭，则可以在其中指定关闭的 issue，如 &lt;code&gt;Close #9527,#9528&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过 footer 部分也有特殊情况，如回滚某次提交，则以 &lt;code&gt;revert:&lt;/code&gt; 开头，后面紧跟 commit 信息和具体描述；还有时某些 commit 只是解决了 某个 issue 的一部分问题，这是可以使用 &lt;code&gt;refs ISSUE&lt;/code&gt; 的方式来引用该 issue&lt;/p&gt;
&lt;h3 id=&#34;五、Git-Commit-Message-工具&#34;&gt;五、Git Commit Message 工具&lt;/h3&gt;
&lt;p&gt;针对 Git 的 commit message 目前已经有了成熟的生成工具，比较有名的为 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/commitizen/cz-cli&#34;&gt;commitizen-cli&lt;/a&gt; 工具，其采用 node.js 编写，执行 &lt;code&gt;git cz&lt;/code&gt; 命令能够自动生成符合 Angular 社区规范的 commit message；不过由于其使用 node.js 编写，所以安装前需要安装 node.js，因此可能不适合其他非 node.js 的项目使用；这里推荐一个基于 shell 编写的 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://cimhealth.github.io/git-toolkit&#34;&gt;Git-toolkit&lt;/a&gt;，安装此工具后执行 &lt;code&gt;git ci&lt;/code&gt; 命令进行提交将会产生交互式生成 Angular git commit message 格式的提交说明，截图如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220233.jpg&#34; alt=&#34;git ci&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;六、GitLab-整合&#34;&gt;六、GitLab 整合&lt;/h3&gt;
&lt;p&gt;以上 Git Flow 所有操作介绍的都是在本地操作，而正常我们在工作中都是基于 GitLab 搭建私有 Git 仓库来进行协同开发的，以下简述以下 Git Flow 配合 GitLab 的流程&lt;/p&gt;
&lt;h4 id=&#34;6-1、开发-features&#34;&gt;6.1、开发 features&lt;/h4&gt;
&lt;p&gt;当开发一个新功能时流程如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地 &lt;code&gt;git flow feature start xxxx&lt;/code&gt; 开启一个 feature 新分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git flow feature publish xxxx&lt;/code&gt; 将此分支推送到远端以便他人获取&lt;/li&gt;
&lt;li&gt;完成开发后 GitLab 上向 &lt;code&gt;develop&lt;/code&gt; 分支发起合并请求&lt;/li&gt;
&lt;li&gt; CI sonar 等质量检测工具扫描，其他用户 review 代码&lt;/li&gt;
&lt;li&gt;确认无误后 &lt;code&gt;master&lt;/code&gt; 权限用户合并其到 &lt;code&gt;develop&lt;/code&gt; 分支&lt;/li&gt;
&lt;li&gt;部署到测试环境以便测试组测试&lt;/li&gt;
&lt;li&gt;如果测试不通过，则继续基于此分支开发，直到该功能开发完成&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;6-2、创建-release&#34;&gt;6.2、创建 release&lt;/h4&gt;
&lt;p&gt;当一定量的 feature 开发完成并合并到 develop 后，如所有 feature 都测试通过并满足版本需求，则可以创建 release 版本分支；release 分支流程如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地 &lt;code&gt;git flow release start xxxx&lt;/code&gt; 开启 release 分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git flow release publish xxxx&lt;/code&gt; 将其推送到远端以便他人获取&lt;/li&gt;
&lt;li&gt;继续进行完整性测试，出现问题继续修复，直到 release 完全稳定&lt;/li&gt;
&lt;li&gt;从 release 分支向 master、develop 分支分别发起合并请求&lt;/li&gt;
&lt;li&gt; master 合并后创建对应的 release 标签，并部署生产环境&lt;/li&gt;
&lt;li&gt; develop 合并 release 的后期修改&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;6-3、紧急修复&#34;&gt;6.3、紧急修复&lt;/h4&gt;
&lt;p&gt;当 master 某个 tag 部署到生产环境后，也可能出现不符合预期的问题出现；此时应该基于 master 创建 hotfix 分支进行修复，流程如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地 &lt;code&gt;git flow hotfix start xxxx&lt;/code&gt; 创建紧急修复分支&lt;/li&gt;
&lt;li&gt;修改代码后将其推送到远端，并像 master、develop 分支发起合并&lt;/li&gt;
&lt;li&gt; develop 合并紧急修复补丁，如果必要最好再做一下测试&lt;/li&gt;
&lt;li&gt; master 合并紧急修复补丁，创建紧急修复 tag，并部署生产环境&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;七、环境准备&#34;&gt;七、环境准备&lt;/h3&gt;
&lt;p&gt;首先需要有一台 GitLab 服务器，然后需要有个项目；这里示例项目以 Spring Boot 项目为例，然后最好有一台专门用来 Build 的机器，实际生产中如果 Build 任务不频繁可适当用一些业务机器进行 Build；本文示例所有组件将采用 Docker 启动， GitLab HA 等不在本文阐述范围内&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker Version : 1.13.1&lt;/li&gt;
&lt;li&gt;GitLab Version : 10.1.4-ce.0&lt;/li&gt;
&lt;li&gt;GitLab Runner Version : 10.1.0&lt;/li&gt;
&lt;li&gt;GitLab IP : 172.16.0.37&lt;/li&gt;
&lt;li&gt;GitLab Runner IP : 172.16.0.36&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;八、GitLab-CI-简介&#34;&gt;八、GitLab CI 简介&lt;/h3&gt;
&lt;p&gt;GitLab CI 是 GitLab 默认集成的 CI 功能，GitLab CI 通过在项目内 &lt;code&gt;.gitlab-ci.yaml&lt;/code&gt; 配置文件读取 CI 任务并进行相应处理；GitLab CI 通过其称为 GitLab Runner 的 Agent 端进行 build 操作；Runner 本身可以使用多种方式安装，比如使用 Docker 镜像启动等；Runner 在进行 build 操作时也可以选择多种 build 环境提供者；比如直接在 Runner 所在宿主机 build、通过新创建虚拟机 (vmware、virtualbox) 进行 build 等；同时 Runner 支持 Docker 作为 build 提供者，即每次 build 新启动容器进行 build；GitLab CI 其大致架构如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220236.png&#34; alt=&#34;GitLab&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;九、搭建-GitLab-服务器&#34;&gt;九、搭建 GitLab 服务器&lt;/h3&gt;
&lt;h4 id=&#34;9-1、GitLab-搭建&#34;&gt;9.1、GitLab 搭建&lt;/h4&gt;
&lt;p&gt;GitLab 搭建这里直接使用 docker compose 启动，compose 配置如下&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-yaml&#34; data-language=&#34;yaml&#34;&gt;&lt;code class=&#34;language-yaml&#34;&gt;&lt;span class=&#34;token key atrule&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;2&#39;&lt;/span&gt;
&lt;span class=&#34;token key atrule&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;gitlab&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;gitlab/gitlab-ce:10.1.4-ce.0&#39;&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;restart&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; always
    &lt;span class=&#34;token key atrule&#34;&gt;container_name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; gitlab
    &lt;span class=&#34;token key atrule&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;git.mritd.me&#39;&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token key atrule&#34;&gt;GITLAB_OMNIBUS_CONFIG&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token scalar string&#34;&gt;
        external_url &#39;http://git.mritd.me&#39;
        # Add any other gitlab.rb configuration here, each on its own line&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;80:80&#39;&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;443:443&#39;&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;8022:22&#39;&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./data/gitlab/config:/etc/gitlab&#39;&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./data/gitlab/logs:/var/log/gitlab&#39;&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &#39;./data/gitlab/data&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;/var/opt/gitlab&#39;Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;直接启动后，首次登陆需要设置初始密码如下，默认用户为 &lt;code&gt;root&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220240.png&#34; alt=&#34;gitkab init&#34;&gt;&lt;/p&gt;
&lt;p&gt;登陆成功后创建一个用户 (该用户最好给予 Admin 权限，以后操作以该用户为例)，并且创建一个测试 Group 和 Project，如下所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220427.png&#34; alt=&#34;Create User&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220432.png&#34; alt=&#34;Test Project&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;9-2、增加示例项目&#34;&gt;9.2、增加示例项目&lt;/h4&gt;
&lt;p&gt;这里示例项目采用 Java 的 SpringBoot 项目，并采用 Gradle 构建，其他语言原理一样；&lt;strong&gt;如果不熟悉 Java 的没必要死磕此步配置，任意语言 (最好 Java) 整一个能用的 Web 项目就行，并不强求一定 Java 并且使用 Gradle 构建，以下只是一个样例项目&lt;/strong&gt;；SpringBoot 可以采用 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://start.spring.io/&#34;&gt;Spring Initializr&lt;/a&gt; 直接生成 (依赖要加入 WEB)，如下所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220246.png&#34; alt=&#34;Spring Initializr&#34;&gt;&lt;/p&gt;
&lt;p&gt;将项目导入 IDEA，然后创建一个 index 示例页面，主要修改如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;build.gradle&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-jade&#34; data-language=&#34;jade&#34;&gt;&lt;code class=&#34;language-jade&#34;&gt;buildscript {
    ext {
        springBootVersion = &#39;1.5.8.RELEASE&#39;
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath(&#34;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&#34;)
    }
}

apply plugin: &#39;java&#39;
apply plugin: &#39;eclipse&#39;
apply plugin: &#39;idea&#39;
apply plugin: &#39;org.springframework.boot&#39;

group = &#39;me.mritd&#39;
version = &#39;0.0.1-SNAPSHOT&#39;
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}


dependencies {
    compile(&#39;org.springframework.boot:spring-boot-starter&#39;)
    compile(&#39;org.springframework.boot:spring-boot-starter-web&#39;)
    compile(&#39;org.springframework.boot:spring-boot-starter-thymeleaf&#39;)
    testCompile(&#39;org.springframework.boot:spring-boot-starter-test&#39;)
}Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;新建一个 HomeController&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-jade&#34; data-language=&#34;jade&#34;&gt;&lt;code class=&#34;language-jade&#34;&gt;package me.mritd.TestProject;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

/*******************************************************************************
 * Copyright (c) 2005-2017 Mritd, Inc.
 * TestProject
 * me.mritd.TestProject
 * Created by mritd on 2017/11/24 下午12:23.
 * Description: 
 *******************************************************************************/
@Controller
public class HomeController {

    @RequestMapping(&#34;/&#34;)
    public String home(){
        return &#34;index&#34;;
    }
}Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;templates 下新建 index.html&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-html&#34; data-language=&#34;html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token doctype&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;token doctype-tag&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;en&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;UTF-8&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Title&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Test...&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后项目整体结构如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220249.png&#34; alt=&#34;TestProject&#34;&gt;&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;assemble&lt;/code&gt; Task 打包出可执行 jar 包，并运行 &lt;code&gt;java -jar TestProject-0.0.1-SNAPSHOT.jar&lt;/code&gt; 测试下能启动访问页面即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220251.png&#34; alt=&#34;TestProject assemble&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后将项目提交到 GitLab 后如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220304.png&#34; alt=&#34;init Project&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;十、GitLab-CI-配置&#34;&gt;十、GitLab CI 配置&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;针对这一章节创建基础镜像以及项目镜像，这里仅以 Java 项目为例；其他语言原理相通，按照其他语言对应的运行环境修改即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;10-1、增加-Runner&#34;&gt;10.1、增加 Runner&lt;/h4&gt;
&lt;p&gt;GitLab CI 在进行构建时会将任务下发给 Runner，让 Runner 去执行；所以先要添加一个 Runner，Runner 这里采用 Docker Compose 启动，build 方式也使用 Docker 方式 Build；compose 文件如下&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-yaml&#34; data-language=&#34;yaml&#34;&gt;&lt;code class=&#34;language-yaml&#34;&gt;&lt;span class=&#34;token key atrule&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;2&#39;&lt;/span&gt;
&lt;span class=&#34;token key atrule&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;gitlab-runner&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;container_name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; gitlab&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;runner
    &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; gitlab/gitlab&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;runner&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;alpine&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;v10.1.0
    &lt;span class=&#34;token key atrule&#34;&gt;restart&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; always
    &lt;span class=&#34;token key atrule&#34;&gt;network_mode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;host&#34;&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; /var/run/docker.sock&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;/var/run/docker.sock
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; ./config.toml&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;/etc/gitlab&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;runner/config.toml
    &lt;span class=&#34;token key atrule&#34;&gt;extra_hosts&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &#34;git.mritd.me&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;172.16.0.37&#34;Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;在启动前，我们需要先 touch 一下这个 config.toml 配置文件&lt;/strong&gt;；该文件是 Runner 的运行配置，此后 Runner 所有配置都会写入这个文件 (不 touch 出来 docker-compose 发现不存在会挂载一个目录进去，导致 Runner 启动失败)；启动 docker-compose 后，&lt;strong&gt;需要进入容器执行注册，让 Runner 主动去连接 GitLab 服务器&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 生成 Runner 配置文件&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;touch&lt;/span&gt; config.toml
&lt;span class=&#34;token comment&#34;&gt;# 启动 Runner&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;docker-compose&lt;/span&gt; up -d
&lt;span class=&#34;token comment&#34;&gt;# 激活 Runner&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; -it gitlab-runner gitlab-runner registerCopy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在执行上一条激活命令后，会按照提示让你输入一些信息；&lt;strong&gt;首先输入 GitLab 地址，然后是 Runner Token，Runner Token 可以从 GitLab 设置中查看&lt;/strong&gt;，如下所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220624.png&#34; alt=&#34;Runner Token&#34;&gt;&lt;/p&gt;
&lt;p&gt;整体注册流程如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220312.png&#34; alt=&#34;Runner registry&#34;&gt;&lt;/p&gt;
&lt;p&gt;注册完成后，在 GitLab Runner 设置中就可以看到刚刚注册的 Runner，如下所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220628.png&#34; alt=&#34;Runner List&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Runner 注册成功后会将配置写入到 config.toml 配置文件；由于两个测试宿主机都没有配置内网 DNS，所以为了保证 runner 在使用 docker build 时能正确的找到 GitLab 仓库地址，还需要增加一个 docker 的 host 映射 ( &lt;code&gt;extra_hosts&lt;/code&gt; )；同时为了能调用 宿主机 Docker 和持久化 build 的一些缓存还挂载了一些文件和目录；完整的 配置如下 (配置文件可以做一些更高级的配置，具体参考 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://docs.gitlab.com/runner/configuration/advanced-configuration.html&#34;&gt;官方文档&lt;/a&gt; )&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;config.toml&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-toml&#34; data-language=&#34;toml&#34;&gt;&lt;code class=&#34;language-toml&#34;&gt;&lt;span class=&#34;token key property&#34;&gt;concurrent&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;check_interval&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;

&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;runners&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Test Runner&#34;&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;http://git.mritd.me&#34;&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;token&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;c279ec1ac08aec98c7141c7cf2d474&#34;&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;executor&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;docker&#34;&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;builds_dir&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/gitlab/runner-builds&#34;&lt;/span&gt;
  &lt;span class=&#34;token key property&#34;&gt;cache_dir&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/gitlab/runner-cache&#34;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;runners.docker&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;token key property&#34;&gt;tls_verify&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;
    &lt;span class=&#34;token key property&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;debian&#34;&lt;/span&gt;
    &lt;span class=&#34;token key property&#34;&gt;privileged&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;
    &lt;span class=&#34;token key property&#34;&gt;disable_cache&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;
    &lt;span class=&#34;token key property&#34;&gt;shm_size&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;token key property&#34;&gt;volumes&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/data/gitlab-runner:/gitlab&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/var/run/docker.sock:/var/run/docker.sock&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/data/maven_repo:/data/repo&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/data/maven_repo:/data/maven&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/data/gradle:/data/gradle&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/data/sonar_cache:/root/.sonar&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/data/androidsdk:/usr/local/android&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/data/node_modules:/data/node_modules&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;token key property&#34;&gt;extra_hosts&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;git.mritd.me:172.16.0.37&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;runners.cache&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意，这里声明的 Volumes 会在每个运行的容器中都生效；也就是说 build 时新开启的每个容器都会被挂载这些目录&lt;/strong&gt;；修改完成后重启 runner 容器即可，由于 runner 中没啥可保存的东西，所以可以直接 &lt;code&gt;docker-compose down &amp;amp;&amp;amp; docker-compose up -d&lt;/code&gt; 重启&lt;/p&gt;
&lt;h4 id=&#34;10-2、创建基础镜像&#34;&gt;10.2、创建基础镜像&lt;/h4&gt;
&lt;p&gt;由于示例项目是一个 Java 项目，而且是采用 Spring Boot 的，所以该项目想要运行起来只需要一个 java 环境即可，中间件已经被打包到了 jar 包中；以下是一个作为基础运行环境的 openjdk 镜像的 Dockerfile&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-dockerfile&#34; data-language=&#34;dockerfile&#34;&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM alpine:edge 

LABEL maintainer=&#34;mritd &amp;lt;mritd1234@gmail.com&amp;gt;&#34;

ENV JAVA_HOME /usr/lib/jvm/java-1.8-openjdk
ENV PATH $PATH:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin

RUN apk add --update bash curl tar wget ca-certificates unzip \
        openjdk8 font-adobe-100dpi ttf-dejavu fontconfig \
    &amp;amp;&amp;amp; rm -rf /var/cache/apk/* \

CMD [&#34;bash&#34;]Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;这个 openjdk Dockerfile 升级到了 8.151 版本，并且集成了一些字体相关的软件，以解决在 Java 中某些验证码库无法运行问题，详见 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mritd.me/2017/09/27/alpine-3.6-openjdk-8-bug/&#34;&gt;Alpine 3.6 OpenJDK 8 Bug&lt;/a&gt;&lt;/strong&gt;；使用这个 Dockerfile，在当前目录执行 &lt;code&gt;docker build -t mritd/openjdk:8 .&lt;/code&gt; build 一个 openjdk8 的基础镜像，然后将其推送到私服，或者 Docker Hub 即可&lt;/p&gt;
&lt;h4 id=&#34;10-3、创建项目镜像&#34;&gt;10.3、创建项目镜像&lt;/h4&gt;
&lt;p&gt;有了基本的 openjdk 的 docker 镜像后，针对于项目每次 build 都应该生成一个包含发布物的 docker 镜像，所以对于项目来说还需要一个项目本身的 Dockerfile；&lt;strong&gt;项目的 Dockerfile 有两种使用方式；一种是动态生成 Dockerfile，然后每次使用新生成的 Dockerfile 去 build；还有一种是写一个通用的 Dockerfile，build 时利用 ARG 参数传入变量&lt;/strong&gt;；这里采用第二种方式，以下为一个可以反复使用的 Dockerfile&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-dockerfile&#34; data-language=&#34;dockerfile&#34;&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM mritd/openjdk:8-144-01

MAINTAINER mritd &amp;lt;mritd1234@gmail.com&amp;gt;

ARG PROJECT_BUILD_FINALNAME

ENV TZ &#39;Asia/Shanghai&#39;
ENV PROJECT_BUILD_FINALNAME ${PROJECT_BUILD_FINALNAME}


COPY build/libs/${PROJECT_BUILD_FINALNAME}.jar /${PROJECT_BUILD_FINALNAME}.jar

CMD [&#34;bash&#34;,&#34;-c&#34;,&#34;java -jar /${PROJECT_BUILD_FINALNAME}.jar&#34;]Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;该 Dockerfile 通过声明一个 &lt;code&gt;PROJECT_BUILD_FINALNAME&lt;/code&gt; 变量来表示项目的发布物名称；然后将其复制到根目录下，最终利用 java 执行这个 jar 包；所以每次 build 之前只要能拿到项目发布物的名称即可&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;10-4、Gradle-修改&#34;&gt;10.4、Gradle 修改&lt;/h4&gt;
&lt;p&gt;上面已经创建了一个标准的通用型 Dockerfile，每次 build 镜像只要传入 &lt;code&gt;PROJECT_BUILD_FINALNAME&lt;/code&gt; 这个最终发布物名称即可；对于发布物名称来说，最好不要固定死；当然不论是 Java 还是其他语言的项目我们都能将最终发布物变成一个固定名字，最不济可以写脚本重命名一下；但是不建议那么干，最好保留版本号信息，以便于异常情况下进入容器能够分辨；对于当前 Java 项目来说，想要拿到 &lt;code&gt;PROJECT_BUILD_FINALNAME&lt;/code&gt; 很简单，我们只需要略微修改一下 Gradle 的 build 脚本，让其每次打包 jar 包时将项目的名称及版本号导出到文件中即可；同时这里也加入了镜像版本号的处理，Gradle 脚本修改如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;build.gradle 最后面增加如下 &lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-jade&#34; data-language=&#34;jade&#34;&gt;&lt;code class=&#34;language-jade&#34;&gt;bootRepackage {

    mainClass = &#39;me.mritd.TestProject.TestProjectApplication&#39;
    executable = true

    doLast {
        File envFile = new File(&#34;build/tmp/PROJECT_ENV&#34;)

        println(&#34;Create ${archivesBaseName} ENV File ===&amp;gt; &#34; + envFile.createNewFile())
        println(&#34;Export ${archivesBaseName} Build Version ===&amp;gt; ${version}&#34;)
        envFile.write(&#34;export PROJECT_BUILD_FINALNAME=${archivesBaseName}-${version}\n&#34;)

        println(&#34;Generate Docker image tag...&#34;)
        envFile.append(&#34;export BUILD_DATE=`date +%Y%m%d%H%M%S`\n&#34;)
        envFile.append(&#34;export IMAGE_NAME=mritd/test:`echo \${CI_BUILD_REF_NAME} | tr &#39;/&#39; &#39;-&#39;`-`echo \${CI_COMMIT_SHA} | cut -c1-8`-\${BUILD_DATE}\n&#34;)
        envFile.append(&#34;export LATEST_IMAGE_NAME=mritd/test:latest\n&#34;)
    }
}Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;这一步操作实际上是修改了 &lt;code&gt;bootRepackage&lt;/code&gt; 这个 Task (不了解 Gradle 或者不是 Java 项目的请忽略)，在其结束后创建了一个叫 &lt;code&gt;PROJECT_ENV&lt;/code&gt; 的文件，里面实际上就是写入了一些 bash 环境变量声明，以方便后面 source 一下这个文件拿到一些变量，然后用户 build 镜像使用&lt;/strong&gt;，&lt;code&gt;PROJECT_ENV&lt;/code&gt; 最终生成如下&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;PROJECT_BUILD_FINALNAME&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;TestProject-0.0.1-SNAPSHOT
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;BUILD_DATE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;date&lt;/span&gt; +%Y%m%d%H%M%S&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;IMAGE_NAME&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;mritd/test:&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; $&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;CI_BUILD_REF_NAME&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;tr&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/&#39;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;-&#39;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;-&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; $&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;CI_COMMIT_SHA&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cut&lt;/span&gt; -c1-8&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;-&lt;span class=&#34;token variable&#34;&gt;${BUILD_DATE}&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;LATEST_IMAGE_NAME&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;mritd/test:latestCopy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220738.png&#34; alt=&#34;PROJECT_ENV&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;10-5、创建-CI-配置文件&#34;&gt;10.5、创建 CI 配置文件&lt;/h4&gt;
&lt;p&gt;一切准备就绪以后，就可以编写 CI 脚本了；GitLab 依靠读取项目根目录下的 &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; 文件来执行相应的 CI 操作；以下为测试项目的 &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; 配置&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-yaml&#34; data-language=&#34;yaml&#34;&gt;&lt;code class=&#34;language-yaml&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 调试开启&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#before_script:&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#  - pwd&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#  - env&lt;/span&gt;

&lt;span class=&#34;token key atrule&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; $CI_PROJECT_NAME/$CI_COMMIT_REF_NAME&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;$CI_COMMIT_SHA
  &lt;span class=&#34;token key atrule&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; build

&lt;span class=&#34;token key atrule&#34;&gt;stages&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; build
  &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; deploy

&lt;span class=&#34;token key atrule&#34;&gt;auto-build&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; mritd/build&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;2.1.1
  &lt;span class=&#34;token key atrule&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; build
  &lt;span class=&#34;token key atrule&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; gradle &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;no&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;daemon clean assemble
  &lt;span class=&#34;token key atrule&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; test

&lt;span class=&#34;token key atrule&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; mritd/docker&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;kubectl&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;v1.7.4
  &lt;span class=&#34;token key atrule&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; deploy
  &lt;span class=&#34;token key atrule&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; source build/tmp/PROJECT_ENV
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; echo &#34;Build Docker Image ==&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt; $&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;IMAGE_NAME&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&#34;
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; docker build &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;t $&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;IMAGE_NAME&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;build&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;arg PROJECT_BUILD_FINALNAME=$&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;PROJECT_BUILD_FINALNAME&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; .
&lt;span class=&#34;token comment&#34;&gt;#    - docker push ${IMAGE_NAME}&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; docker tag $&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;IMAGE_NAME&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; $&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;LATEST_IMAGE_NAME&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#    - docker push ${LATEST_IMAGE_NAME}&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#    - docker rmi ${IMAGE_NAME} ${LATEST_IMAGE_NAME}&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#    - kubectl --kubeconfig ${KUBE_CONFIG} set image deployment/test test=$IMAGE_NAME&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; test
  &lt;span class=&#34;token key atrule&#34;&gt;only&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; master
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; develop
    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; /^chore.&lt;span class=&#34;token important&#34;&gt;*$/Copy&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;关于 CI 配置的一些简要说明如下&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;stages&#34;&gt;stages&lt;/h5&gt;
&lt;p&gt;stages 字段定义了整个 CI 一共有哪些阶段流程，以上的 CI 配置中，定义了该项目的 CI 总共分为 &lt;code&gt;build&lt;/code&gt;、&lt;code&gt;deploy&lt;/code&gt; 两个阶段；GitLab CI 会根据其顺序执行对应阶段下的所有任务；&lt;strong&gt;在正常生产环境流程可以定义很多个，比如可以有 &lt;code&gt;test&lt;/code&gt;、&lt;code&gt;publish&lt;/code&gt;，甚至可能有代码扫描的 &lt;code&gt;sonar&lt;/code&gt; 阶段等；这些阶段没有任何限制，完全是自定义的&lt;/strong&gt;，上面的阶段定义好后在 CI 中表现如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220327.png&#34; alt=&#34;stages&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;task&#34;&gt;task&lt;/h5&gt;
&lt;p&gt;task 隶属于 stages 之下；也就是说一个阶段可以有多个任务，任务执行顺序默认不指定会并发执行；对于上面的 CI 配置来说 &lt;code&gt;auto-build&lt;/code&gt; 和 &lt;code&gt;deploy&lt;/code&gt; 都是 task，他们通过 &lt;code&gt;stage: xxxx&lt;/code&gt; 这个标签来指定他们隶属于哪个 stage；当 Runner 使用 Docker 作为 build 提供者时，我们可以在 task 的 &lt;code&gt;image&lt;/code&gt; 标签下声明该 task 要使用哪个镜像运行，不指定则默认为 Runner 注册时的镜像 (这里是 debian)；&lt;strong&gt;同时 task 还有一个 &lt;code&gt;tags&lt;/code&gt; 的标签，该标签指明了这个任务将可以在哪些 Runner 上运行；这个标签可以从 Runner 页面看到，实际上就是 Runner 注册时输入的哪个 tag；对于某些特殊的项目，比如 IOS 项目，则必须在特定机器上执行，所以此时指定 tags 标签很有用&lt;/strong&gt;，当 task 运行后如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101221014.png&#34; alt=&#34;Task&#34;&gt;&lt;/p&gt;
&lt;p&gt;除此之外 task 还能指定 &lt;code&gt;only&lt;/code&gt; 标签用于限定那些分支才能触发这个 task，如果分支名字不满足则不会触发；&lt;strong&gt;默认情况下，这些 task 都是自动执行的，如果感觉某些任务太过危险，则可以通过增加 &lt;code&gt;when: manual&lt;/code&gt; 改为手动执行；注意：手动执行被 GitLab 认为是高权限的写操作，所以只有项目管理员才能手动运行一个 task，直白的说就是管理员才能点击&lt;/strong&gt;；手动执行如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220759.png&#34; alt=&#34;manual task&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;cache&#34;&gt;cache&lt;/h5&gt;
&lt;p&gt;cache 这个参数用于定义全局那些文件将被 cache；&lt;strong&gt;在 GitLab CI 中，跨 stage 是不能保存东西的；也就是说在第一步 build 的操作生成的 jar 包，到第二部打包 docker image 时就会被删除；GitLab 会保证每个 stage 中任务在执行时都将工作目录 (Docker 容器 中) 还原到跟 GitLab 代码仓库中一模一样，多余文件及变更都会被删除&lt;/strong&gt;；正常情况下，第一步 build 生成 jar 包应当立即推送到 nexus 私服；但是这里测试没有搭建，所以只能放到本地；但是放到本地下一个 task 就会删除它，所以利用 &lt;code&gt;cache&lt;/code&gt; 这个参数将 &lt;code&gt;build&lt;/code&gt; 目录 cache 住，保证其跨 stage 也能存在&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于 &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; 具体配置更完整的请参考 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://docs.gitlab.com/ee/ci/yaml/&#34;&gt;官方文档&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;十一、其他相关&#34;&gt;十一、其他相关&lt;/h3&gt;
&lt;h4 id=&#34;11-1、GitLab-内置环境变量&#34;&gt;11.1、GitLab 内置环境变量&lt;/h4&gt;
&lt;p&gt;上面已经基本搞定了一个项目的 CI，但是有些变量可能并未说清楚；比如在创建的 &lt;code&gt;PROJECT_ENV&lt;/code&gt; 文件中引用了 &lt;code&gt;${CI_COMMIT_SHA}&lt;/code&gt; 变量；这种变量其实是 GitLab CI 的内置隐藏变量，这些变量在每次 CI 调用 Runner 运行某个任务时都会传递到对应的 Runner 的执行环境中；&lt;strong&gt;也就是说这些变量在每次的任务容器 SHELL 环境中都会存在，可以直接引用&lt;/strong&gt;，具体的完整环境变量列表可以从 &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://docs.gitlab.com/ee/ci/variables/&#34;&gt;官方文档&lt;/a&gt; 中获取；如果想知道环境变量具体的值，实际上可以通过在任务执行前用 &lt;code&gt;env&lt;/code&gt; 指令打印出来，如下所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220338.png&#34; alt=&#34;env&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220800.png&#34; alt=&#34;env task&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;11-2、GitLab-自定义环境变量&#34;&gt;11.2、GitLab 自定义环境变量&lt;/h4&gt;
&lt;p&gt;在某些情况下，我们希望 CI 能自动的发布或者修改一些东西；比如将 jar 包上传到 nexus、将 docker 镜像 push 到私服；这些动作往往需要一个高权限或者说有可写入对应仓库权限的账户来支持，但是这些账户又不想写到项目的 CI 配置里；因为这样很不安全，谁都能看到；此时我们可以将这些敏感变量写入到 GitLab 自定义环境变量中，GitLab 会像对待内置变量一样将其传送到 Runner 端，以供我们使用；GitLab 中自定义的环境变量可以有两种，一种是项目级别的，只能够在当前项目使用，如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220803.png&#34; alt=&#34;project env&#34;&gt;&lt;/p&gt;
&lt;p&gt;另一种是组级别的，可以在整个组内的所有项目中使用，如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220805.png&#34; alt=&#34;group env&#34;&gt;&lt;/p&gt;
&lt;p&gt;这两种变量添加后都可以在 CI 的脚本中直接引用&lt;/p&gt;
&lt;h4 id=&#34;11-3、Kubernetes-集成&#34;&gt;11.3、Kubernetes 集成&lt;/h4&gt;
&lt;p&gt;对于 Kubernetes 集成实际上有两种方案，一种是对接 Kubernetes 的 api，纯代码实现；另一种取巧的方案是调用 kubectl 工具，用 kubectl 工具来实现滚动升级；这里采用后一种取巧的方式，将 kubectl 二进制文件封装到镜像中，然后在 deploy 阶段使用这个镜像直接部署就可以&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/11/0120211101220345.png&#34; alt=&#34;kubectl&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;mritd/docker-kubectl:v1.7.4&lt;/code&gt; 这个镜像的 Dockerfile 如下&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-dockerfile&#34; data-language=&#34;dockerfile&#34;&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM docker:dind 

LABEL maintainer=&#34;mritd &amp;lt;mritd1234@gmail.com&amp;gt;&#34;

ARG TZ=&#34;Asia/Shanghai&#34;

ENV TZ ${TZ}

ENV KUBE_VERSION v1.8.0

RUN apk upgrade --update \
    &amp;amp;&amp;amp; apk add bash tzdata wget ca-certificates \
    &amp;amp;&amp;amp; wget https://storage.googleapis.com/kubernetes-release/release/${KUBE_VERSION}/bin/linux/amd64/kubectl -O /usr/local/bin/kubectl \
    &amp;amp;&amp;amp; chmod +x /usr/local/bin/kubectl \
    &amp;amp;&amp;amp; ln -sf /usr/share/zoneinfo/${TZ} /etc/localtime \
    &amp;amp;&amp;amp; echo ${TZ} &amp;gt; /etc/timezone \
    &amp;amp;&amp;amp; rm -rf /var/cache/apk/*

CMD [&#34;/bin/bash&#34;]Copy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里面的 &lt;code&gt;${KUBE_CONFIG}&lt;/code&gt; 是一个自定义的环境变量，对于测试环境我将配置文件直接挂载入了容器中，然后 &lt;code&gt;${KUBE_CONFIG}&lt;/code&gt; 只是指定了一个配置文件位置，实际生产环境中可以选择将配置文件变成自定义环境变量使用&lt;/p&gt;
&lt;h4 id=&#34;11-4、GitLab-CI-总结&#34;&gt;11.4、GitLab CI 总结&lt;/h4&gt;
&lt;p&gt;关于 GitLab CI 上面已经讲了很多，但是并不全面，也不算太细致；因为这东西说起来实际太多了，现在目测已经 1W 多字了；以下总结一下 GitLab CI 的总体思想，当思路清晰了以后，我想后面的只是查查文档自己试一试就行了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CS 架构&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GitLab 作为 Server 端，控制 Runner 端执行一系列的 CI 任务；代码 clone 等无需关心，GitLab 会自动处理好一切；Runner 每次都会启动新的容器执行 CI 任务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;容器即环境&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Runner 使用 Docker build 的前提下；&lt;strong&gt;所有依赖切换、环境切换应当由切换不同镜像实现，即 build 那就使用 build 的镜像，deploy 就用带有 deploy 功能的镜像；通过不同镜像容器实现完整的环境隔离&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CI 即脚本&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同的 CI 任务实际上就是在使用不同镜像的容器中执行 SHELL 命令，自动化 CI 就是执行预先写好的一些小脚本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;敏感信息走环境变量&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一切重要的敏感信息，如账户密码等，不要写到 CI 配置中，直接放到 GitLab 的环境变量中；GitLab 会保证将其推送到远端 Runner 的 SHELL 变量中&lt;/p&gt;
&lt;p&gt;转载整理 From：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mritd.com/2017/09/05/git-flow-note/&#34;&gt;git-flow-note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mritd.com/2017/11/28/ci-cd-gitlab-ci/&#34;&gt;ci-cd-gitlab-ci&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系列教程-3&#34;&gt;&lt;strong&gt;系列教程&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Gitlab 使用系列&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/acc13b70/&#34;&gt;&lt;strong&gt;Gitlab 的安装及使用教程完全版&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/29a820b3/&#34;&gt;破解 Gitlab EE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/d08eb7b/&#34;&gt;Gitlab 的安装及使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/1879721e/&#34;&gt;CI/CD 与 Git Flow 与 GitLab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/bilicard.css&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="Gitlab" />
        <category term="Git" />
        <category term="CI/CD" />
        <updated>2021-11-01T11:25:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.17lai.site/posts/acc13b70/</id>
        <title>Gitlab 的安装及使用教程完全版</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/acc13b70/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;1-Gitlab概述&#34;&gt;1. Gitlab 概述&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;1-1-GitLab介绍&#34;&gt;1.1 GitLab 介绍&lt;/h3&gt;
&lt;p&gt;GitLab 是利用 Ruby on Rails 一个开源的版本管理系统，实现一个自托管的 Git 项目仓库，可通过 Web 界面进行访问公开的或者私人项目。&lt;/p&gt;
&lt;p&gt;GitLab 能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序 (Wall) 进行交流。&lt;/p&gt;
&lt;p&gt;它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找&lt;/p&gt;
&lt;h3 id=&#34;1-2-Gitlab服务构成&#34;&gt;1.2 Gitlab 服务构成&lt;/h3&gt;
&lt;p&gt;Nginx：静态 web 服务器。&lt;/p&gt;
&lt;p&gt;gitlab-shell：用于处理 Git 命令和修改 authorized keys 列表。&lt;/p&gt;
&lt;p&gt;gitlab-workhorse: 轻量级的反向代理服务器。&lt;/p&gt;
&lt;p&gt;logrotate：日志文件管理工具。&lt;/p&gt;
&lt;p&gt;postgresql：数据库。&lt;/p&gt;
&lt;p&gt;redis：缓存数据库。&lt;/p&gt;
&lt;p&gt;sidekiq：用于在后台执行队列任务（异步执行）。&lt;/p&gt;
&lt;p&gt;unicorn：An HTTP server for Rack applications，GitLab Rails 应用是托管在这个服务器上面的。&lt;/p&gt;
&lt;h3 id=&#34;1-3-Gitlab工作流程&#34;&gt;1.3 Gitlab 工作流程&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/05/2820210528222044.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-4-GitLab-Shell&#34;&gt;1.4 GitLab Shell&lt;/h3&gt;
&lt;p&gt;GitLab Shell 有两个作用：为 GitLab 处理 Git 命令、修改 authorized keys 列表&lt;/p&gt;
&lt;p&gt;当通过 SSH 访问 GitLab Server 时，GitLab Shell 会：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;限制执行预定义好的 Git 命令（git push，git pull，git annex）&lt;/li&gt;
&lt;li&gt;调用 GitLab Rails API 检查权限&lt;/li&gt;
&lt;li&gt;执行 pre-receive 钩子（在企业版中叫做 Git 钩子）&lt;/li&gt;
&lt;li&gt;执行用户请求的动作，处理 GitLab 的 post-receive 动作&lt;/li&gt;
&lt;li&gt;处理自定义的 post-receive 动作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当通过 http (s) 访问 GitLab Server 时，工作流程取决于你是从 Git 仓库拉取 (pull) 代码还是向 git 仓库推送 (push) 代码：&lt;/p&gt;
&lt;p&gt;如果是从 Git 仓库拉取 (pull) 代码，GitLab Rails 应用会全权负责处理用户鉴权和执行 Git 命令的工作&lt;/p&gt;
&lt;p&gt;如果是向 Git 仓库推送 (push) 代码，GitLab Rails 应用既不会进行用户鉴权也不会执行 Git 命令，它会把以下工作交由 GitLab Shell 进行处理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用 GitLab Rails API 检查权限&lt;/li&gt;
&lt;li&gt;执行 pre-receive 钩子（在 GitLab 企业版中叫做 Git 钩子）&lt;/li&gt;
&lt;li&gt;执行你请求的动作&lt;/li&gt;
&lt;li&gt;处理 GitLab 的 post-receive 动作&lt;/li&gt;
&lt;li&gt;处理自定义的 post-receive 动作&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-5-GitLab-Workhorse&#34;&gt;1.5 GitLab Workhorse&lt;/h3&gt;
&lt;p&gt;GitLab Workhorse 是一个敏捷的反向代理。它会处理一些大的 HTTP 请求，比如文件上传、文件下载、Git push/pull 和 Git 包下载。其它请求会反向代理到 GitLab Rails 应用，即反向代理给后端的 unicorn。&lt;/p&gt;
&lt;h2 id=&#34;2-Gitlab的安装部署&#34;&gt;2. Gitlab 的安装部署&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Gitlab 要求服务器内存 2G 以上&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-1-方式一-下载gitlab-ce的rpm包&#34;&gt;2.1 方式一：下载 gitlab-ce 的 rpm 包&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://packages.gitlab.com/gitlab/gitlab-ce&#34;&gt;gitlab 官方 rpm 包下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/&#34;&gt;清华的源&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将对应版本的 gitlab-ce 下载到本地后，直接 yum 安装即可&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 要先将这个rpm包下载到本地&lt;/span&gt;
yum &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; -y gitlab-ce-13.6.1-ce.0.el7.x86_64.rpm&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-2-方式二-配置yum源&#34;&gt;2.2 方式二：配置 yum 源&lt;/h3&gt;
&lt;p&gt;在 /etc/yum.repos.d/ 下新建 gitlab-ce.repo，写入如下内容：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;gitlab-ce&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;gitlab-ce
&lt;span class=&#34;token assign-left variable&#34;&gt;baseurl&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/
&lt;span class=&#34;token assign-left variable&#34;&gt;Repo_gpgcheck&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;Enabled&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;Gpgkey&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;https://packages.gitlab.com/gpg.key&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后创建 cache，再直接安装 gitlab-ce&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;yum makecache  &lt;span class=&#34;token comment&#34;&gt;# 这一步会创建大量的数据&lt;/span&gt;
 
&lt;span class=&#34;token comment&#34;&gt;# 直接安装最新版&lt;/span&gt;
yum &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; -y gitlab-ce
 
&lt;span class=&#34;token comment&#34;&gt;# 如果要安装指定的版本，在后面填上版本号即可&lt;/span&gt;
yum &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; -y  gitlab-ce-13.6.1
 
&lt;span class=&#34;token comment&#34;&gt;# 如果安装时出现gpgkey验证错误，只需在安装时明确指明不进行gpgkey验证&lt;/span&gt;
yum &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; gitlab-ce -y --nogpgcheck&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-2-1-单服务启动模式&#34;&gt;&lt;strong&gt;2.2.1. 单服务启动模式&lt;/strong&gt;&lt;/h3&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run -d --name gitlab --hostname gitlab.example.com &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
-e &lt;span class=&#34;token assign-left variable&#34;&gt;GITLAB_OMNIBUS_CONFIG&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;
    external_url &#39;https://gitlab.example.com&#39;
    gitlab_rails[&#39;gitlab_shell_ssh_port&#39;] = 22
    nginx[&#39;redirect_http_to_https&#39;] = true
    nginx[&#39;ssl_dhparam&#39;] = &#39;/etc/gitlab/ssl/dhparam.pem&#39;
    nginx[&#39;ssl_certificate&#39;] = &#39;/etc/gitlab/ssl/domain.crt&#39;
    nginx[&#39;ssl_certificate_key&#39;] = &#39;/etc/gitlab/ssl/domain.key&#39;
    nginx[&#39;custom_gitlab_server_config&#39;] = &#39;location ^~ /.well-known {&lt;span class=&#34;token entity&#34; title=&#34;\n&#34;&gt;\n&lt;/span&gt; alias /var/opt/gitlab/letsencrypt/.well-known;&lt;span class=&#34;token entity&#34; title=&#34;\n&#34;&gt;\n&lt;/span&gt;}&lt;span class=&#34;token entity&#34; title=&#34;\n&#34;&gt;\n&lt;/span&gt;&#39;
    high_availability[&#39;mountpoint&#39;] = [&#39;/etc/gitlab&#39;, &#39;/var/log/gitlab&#39; &#39;/var/opt/gitlab&#39;  # 严格限定gitlab服务启动前，指定文件系统挂完毕
&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
-p &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt;:22 -p &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;:80 -p &lt;span class=&#34;token number&#34;&gt;443&lt;/span&gt;:443 &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
-v /srv/gitlab/config:/etc/gitlab &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
-v /srv/gitlab/logs:/var/log/gitlab &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
-v /srv/gitlab/data:/var/opt/gitlab &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
-v /etc/certs:/etc/gitlab/ssl &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
--restart&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;always gitlab/gitlab-ce:latest
 &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-2-1-Compose服务编排模式-推荐方式&#34;&gt;&lt;strong&gt;2.2.1. Compose 服务编排模式 (推荐方式)&lt;/strong&gt;&lt;/h3&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; pull gitlab/gitlab-ce:latest
 
&lt;span class=&#34;token comment&#34;&gt;############################ 多行命令开始 ##########################&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; docker-compose.yaml &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;EOF
version: &#39;2&#39;
 
services:
 
  Gitlab:
    image: &#39;gitlab/gitlab-ce:latest&#39;
    container_name: &#39;gitlab&#39;
    hostname: &#39;gitlab.example.com&#39;
    restart: always
    ports:
      - &#39;22:22&#39;
      - &#39;80:80&#39;
      - &#39;443:443&#39;
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        # Add any other gitlab.rb configuration here, each on its own line
        external_url &#39;https://gitlab.example.com&#39;
        gitlab_rails[&#39;gitlab_shell_ssh_port&#39;] = 22
        nginx[&#39;redirect_http_to_https&#39;] = true
        nginx[&#39;ssl_dhparam&#39;] = &#34;/etc/gitlab/ssl/dhparam.pem&#34;
        nginx[&#39;ssl_certificate&#39;] = &#34;/etc/gitlab/ssl/domain.crt&#34;
        nginx[&#39;ssl_certificate_key&#39;] = &#34;/etc/gitlab/ssl/domain.key&#34;
        nginx[&#39;custom_gitlab_server_config&#39;] = &#34;location ^~ /.well-known {&lt;span class=&#34;token entity&#34; title=&#34;\n&#34;&gt;\n&lt;/span&gt; alias /var/opt/gitlab/letsencrypt/.well-known;&lt;span class=&#34;token entity&#34; title=&#34;\n&#34;&gt;\n&lt;/span&gt;}&lt;span class=&#34;token entity&#34; title=&#34;\n&#34;&gt;\n&lt;/span&gt;&#34;
        high_availability[&#39;mountpoint&#39;] = [&#34;/etc/gitlab&#34;, &#34;/var/log/gitlab&#34;, &#34;/var/opt/gitlab&#34;]  # 严格限定gitlab服务启动前，指定文件系统挂完毕
    volumes:
      - /srv/gitlab/config:/etc/gitlab
      - /srv/gitlab/logs:/var/log/gitlab
      - /srv/gitlab/data:/var/opt/gitlab
      - /etc/certs:/etc/gitlab/ssl
EOF&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;############################ 多行命令结束 ##########################&lt;/span&gt;
 
&lt;span class=&#34;token comment&#34;&gt;# 启动服务&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;docker-compose&lt;/span&gt; -f docker-compose.yaml up -d
 &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-3-gitlab的配置&#34;&gt;2.3 gitlab 的配置&lt;/h3&gt;
&lt;p&gt;配置文件位置  /etc/gitlab/gitlab.rb&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@centos7 test&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# vim /etc/gitlab/gitlab.rb&lt;/span&gt;
 
&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@centos7 test&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# grep &#34;^[a-Z]&#34; /etc/gitlab/gitlab.rb&lt;/span&gt;
 
external_url &lt;span class=&#34;token string&#34;&gt;&#39;http://10.0.0.51&#39;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 这里一定要加上http://&lt;/span&gt;
 
&lt;span class=&#34;token comment&#34;&gt;# 配置邮件服务&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_enable&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_address&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;smtp.qq.com&#34;&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_port&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_user_name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;hgzerowzh@qq.com&#34;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 自己的qq邮箱账号&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_password&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;xxx&#34;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 开通smtp时返回的授权码&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_domain&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;qq.com&#34;&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_authentication&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;login&#34;&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_enable_starttls_auto&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_tls&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;gitlab_email_from&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;hgzerowzh@qq.com&#34;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 指定发送邮件的邮箱地址&lt;/span&gt;
user&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;git_user_email&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;shit@qq.com&#34;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;# 指定接收邮件的邮箱地址&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;修改好配置文件后，要使用 gitlab-ctl reconfigure 命令重载一下配置文件，否则不生效。&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;gitlab-ctl reconfigure &lt;span class=&#34;token comment&#34;&gt;# 重载配置文件&lt;/span&gt;
gitlab-ctl restart&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;测试邮件服务器&#34;&gt;测试邮件服务器&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;gitlab-rails console
Notify.test_email&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;rollinghell@foxmail.com&#39;&lt;/span&gt;,&lt;span class=&#34;token string&#34;&gt;&#39;testbiaoti&#39;&lt;/span&gt;,&lt;span class=&#34;token string&#34;&gt;&#39;testzhegnwen1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;.deliver_now&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@test102 ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# gitlab-rails console&lt;/span&gt;
--------------------------------------------------------------------------------
 GitLab:       &lt;span class=&#34;token number&#34;&gt;12.5&lt;/span&gt;.0 &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;1f0ab8978ef&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
GitLab Shell: &lt;span class=&#34;token number&#34;&gt;10.2&lt;/span&gt;.0
 PostgreSQL:   &lt;span class=&#34;token number&#34;&gt;10.9&lt;/span&gt;
--------------------------------------------------------------------------------
Loading production environment &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Rails &lt;span class=&#34;token number&#34;&gt;5.2&lt;/span&gt;.3&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
irb&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;main&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;:001:&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;0&lt;/span&gt;&amp;gt;&lt;/span&gt; Notify.test_email&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;andycrusoe@gmail.com&#39;&lt;/span&gt;,&lt;span class=&#34;token string&#34;&gt;&#39;test&#39;&lt;/span&gt;,&lt;span class=&#34;token string&#34;&gt;&#39;test&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;.deliver_now
Notify&lt;span class=&#34;token comment&#34;&gt;#test_email: processed outbound mail in 1.4ms&lt;/span&gt;
Sent mail to anliven@126.com &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;73&lt;/span&gt;.0ms&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
Date: Wed, &lt;span class=&#34;token number&#34;&gt;27&lt;/span&gt; Nov &lt;span class=&#34;token number&#34;&gt;2019&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;15&lt;/span&gt;:12:58 +0800
From: GitLab &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;gitlab@192.168.16.10&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;2&lt;/span&gt;&amp;gt;&lt;/span&gt;
Reply-To: GitLab &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;noreply@192.168.16.10&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;2&lt;/span&gt;&amp;gt;&lt;/span&gt;
To: anliven@126.com
Message-ID: &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;5dde21fa612d4_3a1b3fcb38fcf9c0651b@test102.mail&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;
Subject: &lt;span class=&#34;token builtin class-name&#34;&gt;test&lt;/span&gt;
Mime-Version: &lt;span class=&#34;token number&#34;&gt;1.0&lt;/span&gt;
Content-Type: text/html&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;UTF-8
Content-Transfer-Encoding: 7bit
Auto-Submitted: auto-generated
X-Auto-Response-Suppress: All
&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;DOCTYPE html PUBLIC &lt;span class=&#34;token string&#34;&gt;&#34;-//W3C//DTD HTML 4.0 Transitional//EN&#34;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;http://www.w3.org/TR/REC-html40/loose.dtd&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;html&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;/p&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;/body&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;/html&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#&amp;lt;Mail::Message:70141649239780, Multipart: false, Headers: &amp;lt;Date: Wed, 27 Nov 2019 15:12:58 +0800&amp;gt;, &amp;lt;From: GitLab &amp;lt;gitlab@192.168.16.102&amp;gt;&amp;gt;, &amp;lt;Reply-To: GitLab &amp;lt;noreply@192.168.16.102&amp;gt;&amp;gt;, &amp;lt;To: anliven@126.com&amp;gt;, &amp;lt;Message-ID: &amp;lt;5dde21fa612d4_3a1b3fcb38fcf9c0651b@test102.mail&amp;gt;&amp;gt;, &amp;lt;Subject: test&amp;gt;, &amp;lt;Mime-Version: 1.0&amp;gt;, &amp;lt;Content-Type: text/html; charset=UTF-8&amp;gt;, &amp;lt;Content-Transfer-Encoding: 7bit&amp;gt;, &amp;lt;Auto-Submitted: auto-generated&amp;gt;, &amp;lt;X-Auto-Response-Suppress: All&amp;gt;&amp;gt;&lt;/span&gt;
irb&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;main&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;:002:&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;0&lt;/span&gt;&amp;gt;&lt;/span&gt;
irb&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;main&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;:003:&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;0&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;exit&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@test102 ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;#&lt;/span&gt;
 &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;配置gitlab代理&#34;&gt;配置 gitlab 代理&lt;/h4&gt;
&lt;p&gt;https://docs.gitlab.com/omnibus/settings/environment-variables.html&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;gitaly&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;env&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#34;http_proxy&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;http://USERNAME:PASSWORD@example.com:8080&#34;&lt;/span&gt;,
    &lt;span class=&#34;token string&#34;&gt;&#34;https_proxy&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;http://USERNAME:PASSWORD@example.com:8080&#34;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-4-Gitlab常用命令&#34;&gt;2.4 Gitlab 常用命令&lt;/h3&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;gitlab-ctl start         &lt;span class=&#34;token comment&#34;&gt;# 启动所有 gitlab 组件&lt;/span&gt;
gitlab-ctl stop          &lt;span class=&#34;token comment&#34;&gt;# 停止所有 gitlab 组件&lt;/span&gt;
gitlab-ctl restart       &lt;span class=&#34;token comment&#34;&gt;# 重启所有 gitlab 组件&lt;/span&gt;
gitlab-ctl status        &lt;span class=&#34;token comment&#34;&gt;# 查看服务状态&lt;/span&gt;
 
gitlab-ctl reconfigure   &lt;span class=&#34;token comment&#34;&gt;# 启动服务&lt;/span&gt;
gitlab-ctl show-config   &lt;span class=&#34;token comment&#34;&gt;# 验证配置文件&lt;/span&gt;
 
gitlab-ctl &lt;span class=&#34;token function&#34;&gt;tail&lt;/span&gt;          &lt;span class=&#34;token comment&#34;&gt;# 查看日志&lt;/span&gt;
 
gitlab-rake gitlab:check &lt;span class=&#34;token assign-left variable&#34;&gt;SANITIZE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;true --trace    &lt;span class=&#34;token comment&#34;&gt;# 检查gitlab&lt;/span&gt;
 
&lt;span class=&#34;token function&#34;&gt;vim&lt;/span&gt; /etc/gitlab/gitlab.rb &lt;span class=&#34;token comment&#34;&gt;# 修改默认的配置文件&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-5-gitlab-ctl常用命令介绍&#34;&gt;2.5 gitlab-ctl 常用命令介绍&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right&#34;&gt;命令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt; check-config&lt;/td&gt;
&lt;td&gt; 检查在 gitlab 中是否有任何配置。在指定版本中删除的 rb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;deploy-page&lt;/td&gt;
&lt;td&gt; 安装部署页面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt; diff-config&lt;/td&gt;
&lt;td&gt; 将用户配置与包可用配置进行比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt; remove-accounts&lt;/td&gt;
&lt;td&gt; 删除所有用户和组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt; upgrade&lt;/td&gt;
&lt;td&gt; 升级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt; service-list&lt;/td&gt;
&lt;td&gt; 查看所有服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt; once&lt;/td&gt;
&lt;td&gt; 如果 GitLab 服务停止了就启动服务，如果已启动就不做任何操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt; restart&lt;/td&gt;
&lt;td&gt; 重启 GitLab 服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt; start&lt;/td&gt;
&lt;td&gt; 如果 GitLab 服务停止了就启动服务，如果已启动就重启服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt; stop&lt;/td&gt;
&lt;td&gt; 停止 GitLab 服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt; status&lt;/td&gt;
&lt;td&gt; 查看 GitLab 服务状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt; reconfigure&lt;/td&gt;
&lt;td&gt; 重新配置 GitLab 并启动&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;3-Gitlab的使用&#34;&gt;3. Gitlab 的使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Gitlab 安装好后，设置密码，管理账户为 root&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-1-创建Group&#34;&gt;&lt;strong&gt;3.1 创建 Group&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;填上组名即可，这里组名为 java&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/05/2820210528222105.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802164637.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-2-创建User&#34;&gt;&lt;strong&gt;3.2 创建 User&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;创建四个 User：pm、dev1、dev2、dev3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/05/2820210528222131.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/05/2820210528222120.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-3-添加User到Group中并授权&#34;&gt;&lt;strong&gt;3.3 添加 User 到 Group 中并授权&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/05/2820210528222140.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-4-创建Project并配置SSH&#34;&gt;&lt;strong&gt;3.4 创建 Project 并配置 SSH&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/05/2820210528222147.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/05/2820210528222154.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/05/2820210528222201.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/05/2820210528222233.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-5-在项目中添加成员&#34;&gt;&lt;strong&gt;3.5 在项目中添加成员&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802164730.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802164804.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-6-将本地文件推送到Gitlab&#34;&gt;3.6 将本地文件推送到 Gitlab&lt;/h3&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 将app01项目克隆下来&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; clone git@10.0.0.51:java/app01.git
 
&lt;span class=&#34;token comment&#34;&gt;# 初始化配置&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config --global user.name &lt;span class=&#34;token string&#34;&gt;&#34;hgzero&#34;&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config --global user.email &lt;span class=&#34;token string&#34;&gt;&#34;hgzero@qq.com&#34;&lt;/span&gt;
 
&lt;span class=&#34;token comment&#34;&gt;# 在app01目录下新建一些文件&lt;/span&gt;
 
&lt;span class=&#34;token comment&#34;&gt;# 推送到gitlab&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; commit -m &lt;span class=&#34;token string&#34;&gt;&#34;first edition&#34;&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; push origin master&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802164823.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-制定开发计划&#34;&gt;4. 制定开发计划&lt;/h2&gt;
&lt;h3 id=&#34;4-1-创建开发计划&#34;&gt;&lt;strong&gt;4.1 创建开发计划&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;项目：app01&lt;/li&gt;
&lt;li&gt; 版本：v1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802173643.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-2-创建里程碑Milestones&#34;&gt;&lt;strong&gt;4.2 创建里程碑 Milestones&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用 pm 账号登录 gitlab 后操作（先要在 admin 中设置 pm 账号的密码）&lt;/li&gt;
&lt;li&gt;要根据开发计划来创建 Milestones&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802164839.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802164935.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802164956.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802165053.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-3-根据开发计划创建issue&#34;&gt;4.3 根据开发计划创建 issue&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;创建 4 个 issue，分派给 dev1 和 dev2 这两个开发人员&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802165109.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802165138.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802165158.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802165215.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802165238.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802165257.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-4-开发者登录账号查看分派的任务&#34;&gt;**4.4 开发者登录账号查看分派的任务 **&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;然后开发 dev1 登录 gitlab，就能看到任务已经分配过来了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802165316.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-5-开发流程&#34;&gt;&lt;strong&gt;4.5 开发流程&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;公司里的开发开始任务&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-shell&#34; data-language=&#34;shell&#34;&gt;&lt;code class=&#34;language-shell&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 1. 先从仓库把项目拉下来&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; clone git@10.0.0.51:java/app01.git
&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; app01/
 
&lt;span class=&#34;token comment&#34;&gt;# 2.先创建一个自己的分支，然后进行开发&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; checkout -b index   &lt;span class=&#34;token comment&#34;&gt;# 创建一个叫index的分支，并切换到这个分支&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; status
 
&lt;span class=&#34;token comment&#34;&gt;# 3. 开始开发首页&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&amp;lt;h1&amp;gt;welcome to this app&amp;lt;/h1&amp;gt;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; index.html  &lt;span class=&#34;token comment&#34;&gt;# 假设就开发了一个index页面&lt;/span&gt;
 
&lt;span class=&#34;token comment&#34;&gt;# 4. 开发完成后，把项目传到仓库&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; commit -m &lt;span class=&#34;token string&#34;&gt;&#34;index&#34;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# 如果写成 git commit -m &#34;close #2&#34; ，则表示merge请求允许且merge成功之后，自动删除编号为#2的issue&lt;/span&gt;
 
&lt;span class=&#34;token comment&#34;&gt;# 传到index分支&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; push origin index&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-6-合并分支&#34;&gt;&lt;strong&gt;4.6 合并分支&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1）开发 dev1 发送合并分支请求给 pm&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802165333.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802165341.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802165350.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）pm 收到开发的 Merge 请求后进行处理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 pm 登录，就可以看到 pm 已经收到了合并请求 merge request&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802165452.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802165505.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802165423.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802164313.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3）开发 dev1 确认任务完成&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;退出 pm 账户，登入 dev1 账户：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802164301.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;或者点进去后，在侧边栏进行标识 Done，然后已经完成的 issue，可以将其 Close&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802164248.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 这个时候 Milestones 的进度已经往前进了一些了：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802164237.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-7-开发其他功能&#34;&gt;4.7 开发其他功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;然后其他开发者或者自己再次进行开发时，先要把刚刚更新后的内容（master 主干）拉回来，然后再进行开发&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;git checkout master  # 切换到 master&lt;br&gt;
git pull             # 从远端仓库拉取数据&lt;br&gt;
# 然后再进行其他操作&lt;/p&gt;
&lt;h2 id=&#34;5-Gitlab备份恢复&#34;&gt;5. Gitlab 备份恢复&lt;/h2&gt;
&lt;h3 id=&#34;5-1-备份gitlab&#34;&gt;5.1 备份 gitlab&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1）修改配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;/etc/gitlab/gitlab.rb&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 备份保存的位置，这里是默认位置，可修改成指定的位置&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;backup_path&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/var/opt/gitlab/backups&#34;&lt;/span&gt;
 
&lt;span class=&#34;token comment&#34;&gt;# 设置备份保存的时间，超过此时间的日志将会被新覆盖&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;backup_keep_time&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;604800&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 这里是默认设置，保存7天&lt;/span&gt;
 
&lt;span class=&#34;token comment&#34;&gt;# 特别注意：&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#     如果自定义了备份保存位置，则要修改备份目录的权限，比如：&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#     chown -R git.git /data/backup/gitlab&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;配置完成后要重启以使配置生效&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 重读配置文件&lt;/span&gt;
gitlab-ctl reconfigure
 
&lt;span class=&#34;token comment&#34;&gt;# 重启gitlab&lt;/span&gt;
gitlab-ctl restart&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2）设置定时任务&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 每天凌晨2点定时创建备份&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# 将一下内容写入到定时任务中 crontab -e&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; * * * /usr/bin/gitlab-rake gitlab:backup:create
 
&lt;span class=&#34;token comment&#34;&gt;# 备份策略建议：&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#     本地保留3到7天，在异地备份永久保存&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3）备份时间的识别&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 备份后的文件类似这样的形式：1494170842_gitlab_backup.tar，可以根据前面的时间戳确认备份生成的时间&lt;/span&gt;
 
data  -d  @1494170842&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5-2-恢复gitlab&#34;&gt;5.2 恢复 gitlab&lt;/h3&gt;
&lt;h4 id=&#34;1）停止停止相关数据连接-数据写入服务&#34;&gt;&lt;strong&gt;1）停止停止相关数据连接，数据写入服务&lt;/strong&gt;&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 停止数据写入服务&lt;/span&gt;
gitlab-ctl stop puma
gitlab-ctl stop sidekiq&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2）进行数据恢复并重启&#34;&gt;&lt;strong&gt;2）进行数据恢复并重启&lt;/strong&gt;&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 进行恢复&lt;/span&gt;
gitlab-rake gitlab:backup:restore &lt;span class=&#34;token assign-left variable&#34;&gt;BACKUP&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;1627839447_2021_08_01_14.1.1-ee  &lt;span class=&#34;token comment&#34;&gt;# 这个时间戳就是刚刚备份的文件前面的时间戳&lt;/span&gt;
 
&lt;span class=&#34;token comment&#34;&gt;# 重启&lt;/span&gt;
gitlab-ctl restart&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;6-gitlab邮件通知配置&#34;&gt;6. gitlab 邮件通知配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;vim  /etc/gitlab/gitlab.rb&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;time_zone&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Asia/Shanghai&#39;&lt;/span&gt;
 
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;gitlab_email_enabled&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;gitlab_email_from&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;example@163.com&#39;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 填写发件人的邮箱地址&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;gitlab_email_display_name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;gitlab&#39;&lt;/span&gt;
 
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_enable&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_address&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;smtp.163.com&#34;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# smtp服务器的地址,如网易的地址&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_port&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;                 &lt;span class=&#34;token comment&#34;&gt;# 要注意如果使用了SSL/TLS的话,端口可能不是25&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_user_name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;smtp用户名&#34;&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_password&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;smtp用户密码&#34;&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_domain&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;163.com&#34;&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_authentication&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;login&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;启用邮件功能&lt;/strong&gt;&lt;br&gt;
Gitlab 的 Compose 配置 &lt;code&gt;GITLAB_OMNIBUS_CONFIG&lt;/code&gt; 节点下增加如下几行：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;########## 邮件服务配置 ##########&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_enable&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_address&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;smtp.exmail.qq.com&#34;&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_port&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;465&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_tls&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_user_name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;账号&#34;&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_password&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;密码&#34;&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_authentication&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;login&#34;&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_enable_starttls_auto&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt; 
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;gitlab_email_from&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;发件人邮箱&#34;&lt;/span&gt;
 &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;7-使用SourceTree进行项目开发&#34;&gt;7. 使用 SourceTree 进行项目开发&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;7-1-项目拉取&#34;&gt;7.1 项目拉取&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;先把项目克隆下来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802164210.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802164157.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 ssh 的方式克隆失败，可能是因为 SSH Key 没找到，可以在这里添加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802164146.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802164132.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;7-2-创建分支进行功能开发&#34;&gt;7.2 创建分支进行功能开发&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1）新建立一个叫 “pay” 的分支&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802164122.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802164113.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）进行功能开发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802164103.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;7-3-提交项目&#34;&gt;7.3 提交项目&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1）开发 pay 功能完成后进行提交&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以看到 SourceTree 中已经有 “未提交的更改”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802164054.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802164042.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）添加 “用户信息”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802164029.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;** 3）进行提交 **&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802164014.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注释也可以写成  close #3    ，作用是提交完成后关闭 3 号 issue&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7-4-推送到仓库&#34;&gt;&lt;strong&gt;7.4 推送到仓库&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802164002.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802163947.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;然后就可以在 gitlab 上进行发送 merge 请求了，后面就可以进行其他操作了&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7-5-项目上线&#34;&gt;7.5 项目上线&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1）当所有工作完成之后，就可以进行上线了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802163932.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）打标签&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上线先打个标签&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802163916.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802163907.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/05/2820210528225256.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;** 3）删除无用分支 **&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;然后删除已经合并到主干中的不必要的分支，如 index、pay 等&lt;/li&gt;
&lt;li&gt;最后一定要注意时间一定要同步，不然会错乱&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8-Gitlab调优&#34;&gt;&lt;strong&gt;8. Gitlab 调优&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;gitlab 对内存资源的消耗比较厉害&lt;br&gt;
其中尤以 sidekiq 队列 及 unicorn 服务 两个组件对内存消耗最多&lt;br&gt;
可以再容器启动时对相关参数进行微调：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-yml&#34; data-language=&#34;yml&#34;&gt;&lt;code class=&#34;language-yml&#34;&gt;unicorn&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;worker_processes&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; = 1
unicorn&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;worker_memory_limit_min&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; = &#34;300 * 1 &amp;lt;&amp;lt; 20&#34;
unicorn&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;worker_memory_limit_max&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; = &#34;400 * 1 &amp;lt;&amp;lt; 20&#34;
unicorn&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;worker_timeout&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; = 15
sidekiq&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;concurrency&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; = 10
sidekiq_cluster&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;enable&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; = false
sidekiq_cluster&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;ha&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; = false
redis&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;maxclients&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; = &#34;100&#34;
nginx&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;worker_processes&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; = 2
nginx&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;worker_connections&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; = 512
nginx&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;keepalive_timeout&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; = 300
nginx&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;cache_max_size&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; = &#39;200m&#39;
mattermost&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;enable&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; = false
mattermost_nginx&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;enable&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; = false
gitlab_pages&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;enable&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; = false
pages_nginx&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;enable&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; = false
postgresql&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;shared_buffers&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; = &#34;256MB&#34;
postgresql&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;max_connections&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; = 30
postgresql&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;work_mem&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; = &#34;8MB&#34;
postgresql&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;maintenance_work_mem&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; = &#34;16MB&#34;
postgresql&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;effective_cache_size&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; = &#34;1MB&#34;
postgresql&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;checkpoint_timeout&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; = &#34;5min&#34;
postgresql&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;checkpoint_warning&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; = &#34;30s&#34;
 &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置调整后需要重载一下&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-shell&#34; data-language=&#34;shell&#34;&gt;&lt;code class=&#34;language-shell&#34;&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; gitlab gitlab-ctl reconfigure
&lt;span class=&#34;token function&#34;&gt;docker-compose&lt;/span&gt; down
&lt;span class=&#34;token function&#34;&gt;docker-compose&lt;/span&gt; up -d
 &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;9-Gitlab-启用-ContainerRegistry&#34;&gt;9. Gitlab 启用 ContainerRegistry&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ContainerRegistry&lt;/code&gt; 是 &lt;code&gt;Gitlab&lt;/code&gt; 内置的 &lt;code&gt;Docker Registry&lt;/code&gt; 集成组件&lt;/li&gt;
&lt;li&gt;集成后每个项目可获得私有的 &lt;code&gt;Docker&lt;/code&gt; 镜像存储空间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ContainerRegistry&lt;/code&gt; 可以复用 &lt;code&gt;Gitlab&lt;/code&gt; 域名 或者 独立域名&lt;/li&gt;
&lt;li&gt;这里配置为复用域名（此时 &lt;code&gt;ContainerRegistry&lt;/code&gt; 将复用 &lt;code&gt;Gitlab&lt;/code&gt; 的 &lt;code&gt;TLS&lt;/code&gt; 证书）&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker-compose.yaml&lt;/code&gt; 中 Gitlab 服务的 &lt;code&gt;GITLAB_OMNIBUS_CONFIG&lt;/code&gt; 节点下增加如下配置：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;registry_external_url &lt;span class=&#34;token string&#34;&gt;&#34;https://gitlab.example.com:4567&#34;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# ContainerRegistry的外部访问地址&lt;/span&gt;
registry_nginx&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;ssl_certificate&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/etc/gitlab/ssl/domain.crt&#34;&lt;/span&gt;
registry_nginx&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;ssl_certificate_key&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/etc/gitlab/ssl/domain.key&#34;&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;registry_host&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;gitlab.example.com&#34;&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;registry_port&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;4567&#34;&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;registry_api_url&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;http://localhost:5000&#34;&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;gitlab_default_projects_features_builds&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;gitlab_default_projects_features_container_registry&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;
 &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;端口开放增加 &lt;code&gt;- 4567:4567&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;服务重启 &lt;code&gt;docker-compose restart Gitlab&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;ContainerRegistry&lt;/code&gt; 集成后可以通过 &lt;code&gt;Gitlab&lt;/code&gt; 账户登录： &lt;code&gt;docker login gitlab.example.com:4567&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;日常维护命令&#34;&gt;日常维护命令&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# Gitlab维护&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; gitlab gitlab-ctl status  &lt;span class=&#34;token comment&#34;&gt;# gitlab各组件服务状态&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; gitlab gitlab-ctl start/restart/stop &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;组件名&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# gitlab所有组件的统一控制（其中Unicorn组件重启完成前GitLab会报502）&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; gitlab gitlab-ctl &lt;span class=&#34;token function&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;/var/log/gitlab下的某子目录&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 实时查看日志&lt;/span&gt;
 
&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; gitlab update-permissions  &lt;span class=&#34;token comment&#34;&gt;# 修复gitlab版本升级后出现的权限问题&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; gitlab gitlab-ctl reconfigure  &lt;span class=&#34;token comment&#34;&gt;# 重载配置&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; -t gitlab gitlab-rake gitlab:backup:create  &lt;span class=&#34;token comment&#34;&gt;# 创建备份&lt;/span&gt;
 
&lt;span class=&#34;token comment&#34;&gt;# ContainerRegistry维护&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; gitlab gitlab-ctl registry-garbage-collect  &lt;span class=&#34;token comment&#34;&gt;# 垃圾回收，清理废弃layer（registry停机）&lt;/span&gt;
 &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;Import-Repository-Repo-By-Url&#34;&gt;Import Repository(Repo By Url)&lt;/h3&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 账号密码若存在特殊字符则需要url编码&lt;/span&gt;
https://username:password@host:port/group/project.git
 &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;10-GitLab重置用户名密码&#34;&gt;&lt;strong&gt;10. GitLab 重置用户名密码&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;打开终端，访问：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;gitlab-rails console&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;user &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; User.where&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;id: &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;.first
user.password&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;123456&#39;&lt;/span&gt;
user.password_confirmation &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;123456&#39;&lt;/span&gt;
user.save&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#注意加上 “！”&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后退出命令行即可。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;quit&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt; gitlab-rails console production 命令 开始初始化密码
&lt;span class=&#34;token comment&#34;&gt;# 在irb(main):001:0&amp;gt; 后面通过 u=User.where(id:1).first 来查找与切换账号（User.all 可以查看所有用户）&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# 通过u.password=&#39;12345678&#39;设置密码为12345678(这里的密码看自己喜欢)：&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# 通过u.password_confirmation=&#39;12345678&#39; 再次确认密码&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# 通过 u.save!进行保存&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;11-HTTPS-SSL-支持&#34;&gt;&lt;strong&gt;11. HTTPS SSL 支持&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;nginx 反向代理方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意 docker 内部没有 ca 支持， 需要手动添加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;域名提供商提供的免费证书&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这种证书直接用，如果是自签名证书，需要添加自己的 ca root 证书到服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12-Gitlab恢复数据出现must-be-owner-of解决方法&#34;&gt;12. Gitlab 恢复数据出现 must be owner of 解决方法&lt;/h2&gt;
&lt;p&gt;按正常 Gitlab 备份数据 gitlab-rake gitlab:backup:create&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-sql&#34; data-language=&#34;sql&#34;&gt;&lt;code class=&#34;language-sql&#34;&gt;ERROR: must be owner &lt;span class=&#34;token keyword&#34;&gt;of&lt;/span&gt; extension plpgsql
ERROR: must be owner &lt;span class=&#34;token keyword&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;schema&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt;
ERROR: &lt;span class=&#34;token keyword&#34;&gt;schema&lt;/span&gt; “&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt;” already &lt;span class=&#34;token keyword&#34;&gt;exists&lt;/span&gt;
ERROR: must be owner &lt;span class=&#34;token keyword&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;schema&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt;
ERROR: must be owner &lt;span class=&#34;token keyword&#34;&gt;of&lt;/span&gt; extension plpgsql
WARNING: &lt;span class=&#34;token keyword&#34;&gt;no&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;privileges&lt;/span&gt; could be revoked &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; “&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt;”
WARNING: &lt;span class=&#34;token keyword&#34;&gt;no&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;privileges&lt;/span&gt; could be revoked &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; “&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt;”
WARNING: &lt;span class=&#34;token keyword&#34;&gt;no&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;privileges&lt;/span&gt; were granted &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; “&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt;”
WARNING: &lt;span class=&#34;token keyword&#34;&gt;no&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;privileges&lt;/span&gt; were granted &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; “&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt;”&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;h4 id=&#34;1-修改postgresql配置&#34;&gt;**1. 修改 postgresql 配置 **&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-shell&#34; data-language=&#34;shell&#34;&gt;&lt;code class=&#34;language-shell&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; /var/opt/gitlab/postgresql/data
$ &lt;span class=&#34;token function&#34;&gt;vi&lt;/span&gt; /var/opt/gitlab/postgresql/data/postgresql.conf
listen_addresses &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;*&#39;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;找到 listen_addresses = ” 改为 listen_addresses = ‘*’&lt;/p&gt;
&lt;p&gt;修改 /var/opt/gitlab/postgresql/data/pg_hba.conf&lt;br&gt;
在这个文件最后面加入&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-shell&#34; data-language=&#34;shell&#34;&gt;&lt;code class=&#34;language-shell&#34;&gt;$ &lt;span class=&#34;token function&#34;&gt;vi&lt;/span&gt; /var/opt/gitlab/postgresql/data/pg_hba.conf
&lt;span class=&#34;token builtin class-name&#34;&gt;local&lt;/span&gt;   all         all                               trust
&lt;span class=&#34;token function&#34;&gt;host&lt;/span&gt;    all         all                               &lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1/32 trust
&lt;span class=&#34;token function&#34;&gt;host&lt;/span&gt;    all         all                               ::1/128 trust    &lt;span class=&#34;token comment&#34;&gt;#ipv6 可以不配置&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-重启gitlab生效&#34;&gt;&lt;strong&gt;2. 重启 gitlab 生效&lt;/strong&gt;&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;gitlab-ctl restart&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-修改gitlab账号为超级用户&#34;&gt;&lt;strong&gt;3. 修改 gitlab 账号为超级用户&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;进入 postgresql 命令行&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; /opt/gitlab/embedded/bin
&lt;span class=&#34;token function&#34;&gt;su&lt;/span&gt; gitlab-psql
./psql -h &lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1 gitlabhq_production&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看账户权限&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;du&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行修改 gitlab 用户为超级权限&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;ALTER &lt;span class=&#34;token environment constant&#34;&gt;USER&lt;/span&gt; gitlab WITH SUPERUSER&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;退出&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;q&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/08/0220210802135016.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;4-从1462989681编号备份中恢复&#34;&gt;4. 从 1462989681 编号备份中恢复&lt;/h5&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;gitlab-rake gitlab:backup:restore &lt;span class=&#34;token assign-left variable&#34;&gt;BACKUP&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1462989681&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样 Gitlab 恢复数据就不会再报 must be owner of extension plpgsql 错误。&lt;/p&gt;
&lt;h4 id=&#34;4-重启gitlab&#34;&gt;&lt;strong&gt;4. 重启 gitlab&lt;/strong&gt;&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;gitlab-ctl restart&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;本文作者：夜法之书       写作不易，转载请注明来源地址！&lt;/p&gt;
&lt;h2 id=&#34;参考链接：&#34;&gt;参考链接：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;https://www.cnblogs.com/hgzero/p/14088215.html&lt;/li&gt;
&lt;li&gt;http://www.51blogs.net/2017/11/10/1110113243.html&lt;/li&gt;
&lt;li&gt;https://my.oschina.net/u/2400083/blog/808097&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/bilicard.css&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="Gitlab" />
        <category term="Git" />
        <category term="Docker" />
        <category term="教程" />
        <category term="Rigistry" />
        <category term="email" />
        <category term="https" />
        <category term="ssl" />
        <updated>2021-08-02T08:25:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.17lai.site/posts/29a820b3/</id>
        <title>破解 Gitlab EE</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/29a820b3/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;由于需要一些镜像等 gitlab 高级功能，所有破解 gitlab ee 版本。&lt;/p&gt;
&lt;h2 id=&#34;安装ruby&#34;&gt;安装 ruby&lt;/h2&gt;
&lt;p&gt;安装完 gitlab ee 之后&lt;/p&gt;
&lt;p&gt;安装 ruby：yum install ruby&lt;/p&gt;
&lt;p&gt;ruby 版本需要 2.3 或以上。&lt;/p&gt;
&lt;h2 id=&#34;生成许可证&#34;&gt;&lt;strong&gt;生成许可证&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;gem install gitlab-license&lt;/p&gt;
&lt;h2 id=&#34;创建一个rb文件&#34;&gt;创建一个 rb 文件&lt;/h2&gt;
&lt;p&gt;license.rb&lt;/p&gt;
&lt;hr&gt;
&lt;pre class=&#34;line-numbers language-ruby&#34; data-language=&#34;ruby&#34;&gt;&lt;code class=&#34;language-ruby&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;openssl&#34;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;gitlab/license&#34;&lt;/span&gt;&lt;/span&gt;
 
key_pair &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; OpenSSL&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;PKey&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;RSA&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;generate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2048&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token builtin&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;open&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;license_key&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;w&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;f&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;write&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key_pair&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;to_pem&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
 
public_key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; key_pair&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;public_key
&lt;span class=&#34;token builtin&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;open&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;license_key.pub&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;w&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;f&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;write&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;public_key&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;to_pem&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
 
private_key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; OpenSSL&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;PKey&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RSA&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;license_key&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
Gitlab&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;License&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encryption_key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; private_key
 
license &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Gitlab&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;License&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt;
license&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;licensee &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Name&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;none&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Company&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;none&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Email&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;example@test.com&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
license&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;starts_at &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2020&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 开始时间&lt;/span&gt;
license&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;expires_at &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2050&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 结束时间&lt;/span&gt;
license&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;notify_admins_at &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2049&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
license&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;notify_users_at &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2049&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
license&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;block_changes_at &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2050&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
license&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;restrictions &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;token symbol&#34;&gt;active_user_count&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
 
puts &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;License:&#34;&lt;/span&gt;&lt;/span&gt;
puts license
 
data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; license&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;export
puts &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Exported license:&#34;&lt;/span&gt;&lt;/span&gt;
puts data
&lt;span class=&#34;token builtin&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;open&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;GitLabBV.gitlab-license&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;w&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;f&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;write&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
 
public_key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; OpenSSL&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;PKey&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RSA&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;license_key.pub&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
Gitlab&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;License&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encryption_key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; public_key
 
data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;GitLabBV.gitlab-license&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$license&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Gitlab&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;License&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;import&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
 
puts &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Imported license:&#34;&lt;/span&gt;&lt;/span&gt;
puts &lt;span class=&#34;token variable&#34;&gt;$license&lt;/span&gt;
 
&lt;span class=&#34;token keyword&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$license&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;The license is invalid.&#34;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;end&lt;/span&gt;
 
&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$license&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;restricted&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token symbol&#34;&gt;:active_user_count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
  active_user_count &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10000&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; active_user_count &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$license&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;restrictions&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token symbol&#34;&gt;:active_user_count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;The active user count exceeds the allowed amount!&#34;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;end&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;end&lt;/span&gt;
 
&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$license&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;notify_admins&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;
  puts &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;The license is due to expire on &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;token content&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$license&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;expires_at&lt;/span&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;.&#34;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;end&lt;/span&gt;
 
&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$license&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;notify_users&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;
  puts &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;The license is due to expire on &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;token content&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$license&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;expires_at&lt;/span&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;.&#34;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;end&lt;/span&gt;
 
&lt;span class=&#34;token keyword&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Gitlab&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GitAccess&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token method-definition&#34;&gt;&lt;span class=&#34;token function&#34;&gt;check&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cmd&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; changes &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$license&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;block_changes&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; build_status_object&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;License expired&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;token keyword&#34;&gt;end&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;end&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;end&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;end&lt;/span&gt;
 
puts &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;This instance of GitLab Enterprise Edition is licensed to:&#34;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$license&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;licensee&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; value&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;
  puts &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;token content&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;token content&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;end&lt;/span&gt;
 
&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$license&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;expired&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;
  puts &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;The license expired on &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;token content&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$license&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;expires_at&lt;/span&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;elsif&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$license&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;will_expire&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;
  puts &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;The license will expire on &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;token content&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$license&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;expires_at&lt;/span&gt;&lt;span class=&#34;token delimiter punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;
  puts &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;The license will never expire.&#34;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;end&lt;/span&gt;
 &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;ruby license.rb&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成 &lt;code&gt;GitLabBV.gitlab-license&lt;/code&gt; &lt;code&gt;license_key&lt;/code&gt; &lt;code&gt;license_key.pub&lt;/code&gt; 这三个文件。&lt;/p&gt;
&lt;h2 id=&#34;使用许可证&#34;&gt;&lt;strong&gt;使用许可证&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;用 &lt;code&gt;license_key.pub&lt;/code&gt; 文件替换 &lt;code&gt;/opt/gitlab/embedded/service/gitlab-rails/.license_encryption_key.pub&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GitLabBV.gitlab-license&lt;/code&gt; 即是许可证，填入 &lt;code&gt;${address}/admin/license&lt;/code&gt; 地址并重启 &lt;code&gt;gitlab-ctl restart&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;修改等级&#34;&gt;&lt;strong&gt;修改等级&lt;/strong&gt;&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-ruby&#34; data-language=&#34;ruby&#34;&gt;&lt;code class=&#34;language-ruby&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;opt&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;gitlab&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;embedded&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;service&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;gitlab&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;rails&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;ee&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;app&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;models&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;license&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rb
&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;opt&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;gitlab&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;embedded&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;service&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;gitlab&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;rails&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;ee&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;app&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;models&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;license&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rb
@@ &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;458&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;458&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt; @@
  &lt;span class=&#34;token keyword&#34;&gt;end&lt;/span&gt;
 
  &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token method-definition&#34;&gt;&lt;span class=&#34;token function&#34;&gt;plan&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;    restricted_attr&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token symbol&#34;&gt;:plan&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;presence &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;STARTER_PLAN&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;    restricted_attr&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token symbol&#34;&gt;:plan&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;presence &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;ULTIMATE_PLAN&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;end&lt;/span&gt;
 
  &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token method-definition&#34;&gt;&lt;span class=&#34;token function&#34;&gt;edition&lt;/span&gt;&lt;/span&gt;
 &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改完成后使用 &lt;code&gt;gitlab-ctl restart&lt;/code&gt; 重新加载配置。&lt;/p&gt;
&lt;h2 id=&#34;Gitlab-使用系列-2&#34;&gt;Gitlab 使用系列&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/acc13b70/&#34;&gt;&lt;strong&gt;Gitlab 的安装及使用教程完全版&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/29a820b3/&#34;&gt;破解 Gitlab EE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/d08eb7b/&#34;&gt;Gitlab 的安装及使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/1879721e/&#34;&gt;CI/CD 与 Git Flow 与 GitLab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;参考-3&#34;&gt;&lt;strong&gt;参考&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.rubydoc.info/gems/gitlab-license/1.0.0/file/README.md&#34;&gt;https://www.rubydoc.info/gems/gitlab-license/1.0.0/file/README.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系列教程-2&#34;&gt;&lt;strong&gt;系列教程&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Gitlab 使用系列&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/acc13b70/&#34;&gt;&lt;strong&gt;Gitlab 的安装及使用教程完全版&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/29a820b3/&#34;&gt;破解 Gitlab EE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/d08eb7b/&#34;&gt;Gitlab 的安装及使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/1879721e/&#34;&gt;CI/CD 与 Git Flow 与 GitLab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/bilicard.css&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="Gitlab" />
        <category term="Git" />
        <category term="Crack" />
        <updated>2021-05-03T07:25:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.17lai.site/posts/d08eb7b/</id>
        <title>Gitlab 的安装及使用</title>
        <link rel="alternate" href="https://blog.17lai.site/posts/d08eb7b/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;Gitlab概述&#34;&gt;Gitlab 概述&lt;/h2&gt;
&lt;h3 id=&#34;1-1-GitLab介绍-2&#34;&gt;1.1 GitLab 介绍&lt;/h3&gt;
&lt;p&gt;GitLab 是利用 Ruby on Rails 一个开源的版本管理系统，实现一个自托管的 Git 项目仓库，可通过 Web 界面进行访问公开的或者私人项目。&lt;/p&gt;
&lt;p&gt;GitLab 能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序 (Wall) 进行交流。&lt;/p&gt;
&lt;p&gt;它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找&lt;/p&gt;
&lt;h3 id=&#34;1-2-Gitlab服务构成-2&#34;&gt;1.2 Gitlab 服务构成&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Nginx：静态 web 服务器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gitlab-shell：用于处理 Git 命令和修改 authorized keys 列表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gitlab-workhorse: 轻量级的反向代理服务器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;logrotate：日志文件管理工具。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;postgresql：数据库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;redis：缓存数据库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sidekiq：用于在后台执行队列任务（异步执行）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unicorn：An HTTP server for Rack applications，GitLab Rails 应用是托管在这个服务器上面的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-3-Gitlab工作流程-2&#34;&gt;1.3 Gitlab 工作流程&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/05/2820210528222044.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-4-GitLab-Shell-2&#34;&gt;1.4 GitLab Shell&lt;/h3&gt;
&lt;p&gt;GitLab Shell 有两个作用：为 GitLab 处理 Git 命令、修改 authorized keys 列表&lt;/p&gt;
&lt;p&gt;当通过 SSH 访问 GitLab Server 时，GitLab Shell 会：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;限制执行预定义好的 Git 命令（git push，git pull，git annex）&lt;/li&gt;
&lt;li&gt;调用 GitLab Rails API 检查权限&lt;/li&gt;
&lt;li&gt;执行 pre-receive 钩子（在企业版中叫做 Git 钩子）&lt;/li&gt;
&lt;li&gt;执行用户请求的动作，处理 GitLab 的 post-receive 动作&lt;/li&gt;
&lt;li&gt;处理自定义的 post-receive 动作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当通过 http (s) 访问 GitLab Server 时，工作流程取决于你是从 Git 仓库拉取 (pull) 代码还是向 git 仓库推送 (push) 代码：&lt;/p&gt;
&lt;p&gt;如果是从 Git 仓库拉取 (pull) 代码，GitLab Rails 应用会全权负责处理用户鉴权和执行 Git 命令的工作&lt;/p&gt;
&lt;p&gt;如果是向 Git 仓库推送 (push) 代码，GitLab Rails 应用既不会进行用户鉴权也不会执行 Git 命令，它会把以下工作交由 GitLab Shell 进行处理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用 GitLab Rails API 检查权限&lt;/li&gt;
&lt;li&gt;执行 pre-receive 钩子（在 GitLab 企业版中叫做 Git 钩子）&lt;/li&gt;
&lt;li&gt;执行你请求的动作&lt;/li&gt;
&lt;li&gt;处理 GitLab 的 post-receive 动作&lt;/li&gt;
&lt;li&gt;处理自定义的 post-receive 动作&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-5-GitLab-Workhorse-2&#34;&gt;1.5 GitLab Workhorse&lt;/h3&gt;
&lt;p&gt;GitLab Workhorse 是一个敏捷的反向代理。它会处理一些大的 HTTP 请求，比如文件上传、文件下载、Git push/pull 和 Git 包下载。其它请求会反向代理到 GitLab Rails 应用，即反向代理给后端的 unicorn。&lt;/p&gt;
&lt;h2 id=&#34;Gitlab的安装部署&#34;&gt;Gitlab 的安装部署&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Gitlab 要求服务器内存 2G 以上&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-1-方式一-下载gitlab-ce的rpm包-2&#34;&gt;2.1 方式一：下载 gitlab-ce 的 rpm 包&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://packages.gitlab.com/gitlab/gitlab-ce&#34;&gt;gitlab 官方 rpm 包下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/&#34;&gt;清华的源&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将对应版本的 gitlab-ce 下载到本地后，直接 yum 安装即可&lt;/p&gt;
&lt;h4 id=&#34;要先将这个rpm包下载到本地&#34;&gt;要先将这个 rpm 包下载到本地&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;yum &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; -y gitlab-ce-13.6.1-ce.0.el7.x86_64.rpm&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-2-方式二-配置yum源-2&#34;&gt;2.2 方式二：配置 yum 源&lt;/h3&gt;
&lt;p&gt;在 /etc/yum.repos.d/ 下新建 gitlab-ce.repo，写入如下内容：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-ruby&#34; data-language=&#34;ruby&#34;&gt;&lt;code class=&#34;language-ruby&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;gitlab&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ce&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;gitlab&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ce
baseurl&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;https&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;mirrors&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;tuna&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;tsinghua&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;edu&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cn&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;gitlab&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ce&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;yum&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;el7&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; Repo_gpgcheck&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;
Enabled&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; Gpgkey&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;https&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;packages&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;gitlab&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;com&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;gpg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;key&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后创建 cache，再直接安装 gitlab-ce&lt;/p&gt;
&lt;p&gt;yum makecache  # 这一步会创建大量的数据&lt;/p&gt;
&lt;h4 id=&#34;直接安装最新版&#34;&gt;直接安装最新版&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;yum &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; -y gitlab-ce &lt;span class=&#34;token comment&#34;&gt;# 如果要安装指定的版本，在后面填上版本号即可&lt;/span&gt;
yum &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; -y  gitlab-ce-13.6.1&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;如果安装时出现gpgkey验证错误，只需在安装时明确指明不进行gpgkey验证&#34;&gt;如果安装时出现 gpgkey 验证错误，只需在安装时明确指明不进行 gpgkey 验证&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;yum &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; gitlab-ce -y --nogpgcheck&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-3-gitlab的配置-2&#34;&gt;2.3 gitlab 的配置&lt;/h3&gt;
&lt;p&gt;配置文件位置  /etc/gitlab/gitlab.rb&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@centos7 test&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# vim /etc/gitlab/gitlab.rb&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@centos7 test&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# grep &#34;^[a-Z]&#34; /etc/gitlab/gitlab.rb&lt;/span&gt;
external_url &lt;span class=&#34;token string&#34;&gt;&#39;http://10.0.0.51&#39;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 这里一定要加上http://&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;配置邮件服务&#34;&gt;配置邮件服务&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-ruby&#34; data-language=&#34;ruby&#34;&gt;&lt;code class=&#34;language-ruby&#34;&gt;gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_enable&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_address&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;smtp.qq.com&#34;&lt;/span&gt;&lt;/span&gt; gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_port&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt; gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_user_name&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;hgzerowzh@qq.com&#34;&lt;/span&gt;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 自己的qq邮箱账号&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_password&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;xxx&#34;&lt;/span&gt;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 开通smtp时返回的授权码&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_domain&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;qq.com&#34;&lt;/span&gt;&lt;/span&gt; gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_authentication&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;login&#34;&lt;/span&gt;&lt;/span&gt; gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_enable_starttls_auto&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_tls&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;gitlab_email_from&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;hgzerowzh@qq.com&#34;&lt;/span&gt;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 指定发送邮件的邮箱地址&lt;/span&gt;
user&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;git_user_email&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;shit@qq.com&#34;&lt;/span&gt;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;# 指定接收邮件的邮箱地址&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;修改好配置文件后，要使用 gitlab-ctl reconfigure 命令重载一下配置文件，否则不生效。&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;gitlab-ctl reconfigure # 重载配置文件&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-4-Gitlab常用命令-2&#34;&gt;2.4 Gitlab 常用命令&lt;/h3&gt;
&lt;pre class=&#34;line-numbers language-ruby&#34; data-language=&#34;ruby&#34;&gt;&lt;code class=&#34;language-ruby&#34;&gt;gitlab&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ctl start         &lt;span class=&#34;token comment&#34;&gt;# 启动所有 gitlab 组件&lt;/span&gt;
gitlab&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ctl stop          &lt;span class=&#34;token comment&#34;&gt;# 停止所有 gitlab 组件&lt;/span&gt;
gitlab&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ctl restart       &lt;span class=&#34;token comment&#34;&gt;# 重启所有 gitlab 组件&lt;/span&gt;
gitlab&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ctl status        &lt;span class=&#34;token comment&#34;&gt;# 查看服务状态&lt;/span&gt;
gitlab&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ctl reconfigure   &lt;span class=&#34;token comment&#34;&gt;# 启动服务&lt;/span&gt;
gitlab&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ctl show&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;config   &lt;span class=&#34;token comment&#34;&gt;# 验证配置文件&lt;/span&gt;
gitlab&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ctl tail          &lt;span class=&#34;token comment&#34;&gt;# 查看日志&lt;/span&gt;
gitlab&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;rake gitlab&lt;span class=&#34;token symbol&#34;&gt;:check&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;SANITIZE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;trace    &lt;span class=&#34;token comment&#34;&gt;# 检查gitlab&lt;/span&gt;
vim &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;etc&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;gitlab&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;gitlab&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rb &lt;span class=&#34;token comment&#34;&gt;# 修改默认的配置文件&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Gitlab的使用&#34;&gt;Gitlab 的使用&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Gitlab 安装好后，设置密码，管理账户为 root&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-1-创建Group-2&#34;&gt;&lt;strong&gt;3.1 创建 Group&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;填上组名即可，这里组名为 java&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/05/2820210528222105.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211347.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-2-创建User-2&#34;&gt;&lt;strong&gt;3.2 创建 User&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;创建四个 User：pm、dev1、dev2、dev3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/05/2820210528222131.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/05/2820210528222120.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-3-添加User到Group中并授权-2&#34;&gt;&lt;strong&gt;3.3 添加 User 到 Group 中并授权&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/05/2820210528222140.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-4-创建Project并配置SSH-2&#34;&gt;&lt;strong&gt;3.4 创建 Project 并配置 SSH&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/05/2820210528222147.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/05/2820210528222154.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/05/2820210528222201.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/05/2820210528222233.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-5-在项目中添加成员-2&#34;&gt;&lt;strong&gt;3.5 在项目中添加成员&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211335.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211726.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-6-将本地文件推送到Gitlab-2&#34;&gt;3.6 将本地文件推送到 Gitlab&lt;/h3&gt;
&lt;h4 id=&#34;将app01项目克隆下来&#34;&gt;将 app01 项目克隆下来&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; clone git@10.0.0.51:java/app01.git &lt;span class=&#34;token comment&#34;&gt;# 初始化配置&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config --global user.name &lt;span class=&#34;token string&#34;&gt;&#34;hgzero&#34;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config --global user.email &lt;span class=&#34;token string&#34;&gt;&#34;hgzero@qq.com&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;在app01目录下新建一些文件&#34;&gt;在 app01 目录下新建一些文件&lt;/h4&gt;
&lt;h4 id=&#34;推送到gitlab&#34;&gt;推送到 gitlab&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; commit -m &lt;span class=&#34;token string&#34;&gt;&#34;first edition&#34;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; push origin master&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211546.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;制定开发计划&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;4-1-创建开发计划-2&#34;&gt;&lt;strong&gt;4.1 创建开发计划&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;项目：app01&lt;/li&gt;
&lt;li&gt; 版本：v1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211325.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-2-创建里程碑Milestones-2&#34;&gt;&lt;strong&gt;4.2 创建里程碑 Milestones&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用 pm 账号登录 gitlab 后操作（先要在 admin 中设置 pm 账号的密码）&lt;/li&gt;
&lt;li&gt;要根据开发计划来创建 Milestones&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211538.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211719.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211315.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211303.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-3-根据开发计划创建issue-2&#34;&gt;4.3 根据开发计划创建 issue&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;创建 4 个 issue，分派给 dev1 和 dev2 这两个开发人员&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211529.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211304.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211711.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211520.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211514.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211252.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-4-开发者登录账号查看分派的任务-2&#34;&gt;**4.4 开发者登录账号查看分派的任务 **&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;然后开发 dev1 登录 gitlab，就能看到任务已经分配过来了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211513.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-5-开发流程-2&#34;&gt;&lt;strong&gt;4.5 开发流程&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;公司里的开发开始任务&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1-先从仓库把项目拉下来&#34;&gt;1. 先从仓库把项目拉下来&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; clone git@10.0.0.51:java/app01.git
&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; app01/&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-先创建一个自己的分支，然后进行开发&#34;&gt;2. 先创建一个自己的分支，然后进行开发&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; checkout -b index   &lt;span class=&#34;token comment&#34;&gt;# 创建一个叫index的分支，并切换到这个分支&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; status &lt;span class=&#34;token comment&#34;&gt;# 3. 开始开发首页&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&amp;lt;h1&amp;gt;welcome to this app&amp;lt;/h1&amp;gt;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; index.html  &lt;span class=&#34;token comment&#34;&gt;# 假设就开发了一个index页面&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-开发完成后，把项目传到仓库&#34;&gt;4. 开发完成后，把项目传到仓库&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; commit -m &lt;span class=&#34;token string&#34;&gt;&#34;index&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;如果写成-git-commit-m-close-2-，则表示merge请求允许且merge成功之后，自动删除编号为-2的issue&#34;&gt;如果写成 git commit -m &#34;close #2&#34; ，则表示 merge 请求允许且 merge 成功之后，自动删除编号为 #2 的 issue&lt;/h4&gt;
&lt;h4 id=&#34;传到index分支&#34;&gt;传到 index 分支&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; push origin index&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-6-合并分支-2&#34;&gt;&lt;strong&gt;4.6 合并分支&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1）开发 dev1 发送合并分支请求给 pm&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211242.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211503.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211701.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）pm 收到开发的 Merge 请求后进行处理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 pm 登录，就可以看到 pm 已经收到了合并请求 merge request&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211231.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211502.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211647.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211221.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3）开发 dev1 确认任务完成&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;退出 pm 账户，登入 dev1 账户：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211220.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;或者点进去后，在侧边栏进行标识 Done，然后已经完成的 issue，可以将其 Close&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211454.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 这个时候 Milestones 的进度已经往前进了一些了：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211446.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-7-开发其他功能-2&#34;&gt;4.7 开发其他功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;然后其他开发者或者自己再次进行开发时，先要把刚刚更新后的内容（master 主干）拉回来，然后再进行开发 &lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; checkout master  &lt;span class=&#34;token comment&#34;&gt;# 切换到master&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; pull             &lt;span class=&#34;token comment&#34;&gt;# 从远端仓库拉取数据&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后再进行其他操作&lt;/p&gt;
&lt;h2 id=&#34;Gitlab备份恢复&#34;&gt;Gitlab 备份恢复&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;5-1-备份gitlab-2&#34;&gt;5.1 备份 gitlab&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1）修改配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;/etc/gitlab/gitlab.rb&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;备份保存的位置，这里是默认位置，可修改成指定的位置&#34;&gt;备份保存的位置，这里是默认位置，可修改成指定的位置&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-ruby&#34; data-language=&#34;ruby&#34;&gt;&lt;code class=&#34;language-ruby&#34;&gt;gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;backup_path&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/var/opt/gitlab/backups&#34;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;设置备份保存的时间，超过此时间的日志将会被新覆盖&#34;&gt;设置备份保存的时间，超过此时间的日志将会被新覆盖&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-ruby&#34; data-language=&#34;ruby&#34;&gt;&lt;code class=&#34;language-ruby&#34;&gt;gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;backup_keep_time&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;604800&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 这里是默认设置，保存7天&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;特别注意：-如果自定义了备份保存位置，则要修改备份目录的权限，比如：-chown-R-git-git-data-backup-gitlab&#34;&gt;特别注意： # 如果自定义了备份保存位置，则要修改备份目录的权限，比如： # chown -R git.git/data/backup/gitlab&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;配置完成后要重启以使配置生效&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;重读配置文件&#34;&gt;重读配置文件&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-ruby&#34; data-language=&#34;ruby&#34;&gt;&lt;code class=&#34;language-ruby&#34;&gt;gitlab&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ctl reconfigure &lt;span class=&#34;token comment&#34;&gt;# 重启gitlab&lt;/span&gt;
gitlab&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ctl restart&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2）设置定时任务&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;每天凌晨2点定时创建备份-将一下内容写入到定时任务中-crontab-e&#34;&gt;每天凌晨 2 点定时创建备份 # 将一下内容写入到定时任务中 crontab -e&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; * * * /usr/bin/gitlab-rake gitlab:backup:create &lt;span class=&#34;token comment&#34;&gt;# 备份策略建议： # 本地保留3到7天，在异地备份永久保存&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3）备份时间的识别&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;备份后的文件类似这样的形式：1494170842-gitlab-backup-tar，可以根据前面的时间戳确认备份生成的时间&#34;&gt;备份后的文件类似这样的形式：1494170842_gitlab_backup.tar，可以根据前面的时间戳确认备份生成的时间&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;data -d  @1494170842&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5-2-恢复gitlab-2&#34;&gt;5.2 恢复 gitlab&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1）停止数据写入服务&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;停止数据写入服务&#34;&gt;停止数据写入服务&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;gitlab-ctl stop unicorn
gitlab-ctl stop sidekiq&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2）进行数据恢复并重启&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;进行恢复&#34;&gt;进行恢复&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;gitlab-rake gitlab:backup:restore &lt;span class=&#34;token assign-left variable&#34;&gt;BACKUP&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1494170842&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 这个时间戳就是刚刚备份的文件前面的时间戳&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;重启&#34;&gt;重启&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-ruby&#34; data-language=&#34;ruby&#34;&gt;&lt;code class=&#34;language-ruby&#34;&gt;gitlab&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ctl restart&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;gitlab邮件通知配置&#34;&gt;gitlab 邮件通知配置&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;vim  /etc/gitlab/gitlab.rb&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-ruby&#34; data-language=&#34;ruby&#34;&gt;&lt;code class=&#34;language-ruby&#34;&gt;gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;time_zone&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Asia/Shanghai&#39;&lt;/span&gt;&lt;/span&gt; gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;gitlab_email_enabled&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;gitlab_email_from&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;example@163.com&#39;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 填写发件人的邮箱地址&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;gitlab_email_display_name&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;gitlab&#39;&lt;/span&gt;&lt;/span&gt; gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_enable&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_address&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;smtp.163.com&#34;&lt;/span&gt;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# smtp服务器的地址,如网易的地址&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_port&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;                 &lt;span class=&#34;token comment&#34;&gt;# 要注意如果使用了SSL/TLS的话,端口可能不是25&lt;/span&gt;
gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_user_name&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;smtp用户名&#34;&lt;/span&gt;&lt;/span&gt; gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_password&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;smtp用户密码&#34;&lt;/span&gt;&lt;/span&gt; gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_domain&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;163.com&#34;&lt;/span&gt;&lt;/span&gt; gitlab_rails&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;smtp_authentication&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;login&#34;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;
&lt;h2 id=&#34;使用SourceTree进行项目开发&#34;&gt;使用 SourceTree 进行项目开发&lt;/h2&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;7-1-项目拉取-2&#34;&gt;7.1 项目拉取&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;先把项目克隆下来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211633.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211438.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 ssh 的方式克隆失败，可能是因为 SSH Key 没找到，可以在这里添加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211211.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211201.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;7-2-创建分支进行功能开发-2&#34;&gt;7.2 创建分支进行功能开发&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1）新建立一个叫 “pay” 的分支&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211618.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211430.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）进行功能开发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211152.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;7-3-提交项目-2&#34;&gt;7.3 提交项目&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1）开发 pay 功能完成后进行提交&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以看到 SourceTree 中已经有 “未提交的更改”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211422.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211144.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）添加 “用户信息”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211143.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;** 3）进行提交 **&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211415.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注释也可以写成  close #3    ，作用是提交完成后关闭 3 号 issue&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7-4-推送到仓库-2&#34;&gt;&lt;strong&gt;7.4 推送到仓库&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211136.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211407.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;然后就可以在 gitlab 上进行发送 merge 请求了，后面就可以进行其他操作了&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7-5-项目上线-2&#34;&gt;7.5 项目上线&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1）当所有工作完成之后，就可以进行上线了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211135.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）打标签&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上线先打个标签&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211127.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/09/1320210913211124.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/appotry/cloudimg@latest/data/2021/05/2820210528225256.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;** 3）删除无用分支 **&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;然后删除已经合并到主干中的不必要的分支，如 index、pay 等&lt;/li&gt;
&lt;li&gt;最后一定要注意时间一定要同步，不然会错乱&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考-2&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.cnblogs.com/hgzero/p/14088215.html&#34;&gt;Praywu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Gitlab-使用系列&#34;&gt;Gitlab 使用系列&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/acc13b70/&#34;&gt;&lt;strong&gt;Gitlab 的安装及使用教程完全版&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/29a820b3/&#34;&gt;破解 Gitlab EE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/d08eb7b/&#34;&gt;Gitlab 的安装及使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/1879721e/&#34;&gt;CI/CD 与 Git Flow 与 GitLab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;系列教程&#34;&gt;&lt;strong&gt;系列教程&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Gitlab 使用系列&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/acc13b70/&#34;&gt;&lt;strong&gt;Gitlab 的安装及使用教程完全版&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/29a820b3/&#34;&gt;破解 Gitlab EE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/d08eb7b/&#34;&gt;Gitlab 的安装及使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.17lai.site/posts/1879721e/&#34;&gt;CI/CD 与 Git Flow 与 GitLab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/bilicard.css&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="Gitlab" />
        <category term="Git" />
        <category term="Crack" />
        <updated>2021-03-03T08:25:00.000Z</updated>
    </entry>
</feed>
